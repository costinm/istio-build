// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collector.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "collector.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lightstep {
namespace collector {
class SpanContextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpanContext> {
} _SpanContext_default_instance_;
class KeyValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeyValue> {
  public:
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  ::google::protobuf::int64 int_value_;
  double double_value_;
  bool bool_value_;
  ::google::protobuf::internal::ArenaStringPtr json_value_;
} _KeyValue_default_instance_;
class LogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Log> {
} _Log_default_instance_;
class ReferenceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Reference> {
} _Reference_default_instance_;
class SpanDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Span> {
} _Span_default_instance_;
class ReporterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Reporter> {
} _Reporter_default_instance_;
class MetricsSampleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MetricsSample> {
  public:
  ::google::protobuf::int64 int_value_;
  double double_value_;
} _MetricsSample_default_instance_;
class InternalMetricsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InternalMetrics> {
} _InternalMetrics_default_instance_;
class AuthDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Auth> {
} _Auth_default_instance_;
class ReportRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReportRequest> {
} _ReportRequest_default_instance_;
class CommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Command> {
} _Command_default_instance_;
class ReportResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReportResponse> {
} _ReportResponse_default_instance_;

namespace protobuf_collector_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanContext, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanContext, span_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanContext, baggage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_KeyValue_default_instance_), string_value_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_KeyValue_default_instance_), int_value_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_KeyValue_default_instance_), double_value_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_KeyValue_default_instance_), bool_value_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_KeyValue_default_instance_), json_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, keyvalues_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, relationship_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, span_context_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, span_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, operation_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, references_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, duration_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, logs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reporter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reporter, reporter_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reporter, tags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsSample, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsSample, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsSample, name_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MetricsSample_default_instance_), int_value_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MetricsSample_default_instance_), double_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsSample, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMetrics, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMetrics, duration_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMetrics, logs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMetrics, counts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMetrics, gauges_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, access_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRequest, reporter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRequest, auth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRequest, spans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRequest, timestamp_offset_micros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRequest, internal_metrics_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, disable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResponse, commands_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResponse, receive_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResponse, transmit_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportResponse, errors_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SpanContext)},
  { 7, -1, sizeof(KeyValue)},
  { 18, -1, sizeof(Log)},
  { 24, -1, sizeof(Reference)},
  { 30, -1, sizeof(Span)},
  { 41, -1, sizeof(Reporter)},
  { 47, -1, sizeof(MetricsSample)},
  { 55, -1, sizeof(InternalMetrics)},
  { 64, -1, sizeof(Auth)},
  { 69, -1, sizeof(ReportRequest)},
  { 78, -1, sizeof(Command)},
  { 83, -1, sizeof(ReportResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpanContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Log_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Reference_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Span_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Reporter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MetricsSample_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InternalMetrics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Auth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReportRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReportResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "collector.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
  const ::google::protobuf::Descriptor* SpanContext_BaggageEntry_descriptor = protobuf_collector_2eproto::file_level_metadata[0].descriptor;
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SpanContext_BaggageEntry_descriptor,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                SpanContext_BaggageEntry_descriptor));
}

}  // namespace

void TableStruct::Shutdown() {
  _SpanContext_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _KeyValue_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Log_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Reference_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Span_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Reporter_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _MetricsSample_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _InternalMetrics_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Auth_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ReportRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Command_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ReportResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _SpanContext_default_instance_.DefaultConstruct();
  _KeyValue_default_instance_.DefaultConstruct();
  _Log_default_instance_.DefaultConstruct();
  _Reference_default_instance_.DefaultConstruct();
  _Span_default_instance_.DefaultConstruct();
  _Reporter_default_instance_.DefaultConstruct();
  _MetricsSample_default_instance_.DefaultConstruct();
  _InternalMetrics_default_instance_.DefaultConstruct();
  _Auth_default_instance_.DefaultConstruct();
  _ReportRequest_default_instance_.DefaultConstruct();
  _Command_default_instance_.DefaultConstruct();
  _ReportResponse_default_instance_.DefaultConstruct();
  _KeyValue_default_instance_.string_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _KeyValue_default_instance_.int_value_ = GOOGLE_LONGLONG(0);
  _KeyValue_default_instance_.double_value_ = 0;
  _KeyValue_default_instance_.bool_value_ = false;
  _KeyValue_default_instance_.json_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Log_default_instance_.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Reference_default_instance_.get_mutable()->span_context_ = const_cast< ::lightstep::collector::SpanContext*>(
      ::lightstep::collector::SpanContext::internal_default_instance());
  _Span_default_instance_.get_mutable()->span_context_ = const_cast< ::lightstep::collector::SpanContext*>(
      ::lightstep::collector::SpanContext::internal_default_instance());
  _Span_default_instance_.get_mutable()->start_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _MetricsSample_default_instance_.int_value_ = GOOGLE_LONGLONG(0);
  _MetricsSample_default_instance_.double_value_ = 0;
  _InternalMetrics_default_instance_.get_mutable()->start_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _ReportRequest_default_instance_.get_mutable()->reporter_ = const_cast< ::lightstep::collector::Reporter*>(
      ::lightstep::collector::Reporter::internal_default_instance());
  _ReportRequest_default_instance_.get_mutable()->auth_ = const_cast< ::lightstep::collector::Auth*>(
      ::lightstep::collector::Auth::internal_default_instance());
  _ReportRequest_default_instance_.get_mutable()->internal_metrics_ = const_cast< ::lightstep::collector::InternalMetrics*>(
      ::lightstep::collector::InternalMetrics::internal_default_instance());
  _ReportResponse_default_instance_.get_mutable()->receive_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _ReportResponse_default_instance_.get_mutable()->transmit_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017collector.proto\022\023lightstep.collector\032\037"
      "google/protobuf/timestamp.proto\"\240\001\n\013Span"
      "Context\022\020\n\010trace_id\030\001 \001(\004\022\017\n\007span_id\030\002 \001"
      "(\004\022>\n\007baggage\030\003 \003(\0132-.lightstep.collecto"
      "r.SpanContext.BaggageEntry\032.\n\014BaggageEnt"
      "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\221\001\n\010K"
      "eyValue\022\013\n\003key\030\001 \001(\t\022\026\n\014string_value\030\002 \001"
      "(\tH\000\022\023\n\tint_value\030\003 \001(\003H\000\022\026\n\014double_valu"
      "e\030\004 \001(\001H\000\022\024\n\nbool_value\030\005 \001(\010H\000\022\024\n\njson_"
      "value\030\006 \001(\tH\000B\007\n\005value\"f\n\003Log\022-\n\ttimesta"
      "mp\030\001 \001(\0132\032.google.protobuf.Timestamp\0220\n\t"
      "keyvalues\030\002 \003(\0132\035.lightstep.collector.Ke"
      "yValue\"\266\001\n\tReference\022A\n\014relationship\030\001 \001"
      "(\0162+.lightstep.collector.Reference.Relat"
      "ionship\0226\n\014span_context\030\002 \001(\0132 .lightste"
      "p.collector.SpanContext\".\n\014Relationship\022"
      "\014\n\010CHILD_OF\020\000\022\020\n\014FOLLOWS_FROM\020\001\"\255\002\n\004Span"
      "\0226\n\014span_context\030\001 \001(\0132 .lightstep.colle"
      "ctor.SpanContext\022\026\n\016operation_name\030\002 \001(\t"
      "\0222\n\nreferences\030\003 \003(\0132\036.lightstep.collect"
      "or.Reference\0223\n\017start_timestamp\030\004 \001(\0132\032."
      "google.protobuf.Timestamp\022\027\n\017duration_mi"
      "cros\030\005 \001(\004\022+\n\004tags\030\006 \003(\0132\035.lightstep.col"
      "lector.KeyValue\022&\n\004logs\030\007 \003(\0132\030.lightste"
      "p.collector.Log\"L\n\010Reporter\022\023\n\013reporter_"
      "id\030\001 \001(\004\022+\n\004tags\030\004 \003(\0132\035.lightstep.colle"
      "ctor.KeyValue\"S\n\rMetricsSample\022\014\n\004name\030\001"
      " \001(\t\022\023\n\tint_value\030\002 \001(\003H\000\022\026\n\014double_valu"
      "e\030\003 \001(\001H\000B\007\n\005value\"\357\001\n\017InternalMetrics\0223"
      "\n\017start_timestamp\030\001 \001(\0132\032.google.protobu"
      "f.Timestamp\022\027\n\017duration_micros\030\002 \001(\004\022&\n\004"
      "logs\030\003 \003(\0132\030.lightstep.collector.Log\0222\n\006"
      "counts\030\004 \003(\0132\".lightstep.collector.Metri"
      "csSample\0222\n\006gauges\030\005 \003(\0132\".lightstep.col"
      "lector.MetricsSample\"\034\n\004Auth\022\024\n\014access_t"
      "oken\030\001 \001(\t\"\364\001\n\rReportRequest\022/\n\010reporter"
      "\030\001 \001(\0132\035.lightstep.collector.Reporter\022\'\n"
      "\004auth\030\002 \001(\0132\031.lightstep.collector.Auth\022("
      "\n\005spans\030\003 \003(\0132\031.lightstep.collector.Span"
      "\022\037\n\027timestamp_offset_micros\030\005 \001(\r\022>\n\020int"
      "ernal_metrics\030\006 \001(\0132$.lightstep.collecto"
      "r.InternalMetrics\"\032\n\007Command\022\017\n\007disable\030"
      "\001 \001(\010\"\277\001\n\016ReportResponse\022.\n\010commands\030\001 \003"
      "(\0132\034.lightstep.collector.Command\0225\n\021rece"
      "ive_timestamp\030\002 \001(\0132\032.google.protobuf.Ti"
      "mestamp\0226\n\022transmit_timestamp\030\003 \001(\0132\032.go"
      "ogle.protobuf.Timestamp\022\016\n\006errors\030\004 \003(\t2"
      "e\n\020CollectorService\022Q\n\006Report\022\".lightste"
      "p.collector.ReportRequest\032#.lightstep.co"
      "llector.ReportResponseB1\n\031com.lightstep."
      "tracer.grpcP\001Z\013collectorpb\242\002\004LSPBb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2041);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "collector.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_collector_2eproto

const ::google::protobuf::EnumDescriptor* Reference_Relationship_descriptor() {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_enum_descriptors[0];
}
bool Reference_Relationship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reference_Relationship Reference::CHILD_OF;
const Reference_Relationship Reference::FOLLOWS_FROM;
const Reference_Relationship Reference::Relationship_MIN;
const Reference_Relationship Reference::Relationship_MAX;
const int Reference::Relationship_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpanContext::kTraceIdFieldNumber;
const int SpanContext::kSpanIdFieldNumber;
const int SpanContext::kBaggageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpanContext::SpanContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_collector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightstep.collector.SpanContext)
}
SpanContext::SpanContext(const SpanContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  const ::google::protobuf::Descriptor*& SpanContext_BaggageEntry_descriptor = protobuf_collector_2eproto::file_level_metadata[0].descriptor;
  baggage_.SetAssignDescriptorCallback(
      protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce);
  baggage_.SetEntryDescriptor(
      &SpanContext_BaggageEntry_descriptor);
  baggage_.MergeFrom(from.baggage_);
  ::memcpy(&trace_id_, &from.trace_id_,
    reinterpret_cast<char*>(&span_id_) -
    reinterpret_cast<char*>(&trace_id_) + sizeof(span_id_));
  // @@protoc_insertion_point(copy_constructor:lightstep.collector.SpanContext)
}

void SpanContext::SharedCtor() {
  const ::google::protobuf::Descriptor*& SpanContext_BaggageEntry_descriptor = protobuf_collector_2eproto::file_level_metadata[0].descriptor;
  baggage_.SetAssignDescriptorCallback(
      protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce);
  baggage_.SetEntryDescriptor(
      &SpanContext_BaggageEntry_descriptor);
  ::memset(&trace_id_, 0, reinterpret_cast<char*>(&span_id_) -
    reinterpret_cast<char*>(&trace_id_) + sizeof(span_id_));
  _cached_size_ = 0;
}

SpanContext::~SpanContext() {
  // @@protoc_insertion_point(destructor:lightstep.collector.SpanContext)
  SharedDtor();
}

void SpanContext::SharedDtor() {
}

void SpanContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpanContext::descriptor() {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[1].descriptor;
}

const SpanContext& SpanContext::default_instance() {
  protobuf_collector_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpanContext* SpanContext::New(::google::protobuf::Arena* arena) const {
  SpanContext* n = new SpanContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpanContext::Clear() {
// @@protoc_insertion_point(message_clear_start:lightstep.collector.SpanContext)
  baggage_.Clear();
  ::memset(&trace_id_, 0, reinterpret_cast<char*>(&span_id_) -
    reinterpret_cast<char*>(&trace_id_) + sizeof(span_id_));
}

bool SpanContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightstep.collector.SpanContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 trace_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 span_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &span_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> baggage = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          SpanContext_BaggageEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&baggage_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightstep.collector.SpanContext.BaggageEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightstep.collector.SpanContext.BaggageEntry.value"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightstep.collector.SpanContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightstep.collector.SpanContext)
  return false;
#undef DO_
}

void SpanContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightstep.collector.SpanContext)
  // uint64 trace_id = 1;
  if (this->trace_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trace_id(), output);
  }

  // uint64 span_id = 2;
  if (this->span_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->span_id(), output);
  }

  // map<string, string> baggage = 3;
  if (!this->baggage().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "lightstep.collector.SpanContext.BaggageEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "lightstep.collector.SpanContext.BaggageEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->baggage().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->baggage().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->baggage().begin();
          it != this->baggage().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SpanContext_BaggageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(baggage_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SpanContext_BaggageEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->baggage().begin();
          it != this->baggage().end(); ++it) {
        entry.reset(baggage_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:lightstep.collector.SpanContext)
}

::google::protobuf::uint8* SpanContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lightstep.collector.SpanContext)
  // uint64 trace_id = 1;
  if (this->trace_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trace_id(), target);
  }

  // uint64 span_id = 2;
  if (this->span_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->span_id(), target);
  }

  // map<string, string> baggage = 3;
  if (!this->baggage().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "lightstep.collector.SpanContext.BaggageEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "lightstep.collector.SpanContext.BaggageEntry.value");
      }
    };

    if (deterministic &&
        this->baggage().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->baggage().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->baggage().begin();
          it != this->baggage().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SpanContext_BaggageEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(baggage_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SpanContext_BaggageEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->baggage().begin();
          it != this->baggage().end(); ++it) {
        entry.reset(baggage_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:lightstep.collector.SpanContext)
  return target;
}

size_t SpanContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightstep.collector.SpanContext)
  size_t total_size = 0;

  // map<string, string> baggage = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->baggage_size());
  {
    ::google::protobuf::scoped_ptr<SpanContext_BaggageEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->baggage().begin();
        it != this->baggage().end(); ++it) {
      entry.reset(baggage_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint64 trace_id = 1;
  if (this->trace_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_id());
  }

  // uint64 span_id = 2;
  if (this->span_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->span_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpanContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightstep.collector.SpanContext)
  GOOGLE_DCHECK_NE(&from, this);
  const SpanContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpanContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightstep.collector.SpanContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightstep.collector.SpanContext)
    MergeFrom(*source);
  }
}

void SpanContext::MergeFrom(const SpanContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightstep.collector.SpanContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  baggage_.MergeFrom(from.baggage_);
  if (from.trace_id() != 0) {
    set_trace_id(from.trace_id());
  }
  if (from.span_id() != 0) {
    set_span_id(from.span_id());
  }
}

void SpanContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightstep.collector.SpanContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanContext::CopyFrom(const SpanContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightstep.collector.SpanContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanContext::IsInitialized() const {
  return true;
}

void SpanContext::Swap(SpanContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpanContext::InternalSwap(SpanContext* other) {
  baggage_.Swap(&other->baggage_);
  std::swap(trace_id_, other->trace_id_);
  std::swap(span_id_, other->span_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpanContext::GetMetadata() const {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpanContext

// uint64 trace_id = 1;
void SpanContext::clear_trace_id() {
  trace_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SpanContext::trace_id() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.SpanContext.trace_id)
  return trace_id_;
}
void SpanContext::set_trace_id(::google::protobuf::uint64 value) {
  
  trace_id_ = value;
  // @@protoc_insertion_point(field_set:lightstep.collector.SpanContext.trace_id)
}

// uint64 span_id = 2;
void SpanContext::clear_span_id() {
  span_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SpanContext::span_id() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.SpanContext.span_id)
  return span_id_;
}
void SpanContext::set_span_id(::google::protobuf::uint64 value) {
  
  span_id_ = value;
  // @@protoc_insertion_point(field_set:lightstep.collector.SpanContext.span_id)
}

// map<string, string> baggage = 3;
int SpanContext::baggage_size() const {
  return baggage_.size();
}
void SpanContext::clear_baggage() {
  baggage_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
SpanContext::baggage() const {
  // @@protoc_insertion_point(field_map:lightstep.collector.SpanContext.baggage)
  return baggage_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
SpanContext::mutable_baggage() {
  // @@protoc_insertion_point(field_mutable_map:lightstep.collector.SpanContext.baggage)
  return baggage_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kStringValueFieldNumber;
const int KeyValue::kIntValueFieldNumber;
const int KeyValue::kDoubleValueFieldNumber;
const int KeyValue::kBoolValueFieldNumber;
const int KeyValue::kJsonValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_collector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightstep.collector.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kJsonValue: {
      set_json_value(from.json_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lightstep.collector.KeyValue)
}

void KeyValue::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
  _cached_size_ = 0;
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:lightstep.collector.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[2].descriptor;
}

const KeyValue& KeyValue::default_instance() {
  protobuf_collector_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyValue* KeyValue::New(::google::protobuf::Arena* arena) const {
  KeyValue* n = new KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:lightstep.collector.KeyValue)
  switch (value_case()) {
    case kStringValue: {
      value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kJsonValue: {
      value_.json_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:lightstep.collector.KeyValue)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_value();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightstep.collector.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightstep.collector.KeyValue.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string string_value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightstep.collector.KeyValue.string_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 int_value = 3;
      case 3: {
        if (tag == 24u) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double double_value = 4;
      case 4: {
        if (tag == 33u) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bool_value = 5;
      case 5: {
        if (tag == 40u) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json_value = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json_value().data(), this->json_value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightstep.collector.KeyValue.json_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightstep.collector.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightstep.collector.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightstep.collector.KeyValue)
  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.KeyValue.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string string_value = 2;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.KeyValue.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->string_value(), output);
  }

  // int64 int_value = 3;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->int_value(), output);
  }

  // double double_value = 4;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->double_value(), output);
  }

  // bool bool_value = 5;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bool_value(), output);
  }

  // string json_value = 6;
  if (has_json_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json_value().data(), this->json_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.KeyValue.json_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->json_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:lightstep.collector.KeyValue)
}

::google::protobuf::uint8* KeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lightstep.collector.KeyValue)
  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.KeyValue.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string string_value = 2;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.KeyValue.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->string_value(), target);
  }

  // int64 int_value = 3;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->int_value(), target);
  }

  // double double_value = 4;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->double_value(), target);
  }

  // bool bool_value = 5;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bool_value(), target);
  }

  // string json_value = 6;
  if (has_json_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json_value().data(), this->json_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.KeyValue.json_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->json_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lightstep.collector.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightstep.collector.KeyValue)
  size_t total_size = 0;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  switch (value_case()) {
    // string string_value = 2;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // int64 int_value = 3;
    case kIntValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_value());
      break;
    }
    // double double_value = 4;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bool bool_value = 5;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // string json_value = 6;
    case kJsonValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightstep.collector.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightstep.collector.KeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightstep.collector.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightstep.collector.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  switch (from.value_case()) {
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case kJsonValue: {
      set_json_value(from.json_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightstep.collector.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightstep.collector.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValue

// string key = 1;
void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.KeyValue.key)
  return key_.GetNoArena();
}
void KeyValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightstep.collector.KeyValue.key)
}
#if LANG_CXX11
void KeyValue::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightstep.collector.KeyValue.key)
}
#endif
void KeyValue::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightstep.collector.KeyValue.key)
}
void KeyValue::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightstep.collector.KeyValue.key)
}
::std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:lightstep.collector.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:lightstep.collector.KeyValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.KeyValue.key)
}

// string string_value = 2;
bool KeyValue::has_string_value() const {
  return value_case() == kStringValue;
}
void KeyValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
void KeyValue::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
const ::std::string& KeyValue::string_value() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.KeyValue.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void KeyValue::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lightstep.collector.KeyValue.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightstep.collector.KeyValue.string_value)
}
#if LANG_CXX11
void KeyValue::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:lightstep.collector.KeyValue.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightstep.collector.KeyValue.string_value)
}
#endif
void KeyValue::set_string_value(const char* value) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightstep.collector.KeyValue.string_value)
}
void KeyValue::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightstep.collector.KeyValue.string_value)
}
::std::string* KeyValue::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:lightstep.collector.KeyValue.string_value)
  return value_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValue::release_string_value() {
  // @@protoc_insertion_point(field_release:lightstep.collector.KeyValue.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void KeyValue::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.KeyValue.string_value)
}

// int64 int_value = 3;
bool KeyValue::has_int_value() const {
  return value_case() == kIntValue;
}
void KeyValue::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
void KeyValue::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
::google::protobuf::int64 KeyValue::int_value() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.KeyValue.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return GOOGLE_LONGLONG(0);
}
void KeyValue::set_int_value(::google::protobuf::int64 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:lightstep.collector.KeyValue.int_value)
}

// double double_value = 4;
bool KeyValue::has_double_value() const {
  return value_case() == kDoubleValue;
}
void KeyValue::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
void KeyValue::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
double KeyValue::double_value() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.KeyValue.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
void KeyValue::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:lightstep.collector.KeyValue.double_value)
}

// bool bool_value = 5;
bool KeyValue::has_bool_value() const {
  return value_case() == kBoolValue;
}
void KeyValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
void KeyValue::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
bool KeyValue::bool_value() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.KeyValue.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
void KeyValue::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:lightstep.collector.KeyValue.bool_value)
}

// string json_value = 6;
bool KeyValue::has_json_value() const {
  return value_case() == kJsonValue;
}
void KeyValue::set_has_json_value() {
  _oneof_case_[0] = kJsonValue;
}
void KeyValue::clear_json_value() {
  if (has_json_value()) {
    value_.json_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
const ::std::string& KeyValue::json_value() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.KeyValue.json_value)
  if (has_json_value()) {
    return value_.json_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void KeyValue::set_json_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lightstep.collector.KeyValue.json_value)
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightstep.collector.KeyValue.json_value)
}
#if LANG_CXX11
void KeyValue::set_json_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:lightstep.collector.KeyValue.json_value)
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightstep.collector.KeyValue.json_value)
}
#endif
void KeyValue::set_json_value(const char* value) {
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightstep.collector.KeyValue.json_value)
}
void KeyValue::set_json_value(const char* value, size_t size) {
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightstep.collector.KeyValue.json_value)
}
::std::string* KeyValue::mutable_json_value() {
  if (!has_json_value()) {
    clear_value();
    set_has_json_value();
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:lightstep.collector.KeyValue.json_value)
  return value_.json_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValue::release_json_value() {
  // @@protoc_insertion_point(field_release:lightstep.collector.KeyValue.json_value)
  if (has_json_value()) {
    clear_has_value();
    return value_.json_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void KeyValue::set_allocated_json_value(::std::string* json_value) {
  if (!has_json_value()) {
    value_.json_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (json_value != NULL) {
    set_has_json_value();
    value_.json_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        json_value);
  }
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.KeyValue.json_value)
}

bool KeyValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void KeyValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
KeyValue::ValueCase KeyValue::value_case() const {
  return KeyValue::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Log::kTimestampFieldNumber;
const int Log::kKeyvaluesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Log::Log()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_collector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightstep.collector.Log)
}
Log::Log(const Log& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keyvalues_(from.keyvalues_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:lightstep.collector.Log)
}

void Log::SharedCtor() {
  timestamp_ = NULL;
  _cached_size_ = 0;
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:lightstep.collector.Log)
  SharedDtor();
}

void Log::SharedDtor() {
  if (this != internal_default_instance()) {
    delete timestamp_;
  }
}

void Log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Log::descriptor() {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[3].descriptor;
}

const Log& Log::default_instance() {
  protobuf_collector_2eproto::InitDefaults();
  return *internal_default_instance();
}

Log* Log::New(::google::protobuf::Arena* arena) const {
  Log* n = new Log;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:lightstep.collector.Log)
  keyvalues_.Clear();
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}

bool Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightstep.collector.Log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lightstep.collector.KeyValue keyvalues = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keyvalues()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightstep.collector.Log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightstep.collector.Log)
  return false;
#undef DO_
}

void Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightstep.collector.Log)
  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->timestamp_, output);
  }

  // repeated .lightstep.collector.KeyValue keyvalues = 2;
  for (unsigned int i = 0, n = this->keyvalues_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->keyvalues(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lightstep.collector.Log)
}

::google::protobuf::uint8* Log::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lightstep.collector.Log)
  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->timestamp_, false, target);
  }

  // repeated .lightstep.collector.KeyValue keyvalues = 2;
  for (unsigned int i = 0, n = this->keyvalues_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->keyvalues(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lightstep.collector.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightstep.collector.Log)
  size_t total_size = 0;

  // repeated .lightstep.collector.KeyValue keyvalues = 2;
  {
    unsigned int count = this->keyvalues_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keyvalues(i));
    }
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Log::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightstep.collector.Log)
  GOOGLE_DCHECK_NE(&from, this);
  const Log* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Log>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightstep.collector.Log)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightstep.collector.Log)
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightstep.collector.Log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyvalues_.MergeFrom(from.keyvalues_);
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
}

void Log::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightstep.collector.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightstep.collector.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::Swap(Log* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Log::InternalSwap(Log* other) {
  keyvalues_.UnsafeArenaSwap(&other->keyvalues_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Log::GetMetadata() const {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Log

// .google.protobuf.Timestamp timestamp = 1;
bool Log::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void Log::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& Log::timestamp() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Log.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Log::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:lightstep.collector.Log.timestamp)
  return timestamp_;
}
::google::protobuf::Timestamp* Log::release_timestamp() {
  // @@protoc_insertion_point(field_release:lightstep.collector.Log.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Log::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  delete timestamp_;
  if (timestamp != NULL && timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_timestamp = new ::google::protobuf::Timestamp;
    new_timestamp->CopyFrom(*timestamp);
    timestamp = new_timestamp;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.Log.timestamp)
}

// repeated .lightstep.collector.KeyValue keyvalues = 2;
int Log::keyvalues_size() const {
  return keyvalues_.size();
}
void Log::clear_keyvalues() {
  keyvalues_.Clear();
}
const ::lightstep::collector::KeyValue& Log::keyvalues(int index) const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Log.keyvalues)
  return keyvalues_.Get(index);
}
::lightstep::collector::KeyValue* Log::mutable_keyvalues(int index) {
  // @@protoc_insertion_point(field_mutable:lightstep.collector.Log.keyvalues)
  return keyvalues_.Mutable(index);
}
::lightstep::collector::KeyValue* Log::add_keyvalues() {
  // @@protoc_insertion_point(field_add:lightstep.collector.Log.keyvalues)
  return keyvalues_.Add();
}
::google::protobuf::RepeatedPtrField< ::lightstep::collector::KeyValue >*
Log::mutable_keyvalues() {
  // @@protoc_insertion_point(field_mutable_list:lightstep.collector.Log.keyvalues)
  return &keyvalues_;
}
const ::google::protobuf::RepeatedPtrField< ::lightstep::collector::KeyValue >&
Log::keyvalues() const {
  // @@protoc_insertion_point(field_list:lightstep.collector.Log.keyvalues)
  return keyvalues_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reference::kRelationshipFieldNumber;
const int Reference::kSpanContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reference::Reference()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_collector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightstep.collector.Reference)
}
Reference::Reference(const Reference& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_span_context()) {
    span_context_ = new ::lightstep::collector::SpanContext(*from.span_context_);
  } else {
    span_context_ = NULL;
  }
  relationship_ = from.relationship_;
  // @@protoc_insertion_point(copy_constructor:lightstep.collector.Reference)
}

void Reference::SharedCtor() {
  ::memset(&span_context_, 0, reinterpret_cast<char*>(&relationship_) -
    reinterpret_cast<char*>(&span_context_) + sizeof(relationship_));
  _cached_size_ = 0;
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:lightstep.collector.Reference)
  SharedDtor();
}

void Reference::SharedDtor() {
  if (this != internal_default_instance()) {
    delete span_context_;
  }
}

void Reference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reference::descriptor() {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[4].descriptor;
}

const Reference& Reference::default_instance() {
  protobuf_collector_2eproto::InitDefaults();
  return *internal_default_instance();
}

Reference* Reference::New(::google::protobuf::Arena* arena) const {
  Reference* n = new Reference;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:lightstep.collector.Reference)
  if (GetArenaNoVirtual() == NULL && span_context_ != NULL) {
    delete span_context_;
  }
  span_context_ = NULL;
  relationship_ = 0;
}

bool Reference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightstep.collector.Reference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .lightstep.collector.Reference.Relationship relationship = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_relationship(static_cast< ::lightstep::collector::Reference_Relationship >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lightstep.collector.SpanContext span_context = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_span_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightstep.collector.Reference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightstep.collector.Reference)
  return false;
#undef DO_
}

void Reference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightstep.collector.Reference)
  // .lightstep.collector.Reference.Relationship relationship = 1;
  if (this->relationship() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->relationship(), output);
  }

  // .lightstep.collector.SpanContext span_context = 2;
  if (this->has_span_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->span_context_, output);
  }

  // @@protoc_insertion_point(serialize_end:lightstep.collector.Reference)
}

::google::protobuf::uint8* Reference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lightstep.collector.Reference)
  // .lightstep.collector.Reference.Relationship relationship = 1;
  if (this->relationship() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->relationship(), target);
  }

  // .lightstep.collector.SpanContext span_context = 2;
  if (this->has_span_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->span_context_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lightstep.collector.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightstep.collector.Reference)
  size_t total_size = 0;

  // .lightstep.collector.SpanContext span_context = 2;
  if (this->has_span_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->span_context_);
  }

  // .lightstep.collector.Reference.Relationship relationship = 1;
  if (this->relationship() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->relationship());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightstep.collector.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  const Reference* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reference>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightstep.collector.Reference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightstep.collector.Reference)
    MergeFrom(*source);
  }
}

void Reference::MergeFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightstep.collector.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_span_context()) {
    mutable_span_context()->::lightstep::collector::SpanContext::MergeFrom(from.span_context());
  }
  if (from.relationship() != 0) {
    set_relationship(from.relationship());
  }
}

void Reference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightstep.collector.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightstep.collector.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  return true;
}

void Reference::Swap(Reference* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reference::InternalSwap(Reference* other) {
  std::swap(span_context_, other->span_context_);
  std::swap(relationship_, other->relationship_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reference::GetMetadata() const {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reference

// .lightstep.collector.Reference.Relationship relationship = 1;
void Reference::clear_relationship() {
  relationship_ = 0;
}
::lightstep::collector::Reference_Relationship Reference::relationship() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Reference.relationship)
  return static_cast< ::lightstep::collector::Reference_Relationship >(relationship_);
}
void Reference::set_relationship(::lightstep::collector::Reference_Relationship value) {
  
  relationship_ = value;
  // @@protoc_insertion_point(field_set:lightstep.collector.Reference.relationship)
}

// .lightstep.collector.SpanContext span_context = 2;
bool Reference::has_span_context() const {
  return this != internal_default_instance() && span_context_ != NULL;
}
void Reference::clear_span_context() {
  if (GetArenaNoVirtual() == NULL && span_context_ != NULL) delete span_context_;
  span_context_ = NULL;
}
const ::lightstep::collector::SpanContext& Reference::span_context() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Reference.span_context)
  return span_context_ != NULL ? *span_context_
                         : *::lightstep::collector::SpanContext::internal_default_instance();
}
::lightstep::collector::SpanContext* Reference::mutable_span_context() {
  
  if (span_context_ == NULL) {
    span_context_ = new ::lightstep::collector::SpanContext;
  }
  // @@protoc_insertion_point(field_mutable:lightstep.collector.Reference.span_context)
  return span_context_;
}
::lightstep::collector::SpanContext* Reference::release_span_context() {
  // @@protoc_insertion_point(field_release:lightstep.collector.Reference.span_context)
  
  ::lightstep::collector::SpanContext* temp = span_context_;
  span_context_ = NULL;
  return temp;
}
void Reference::set_allocated_span_context(::lightstep::collector::SpanContext* span_context) {
  delete span_context_;
  span_context_ = span_context;
  if (span_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.Reference.span_context)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span::kSpanContextFieldNumber;
const int Span::kOperationNameFieldNumber;
const int Span::kReferencesFieldNumber;
const int Span::kStartTimestampFieldNumber;
const int Span::kDurationMicrosFieldNumber;
const int Span::kTagsFieldNumber;
const int Span::kLogsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span::Span()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_collector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightstep.collector.Span)
}
Span::Span(const Span& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      references_(from.references_),
      tags_(from.tags_),
      logs_(from.logs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.operation_name().size() > 0) {
    operation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_name_);
  }
  if (from.has_span_context()) {
    span_context_ = new ::lightstep::collector::SpanContext(*from.span_context_);
  } else {
    span_context_ = NULL;
  }
  if (from.has_start_timestamp()) {
    start_timestamp_ = new ::google::protobuf::Timestamp(*from.start_timestamp_);
  } else {
    start_timestamp_ = NULL;
  }
  duration_micros_ = from.duration_micros_;
  // @@protoc_insertion_point(copy_constructor:lightstep.collector.Span)
}

void Span::SharedCtor() {
  operation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&span_context_, 0, reinterpret_cast<char*>(&duration_micros_) -
    reinterpret_cast<char*>(&span_context_) + sizeof(duration_micros_));
  _cached_size_ = 0;
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:lightstep.collector.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  operation_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete span_context_;
  }
  if (this != internal_default_instance()) {
    delete start_timestamp_;
  }
}

void Span::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span::descriptor() {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[5].descriptor;
}

const Span& Span::default_instance() {
  protobuf_collector_2eproto::InitDefaults();
  return *internal_default_instance();
}

Span* Span::New(::google::protobuf::Arena* arena) const {
  Span* n = new Span;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:lightstep.collector.Span)
  references_.Clear();
  tags_.Clear();
  logs_.Clear();
  operation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && span_context_ != NULL) {
    delete span_context_;
  }
  span_context_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_timestamp_ != NULL) {
    delete start_timestamp_;
  }
  start_timestamp_ = NULL;
  duration_micros_ = GOOGLE_ULONGLONG(0);
}

bool Span::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightstep.collector.Span)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .lightstep.collector.SpanContext span_context = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_span_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string operation_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operation_name().data(), this->operation_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightstep.collector.Span.operation_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lightstep.collector.Reference references = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_references()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .google.protobuf.Timestamp start_timestamp = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 duration_micros = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lightstep.collector.KeyValue tags = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .lightstep.collector.Log logs = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_logs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightstep.collector.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightstep.collector.Span)
  return false;
#undef DO_
}

void Span::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightstep.collector.Span)
  // .lightstep.collector.SpanContext span_context = 1;
  if (this->has_span_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->span_context_, output);
  }

  // string operation_name = 2;
  if (this->operation_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation_name().data(), this->operation_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.Span.operation_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->operation_name(), output);
  }

  // repeated .lightstep.collector.Reference references = 3;
  for (unsigned int i = 0, n = this->references_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->references(i), output);
  }

  // .google.protobuf.Timestamp start_timestamp = 4;
  if (this->has_start_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->start_timestamp_, output);
  }

  // uint64 duration_micros = 5;
  if (this->duration_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->duration_micros(), output);
  }

  // repeated .lightstep.collector.KeyValue tags = 6;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tags(i), output);
  }

  // repeated .lightstep.collector.Log logs = 7;
  for (unsigned int i = 0, n = this->logs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->logs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lightstep.collector.Span)
}

::google::protobuf::uint8* Span::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lightstep.collector.Span)
  // .lightstep.collector.SpanContext span_context = 1;
  if (this->has_span_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->span_context_, false, target);
  }

  // string operation_name = 2;
  if (this->operation_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation_name().data(), this->operation_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.Span.operation_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->operation_name(), target);
  }

  // repeated .lightstep.collector.Reference references = 3;
  for (unsigned int i = 0, n = this->references_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->references(i), false, target);
  }

  // .google.protobuf.Timestamp start_timestamp = 4;
  if (this->has_start_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->start_timestamp_, false, target);
  }

  // uint64 duration_micros = 5;
  if (this->duration_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->duration_micros(), target);
  }

  // repeated .lightstep.collector.KeyValue tags = 6;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->tags(i), false, target);
  }

  // repeated .lightstep.collector.Log logs = 7;
  for (unsigned int i = 0, n = this->logs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->logs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lightstep.collector.Span)
  return target;
}

size_t Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightstep.collector.Span)
  size_t total_size = 0;

  // repeated .lightstep.collector.Reference references = 3;
  {
    unsigned int count = this->references_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->references(i));
    }
  }

  // repeated .lightstep.collector.KeyValue tags = 6;
  {
    unsigned int count = this->tags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(i));
    }
  }

  // repeated .lightstep.collector.Log logs = 7;
  {
    unsigned int count = this->logs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logs(i));
    }
  }

  // string operation_name = 2;
  if (this->operation_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation_name());
  }

  // .lightstep.collector.SpanContext span_context = 1;
  if (this->has_span_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->span_context_);
  }

  // .google.protobuf.Timestamp start_timestamp = 4;
  if (this->has_start_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_timestamp_);
  }

  // uint64 duration_micros = 5;
  if (this->duration_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->duration_micros());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightstep.collector.Span)
  GOOGLE_DCHECK_NE(&from, this);
  const Span* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightstep.collector.Span)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightstep.collector.Span)
    MergeFrom(*source);
  }
}

void Span::MergeFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightstep.collector.Span)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  references_.MergeFrom(from.references_);
  tags_.MergeFrom(from.tags_);
  logs_.MergeFrom(from.logs_);
  if (from.operation_name().size() > 0) {

    operation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_name_);
  }
  if (from.has_span_context()) {
    mutable_span_context()->::lightstep::collector::SpanContext::MergeFrom(from.span_context());
  }
  if (from.has_start_timestamp()) {
    mutable_start_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.start_timestamp());
  }
  if (from.duration_micros() != 0) {
    set_duration_micros(from.duration_micros());
  }
}

void Span::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightstep.collector.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightstep.collector.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {
  return true;
}

void Span::Swap(Span* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span::InternalSwap(Span* other) {
  references_.UnsafeArenaSwap(&other->references_);
  tags_.UnsafeArenaSwap(&other->tags_);
  logs_.UnsafeArenaSwap(&other->logs_);
  operation_name_.Swap(&other->operation_name_);
  std::swap(span_context_, other->span_context_);
  std::swap(start_timestamp_, other->start_timestamp_);
  std::swap(duration_micros_, other->duration_micros_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span::GetMetadata() const {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Span

// .lightstep.collector.SpanContext span_context = 1;
bool Span::has_span_context() const {
  return this != internal_default_instance() && span_context_ != NULL;
}
void Span::clear_span_context() {
  if (GetArenaNoVirtual() == NULL && span_context_ != NULL) delete span_context_;
  span_context_ = NULL;
}
const ::lightstep::collector::SpanContext& Span::span_context() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Span.span_context)
  return span_context_ != NULL ? *span_context_
                         : *::lightstep::collector::SpanContext::internal_default_instance();
}
::lightstep::collector::SpanContext* Span::mutable_span_context() {
  
  if (span_context_ == NULL) {
    span_context_ = new ::lightstep::collector::SpanContext;
  }
  // @@protoc_insertion_point(field_mutable:lightstep.collector.Span.span_context)
  return span_context_;
}
::lightstep::collector::SpanContext* Span::release_span_context() {
  // @@protoc_insertion_point(field_release:lightstep.collector.Span.span_context)
  
  ::lightstep::collector::SpanContext* temp = span_context_;
  span_context_ = NULL;
  return temp;
}
void Span::set_allocated_span_context(::lightstep::collector::SpanContext* span_context) {
  delete span_context_;
  span_context_ = span_context;
  if (span_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.Span.span_context)
}

// string operation_name = 2;
void Span::clear_operation_name() {
  operation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Span::operation_name() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Span.operation_name)
  return operation_name_.GetNoArena();
}
void Span::set_operation_name(const ::std::string& value) {
  
  operation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightstep.collector.Span.operation_name)
}
#if LANG_CXX11
void Span::set_operation_name(::std::string&& value) {
  
  operation_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightstep.collector.Span.operation_name)
}
#endif
void Span::set_operation_name(const char* value) {
  
  operation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightstep.collector.Span.operation_name)
}
void Span::set_operation_name(const char* value, size_t size) {
  
  operation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightstep.collector.Span.operation_name)
}
::std::string* Span::mutable_operation_name() {
  
  // @@protoc_insertion_point(field_mutable:lightstep.collector.Span.operation_name)
  return operation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Span::release_operation_name() {
  // @@protoc_insertion_point(field_release:lightstep.collector.Span.operation_name)
  
  return operation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Span::set_allocated_operation_name(::std::string* operation_name) {
  if (operation_name != NULL) {
    
  } else {
    
  }
  operation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_name);
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.Span.operation_name)
}

// repeated .lightstep.collector.Reference references = 3;
int Span::references_size() const {
  return references_.size();
}
void Span::clear_references() {
  references_.Clear();
}
const ::lightstep::collector::Reference& Span::references(int index) const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Span.references)
  return references_.Get(index);
}
::lightstep::collector::Reference* Span::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:lightstep.collector.Span.references)
  return references_.Mutable(index);
}
::lightstep::collector::Reference* Span::add_references() {
  // @@protoc_insertion_point(field_add:lightstep.collector.Span.references)
  return references_.Add();
}
::google::protobuf::RepeatedPtrField< ::lightstep::collector::Reference >*
Span::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:lightstep.collector.Span.references)
  return &references_;
}
const ::google::protobuf::RepeatedPtrField< ::lightstep::collector::Reference >&
Span::references() const {
  // @@protoc_insertion_point(field_list:lightstep.collector.Span.references)
  return references_;
}

// .google.protobuf.Timestamp start_timestamp = 4;
bool Span::has_start_timestamp() const {
  return this != internal_default_instance() && start_timestamp_ != NULL;
}
void Span::clear_start_timestamp() {
  if (GetArenaNoVirtual() == NULL && start_timestamp_ != NULL) delete start_timestamp_;
  start_timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& Span::start_timestamp() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Span.start_timestamp)
  return start_timestamp_ != NULL ? *start_timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* Span::mutable_start_timestamp() {
  
  if (start_timestamp_ == NULL) {
    start_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:lightstep.collector.Span.start_timestamp)
  return start_timestamp_;
}
::google::protobuf::Timestamp* Span::release_start_timestamp() {
  // @@protoc_insertion_point(field_release:lightstep.collector.Span.start_timestamp)
  
  ::google::protobuf::Timestamp* temp = start_timestamp_;
  start_timestamp_ = NULL;
  return temp;
}
void Span::set_allocated_start_timestamp(::google::protobuf::Timestamp* start_timestamp) {
  delete start_timestamp_;
  if (start_timestamp != NULL && start_timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_start_timestamp = new ::google::protobuf::Timestamp;
    new_start_timestamp->CopyFrom(*start_timestamp);
    start_timestamp = new_start_timestamp;
  }
  start_timestamp_ = start_timestamp;
  if (start_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.Span.start_timestamp)
}

// uint64 duration_micros = 5;
void Span::clear_duration_micros() {
  duration_micros_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Span::duration_micros() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Span.duration_micros)
  return duration_micros_;
}
void Span::set_duration_micros(::google::protobuf::uint64 value) {
  
  duration_micros_ = value;
  // @@protoc_insertion_point(field_set:lightstep.collector.Span.duration_micros)
}

// repeated .lightstep.collector.KeyValue tags = 6;
int Span::tags_size() const {
  return tags_.size();
}
void Span::clear_tags() {
  tags_.Clear();
}
const ::lightstep::collector::KeyValue& Span::tags(int index) const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Span.tags)
  return tags_.Get(index);
}
::lightstep::collector::KeyValue* Span::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:lightstep.collector.Span.tags)
  return tags_.Mutable(index);
}
::lightstep::collector::KeyValue* Span::add_tags() {
  // @@protoc_insertion_point(field_add:lightstep.collector.Span.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::lightstep::collector::KeyValue >*
Span::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:lightstep.collector.Span.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::lightstep::collector::KeyValue >&
Span::tags() const {
  // @@protoc_insertion_point(field_list:lightstep.collector.Span.tags)
  return tags_;
}

// repeated .lightstep.collector.Log logs = 7;
int Span::logs_size() const {
  return logs_.size();
}
void Span::clear_logs() {
  logs_.Clear();
}
const ::lightstep::collector::Log& Span::logs(int index) const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Span.logs)
  return logs_.Get(index);
}
::lightstep::collector::Log* Span::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:lightstep.collector.Span.logs)
  return logs_.Mutable(index);
}
::lightstep::collector::Log* Span::add_logs() {
  // @@protoc_insertion_point(field_add:lightstep.collector.Span.logs)
  return logs_.Add();
}
::google::protobuf::RepeatedPtrField< ::lightstep::collector::Log >*
Span::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:lightstep.collector.Span.logs)
  return &logs_;
}
const ::google::protobuf::RepeatedPtrField< ::lightstep::collector::Log >&
Span::logs() const {
  // @@protoc_insertion_point(field_list:lightstep.collector.Span.logs)
  return logs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reporter::kReporterIdFieldNumber;
const int Reporter::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reporter::Reporter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_collector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightstep.collector.Reporter)
}
Reporter::Reporter(const Reporter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tags_(from.tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reporter_id_ = from.reporter_id_;
  // @@protoc_insertion_point(copy_constructor:lightstep.collector.Reporter)
}

void Reporter::SharedCtor() {
  reporter_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Reporter::~Reporter() {
  // @@protoc_insertion_point(destructor:lightstep.collector.Reporter)
  SharedDtor();
}

void Reporter::SharedDtor() {
}

void Reporter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reporter::descriptor() {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[6].descriptor;
}

const Reporter& Reporter::default_instance() {
  protobuf_collector_2eproto::InitDefaults();
  return *internal_default_instance();
}

Reporter* Reporter::New(::google::protobuf::Arena* arena) const {
  Reporter* n = new Reporter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reporter::Clear() {
// @@protoc_insertion_point(message_clear_start:lightstep.collector.Reporter)
  tags_.Clear();
  reporter_id_ = GOOGLE_ULONGLONG(0);
}

bool Reporter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightstep.collector.Reporter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 reporter_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reporter_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lightstep.collector.KeyValue tags = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightstep.collector.Reporter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightstep.collector.Reporter)
  return false;
#undef DO_
}

void Reporter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightstep.collector.Reporter)
  // uint64 reporter_id = 1;
  if (this->reporter_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reporter_id(), output);
  }

  // repeated .lightstep.collector.KeyValue tags = 4;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tags(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lightstep.collector.Reporter)
}

::google::protobuf::uint8* Reporter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lightstep.collector.Reporter)
  // uint64 reporter_id = 1;
  if (this->reporter_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reporter_id(), target);
  }

  // repeated .lightstep.collector.KeyValue tags = 4;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->tags(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lightstep.collector.Reporter)
  return target;
}

size_t Reporter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightstep.collector.Reporter)
  size_t total_size = 0;

  // repeated .lightstep.collector.KeyValue tags = 4;
  {
    unsigned int count = this->tags_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(i));
    }
  }

  // uint64 reporter_id = 1;
  if (this->reporter_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->reporter_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reporter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightstep.collector.Reporter)
  GOOGLE_DCHECK_NE(&from, this);
  const Reporter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reporter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightstep.collector.Reporter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightstep.collector.Reporter)
    MergeFrom(*source);
  }
}

void Reporter::MergeFrom(const Reporter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightstep.collector.Reporter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  if (from.reporter_id() != 0) {
    set_reporter_id(from.reporter_id());
  }
}

void Reporter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightstep.collector.Reporter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reporter::CopyFrom(const Reporter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightstep.collector.Reporter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reporter::IsInitialized() const {
  return true;
}

void Reporter::Swap(Reporter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reporter::InternalSwap(Reporter* other) {
  tags_.UnsafeArenaSwap(&other->tags_);
  std::swap(reporter_id_, other->reporter_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reporter::GetMetadata() const {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reporter

// uint64 reporter_id = 1;
void Reporter::clear_reporter_id() {
  reporter_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Reporter::reporter_id() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Reporter.reporter_id)
  return reporter_id_;
}
void Reporter::set_reporter_id(::google::protobuf::uint64 value) {
  
  reporter_id_ = value;
  // @@protoc_insertion_point(field_set:lightstep.collector.Reporter.reporter_id)
}

// repeated .lightstep.collector.KeyValue tags = 4;
int Reporter::tags_size() const {
  return tags_.size();
}
void Reporter::clear_tags() {
  tags_.Clear();
}
const ::lightstep::collector::KeyValue& Reporter::tags(int index) const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Reporter.tags)
  return tags_.Get(index);
}
::lightstep::collector::KeyValue* Reporter::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:lightstep.collector.Reporter.tags)
  return tags_.Mutable(index);
}
::lightstep::collector::KeyValue* Reporter::add_tags() {
  // @@protoc_insertion_point(field_add:lightstep.collector.Reporter.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::lightstep::collector::KeyValue >*
Reporter::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:lightstep.collector.Reporter.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::lightstep::collector::KeyValue >&
Reporter::tags() const {
  // @@protoc_insertion_point(field_list:lightstep.collector.Reporter.tags)
  return tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricsSample::kNameFieldNumber;
const int MetricsSample::kIntValueFieldNumber;
const int MetricsSample::kDoubleValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricsSample::MetricsSample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_collector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightstep.collector.MetricsSample)
}
MetricsSample::MetricsSample(const MetricsSample& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lightstep.collector.MetricsSample)
}

void MetricsSample::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
  _cached_size_ = 0;
}

MetricsSample::~MetricsSample() {
  // @@protoc_insertion_point(destructor:lightstep.collector.MetricsSample)
  SharedDtor();
}

void MetricsSample::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void MetricsSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricsSample::descriptor() {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[7].descriptor;
}

const MetricsSample& MetricsSample::default_instance() {
  protobuf_collector_2eproto::InitDefaults();
  return *internal_default_instance();
}

MetricsSample* MetricsSample::New(::google::protobuf::Arena* arena) const {
  MetricsSample* n = new MetricsSample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetricsSample::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:lightstep.collector.MetricsSample)
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void MetricsSample::Clear() {
// @@protoc_insertion_point(message_clear_start:lightstep.collector.MetricsSample)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_value();
}

bool MetricsSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightstep.collector.MetricsSample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightstep.collector.MetricsSample.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 int_value = 2;
      case 2: {
        if (tag == 16u) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double double_value = 3;
      case 3: {
        if (tag == 25u) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightstep.collector.MetricsSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightstep.collector.MetricsSample)
  return false;
#undef DO_
}

void MetricsSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightstep.collector.MetricsSample)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.MetricsSample.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int64 int_value = 2;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int_value(), output);
  }

  // double double_value = 3;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->double_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:lightstep.collector.MetricsSample)
}

::google::protobuf::uint8* MetricsSample::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lightstep.collector.MetricsSample)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.MetricsSample.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int64 int_value = 2;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int_value(), target);
  }

  // double double_value = 3;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->double_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lightstep.collector.MetricsSample)
  return target;
}

size_t MetricsSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightstep.collector.MetricsSample)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  switch (value_case()) {
    // int64 int_value = 2;
    case kIntValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_value());
      break;
    }
    // double double_value = 3;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricsSample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightstep.collector.MetricsSample)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricsSample* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetricsSample>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightstep.collector.MetricsSample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightstep.collector.MetricsSample)
    MergeFrom(*source);
  }
}

void MetricsSample::MergeFrom(const MetricsSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightstep.collector.MetricsSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  switch (from.value_case()) {
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void MetricsSample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightstep.collector.MetricsSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricsSample::CopyFrom(const MetricsSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightstep.collector.MetricsSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsSample::IsInitialized() const {
  return true;
}

void MetricsSample::Swap(MetricsSample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricsSample::InternalSwap(MetricsSample* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MetricsSample::GetMetadata() const {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetricsSample

// string name = 1;
void MetricsSample::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MetricsSample::name() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.MetricsSample.name)
  return name_.GetNoArena();
}
void MetricsSample::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightstep.collector.MetricsSample.name)
}
#if LANG_CXX11
void MetricsSample::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightstep.collector.MetricsSample.name)
}
#endif
void MetricsSample::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightstep.collector.MetricsSample.name)
}
void MetricsSample::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightstep.collector.MetricsSample.name)
}
::std::string* MetricsSample::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lightstep.collector.MetricsSample.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MetricsSample::release_name() {
  // @@protoc_insertion_point(field_release:lightstep.collector.MetricsSample.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MetricsSample::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.MetricsSample.name)
}

// int64 int_value = 2;
bool MetricsSample::has_int_value() const {
  return value_case() == kIntValue;
}
void MetricsSample::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
void MetricsSample::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
::google::protobuf::int64 MetricsSample::int_value() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.MetricsSample.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return GOOGLE_LONGLONG(0);
}
void MetricsSample::set_int_value(::google::protobuf::int64 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:lightstep.collector.MetricsSample.int_value)
}

// double double_value = 3;
bool MetricsSample::has_double_value() const {
  return value_case() == kDoubleValue;
}
void MetricsSample::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
void MetricsSample::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
double MetricsSample::double_value() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.MetricsSample.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
void MetricsSample::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:lightstep.collector.MetricsSample.double_value)
}

bool MetricsSample::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void MetricsSample::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
MetricsSample::ValueCase MetricsSample::value_case() const {
  return MetricsSample::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalMetrics::kStartTimestampFieldNumber;
const int InternalMetrics::kDurationMicrosFieldNumber;
const int InternalMetrics::kLogsFieldNumber;
const int InternalMetrics::kCountsFieldNumber;
const int InternalMetrics::kGaugesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalMetrics::InternalMetrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_collector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightstep.collector.InternalMetrics)
}
InternalMetrics::InternalMetrics(const InternalMetrics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      logs_(from.logs_),
      counts_(from.counts_),
      gauges_(from.gauges_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_timestamp()) {
    start_timestamp_ = new ::google::protobuf::Timestamp(*from.start_timestamp_);
  } else {
    start_timestamp_ = NULL;
  }
  duration_micros_ = from.duration_micros_;
  // @@protoc_insertion_point(copy_constructor:lightstep.collector.InternalMetrics)
}

void InternalMetrics::SharedCtor() {
  ::memset(&start_timestamp_, 0, reinterpret_cast<char*>(&duration_micros_) -
    reinterpret_cast<char*>(&start_timestamp_) + sizeof(duration_micros_));
  _cached_size_ = 0;
}

InternalMetrics::~InternalMetrics() {
  // @@protoc_insertion_point(destructor:lightstep.collector.InternalMetrics)
  SharedDtor();
}

void InternalMetrics::SharedDtor() {
  if (this != internal_default_instance()) {
    delete start_timestamp_;
  }
}

void InternalMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalMetrics::descriptor() {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[8].descriptor;
}

const InternalMetrics& InternalMetrics::default_instance() {
  protobuf_collector_2eproto::InitDefaults();
  return *internal_default_instance();
}

InternalMetrics* InternalMetrics::New(::google::protobuf::Arena* arena) const {
  InternalMetrics* n = new InternalMetrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:lightstep.collector.InternalMetrics)
  logs_.Clear();
  counts_.Clear();
  gauges_.Clear();
  if (GetArenaNoVirtual() == NULL && start_timestamp_ != NULL) {
    delete start_timestamp_;
  }
  start_timestamp_ = NULL;
  duration_micros_ = GOOGLE_ULONGLONG(0);
}

bool InternalMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightstep.collector.InternalMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp start_timestamp = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 duration_micros = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lightstep.collector.Log logs = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_logs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .lightstep.collector.MetricsSample counts = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_counts()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .lightstep.collector.MetricsSample gauges = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_gauges()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightstep.collector.InternalMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightstep.collector.InternalMetrics)
  return false;
#undef DO_
}

void InternalMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightstep.collector.InternalMetrics)
  // .google.protobuf.Timestamp start_timestamp = 1;
  if (this->has_start_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->start_timestamp_, output);
  }

  // uint64 duration_micros = 2;
  if (this->duration_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->duration_micros(), output);
  }

  // repeated .lightstep.collector.Log logs = 3;
  for (unsigned int i = 0, n = this->logs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->logs(i), output);
  }

  // repeated .lightstep.collector.MetricsSample counts = 4;
  for (unsigned int i = 0, n = this->counts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->counts(i), output);
  }

  // repeated .lightstep.collector.MetricsSample gauges = 5;
  for (unsigned int i = 0, n = this->gauges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gauges(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lightstep.collector.InternalMetrics)
}

::google::protobuf::uint8* InternalMetrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lightstep.collector.InternalMetrics)
  // .google.protobuf.Timestamp start_timestamp = 1;
  if (this->has_start_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->start_timestamp_, false, target);
  }

  // uint64 duration_micros = 2;
  if (this->duration_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->duration_micros(), target);
  }

  // repeated .lightstep.collector.Log logs = 3;
  for (unsigned int i = 0, n = this->logs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->logs(i), false, target);
  }

  // repeated .lightstep.collector.MetricsSample counts = 4;
  for (unsigned int i = 0, n = this->counts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->counts(i), false, target);
  }

  // repeated .lightstep.collector.MetricsSample gauges = 5;
  for (unsigned int i = 0, n = this->gauges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->gauges(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lightstep.collector.InternalMetrics)
  return target;
}

size_t InternalMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightstep.collector.InternalMetrics)
  size_t total_size = 0;

  // repeated .lightstep.collector.Log logs = 3;
  {
    unsigned int count = this->logs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logs(i));
    }
  }

  // repeated .lightstep.collector.MetricsSample counts = 4;
  {
    unsigned int count = this->counts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counts(i));
    }
  }

  // repeated .lightstep.collector.MetricsSample gauges = 5;
  {
    unsigned int count = this->gauges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gauges(i));
    }
  }

  // .google.protobuf.Timestamp start_timestamp = 1;
  if (this->has_start_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_timestamp_);
  }

  // uint64 duration_micros = 2;
  if (this->duration_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->duration_micros());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalMetrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightstep.collector.InternalMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalMetrics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalMetrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightstep.collector.InternalMetrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightstep.collector.InternalMetrics)
    MergeFrom(*source);
  }
}

void InternalMetrics::MergeFrom(const InternalMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightstep.collector.InternalMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  logs_.MergeFrom(from.logs_);
  counts_.MergeFrom(from.counts_);
  gauges_.MergeFrom(from.gauges_);
  if (from.has_start_timestamp()) {
    mutable_start_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.start_timestamp());
  }
  if (from.duration_micros() != 0) {
    set_duration_micros(from.duration_micros());
  }
}

void InternalMetrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightstep.collector.InternalMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalMetrics::CopyFrom(const InternalMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightstep.collector.InternalMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalMetrics::IsInitialized() const {
  return true;
}

void InternalMetrics::Swap(InternalMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalMetrics::InternalSwap(InternalMetrics* other) {
  logs_.UnsafeArenaSwap(&other->logs_);
  counts_.UnsafeArenaSwap(&other->counts_);
  gauges_.UnsafeArenaSwap(&other->gauges_);
  std::swap(start_timestamp_, other->start_timestamp_);
  std::swap(duration_micros_, other->duration_micros_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalMetrics::GetMetadata() const {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalMetrics

// .google.protobuf.Timestamp start_timestamp = 1;
bool InternalMetrics::has_start_timestamp() const {
  return this != internal_default_instance() && start_timestamp_ != NULL;
}
void InternalMetrics::clear_start_timestamp() {
  if (GetArenaNoVirtual() == NULL && start_timestamp_ != NULL) delete start_timestamp_;
  start_timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& InternalMetrics::start_timestamp() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.InternalMetrics.start_timestamp)
  return start_timestamp_ != NULL ? *start_timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* InternalMetrics::mutable_start_timestamp() {
  
  if (start_timestamp_ == NULL) {
    start_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:lightstep.collector.InternalMetrics.start_timestamp)
  return start_timestamp_;
}
::google::protobuf::Timestamp* InternalMetrics::release_start_timestamp() {
  // @@protoc_insertion_point(field_release:lightstep.collector.InternalMetrics.start_timestamp)
  
  ::google::protobuf::Timestamp* temp = start_timestamp_;
  start_timestamp_ = NULL;
  return temp;
}
void InternalMetrics::set_allocated_start_timestamp(::google::protobuf::Timestamp* start_timestamp) {
  delete start_timestamp_;
  if (start_timestamp != NULL && start_timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_start_timestamp = new ::google::protobuf::Timestamp;
    new_start_timestamp->CopyFrom(*start_timestamp);
    start_timestamp = new_start_timestamp;
  }
  start_timestamp_ = start_timestamp;
  if (start_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.InternalMetrics.start_timestamp)
}

// uint64 duration_micros = 2;
void InternalMetrics::clear_duration_micros() {
  duration_micros_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InternalMetrics::duration_micros() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.InternalMetrics.duration_micros)
  return duration_micros_;
}
void InternalMetrics::set_duration_micros(::google::protobuf::uint64 value) {
  
  duration_micros_ = value;
  // @@protoc_insertion_point(field_set:lightstep.collector.InternalMetrics.duration_micros)
}

// repeated .lightstep.collector.Log logs = 3;
int InternalMetrics::logs_size() const {
  return logs_.size();
}
void InternalMetrics::clear_logs() {
  logs_.Clear();
}
const ::lightstep::collector::Log& InternalMetrics::logs(int index) const {
  // @@protoc_insertion_point(field_get:lightstep.collector.InternalMetrics.logs)
  return logs_.Get(index);
}
::lightstep::collector::Log* InternalMetrics::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:lightstep.collector.InternalMetrics.logs)
  return logs_.Mutable(index);
}
::lightstep::collector::Log* InternalMetrics::add_logs() {
  // @@protoc_insertion_point(field_add:lightstep.collector.InternalMetrics.logs)
  return logs_.Add();
}
::google::protobuf::RepeatedPtrField< ::lightstep::collector::Log >*
InternalMetrics::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:lightstep.collector.InternalMetrics.logs)
  return &logs_;
}
const ::google::protobuf::RepeatedPtrField< ::lightstep::collector::Log >&
InternalMetrics::logs() const {
  // @@protoc_insertion_point(field_list:lightstep.collector.InternalMetrics.logs)
  return logs_;
}

// repeated .lightstep.collector.MetricsSample counts = 4;
int InternalMetrics::counts_size() const {
  return counts_.size();
}
void InternalMetrics::clear_counts() {
  counts_.Clear();
}
const ::lightstep::collector::MetricsSample& InternalMetrics::counts(int index) const {
  // @@protoc_insertion_point(field_get:lightstep.collector.InternalMetrics.counts)
  return counts_.Get(index);
}
::lightstep::collector::MetricsSample* InternalMetrics::mutable_counts(int index) {
  // @@protoc_insertion_point(field_mutable:lightstep.collector.InternalMetrics.counts)
  return counts_.Mutable(index);
}
::lightstep::collector::MetricsSample* InternalMetrics::add_counts() {
  // @@protoc_insertion_point(field_add:lightstep.collector.InternalMetrics.counts)
  return counts_.Add();
}
::google::protobuf::RepeatedPtrField< ::lightstep::collector::MetricsSample >*
InternalMetrics::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:lightstep.collector.InternalMetrics.counts)
  return &counts_;
}
const ::google::protobuf::RepeatedPtrField< ::lightstep::collector::MetricsSample >&
InternalMetrics::counts() const {
  // @@protoc_insertion_point(field_list:lightstep.collector.InternalMetrics.counts)
  return counts_;
}

// repeated .lightstep.collector.MetricsSample gauges = 5;
int InternalMetrics::gauges_size() const {
  return gauges_.size();
}
void InternalMetrics::clear_gauges() {
  gauges_.Clear();
}
const ::lightstep::collector::MetricsSample& InternalMetrics::gauges(int index) const {
  // @@protoc_insertion_point(field_get:lightstep.collector.InternalMetrics.gauges)
  return gauges_.Get(index);
}
::lightstep::collector::MetricsSample* InternalMetrics::mutable_gauges(int index) {
  // @@protoc_insertion_point(field_mutable:lightstep.collector.InternalMetrics.gauges)
  return gauges_.Mutable(index);
}
::lightstep::collector::MetricsSample* InternalMetrics::add_gauges() {
  // @@protoc_insertion_point(field_add:lightstep.collector.InternalMetrics.gauges)
  return gauges_.Add();
}
::google::protobuf::RepeatedPtrField< ::lightstep::collector::MetricsSample >*
InternalMetrics::mutable_gauges() {
  // @@protoc_insertion_point(field_mutable_list:lightstep.collector.InternalMetrics.gauges)
  return &gauges_;
}
const ::google::protobuf::RepeatedPtrField< ::lightstep::collector::MetricsSample >&
InternalMetrics::gauges() const {
  // @@protoc_insertion_point(field_list:lightstep.collector.InternalMetrics.gauges)
  return gauges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Auth::kAccessTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Auth::Auth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_collector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightstep.collector.Auth)
}
Auth::Auth(const Auth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  access_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.access_token().size() > 0) {
    access_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  // @@protoc_insertion_point(copy_constructor:lightstep.collector.Auth)
}

void Auth::SharedCtor() {
  access_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Auth::~Auth() {
  // @@protoc_insertion_point(destructor:lightstep.collector.Auth)
  SharedDtor();
}

void Auth::SharedDtor() {
  access_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auth::descriptor() {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[9].descriptor;
}

const Auth& Auth::default_instance() {
  protobuf_collector_2eproto::InitDefaults();
  return *internal_default_instance();
}

Auth* Auth::New(::google::protobuf::Arena* arena) const {
  Auth* n = new Auth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Auth::Clear() {
// @@protoc_insertion_point(message_clear_start:lightstep.collector.Auth)
  access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightstep.collector.Auth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string access_token = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightstep.collector.Auth.access_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightstep.collector.Auth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightstep.collector.Auth)
  return false;
#undef DO_
}

void Auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightstep.collector.Auth)
  // string access_token = 1;
  if (this->access_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.Auth.access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:lightstep.collector.Auth)
}

::google::protobuf::uint8* Auth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lightstep.collector.Auth)
  // string access_token = 1;
  if (this->access_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.Auth.access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lightstep.collector.Auth)
  return target;
}

size_t Auth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightstep.collector.Auth)
  size_t total_size = 0;

  // string access_token = 1;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->access_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightstep.collector.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  const Auth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Auth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightstep.collector.Auth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightstep.collector.Auth)
    MergeFrom(*source);
  }
}

void Auth::MergeFrom(const Auth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightstep.collector.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
}

void Auth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightstep.collector.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auth::CopyFrom(const Auth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightstep.collector.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auth::IsInitialized() const {
  return true;
}

void Auth::Swap(Auth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Auth::InternalSwap(Auth* other) {
  access_token_.Swap(&other->access_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Auth::GetMetadata() const {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Auth

// string access_token = 1;
void Auth::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Auth::access_token() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Auth.access_token)
  return access_token_.GetNoArena();
}
void Auth::set_access_token(const ::std::string& value) {
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightstep.collector.Auth.access_token)
}
#if LANG_CXX11
void Auth::set_access_token(::std::string&& value) {
  
  access_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightstep.collector.Auth.access_token)
}
#endif
void Auth::set_access_token(const char* value) {
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightstep.collector.Auth.access_token)
}
void Auth::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightstep.collector.Auth.access_token)
}
::std::string* Auth::mutable_access_token() {
  
  // @@protoc_insertion_point(field_mutable:lightstep.collector.Auth.access_token)
  return access_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Auth::release_access_token() {
  // @@protoc_insertion_point(field_release:lightstep.collector.Auth.access_token)
  
  return access_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Auth::set_allocated_access_token(::std::string* access_token) {
  if (access_token != NULL) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.Auth.access_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportRequest::kReporterFieldNumber;
const int ReportRequest::kAuthFieldNumber;
const int ReportRequest::kSpansFieldNumber;
const int ReportRequest::kTimestampOffsetMicrosFieldNumber;
const int ReportRequest::kInternalMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportRequest::ReportRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_collector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightstep.collector.ReportRequest)
}
ReportRequest::ReportRequest(const ReportRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spans_(from.spans_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reporter()) {
    reporter_ = new ::lightstep::collector::Reporter(*from.reporter_);
  } else {
    reporter_ = NULL;
  }
  if (from.has_auth()) {
    auth_ = new ::lightstep::collector::Auth(*from.auth_);
  } else {
    auth_ = NULL;
  }
  if (from.has_internal_metrics()) {
    internal_metrics_ = new ::lightstep::collector::InternalMetrics(*from.internal_metrics_);
  } else {
    internal_metrics_ = NULL;
  }
  timestamp_offset_micros_ = from.timestamp_offset_micros_;
  // @@protoc_insertion_point(copy_constructor:lightstep.collector.ReportRequest)
}

void ReportRequest::SharedCtor() {
  ::memset(&reporter_, 0, reinterpret_cast<char*>(&timestamp_offset_micros_) -
    reinterpret_cast<char*>(&reporter_) + sizeof(timestamp_offset_micros_));
  _cached_size_ = 0;
}

ReportRequest::~ReportRequest() {
  // @@protoc_insertion_point(destructor:lightstep.collector.ReportRequest)
  SharedDtor();
}

void ReportRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete reporter_;
  }
  if (this != internal_default_instance()) {
    delete auth_;
  }
  if (this != internal_default_instance()) {
    delete internal_metrics_;
  }
}

void ReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportRequest::descriptor() {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[10].descriptor;
}

const ReportRequest& ReportRequest::default_instance() {
  protobuf_collector_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReportRequest* ReportRequest::New(::google::protobuf::Arena* arena) const {
  ReportRequest* n = new ReportRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightstep.collector.ReportRequest)
  spans_.Clear();
  if (GetArenaNoVirtual() == NULL && reporter_ != NULL) {
    delete reporter_;
  }
  reporter_ = NULL;
  if (GetArenaNoVirtual() == NULL && auth_ != NULL) {
    delete auth_;
  }
  auth_ = NULL;
  if (GetArenaNoVirtual() == NULL && internal_metrics_ != NULL) {
    delete internal_metrics_;
  }
  internal_metrics_ = NULL;
  timestamp_offset_micros_ = 0u;
}

bool ReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightstep.collector.ReportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .lightstep.collector.Reporter reporter = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reporter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lightstep.collector.Auth auth = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lightstep.collector.Span spans = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_spans()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 timestamp_offset_micros = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_offset_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lightstep.collector.InternalMetrics internal_metrics = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightstep.collector.ReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightstep.collector.ReportRequest)
  return false;
#undef DO_
}

void ReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightstep.collector.ReportRequest)
  // .lightstep.collector.Reporter reporter = 1;
  if (this->has_reporter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->reporter_, output);
  }

  // .lightstep.collector.Auth auth = 2;
  if (this->has_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->auth_, output);
  }

  // repeated .lightstep.collector.Span spans = 3;
  for (unsigned int i = 0, n = this->spans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spans(i), output);
  }

  // uint32 timestamp_offset_micros = 5;
  if (this->timestamp_offset_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timestamp_offset_micros(), output);
  }

  // .lightstep.collector.InternalMetrics internal_metrics = 6;
  if (this->has_internal_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->internal_metrics_, output);
  }

  // @@protoc_insertion_point(serialize_end:lightstep.collector.ReportRequest)
}

::google::protobuf::uint8* ReportRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lightstep.collector.ReportRequest)
  // .lightstep.collector.Reporter reporter = 1;
  if (this->has_reporter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->reporter_, false, target);
  }

  // .lightstep.collector.Auth auth = 2;
  if (this->has_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->auth_, false, target);
  }

  // repeated .lightstep.collector.Span spans = 3;
  for (unsigned int i = 0, n = this->spans_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->spans(i), false, target);
  }

  // uint32 timestamp_offset_micros = 5;
  if (this->timestamp_offset_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timestamp_offset_micros(), target);
  }

  // .lightstep.collector.InternalMetrics internal_metrics = 6;
  if (this->has_internal_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->internal_metrics_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lightstep.collector.ReportRequest)
  return target;
}

size_t ReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightstep.collector.ReportRequest)
  size_t total_size = 0;

  // repeated .lightstep.collector.Span spans = 3;
  {
    unsigned int count = this->spans_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spans(i));
    }
  }

  // .lightstep.collector.Reporter reporter = 1;
  if (this->has_reporter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reporter_);
  }

  // .lightstep.collector.Auth auth = 2;
  if (this->has_auth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->auth_);
  }

  // .lightstep.collector.InternalMetrics internal_metrics = 6;
  if (this->has_internal_metrics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->internal_metrics_);
  }

  // uint32 timestamp_offset_micros = 5;
  if (this->timestamp_offset_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp_offset_micros());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightstep.collector.ReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightstep.collector.ReportRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightstep.collector.ReportRequest)
    MergeFrom(*source);
  }
}

void ReportRequest::MergeFrom(const ReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightstep.collector.ReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spans_.MergeFrom(from.spans_);
  if (from.has_reporter()) {
    mutable_reporter()->::lightstep::collector::Reporter::MergeFrom(from.reporter());
  }
  if (from.has_auth()) {
    mutable_auth()->::lightstep::collector::Auth::MergeFrom(from.auth());
  }
  if (from.has_internal_metrics()) {
    mutable_internal_metrics()->::lightstep::collector::InternalMetrics::MergeFrom(from.internal_metrics());
  }
  if (from.timestamp_offset_micros() != 0) {
    set_timestamp_offset_micros(from.timestamp_offset_micros());
  }
}

void ReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightstep.collector.ReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRequest::CopyFrom(const ReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightstep.collector.ReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRequest::IsInitialized() const {
  return true;
}

void ReportRequest::Swap(ReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportRequest::InternalSwap(ReportRequest* other) {
  spans_.UnsafeArenaSwap(&other->spans_);
  std::swap(reporter_, other->reporter_);
  std::swap(auth_, other->auth_);
  std::swap(internal_metrics_, other->internal_metrics_);
  std::swap(timestamp_offset_micros_, other->timestamp_offset_micros_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportRequest::GetMetadata() const {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportRequest

// .lightstep.collector.Reporter reporter = 1;
bool ReportRequest::has_reporter() const {
  return this != internal_default_instance() && reporter_ != NULL;
}
void ReportRequest::clear_reporter() {
  if (GetArenaNoVirtual() == NULL && reporter_ != NULL) delete reporter_;
  reporter_ = NULL;
}
const ::lightstep::collector::Reporter& ReportRequest::reporter() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.ReportRequest.reporter)
  return reporter_ != NULL ? *reporter_
                         : *::lightstep::collector::Reporter::internal_default_instance();
}
::lightstep::collector::Reporter* ReportRequest::mutable_reporter() {
  
  if (reporter_ == NULL) {
    reporter_ = new ::lightstep::collector::Reporter;
  }
  // @@protoc_insertion_point(field_mutable:lightstep.collector.ReportRequest.reporter)
  return reporter_;
}
::lightstep::collector::Reporter* ReportRequest::release_reporter() {
  // @@protoc_insertion_point(field_release:lightstep.collector.ReportRequest.reporter)
  
  ::lightstep::collector::Reporter* temp = reporter_;
  reporter_ = NULL;
  return temp;
}
void ReportRequest::set_allocated_reporter(::lightstep::collector::Reporter* reporter) {
  delete reporter_;
  reporter_ = reporter;
  if (reporter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.ReportRequest.reporter)
}

// .lightstep.collector.Auth auth = 2;
bool ReportRequest::has_auth() const {
  return this != internal_default_instance() && auth_ != NULL;
}
void ReportRequest::clear_auth() {
  if (GetArenaNoVirtual() == NULL && auth_ != NULL) delete auth_;
  auth_ = NULL;
}
const ::lightstep::collector::Auth& ReportRequest::auth() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.ReportRequest.auth)
  return auth_ != NULL ? *auth_
                         : *::lightstep::collector::Auth::internal_default_instance();
}
::lightstep::collector::Auth* ReportRequest::mutable_auth() {
  
  if (auth_ == NULL) {
    auth_ = new ::lightstep::collector::Auth;
  }
  // @@protoc_insertion_point(field_mutable:lightstep.collector.ReportRequest.auth)
  return auth_;
}
::lightstep::collector::Auth* ReportRequest::release_auth() {
  // @@protoc_insertion_point(field_release:lightstep.collector.ReportRequest.auth)
  
  ::lightstep::collector::Auth* temp = auth_;
  auth_ = NULL;
  return temp;
}
void ReportRequest::set_allocated_auth(::lightstep::collector::Auth* auth) {
  delete auth_;
  auth_ = auth;
  if (auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.ReportRequest.auth)
}

// repeated .lightstep.collector.Span spans = 3;
int ReportRequest::spans_size() const {
  return spans_.size();
}
void ReportRequest::clear_spans() {
  spans_.Clear();
}
const ::lightstep::collector::Span& ReportRequest::spans(int index) const {
  // @@protoc_insertion_point(field_get:lightstep.collector.ReportRequest.spans)
  return spans_.Get(index);
}
::lightstep::collector::Span* ReportRequest::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:lightstep.collector.ReportRequest.spans)
  return spans_.Mutable(index);
}
::lightstep::collector::Span* ReportRequest::add_spans() {
  // @@protoc_insertion_point(field_add:lightstep.collector.ReportRequest.spans)
  return spans_.Add();
}
::google::protobuf::RepeatedPtrField< ::lightstep::collector::Span >*
ReportRequest::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:lightstep.collector.ReportRequest.spans)
  return &spans_;
}
const ::google::protobuf::RepeatedPtrField< ::lightstep::collector::Span >&
ReportRequest::spans() const {
  // @@protoc_insertion_point(field_list:lightstep.collector.ReportRequest.spans)
  return spans_;
}

// uint32 timestamp_offset_micros = 5;
void ReportRequest::clear_timestamp_offset_micros() {
  timestamp_offset_micros_ = 0u;
}
::google::protobuf::uint32 ReportRequest::timestamp_offset_micros() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.ReportRequest.timestamp_offset_micros)
  return timestamp_offset_micros_;
}
void ReportRequest::set_timestamp_offset_micros(::google::protobuf::uint32 value) {
  
  timestamp_offset_micros_ = value;
  // @@protoc_insertion_point(field_set:lightstep.collector.ReportRequest.timestamp_offset_micros)
}

// .lightstep.collector.InternalMetrics internal_metrics = 6;
bool ReportRequest::has_internal_metrics() const {
  return this != internal_default_instance() && internal_metrics_ != NULL;
}
void ReportRequest::clear_internal_metrics() {
  if (GetArenaNoVirtual() == NULL && internal_metrics_ != NULL) delete internal_metrics_;
  internal_metrics_ = NULL;
}
const ::lightstep::collector::InternalMetrics& ReportRequest::internal_metrics() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.ReportRequest.internal_metrics)
  return internal_metrics_ != NULL ? *internal_metrics_
                         : *::lightstep::collector::InternalMetrics::internal_default_instance();
}
::lightstep::collector::InternalMetrics* ReportRequest::mutable_internal_metrics() {
  
  if (internal_metrics_ == NULL) {
    internal_metrics_ = new ::lightstep::collector::InternalMetrics;
  }
  // @@protoc_insertion_point(field_mutable:lightstep.collector.ReportRequest.internal_metrics)
  return internal_metrics_;
}
::lightstep::collector::InternalMetrics* ReportRequest::release_internal_metrics() {
  // @@protoc_insertion_point(field_release:lightstep.collector.ReportRequest.internal_metrics)
  
  ::lightstep::collector::InternalMetrics* temp = internal_metrics_;
  internal_metrics_ = NULL;
  return temp;
}
void ReportRequest::set_allocated_internal_metrics(::lightstep::collector::InternalMetrics* internal_metrics) {
  delete internal_metrics_;
  internal_metrics_ = internal_metrics;
  if (internal_metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.ReportRequest.internal_metrics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kDisableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_collector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightstep.collector.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  disable_ = from.disable_;
  // @@protoc_insertion_point(copy_constructor:lightstep.collector.Command)
}

void Command::SharedCtor() {
  disable_ = false;
  _cached_size_ = 0;
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:lightstep.collector.Command)
  SharedDtor();
}

void Command::SharedDtor() {
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[11].descriptor;
}

const Command& Command::default_instance() {
  protobuf_collector_2eproto::InitDefaults();
  return *internal_default_instance();
}

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:lightstep.collector.Command)
  disable_ = false;
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightstep.collector.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool disable = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightstep.collector.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightstep.collector.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightstep.collector.Command)
  // bool disable = 1;
  if (this->disable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disable(), output);
  }

  // @@protoc_insertion_point(serialize_end:lightstep.collector.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lightstep.collector.Command)
  // bool disable = 1;
  if (this->disable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disable(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lightstep.collector.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightstep.collector.Command)
  size_t total_size = 0;

  // bool disable = 1;
  if (this->disable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightstep.collector.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightstep.collector.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightstep.collector.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightstep.collector.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.disable() != 0) {
    set_disable(from.disable());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightstep.collector.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightstep.collector.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  std::swap(disable_, other->disable_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// bool disable = 1;
void Command::clear_disable() {
  disable_ = false;
}
bool Command::disable() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.Command.disable)
  return disable_;
}
void Command::set_disable(bool value) {
  
  disable_ = value;
  // @@protoc_insertion_point(field_set:lightstep.collector.Command.disable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportResponse::kCommandsFieldNumber;
const int ReportResponse::kReceiveTimestampFieldNumber;
const int ReportResponse::kTransmitTimestampFieldNumber;
const int ReportResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportResponse::ReportResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_collector_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightstep.collector.ReportResponse)
}
ReportResponse::ReportResponse(const ReportResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      commands_(from.commands_),
      errors_(from.errors_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_receive_timestamp()) {
    receive_timestamp_ = new ::google::protobuf::Timestamp(*from.receive_timestamp_);
  } else {
    receive_timestamp_ = NULL;
  }
  if (from.has_transmit_timestamp()) {
    transmit_timestamp_ = new ::google::protobuf::Timestamp(*from.transmit_timestamp_);
  } else {
    transmit_timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:lightstep.collector.ReportResponse)
}

void ReportResponse::SharedCtor() {
  ::memset(&receive_timestamp_, 0, reinterpret_cast<char*>(&transmit_timestamp_) -
    reinterpret_cast<char*>(&receive_timestamp_) + sizeof(transmit_timestamp_));
  _cached_size_ = 0;
}

ReportResponse::~ReportResponse() {
  // @@protoc_insertion_point(destructor:lightstep.collector.ReportResponse)
  SharedDtor();
}

void ReportResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete receive_timestamp_;
  }
  if (this != internal_default_instance()) {
    delete transmit_timestamp_;
  }
}

void ReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportResponse::descriptor() {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[12].descriptor;
}

const ReportResponse& ReportResponse::default_instance() {
  protobuf_collector_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReportResponse* ReportResponse::New(::google::protobuf::Arena* arena) const {
  ReportResponse* n = new ReportResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightstep.collector.ReportResponse)
  commands_.Clear();
  errors_.Clear();
  if (GetArenaNoVirtual() == NULL && receive_timestamp_ != NULL) {
    delete receive_timestamp_;
  }
  receive_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && transmit_timestamp_ != NULL) {
    delete transmit_timestamp_;
  }
  transmit_timestamp_ = NULL;
}

bool ReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lightstep.collector.ReportResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lightstep.collector.Command commands = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_commands()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .google.protobuf.Timestamp receive_timestamp = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receive_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp transmit_timestamp = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transmit_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string errors = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_errors()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errors(this->errors_size() - 1).data(),
            this->errors(this->errors_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lightstep.collector.ReportResponse.errors"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lightstep.collector.ReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lightstep.collector.ReportResponse)
  return false;
#undef DO_
}

void ReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lightstep.collector.ReportResponse)
  // repeated .lightstep.collector.Command commands = 1;
  for (unsigned int i = 0, n = this->commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commands(i), output);
  }

  // .google.protobuf.Timestamp receive_timestamp = 2;
  if (this->has_receive_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->receive_timestamp_, output);
  }

  // .google.protobuf.Timestamp transmit_timestamp = 3;
  if (this->has_transmit_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->transmit_timestamp_, output);
  }

  // repeated string errors = 4;
  for (int i = 0; i < this->errors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errors(i).data(), this->errors(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.ReportResponse.errors");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->errors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lightstep.collector.ReportResponse)
}

::google::protobuf::uint8* ReportResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lightstep.collector.ReportResponse)
  // repeated .lightstep.collector.Command commands = 1;
  for (unsigned int i = 0, n = this->commands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->commands(i), false, target);
  }

  // .google.protobuf.Timestamp receive_timestamp = 2;
  if (this->has_receive_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->receive_timestamp_, false, target);
  }

  // .google.protobuf.Timestamp transmit_timestamp = 3;
  if (this->has_transmit_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->transmit_timestamp_, false, target);
  }

  // repeated string errors = 4;
  for (int i = 0; i < this->errors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errors(i).data(), this->errors(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lightstep.collector.ReportResponse.errors");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->errors(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lightstep.collector.ReportResponse)
  return target;
}

size_t ReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightstep.collector.ReportResponse)
  size_t total_size = 0;

  // repeated .lightstep.collector.Command commands = 1;
  {
    unsigned int count = this->commands_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commands(i));
    }
  }

  // repeated string errors = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->errors_size());
  for (int i = 0; i < this->errors_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->errors(i));
  }

  // .google.protobuf.Timestamp receive_timestamp = 2;
  if (this->has_receive_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receive_timestamp_);
  }

  // .google.protobuf.Timestamp transmit_timestamp = 3;
  if (this->has_transmit_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transmit_timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightstep.collector.ReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightstep.collector.ReportResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightstep.collector.ReportResponse)
    MergeFrom(*source);
  }
}

void ReportResponse::MergeFrom(const ReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightstep.collector.ReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  commands_.MergeFrom(from.commands_);
  errors_.MergeFrom(from.errors_);
  if (from.has_receive_timestamp()) {
    mutable_receive_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.receive_timestamp());
  }
  if (from.has_transmit_timestamp()) {
    mutable_transmit_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.transmit_timestamp());
  }
}

void ReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightstep.collector.ReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportResponse::CopyFrom(const ReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightstep.collector.ReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportResponse::IsInitialized() const {
  return true;
}

void ReportResponse::Swap(ReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportResponse::InternalSwap(ReportResponse* other) {
  commands_.UnsafeArenaSwap(&other->commands_);
  errors_.UnsafeArenaSwap(&other->errors_);
  std::swap(receive_timestamp_, other->receive_timestamp_);
  std::swap(transmit_timestamp_, other->transmit_timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportResponse::GetMetadata() const {
  protobuf_collector_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_collector_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportResponse

// repeated .lightstep.collector.Command commands = 1;
int ReportResponse::commands_size() const {
  return commands_.size();
}
void ReportResponse::clear_commands() {
  commands_.Clear();
}
const ::lightstep::collector::Command& ReportResponse::commands(int index) const {
  // @@protoc_insertion_point(field_get:lightstep.collector.ReportResponse.commands)
  return commands_.Get(index);
}
::lightstep::collector::Command* ReportResponse::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:lightstep.collector.ReportResponse.commands)
  return commands_.Mutable(index);
}
::lightstep::collector::Command* ReportResponse::add_commands() {
  // @@protoc_insertion_point(field_add:lightstep.collector.ReportResponse.commands)
  return commands_.Add();
}
::google::protobuf::RepeatedPtrField< ::lightstep::collector::Command >*
ReportResponse::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:lightstep.collector.ReportResponse.commands)
  return &commands_;
}
const ::google::protobuf::RepeatedPtrField< ::lightstep::collector::Command >&
ReportResponse::commands() const {
  // @@protoc_insertion_point(field_list:lightstep.collector.ReportResponse.commands)
  return commands_;
}

// .google.protobuf.Timestamp receive_timestamp = 2;
bool ReportResponse::has_receive_timestamp() const {
  return this != internal_default_instance() && receive_timestamp_ != NULL;
}
void ReportResponse::clear_receive_timestamp() {
  if (GetArenaNoVirtual() == NULL && receive_timestamp_ != NULL) delete receive_timestamp_;
  receive_timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& ReportResponse::receive_timestamp() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.ReportResponse.receive_timestamp)
  return receive_timestamp_ != NULL ? *receive_timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* ReportResponse::mutable_receive_timestamp() {
  
  if (receive_timestamp_ == NULL) {
    receive_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:lightstep.collector.ReportResponse.receive_timestamp)
  return receive_timestamp_;
}
::google::protobuf::Timestamp* ReportResponse::release_receive_timestamp() {
  // @@protoc_insertion_point(field_release:lightstep.collector.ReportResponse.receive_timestamp)
  
  ::google::protobuf::Timestamp* temp = receive_timestamp_;
  receive_timestamp_ = NULL;
  return temp;
}
void ReportResponse::set_allocated_receive_timestamp(::google::protobuf::Timestamp* receive_timestamp) {
  delete receive_timestamp_;
  if (receive_timestamp != NULL && receive_timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_receive_timestamp = new ::google::protobuf::Timestamp;
    new_receive_timestamp->CopyFrom(*receive_timestamp);
    receive_timestamp = new_receive_timestamp;
  }
  receive_timestamp_ = receive_timestamp;
  if (receive_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.ReportResponse.receive_timestamp)
}

// .google.protobuf.Timestamp transmit_timestamp = 3;
bool ReportResponse::has_transmit_timestamp() const {
  return this != internal_default_instance() && transmit_timestamp_ != NULL;
}
void ReportResponse::clear_transmit_timestamp() {
  if (GetArenaNoVirtual() == NULL && transmit_timestamp_ != NULL) delete transmit_timestamp_;
  transmit_timestamp_ = NULL;
}
const ::google::protobuf::Timestamp& ReportResponse::transmit_timestamp() const {
  // @@protoc_insertion_point(field_get:lightstep.collector.ReportResponse.transmit_timestamp)
  return transmit_timestamp_ != NULL ? *transmit_timestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* ReportResponse::mutable_transmit_timestamp() {
  
  if (transmit_timestamp_ == NULL) {
    transmit_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:lightstep.collector.ReportResponse.transmit_timestamp)
  return transmit_timestamp_;
}
::google::protobuf::Timestamp* ReportResponse::release_transmit_timestamp() {
  // @@protoc_insertion_point(field_release:lightstep.collector.ReportResponse.transmit_timestamp)
  
  ::google::protobuf::Timestamp* temp = transmit_timestamp_;
  transmit_timestamp_ = NULL;
  return temp;
}
void ReportResponse::set_allocated_transmit_timestamp(::google::protobuf::Timestamp* transmit_timestamp) {
  delete transmit_timestamp_;
  if (transmit_timestamp != NULL && transmit_timestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_transmit_timestamp = new ::google::protobuf::Timestamp;
    new_transmit_timestamp->CopyFrom(*transmit_timestamp);
    transmit_timestamp = new_transmit_timestamp;
  }
  transmit_timestamp_ = transmit_timestamp;
  if (transmit_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lightstep.collector.ReportResponse.transmit_timestamp)
}

// repeated string errors = 4;
int ReportResponse::errors_size() const {
  return errors_.size();
}
void ReportResponse::clear_errors() {
  errors_.Clear();
}
const ::std::string& ReportResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:lightstep.collector.ReportResponse.errors)
  return errors_.Get(index);
}
::std::string* ReportResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:lightstep.collector.ReportResponse.errors)
  return errors_.Mutable(index);
}
void ReportResponse::set_errors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lightstep.collector.ReportResponse.errors)
  errors_.Mutable(index)->assign(value);
}
void ReportResponse::set_errors(int index, const char* value) {
  errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lightstep.collector.ReportResponse.errors)
}
void ReportResponse::set_errors(int index, const char* value, size_t size) {
  errors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lightstep.collector.ReportResponse.errors)
}
::std::string* ReportResponse::add_errors() {
  // @@protoc_insertion_point(field_add_mutable:lightstep.collector.ReportResponse.errors)
  return errors_.Add();
}
void ReportResponse::add_errors(const ::std::string& value) {
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lightstep.collector.ReportResponse.errors)
}
void ReportResponse::add_errors(const char* value) {
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lightstep.collector.ReportResponse.errors)
}
void ReportResponse::add_errors(const char* value, size_t size) {
  errors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lightstep.collector.ReportResponse.errors)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReportResponse::errors() const {
  // @@protoc_insertion_point(field_list:lightstep.collector.ReportResponse.errors)
  return errors_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ReportResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:lightstep.collector.ReportResponse.errors)
  return &errors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace collector
}  // namespace lightstep

// @@protoc_insertion_point(global_scope)
