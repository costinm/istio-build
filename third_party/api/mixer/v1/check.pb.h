// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mixer/v1/check.proto

#ifndef PROTOBUF_mixer_2fv1_2fcheck_2eproto__INCLUDED
#define PROTOBUF_mixer_2fv1_2fcheck_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include "mixer/v1/attributes.pb.h"
// @@protoc_insertion_point(includes)
namespace google {
namespace protobuf {
class Duration;
class DurationDefaultTypeInternal;
extern DurationDefaultTypeInternal _Duration_default_instance_;
}  // namespace protobuf
}  // namespace google
namespace istio {
namespace mixer {
namespace v1 {
class Attributes;
class AttributesDefaultTypeInternal;
extern AttributesDefaultTypeInternal _Attributes_default_instance_;
class CheckRequest;
class CheckRequestDefaultTypeInternal;
extern CheckRequestDefaultTypeInternal _CheckRequest_default_instance_;
class CheckResponse;
class CheckResponseDefaultTypeInternal;
extern CheckResponseDefaultTypeInternal _CheckResponse_default_instance_;
class StringMap;
class StringMapDefaultTypeInternal;
extern StringMapDefaultTypeInternal _StringMap_default_instance_;
}  // namespace v1
}  // namespace mixer
}  // namespace istio

namespace istio {
namespace mixer {
namespace v1 {

namespace protobuf_mixer_2fv1_2fcheck_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mixer_2fv1_2fcheck_2eproto

// ===================================================================

class CheckRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.CheckRequest) */ {
 public:
  CheckRequest();
  virtual ~CheckRequest();

  CheckRequest(const CheckRequest& from);

  inline CheckRequest& operator=(const CheckRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckRequest& default_instance();

  static inline const CheckRequest* internal_default_instance() {
    return reinterpret_cast<const CheckRequest*>(
               &_CheckRequest_default_instance_);
  }

  void Swap(CheckRequest* other);

  // implements Message ----------------------------------------------

  inline CheckRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckRequest& from);
  void MergeFrom(const CheckRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .istio.mixer.v1.Attributes attributes = 1;
  bool has_attributes() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 1;
  const ::istio::mixer::v1::Attributes& attributes() const;
  ::istio::mixer::v1::Attributes* mutable_attributes();
  ::istio::mixer::v1::Attributes* release_attributes();
  void set_allocated_attributes(::istio::mixer::v1::Attributes* attributes);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.CheckRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::istio::mixer::v1::Attributes* attributes_;
  mutable int _cached_size_;
  friend struct  protobuf_mixer_2fv1_2fcheck_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:istio.mixer.v1.CheckResponse) */ {
 public:
  CheckResponse();
  virtual ~CheckResponse();

  CheckResponse(const CheckResponse& from);

  inline CheckResponse& operator=(const CheckResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckResponse& default_instance();

  static inline const CheckResponse* internal_default_instance() {
    return reinterpret_cast<const CheckResponse*>(
               &_CheckResponse_default_instance_);
  }

  void Swap(CheckResponse* other);

  // implements Message ----------------------------------------------

  inline CheckResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckResponse& from);
  void MergeFrom(const CheckResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .istio.mixer.v1.Attributes attributes = 1;
  bool has_attributes() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 1;
  const ::istio::mixer::v1::Attributes& attributes() const;
  ::istio::mixer::v1::Attributes* mutable_attributes();
  ::istio::mixer::v1::Attributes* release_attributes();
  void set_allocated_attributes(::istio::mixer::v1::Attributes* attributes);

  // .google.protobuf.Duration expiration = 2;
  bool has_expiration() const;
  void clear_expiration();
  static const int kExpirationFieldNumber = 2;
  const ::google::protobuf::Duration& expiration() const;
  ::google::protobuf::Duration* mutable_expiration();
  ::google::protobuf::Duration* release_expiration();
  void set_allocated_expiration(::google::protobuf::Duration* expiration);

  // @@protoc_insertion_point(class_scope:istio.mixer.v1.CheckResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::istio::mixer::v1::Attributes* attributes_;
  ::google::protobuf::Duration* expiration_;
  mutable int _cached_size_;
  friend struct  protobuf_mixer_2fv1_2fcheck_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckRequest

// .istio.mixer.v1.Attributes attributes = 1;
inline bool CheckRequest::has_attributes() const {
  return this != internal_default_instance() && attributes_ != NULL;
}
inline void CheckRequest::clear_attributes() {
  if (GetArenaNoVirtual() == NULL && attributes_ != NULL) delete attributes_;
  attributes_ = NULL;
}
inline const ::istio::mixer::v1::Attributes& CheckRequest::attributes() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckRequest.attributes)
  return attributes_ != NULL ? *attributes_
                         : *::istio::mixer::v1::Attributes::internal_default_instance();
}
inline ::istio::mixer::v1::Attributes* CheckRequest::mutable_attributes() {
  
  if (attributes_ == NULL) {
    attributes_ = new ::istio::mixer::v1::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckRequest.attributes)
  return attributes_;
}
inline ::istio::mixer::v1::Attributes* CheckRequest::release_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckRequest.attributes)
  
  ::istio::mixer::v1::Attributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline void CheckRequest::set_allocated_attributes(::istio::mixer::v1::Attributes* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckRequest.attributes)
}

// -------------------------------------------------------------------

// CheckResponse

// .istio.mixer.v1.Attributes attributes = 1;
inline bool CheckResponse::has_attributes() const {
  return this != internal_default_instance() && attributes_ != NULL;
}
inline void CheckResponse::clear_attributes() {
  if (GetArenaNoVirtual() == NULL && attributes_ != NULL) delete attributes_;
  attributes_ = NULL;
}
inline const ::istio::mixer::v1::Attributes& CheckResponse::attributes() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckResponse.attributes)
  return attributes_ != NULL ? *attributes_
                         : *::istio::mixer::v1::Attributes::internal_default_instance();
}
inline ::istio::mixer::v1::Attributes* CheckResponse::mutable_attributes() {
  
  if (attributes_ == NULL) {
    attributes_ = new ::istio::mixer::v1::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckResponse.attributes)
  return attributes_;
}
inline ::istio::mixer::v1::Attributes* CheckResponse::release_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckResponse.attributes)
  
  ::istio::mixer::v1::Attributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline void CheckResponse::set_allocated_attributes(::istio::mixer::v1::Attributes* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckResponse.attributes)
}

// .google.protobuf.Duration expiration = 2;
inline bool CheckResponse::has_expiration() const {
  return this != internal_default_instance() && expiration_ != NULL;
}
inline void CheckResponse::clear_expiration() {
  if (GetArenaNoVirtual() == NULL && expiration_ != NULL) delete expiration_;
  expiration_ = NULL;
}
inline const ::google::protobuf::Duration& CheckResponse::expiration() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckResponse.expiration)
  return expiration_ != NULL ? *expiration_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* CheckResponse::mutable_expiration() {
  
  if (expiration_ == NULL) {
    expiration_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckResponse.expiration)
  return expiration_;
}
inline ::google::protobuf::Duration* CheckResponse::release_expiration() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckResponse.expiration)
  
  ::google::protobuf::Duration* temp = expiration_;
  expiration_ = NULL;
  return temp;
}
inline void CheckResponse::set_allocated_expiration(::google::protobuf::Duration* expiration) {
  delete expiration_;
  if (expiration != NULL && expiration->GetArena() != NULL) {
    ::google::protobuf::Duration* new_expiration = new ::google::protobuf::Duration;
    new_expiration->CopyFrom(*expiration);
    expiration = new_expiration;
  }
  expiration_ = expiration;
  if (expiration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckResponse.expiration)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v1
}  // namespace mixer
}  // namespace istio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mixer_2fv1_2fcheck_2eproto__INCLUDED
