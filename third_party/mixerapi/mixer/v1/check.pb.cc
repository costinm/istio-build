// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mixer/v1/check.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mixer/v1/check.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace istio {
namespace mixer {
namespace v1 {
class CheckRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckRequest> {
} _CheckRequest_default_instance_;
class CheckResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckResponse> {
} _CheckResponse_default_instance_;

namespace protobuf_mixer_2fv1_2fcheck_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRequest, attributes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponse, attributes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckResponse, expiration_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CheckRequest)},
  { 5, -1, sizeof(CheckResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mixer/v1/check.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _CheckRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CheckResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  ::istio::mixer::v1::protobuf_mixer_2fv1_2fattributes_2eproto::InitDefaults();
  _CheckRequest_default_instance_.DefaultConstruct();
  _CheckResponse_default_instance_.DefaultConstruct();
  _CheckRequest_default_instance_.get_mutable()->attributes_ = const_cast< ::istio::mixer::v1::Attributes*>(
      ::istio::mixer::v1::Attributes::internal_default_instance());
  _CheckResponse_default_instance_.get_mutable()->attributes_ = const_cast< ::istio::mixer::v1::Attributes*>(
      ::istio::mixer::v1::Attributes::internal_default_instance());
  _CheckResponse_default_instance_.get_mutable()->expiration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024mixer/v1/check.proto\022\016istio.mixer.v1\032\036"
      "google/protobuf/duration.proto\032\031mixer/v1"
      "/attributes.proto\">\n\014CheckRequest\022.\n\natt"
      "ributes\030\001 \001(\0132\032.istio.mixer.v1.Attribute"
      "s\"n\n\rCheckResponse\022.\n\nattributes\030\001 \001(\0132\032"
      ".istio.mixer.v1.Attributes\022-\n\nexpiration"
      "\030\002 \001(\0132\031.google.protobuf.Durationb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mixer/v1/check.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::istio::mixer::v1::protobuf_mixer_2fv1_2fattributes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mixer_2fv1_2fcheck_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckRequest::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckRequest::CheckRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mixer_2fv1_2fcheck_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.mixer.v1.CheckRequest)
}
CheckRequest::CheckRequest(const CheckRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attributes()) {
    attributes_ = new ::istio::mixer::v1::Attributes(*from.attributes_);
  } else {
    attributes_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.mixer.v1.CheckRequest)
}

void CheckRequest::SharedCtor() {
  attributes_ = NULL;
  _cached_size_ = 0;
}

CheckRequest::~CheckRequest() {
  // @@protoc_insertion_point(destructor:istio.mixer.v1.CheckRequest)
  SharedDtor();
}

void CheckRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete attributes_;
  }
}

void CheckRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckRequest::descriptor() {
  protobuf_mixer_2fv1_2fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mixer_2fv1_2fcheck_2eproto::file_level_metadata[0].descriptor;
}

const CheckRequest& CheckRequest::default_instance() {
  protobuf_mixer_2fv1_2fcheck_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckRequest* CheckRequest::New(::google::protobuf::Arena* arena) const {
  CheckRequest* n = new CheckRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.mixer.v1.CheckRequest)
  if (GetArenaNoVirtual() == NULL && attributes_ != NULL) {
    delete attributes_;
  }
  attributes_ = NULL;
}

bool CheckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.mixer.v1.CheckRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.mixer.v1.Attributes attributes = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.mixer.v1.CheckRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.mixer.v1.CheckRequest)
  return false;
#undef DO_
}

void CheckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.mixer.v1.CheckRequest)
  // .istio.mixer.v1.Attributes attributes = 1;
  if (this->has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->attributes_, output);
  }

  // @@protoc_insertion_point(serialize_end:istio.mixer.v1.CheckRequest)
}

::google::protobuf::uint8* CheckRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.mixer.v1.CheckRequest)
  // .istio.mixer.v1.Attributes attributes = 1;
  if (this->has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->attributes_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:istio.mixer.v1.CheckRequest)
  return target;
}

size_t CheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.mixer.v1.CheckRequest)
  size_t total_size = 0;

  // .istio.mixer.v1.Attributes attributes = 1;
  if (this->has_attributes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->attributes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.mixer.v1.CheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.mixer.v1.CheckRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.mixer.v1.CheckRequest)
    MergeFrom(*source);
  }
}

void CheckRequest::MergeFrom(const CheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.mixer.v1.CheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attributes()) {
    mutable_attributes()->::istio::mixer::v1::Attributes::MergeFrom(from.attributes());
  }
}

void CheckRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.mixer.v1.CheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckRequest::CopyFrom(const CheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.mixer.v1.CheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRequest::IsInitialized() const {
  return true;
}

void CheckRequest::Swap(CheckRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckRequest::InternalSwap(CheckRequest* other) {
  std::swap(attributes_, other->attributes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckRequest::GetMetadata() const {
  protobuf_mixer_2fv1_2fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mixer_2fv1_2fcheck_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckRequest

// .istio.mixer.v1.Attributes attributes = 1;
bool CheckRequest::has_attributes() const {
  return this != internal_default_instance() && attributes_ != NULL;
}
void CheckRequest::clear_attributes() {
  if (GetArenaNoVirtual() == NULL && attributes_ != NULL) delete attributes_;
  attributes_ = NULL;
}
const ::istio::mixer::v1::Attributes& CheckRequest::attributes() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckRequest.attributes)
  return attributes_ != NULL ? *attributes_
                         : *::istio::mixer::v1::Attributes::internal_default_instance();
}
::istio::mixer::v1::Attributes* CheckRequest::mutable_attributes() {
  
  if (attributes_ == NULL) {
    attributes_ = new ::istio::mixer::v1::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckRequest.attributes)
  return attributes_;
}
::istio::mixer::v1::Attributes* CheckRequest::release_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckRequest.attributes)
  
  ::istio::mixer::v1::Attributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
void CheckRequest::set_allocated_attributes(::istio::mixer::v1::Attributes* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckRequest.attributes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckResponse::kAttributesFieldNumber;
const int CheckResponse::kExpirationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckResponse::CheckResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mixer_2fv1_2fcheck_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:istio.mixer.v1.CheckResponse)
}
CheckResponse::CheckResponse(const CheckResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attributes()) {
    attributes_ = new ::istio::mixer::v1::Attributes(*from.attributes_);
  } else {
    attributes_ = NULL;
  }
  if (from.has_expiration()) {
    expiration_ = new ::google::protobuf::Duration(*from.expiration_);
  } else {
    expiration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:istio.mixer.v1.CheckResponse)
}

void CheckResponse::SharedCtor() {
  ::memset(&attributes_, 0, reinterpret_cast<char*>(&expiration_) -
    reinterpret_cast<char*>(&attributes_) + sizeof(expiration_));
  _cached_size_ = 0;
}

CheckResponse::~CheckResponse() {
  // @@protoc_insertion_point(destructor:istio.mixer.v1.CheckResponse)
  SharedDtor();
}

void CheckResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete attributes_;
  }
  if (this != internal_default_instance()) {
    delete expiration_;
  }
}

void CheckResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckResponse::descriptor() {
  protobuf_mixer_2fv1_2fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mixer_2fv1_2fcheck_2eproto::file_level_metadata[1].descriptor;
}

const CheckResponse& CheckResponse::default_instance() {
  protobuf_mixer_2fv1_2fcheck_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckResponse* CheckResponse::New(::google::protobuf::Arena* arena) const {
  CheckResponse* n = new CheckResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:istio.mixer.v1.CheckResponse)
  if (GetArenaNoVirtual() == NULL && attributes_ != NULL) {
    delete attributes_;
  }
  attributes_ = NULL;
  if (GetArenaNoVirtual() == NULL && expiration_ != NULL) {
    delete expiration_;
  }
  expiration_ = NULL;
}

bool CheckResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:istio.mixer.v1.CheckResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .istio.mixer.v1.Attributes attributes = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration expiration = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expiration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:istio.mixer.v1.CheckResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:istio.mixer.v1.CheckResponse)
  return false;
#undef DO_
}

void CheckResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:istio.mixer.v1.CheckResponse)
  // .istio.mixer.v1.Attributes attributes = 1;
  if (this->has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->attributes_, output);
  }

  // .google.protobuf.Duration expiration = 2;
  if (this->has_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->expiration_, output);
  }

  // @@protoc_insertion_point(serialize_end:istio.mixer.v1.CheckResponse)
}

::google::protobuf::uint8* CheckResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:istio.mixer.v1.CheckResponse)
  // .istio.mixer.v1.Attributes attributes = 1;
  if (this->has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->attributes_, false, target);
  }

  // .google.protobuf.Duration expiration = 2;
  if (this->has_expiration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->expiration_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:istio.mixer.v1.CheckResponse)
  return target;
}

size_t CheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:istio.mixer.v1.CheckResponse)
  size_t total_size = 0;

  // .istio.mixer.v1.Attributes attributes = 1;
  if (this->has_attributes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->attributes_);
  }

  // .google.protobuf.Duration expiration = 2;
  if (this->has_expiration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->expiration_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:istio.mixer.v1.CheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:istio.mixer.v1.CheckResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:istio.mixer.v1.CheckResponse)
    MergeFrom(*source);
  }
}

void CheckResponse::MergeFrom(const CheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:istio.mixer.v1.CheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_attributes()) {
    mutable_attributes()->::istio::mixer::v1::Attributes::MergeFrom(from.attributes());
  }
  if (from.has_expiration()) {
    mutable_expiration()->::google::protobuf::Duration::MergeFrom(from.expiration());
  }
}

void CheckResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:istio.mixer.v1.CheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckResponse::CopyFrom(const CheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:istio.mixer.v1.CheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponse::IsInitialized() const {
  return true;
}

void CheckResponse::Swap(CheckResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckResponse::InternalSwap(CheckResponse* other) {
  std::swap(attributes_, other->attributes_);
  std::swap(expiration_, other->expiration_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckResponse::GetMetadata() const {
  protobuf_mixer_2fv1_2fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mixer_2fv1_2fcheck_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckResponse

// .istio.mixer.v1.Attributes attributes = 1;
bool CheckResponse::has_attributes() const {
  return this != internal_default_instance() && attributes_ != NULL;
}
void CheckResponse::clear_attributes() {
  if (GetArenaNoVirtual() == NULL && attributes_ != NULL) delete attributes_;
  attributes_ = NULL;
}
const ::istio::mixer::v1::Attributes& CheckResponse::attributes() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckResponse.attributes)
  return attributes_ != NULL ? *attributes_
                         : *::istio::mixer::v1::Attributes::internal_default_instance();
}
::istio::mixer::v1::Attributes* CheckResponse::mutable_attributes() {
  
  if (attributes_ == NULL) {
    attributes_ = new ::istio::mixer::v1::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckResponse.attributes)
  return attributes_;
}
::istio::mixer::v1::Attributes* CheckResponse::release_attributes() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckResponse.attributes)
  
  ::istio::mixer::v1::Attributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
void CheckResponse::set_allocated_attributes(::istio::mixer::v1::Attributes* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckResponse.attributes)
}

// .google.protobuf.Duration expiration = 2;
bool CheckResponse::has_expiration() const {
  return this != internal_default_instance() && expiration_ != NULL;
}
void CheckResponse::clear_expiration() {
  if (GetArenaNoVirtual() == NULL && expiration_ != NULL) delete expiration_;
  expiration_ = NULL;
}
const ::google::protobuf::Duration& CheckResponse::expiration() const {
  // @@protoc_insertion_point(field_get:istio.mixer.v1.CheckResponse.expiration)
  return expiration_ != NULL ? *expiration_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* CheckResponse::mutable_expiration() {
  
  if (expiration_ == NULL) {
    expiration_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:istio.mixer.v1.CheckResponse.expiration)
  return expiration_;
}
::google::protobuf::Duration* CheckResponse::release_expiration() {
  // @@protoc_insertion_point(field_release:istio.mixer.v1.CheckResponse.expiration)
  
  ::google::protobuf::Duration* temp = expiration_;
  expiration_ = NULL;
  return temp;
}
void CheckResponse::set_allocated_expiration(::google::protobuf::Duration* expiration) {
  delete expiration_;
  if (expiration != NULL && expiration->GetArena() != NULL) {
    ::google::protobuf::Duration* new_expiration = new ::google::protobuf::Duration;
    new_expiration->CopyFrom(*expiration);
    expiration = new_expiration;
  }
  expiration_ = expiration;
  if (expiration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:istio.mixer.v1.CheckResponse.expiration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace mixer
}  // namespace istio

// @@protoc_insertion_point(global_scope)
