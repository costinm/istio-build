// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/rds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/rds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
class WeightedCluster_ClusterWeightDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightedCluster_ClusterWeight>
     _instance;
} _WeightedCluster_ClusterWeight_default_instance_;
class WeightedClusterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightedCluster>
     _instance;
} _WeightedCluster_default_instance_;
class RouteMatchDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RouteMatch>
     _instance;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr regex_;
} _RouteMatch_default_instance_;
class CorsPolicyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CorsPolicy>
     _instance;
} _CorsPolicy_default_instance_;
class RouteAction_RetryPolicyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RouteAction_RetryPolicy>
     _instance;
} _RouteAction_RetryPolicy_default_instance_;
class RouteAction_RequestMirrorPolicyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RouteAction_RequestMirrorPolicy>
     _instance;
} _RouteAction_RequestMirrorPolicy_default_instance_;
class RouteAction_HashPolicy_HeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RouteAction_HashPolicy_Header>
     _instance;
} _RouteAction_HashPolicy_Header_default_instance_;
class RouteAction_HashPolicy_CookieDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RouteAction_HashPolicy_Cookie>
     _instance;
} _RouteAction_HashPolicy_Cookie_default_instance_;
class RouteAction_HashPolicy_ConnectionPropertiesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RouteAction_HashPolicy_ConnectionProperties>
     _instance;
} _RouteAction_HashPolicy_ConnectionProperties_default_instance_;
class RouteAction_HashPolicyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RouteAction_HashPolicy>
     _instance;
  const ::envoy::api::v2::RouteAction_HashPolicy_Header* header_;
  const ::envoy::api::v2::RouteAction_HashPolicy_Cookie* cookie_;
  const ::envoy::api::v2::RouteAction_HashPolicy_ConnectionProperties* connection_properties_;
} _RouteAction_HashPolicy_default_instance_;
class RouteActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RouteAction>
     _instance;
  ::google::protobuf::internal::ArenaStringPtr cluster_;
  ::google::protobuf::internal::ArenaStringPtr cluster_header_;
  const ::envoy::api::v2::WeightedCluster* weighted_clusters_;
  ::google::protobuf::internal::ArenaStringPtr host_rewrite_;
  const ::google::protobuf::BoolValue* auto_host_rewrite_;
} _RouteAction_default_instance_;
class RedirectActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RedirectAction>
     _instance;
} _RedirectAction_default_instance_;
class DecoratorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Decorator>
     _instance;
} _Decorator_default_instance_;
class RouteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Route>
     _instance;
  const ::envoy::api::v2::RouteAction* route_;
  const ::envoy::api::v2::RedirectAction* redirect_;
} _Route_default_instance_;
class VirtualClusterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VirtualCluster>
     _instance;
} _VirtualCluster_default_instance_;
class RateLimit_Action_SourceClusterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RateLimit_Action_SourceCluster>
     _instance;
} _RateLimit_Action_SourceCluster_default_instance_;
class RateLimit_Action_DestinationClusterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RateLimit_Action_DestinationCluster>
     _instance;
} _RateLimit_Action_DestinationCluster_default_instance_;
class RateLimit_Action_RequestHeadersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RateLimit_Action_RequestHeaders>
     _instance;
} _RateLimit_Action_RequestHeaders_default_instance_;
class RateLimit_Action_RemoteAddressDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RateLimit_Action_RemoteAddress>
     _instance;
} _RateLimit_Action_RemoteAddress_default_instance_;
class RateLimit_Action_GenericKeyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RateLimit_Action_GenericKey>
     _instance;
} _RateLimit_Action_GenericKey_default_instance_;
class RateLimit_Action_HeaderValueMatchDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RateLimit_Action_HeaderValueMatch>
     _instance;
} _RateLimit_Action_HeaderValueMatch_default_instance_;
class RateLimit_ActionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RateLimit_Action>
     _instance;
  const ::envoy::api::v2::RateLimit_Action_SourceCluster* source_cluster_;
  const ::envoy::api::v2::RateLimit_Action_DestinationCluster* destination_cluster_;
  const ::envoy::api::v2::RateLimit_Action_RequestHeaders* request_headers_;
  const ::envoy::api::v2::RateLimit_Action_RemoteAddress* remote_address_;
  const ::envoy::api::v2::RateLimit_Action_GenericKey* generic_key_;
  const ::envoy::api::v2::RateLimit_Action_HeaderValueMatch* header_value_match_;
} _RateLimit_Action_default_instance_;
class RateLimitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RateLimit>
     _instance;
} _RateLimit_default_instance_;
class HeaderMatcherDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HeaderMatcher>
     _instance;
} _HeaderMatcher_default_instance_;
class VirtualHostDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VirtualHost>
     _instance;
} _VirtualHost_default_instance_;
class RouteConfigurationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RouteConfiguration>
     _instance;
} _RouteConfiguration_default_instance_;

namespace protobuf_api_2frds_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[26];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedCluster_ClusterWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedCluster_ClusterWeight, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedCluster_ClusterWeight, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedCluster_ClusterWeight, metadata_match_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedCluster, clusters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedCluster, runtime_key_prefix_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMatch, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(RouteMatchDefaultTypeInternal, prefix_),
  offsetof(RouteMatchDefaultTypeInternal, path_),
  offsetof(RouteMatchDefaultTypeInternal, regex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMatch, case_sensitive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMatch, runtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMatch, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMatch, path_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorsPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorsPolicy, allow_origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorsPolicy, allow_methods_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorsPolicy, allow_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorsPolicy, expose_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorsPolicy, max_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorsPolicy, allow_credentials_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorsPolicy, enabled_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_RetryPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_RetryPolicy, retry_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_RetryPolicy, num_retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_RetryPolicy, per_try_timeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_RequestMirrorPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_RequestMirrorPolicy, cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_RequestMirrorPolicy, runtime_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_HashPolicy_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_HashPolicy_Header, header_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_HashPolicy_Cookie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_HashPolicy_Cookie, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_HashPolicy_Cookie, ttl_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_HashPolicy_ConnectionProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_HashPolicy_ConnectionProperties, source_ip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_HashPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_HashPolicy, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(RouteAction_HashPolicyDefaultTypeInternal, header_),
  offsetof(RouteAction_HashPolicyDefaultTypeInternal, cookie_),
  offsetof(RouteAction_HashPolicyDefaultTypeInternal, connection_properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction_HashPolicy, policy_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(RouteActionDefaultTypeInternal, cluster_),
  offsetof(RouteActionDefaultTypeInternal, cluster_header_),
  offsetof(RouteActionDefaultTypeInternal, weighted_clusters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, metadata_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, prefix_rewrite_),
  offsetof(RouteActionDefaultTypeInternal, host_rewrite_),
  offsetof(RouteActionDefaultTypeInternal, auto_host_rewrite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, retry_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, request_mirror_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, request_headers_to_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, rate_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, include_vh_rate_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, hash_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, use_websocket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, cors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, cluster_specifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteAction, host_rewrite_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectAction, host_redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectAction, path_redirect_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decorator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decorator, operation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, match_),
  offsetof(RouteDefaultTypeInternal, route_),
  offsetof(RouteDefaultTypeInternal, redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, decorator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, action_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualCluster, pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualCluster, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualCluster, method_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action_SourceCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action_DestinationCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action_RequestHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action_RequestHeaders, header_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action_RequestHeaders, descriptor_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action_RemoteAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action_GenericKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action_GenericKey, descriptor_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action_HeaderValueMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action_HeaderValueMatch, descriptor_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action_HeaderValueMatch, expect_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action_HeaderValueMatch, headers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(RateLimit_ActionDefaultTypeInternal, source_cluster_),
  offsetof(RateLimit_ActionDefaultTypeInternal, destination_cluster_),
  offsetof(RateLimit_ActionDefaultTypeInternal, request_headers_),
  offsetof(RateLimit_ActionDefaultTypeInternal, remote_address_),
  offsetof(RateLimit_ActionDefaultTypeInternal, generic_key_),
  offsetof(RateLimit_ActionDefaultTypeInternal, header_value_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_Action, action_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, disable_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, actions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMatcher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMatcher, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMatcher, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMatcher, regex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, domains_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, routes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, require_tls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, virtual_clusters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, rate_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, request_headers_to_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, cors_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, virtual_hosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, internal_only_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, response_headers_to_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, response_headers_to_remove_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, request_headers_to_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, validate_clusters_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(WeightedCluster_ClusterWeight)},
  { 8, -1, sizeof(WeightedCluster)},
  { 15, -1, sizeof(RouteMatch)},
  { 27, -1, sizeof(CorsPolicy)},
  { 39, -1, sizeof(RouteAction_RetryPolicy)},
  { 47, -1, sizeof(RouteAction_RequestMirrorPolicy)},
  { 54, -1, sizeof(RouteAction_HashPolicy_Header)},
  { 60, -1, sizeof(RouteAction_HashPolicy_Cookie)},
  { 67, -1, sizeof(RouteAction_HashPolicy_ConnectionProperties)},
  { 73, -1, sizeof(RouteAction_HashPolicy)},
  { 82, -1, sizeof(RouteAction)},
  { 106, -1, sizeof(RedirectAction)},
  { 113, -1, sizeof(Decorator)},
  { 119, -1, sizeof(Route)},
  { 130, -1, sizeof(VirtualCluster)},
  { 138, -1, sizeof(RateLimit_Action_SourceCluster)},
  { 143, -1, sizeof(RateLimit_Action_DestinationCluster)},
  { 148, -1, sizeof(RateLimit_Action_RequestHeaders)},
  { 155, -1, sizeof(RateLimit_Action_RemoteAddress)},
  { 160, -1, sizeof(RateLimit_Action_GenericKey)},
  { 166, -1, sizeof(RateLimit_Action_HeaderValueMatch)},
  { 174, -1, sizeof(RateLimit_Action)},
  { 186, -1, sizeof(RateLimit)},
  { 194, -1, sizeof(HeaderMatcher)},
  { 202, -1, sizeof(VirtualHost)},
  { 215, -1, sizeof(RouteConfiguration)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedCluster_ClusterWeight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedCluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouteMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CorsPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouteAction_RetryPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouteAction_RequestMirrorPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouteAction_HashPolicy_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouteAction_HashPolicy_Cookie_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouteAction_HashPolicy_ConnectionProperties_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouteAction_HashPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouteAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedirectAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Decorator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Route_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VirtualCluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_Action_SourceCluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_Action_DestinationCluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_Action_RequestHeaders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_Action_RemoteAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_Action_GenericKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_Action_HeaderValueMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_Action_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeaderMatcher_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VirtualHost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouteConfiguration_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/rds.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 26);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2fdiscovery_2eproto::InitDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  _WeightedCluster_ClusterWeight_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightedCluster_ClusterWeight_default_instance_);_WeightedCluster_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightedCluster_default_instance_);_RouteMatch_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RouteMatch_default_instance_);_CorsPolicy_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CorsPolicy_default_instance_);_RouteAction_RetryPolicy_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RouteAction_RetryPolicy_default_instance_);_RouteAction_RequestMirrorPolicy_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RouteAction_RequestMirrorPolicy_default_instance_);_RouteAction_HashPolicy_Header_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RouteAction_HashPolicy_Header_default_instance_);_RouteAction_HashPolicy_Cookie_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RouteAction_HashPolicy_Cookie_default_instance_);_RouteAction_HashPolicy_ConnectionProperties_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RouteAction_HashPolicy_ConnectionProperties_default_instance_);_RouteAction_HashPolicy_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RouteAction_HashPolicy_default_instance_);_RouteAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RouteAction_default_instance_);_RedirectAction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RedirectAction_default_instance_);_Decorator_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Decorator_default_instance_);_Route_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Route_default_instance_);_VirtualCluster_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VirtualCluster_default_instance_);_RateLimit_Action_SourceCluster_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RateLimit_Action_SourceCluster_default_instance_);_RateLimit_Action_DestinationCluster_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RateLimit_Action_DestinationCluster_default_instance_);_RateLimit_Action_RequestHeaders_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RateLimit_Action_RequestHeaders_default_instance_);_RateLimit_Action_RemoteAddress_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RateLimit_Action_RemoteAddress_default_instance_);_RateLimit_Action_GenericKey_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RateLimit_Action_GenericKey_default_instance_);_RateLimit_Action_HeaderValueMatch_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RateLimit_Action_HeaderValueMatch_default_instance_);_RateLimit_Action_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RateLimit_Action_default_instance_);_RateLimit_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RateLimit_default_instance_);_HeaderMatcher_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HeaderMatcher_default_instance_);_VirtualHost_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VirtualHost_default_instance_);_RouteConfiguration_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RouteConfiguration_default_instance_);_WeightedCluster_ClusterWeight_default_instance_._instance.get_mutable()->weight_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _WeightedCluster_ClusterWeight_default_instance_._instance.get_mutable()->metadata_match_ = const_cast< ::envoy::api::v2::Metadata*>(
      ::envoy::api::v2::Metadata::internal_default_instance());
  _RouteMatch_default_instance_.prefix_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RouteMatch_default_instance_.path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RouteMatch_default_instance_.regex_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RouteMatch_default_instance_._instance.get_mutable()->case_sensitive_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _RouteMatch_default_instance_._instance.get_mutable()->runtime_ = const_cast< ::envoy::api::v2::RuntimeUInt32*>(
      ::envoy::api::v2::RuntimeUInt32::internal_default_instance());
  _CorsPolicy_default_instance_._instance.get_mutable()->allow_credentials_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _CorsPolicy_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _RouteAction_RetryPolicy_default_instance_._instance.get_mutable()->num_retries_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _RouteAction_RetryPolicy_default_instance_._instance.get_mutable()->per_try_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _RouteAction_HashPolicy_Cookie_default_instance_._instance.get_mutable()->ttl_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _RouteAction_HashPolicy_default_instance_.header_ = const_cast< ::envoy::api::v2::RouteAction_HashPolicy_Header*>(
      ::envoy::api::v2::RouteAction_HashPolicy_Header::internal_default_instance());
  _RouteAction_HashPolicy_default_instance_.cookie_ = const_cast< ::envoy::api::v2::RouteAction_HashPolicy_Cookie*>(
      ::envoy::api::v2::RouteAction_HashPolicy_Cookie::internal_default_instance());
  _RouteAction_HashPolicy_default_instance_.connection_properties_ = const_cast< ::envoy::api::v2::RouteAction_HashPolicy_ConnectionProperties*>(
      ::envoy::api::v2::RouteAction_HashPolicy_ConnectionProperties::internal_default_instance());
  _RouteAction_default_instance_.cluster_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RouteAction_default_instance_.cluster_header_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RouteAction_default_instance_.weighted_clusters_ = const_cast< ::envoy::api::v2::WeightedCluster*>(
      ::envoy::api::v2::WeightedCluster::internal_default_instance());
  _RouteAction_default_instance_._instance.get_mutable()->metadata_match_ = const_cast< ::envoy::api::v2::Metadata*>(
      ::envoy::api::v2::Metadata::internal_default_instance());
  _RouteAction_default_instance_.host_rewrite_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RouteAction_default_instance_.auto_host_rewrite_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _RouteAction_default_instance_._instance.get_mutable()->timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _RouteAction_default_instance_._instance.get_mutable()->retry_policy_ = const_cast< ::envoy::api::v2::RouteAction_RetryPolicy*>(
      ::envoy::api::v2::RouteAction_RetryPolicy::internal_default_instance());
  _RouteAction_default_instance_._instance.get_mutable()->request_mirror_policy_ = const_cast< ::envoy::api::v2::RouteAction_RequestMirrorPolicy*>(
      ::envoy::api::v2::RouteAction_RequestMirrorPolicy::internal_default_instance());
  _RouteAction_default_instance_._instance.get_mutable()->include_vh_rate_limits_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _RouteAction_default_instance_._instance.get_mutable()->use_websocket_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _RouteAction_default_instance_._instance.get_mutable()->cors_ = const_cast< ::envoy::api::v2::CorsPolicy*>(
      ::envoy::api::v2::CorsPolicy::internal_default_instance());
  _Route_default_instance_._instance.get_mutable()->match_ = const_cast< ::envoy::api::v2::RouteMatch*>(
      ::envoy::api::v2::RouteMatch::internal_default_instance());
  _Route_default_instance_.route_ = const_cast< ::envoy::api::v2::RouteAction*>(
      ::envoy::api::v2::RouteAction::internal_default_instance());
  _Route_default_instance_.redirect_ = const_cast< ::envoy::api::v2::RedirectAction*>(
      ::envoy::api::v2::RedirectAction::internal_default_instance());
  _Route_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::envoy::api::v2::Metadata*>(
      ::envoy::api::v2::Metadata::internal_default_instance());
  _Route_default_instance_._instance.get_mutable()->decorator_ = const_cast< ::envoy::api::v2::Decorator*>(
      ::envoy::api::v2::Decorator::internal_default_instance());
  _RateLimit_Action_HeaderValueMatch_default_instance_._instance.get_mutable()->expect_match_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _RateLimit_Action_default_instance_.source_cluster_ = const_cast< ::envoy::api::v2::RateLimit_Action_SourceCluster*>(
      ::envoy::api::v2::RateLimit_Action_SourceCluster::internal_default_instance());
  _RateLimit_Action_default_instance_.destination_cluster_ = const_cast< ::envoy::api::v2::RateLimit_Action_DestinationCluster*>(
      ::envoy::api::v2::RateLimit_Action_DestinationCluster::internal_default_instance());
  _RateLimit_Action_default_instance_.request_headers_ = const_cast< ::envoy::api::v2::RateLimit_Action_RequestHeaders*>(
      ::envoy::api::v2::RateLimit_Action_RequestHeaders::internal_default_instance());
  _RateLimit_Action_default_instance_.remote_address_ = const_cast< ::envoy::api::v2::RateLimit_Action_RemoteAddress*>(
      ::envoy::api::v2::RateLimit_Action_RemoteAddress::internal_default_instance());
  _RateLimit_Action_default_instance_.generic_key_ = const_cast< ::envoy::api::v2::RateLimit_Action_GenericKey*>(
      ::envoy::api::v2::RateLimit_Action_GenericKey::internal_default_instance());
  _RateLimit_Action_default_instance_.header_value_match_ = const_cast< ::envoy::api::v2::RateLimit_Action_HeaderValueMatch*>(
      ::envoy::api::v2::RateLimit_Action_HeaderValueMatch::internal_default_instance());
  _RateLimit_default_instance_._instance.get_mutable()->stage_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _HeaderMatcher_default_instance_._instance.get_mutable()->regex_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _VirtualHost_default_instance_._instance.get_mutable()->cors_ = const_cast< ::envoy::api::v2::CorsPolicy*>(
      ::envoy::api::v2::CorsPolicy::internal_default_instance());
  _RouteConfiguration_default_instance_._instance.get_mutable()->validate_clusters_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rapi/rds.proto\022\014envoy.api.v2\032\016api/base."
      "proto\032\023api/discovery.proto\032\034google/api/a"
      "nnotations.proto\032\036google/protobuf/durati"
      "on.proto\032\036google/protobuf/wrappers.proto"
      "\"\351\001\n\017WeightedCluster\022=\n\010clusters\030\001 \003(\0132+"
      ".envoy.api.v2.WeightedCluster.ClusterWei"
      "ght\022\032\n\022runtime_key_prefix\030\002 \001(\t\032{\n\rClust"
      "erWeight\022\014\n\004name\030\001 \001(\t\022,\n\006weight\030\002 \001(\0132\034"
      ".google.protobuf.UInt32Value\022.\n\016metadata"
      "_match\030\003 \001(\0132\026.envoy.api.v2.Metadata\"\341\001\n"
      "\nRouteMatch\022\020\n\006prefix\030\001 \001(\tH\000\022\016\n\004path\030\002 "
      "\001(\tH\000\022\017\n\005regex\030\003 \001(\tH\000\0222\n\016case_sensitive"
      "\030\004 \001(\0132\032.google.protobuf.BoolValue\022,\n\007ru"
      "ntime\030\005 \001(\0132\033.envoy.api.v2.RuntimeUInt32"
      "\022,\n\007headers\030\006 \003(\0132\033.envoy.api.v2.HeaderM"
      "atcherB\020\n\016path_specifier\"\335\001\n\nCorsPolicy\022"
      "\024\n\014allow_origin\030\001 \003(\t\022\025\n\rallow_methods\030\002"
      " \001(\t\022\025\n\rallow_headers\030\003 \001(\t\022\026\n\016expose_he"
      "aders\030\004 \001(\t\022\017\n\007max_age\030\005 \001(\t\0225\n\021allow_cr"
      "edentials\030\006 \001(\0132\032.google.protobuf.BoolVa"
      "lue\022+\n\007enabled\030\007 \001(\0132\032.google.protobuf.B"
      "oolValue\"\264\013\n\013RouteAction\022\021\n\007cluster\030\001 \001("
      "\tH\000\022\030\n\016cluster_header\030\002 \001(\tH\000\022:\n\021weighte"
      "d_clusters\030\003 \001(\0132\035.envoy.api.v2.Weighted"
      "ClusterH\000\022.\n\016metadata_match\030\004 \001(\0132\026.envo"
      "y.api.v2.Metadata\022\026\n\016prefix_rewrite\030\005 \001("
      "\t\022\026\n\014host_rewrite\030\006 \001(\tH\001\0227\n\021auto_host_r"
      "ewrite\030\007 \001(\0132\032.google.protobuf.BoolValue"
      "H\001\022*\n\007timeout\030\010 \001(\0132\031.google.protobuf.Du"
      "ration\022;\n\014retry_policy\030\t \001(\0132%.envoy.api"
      ".v2.RouteAction.RetryPolicy\022L\n\025request_m"
      "irror_policy\030\n \001(\0132-.envoy.api.v2.RouteA"
      "ction.RequestMirrorPolicy\022/\n\010priority\030\013 "
      "\001(\0162\035.envoy.api.v2.RoutingPriority\022\?\n\026re"
      "quest_headers_to_add\030\014 \003(\0132\037.envoy.api.v"
      "2.HeaderValueOption\022,\n\013rate_limits\030\r \003(\013"
      "2\027.envoy.api.v2.RateLimit\022:\n\026include_vh_"
      "rate_limits\030\016 \001(\0132\032.google.protobuf.Bool"
      "Value\0229\n\013hash_policy\030\017 \003(\0132$.envoy.api.v"
      "2.RouteAction.HashPolicy\0221\n\ruse_websocke"
      "t\030\020 \001(\0132\032.google.protobuf.BoolValue\022&\n\004c"
      "ors\030\021 \001(\0132\030.envoy.api.v2.CorsPolicy\032\206\001\n\013"
      "RetryPolicy\022\020\n\010retry_on\030\001 \001(\t\0221\n\013num_ret"
      "ries\030\002 \001(\0132\034.google.protobuf.UInt32Value"
      "\0222\n\017per_try_timeout\030\003 \001(\0132\031.google.proto"
      "buf.Duration\032;\n\023RequestMirrorPolicy\022\017\n\007c"
      "luster\030\001 \001(\t\022\023\n\013runtime_key\030\002 \001(\t\032\204\003\n\nHa"
      "shPolicy\022=\n\006header\030\001 \001(\0132+.envoy.api.v2."
      "RouteAction.HashPolicy.HeaderH\000\022=\n\006cooki"
      "e\030\002 \001(\0132+.envoy.api.v2.RouteAction.HashP"
      "olicy.CookieH\000\022Z\n\025connection_properties\030"
      "\003 \001(\01329.envoy.api.v2.RouteAction.HashPol"
      "icy.ConnectionPropertiesH\000\032\035\n\006Header\022\023\n\013"
      "header_name\030\001 \001(\t\032>\n\006Cookie\022\014\n\004name\030\001 \001("
      "\t\022&\n\003ttl\030\002 \001(\0132\031.google.protobuf.Duratio"
      "n\032)\n\024ConnectionProperties\022\021\n\tsource_ip\030\001"
      " \001(\010B\022\n\020policy_specifierB\023\n\021cluster_spec"
      "ifierB\030\n\026host_rewrite_specifier\">\n\016Redir"
      "ectAction\022\025\n\rhost_redirect\030\001 \001(\t\022\025\n\rpath"
      "_redirect\030\002 \001(\t\"\036\n\tDecorator\022\021\n\toperatio"
      "n\030\001 \001(\t\"\356\001\n\005Route\022\'\n\005match\030\001 \001(\0132\030.envoy"
      ".api.v2.RouteMatch\022*\n\005route\030\002 \001(\0132\031.envo"
      "y.api.v2.RouteActionH\000\0220\n\010redirect\030\003 \001(\013"
      "2\034.envoy.api.v2.RedirectActionH\000\022(\n\010meta"
      "data\030\004 \001(\0132\026.envoy.api.v2.Metadata\022*\n\tde"
      "corator\030\005 \001(\0132\027.envoy.api.v2.DecoratorB\010"
      "\n\006action\"\\\n\016VirtualCluster\022\017\n\007pattern\030\001 "
      "\001(\t\022\014\n\004name\030\002 \001(\t\022+\n\006method\030\003 \001(\0162\033.envo"
      "y.api.v2.RequestMethod\"\210\007\n\tRateLimit\022+\n\005"
      "stage\030\001 \001(\0132\034.google.protobuf.UInt32Valu"
      "e\022\023\n\013disable_key\030\002 \001(\t\022/\n\007actions\030\003 \003(\0132"
      "\036.envoy.api.v2.RateLimit.Action\032\207\006\n\006Acti"
      "on\022F\n\016source_cluster\030\001 \001(\0132,.envoy.api.v"
      "2.RateLimit.Action.SourceClusterH\000\022P\n\023de"
      "stination_cluster\030\002 \001(\01321.envoy.api.v2.R"
      "ateLimit.Action.DestinationClusterH\000\022H\n\017"
      "request_headers\030\003 \001(\0132-.envoy.api.v2.Rat"
      "eLimit.Action.RequestHeadersH\000\022F\n\016remote"
      "_address\030\004 \001(\0132,.envoy.api.v2.RateLimit."
      "Action.RemoteAddressH\000\022@\n\013generic_key\030\005 "
      "\001(\0132).envoy.api.v2.RateLimit.Action.Gene"
      "ricKeyH\000\022M\n\022header_value_match\030\006 \001(\0132/.e"
      "nvoy.api.v2.RateLimit.Action.HeaderValue"
      "MatchH\000\032\017\n\rSourceCluster\032\024\n\022DestinationC"
      "luster\032=\n\016RequestHeaders\022\023\n\013header_name\030"
      "\001 \001(\t\022\026\n\016descriptor_key\030\002 \001(\t\032\017\n\rRemoteA"
      "ddress\032&\n\nGenericKey\022\030\n\020descriptor_value"
      "\030\001 \001(\t\032\214\001\n\020HeaderValueMatch\022\030\n\020descripto"
      "r_value\030\001 \001(\t\0220\n\014expect_match\030\002 \001(\0132\032.go"
      "ogle.protobuf.BoolValue\022,\n\007headers\030\003 \003(\013"
      "2\033.envoy.api.v2.HeaderMatcherB\022\n\020action_"
      "specifier\"W\n\rHeaderMatcher\022\014\n\004name\030\001 \001(\t"
      "\022\r\n\005value\030\002 \001(\t\022)\n\005regex\030\003 \001(\0132\032.google."
      "protobuf.BoolValue\"\237\003\n\013VirtualHost\022\014\n\004na"
      "me\030\001 \001(\t\022\017\n\007domains\030\002 \003(\t\022#\n\006routes\030\003 \003("
      "\0132\023.envoy.api.v2.Route\022A\n\013require_tls\030\004 "
      "\001(\0162,.envoy.api.v2.VirtualHost.TlsRequir"
      "ementType\0226\n\020virtual_clusters\030\005 \003(\0132\034.en"
      "voy.api.v2.VirtualCluster\022,\n\013rate_limits"
      "\030\006 \003(\0132\027.envoy.api.v2.RateLimit\022\?\n\026reque"
      "st_headers_to_add\030\007 \003(\0132\037.envoy.api.v2.H"
      "eaderValueOption\022&\n\004cors\030\010 \001(\0132\030.envoy.a"
      "pi.v2.CorsPolicy\":\n\022TlsRequirementType\022\010"
      "\n\004NONE\020\000\022\021\n\rEXTERNAL_ONLY\020\001\022\007\n\003ALL\020\002\"\321\002\n"
      "\022RouteConfiguration\022\014\n\004name\030\001 \001(\t\0220\n\rvir"
      "tual_hosts\030\002 \003(\0132\031.envoy.api.v2.VirtualH"
      "ost\022\035\n\025internal_only_headers\030\003 \003(\t\022@\n\027re"
      "sponse_headers_to_add\030\004 \003(\0132\037.envoy.api."
      "v2.HeaderValueOption\022\"\n\032response_headers"
      "_to_remove\030\005 \003(\t\022\?\n\026request_headers_to_a"
      "dd\030\006 \003(\0132\037.envoy.api.v2.HeaderValueOptio"
      "n\0225\n\021validate_clusters\030\007 \001(\0132\032.google.pr"
      "otobuf.BoolValue2\337\001\n\025RouteDiscoveryServi"
      "ce\022U\n\014StreamRoutes\022\036.envoy.api.v2.Discov"
      "eryRequest\032\037.envoy.api.v2.DiscoveryRespo"
      "nse\"\000(\0010\001\022o\n\013FetchRoutes\022\036.envoy.api.v2."
      "DiscoveryRequest\032\037.envoy.api.v2.Discover"
      "yResponse\"\037\202\323\344\223\002\031\"\024/v2/discovery:routes:"
      "\001*b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4730);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/rds.proto", &protobuf_RegisterTypes);
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2fdiscovery_2eproto::AddDescriptors();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2frds_2eproto

const ::google::protobuf::EnumDescriptor* VirtualHost_TlsRequirementType_descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_enum_descriptors[0];
}
bool VirtualHost_TlsRequirementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VirtualHost_TlsRequirementType VirtualHost::NONE;
const VirtualHost_TlsRequirementType VirtualHost::EXTERNAL_ONLY;
const VirtualHost_TlsRequirementType VirtualHost::ALL;
const VirtualHost_TlsRequirementType VirtualHost::TlsRequirementType_MIN;
const VirtualHost_TlsRequirementType VirtualHost::TlsRequirementType_MAX;
const int VirtualHost::TlsRequirementType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedCluster_ClusterWeight::kNameFieldNumber;
const int WeightedCluster_ClusterWeight::kWeightFieldNumber;
const int WeightedCluster_ClusterWeight::kMetadataMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedCluster_ClusterWeight::WeightedCluster_ClusterWeight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.WeightedCluster.ClusterWeight)
}
WeightedCluster_ClusterWeight::WeightedCluster_ClusterWeight(const WeightedCluster_ClusterWeight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_weight()) {
    weight_ = new ::google::protobuf::UInt32Value(*from.weight_);
  } else {
    weight_ = NULL;
  }
  if (from.has_metadata_match()) {
    metadata_match_ = new ::envoy::api::v2::Metadata(*from.metadata_match_);
  } else {
    metadata_match_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.WeightedCluster.ClusterWeight)
}

void WeightedCluster_ClusterWeight::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_match_) -
      reinterpret_cast<char*>(&weight_)) + sizeof(metadata_match_));
  _cached_size_ = 0;
}

WeightedCluster_ClusterWeight::~WeightedCluster_ClusterWeight() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.WeightedCluster.ClusterWeight)
  SharedDtor();
}

void WeightedCluster_ClusterWeight::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete weight_;
  if (this != internal_default_instance()) delete metadata_match_;
}

void WeightedCluster_ClusterWeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedCluster_ClusterWeight::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightedCluster_ClusterWeight& WeightedCluster_ClusterWeight::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedCluster_ClusterWeight* WeightedCluster_ClusterWeight::New(::google::protobuf::Arena* arena) const {
  WeightedCluster_ClusterWeight* n = new WeightedCluster_ClusterWeight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedCluster_ClusterWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && weight_ != NULL) {
    delete weight_;
  }
  weight_ = NULL;
  if (GetArenaNoVirtual() == NULL && metadata_match_ != NULL) {
    delete metadata_match_;
  }
  metadata_match_ = NULL;
  _internal_metadata_.Clear();
}

bool WeightedCluster_ClusterWeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.WeightedCluster.ClusterWeight.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Metadata metadata_match = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.WeightedCluster.ClusterWeight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.WeightedCluster.ClusterWeight)
  return false;
#undef DO_
}

void WeightedCluster_ClusterWeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.WeightedCluster.ClusterWeight.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.UInt32Value weight = 2;
  if (this->has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->weight_, output);
  }

  // .envoy.api.v2.Metadata metadata_match = 3;
  if (this->has_metadata_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->metadata_match_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.WeightedCluster.ClusterWeight)
}

::google::protobuf::uint8* WeightedCluster_ClusterWeight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.WeightedCluster.ClusterWeight.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.UInt32Value weight = 2;
  if (this->has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->weight_, deterministic, target);
  }

  // .envoy.api.v2.Metadata metadata_match = 3;
  if (this->has_metadata_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->metadata_match_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.WeightedCluster.ClusterWeight)
  return target;
}

size_t WeightedCluster_ClusterWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.UInt32Value weight = 2;
  if (this->has_weight()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weight_);
  }

  // .envoy.api.v2.Metadata metadata_match = 3;
  if (this->has_metadata_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_match_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedCluster_ClusterWeight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedCluster_ClusterWeight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedCluster_ClusterWeight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.WeightedCluster.ClusterWeight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.WeightedCluster.ClusterWeight)
    MergeFrom(*source);
  }
}

void WeightedCluster_ClusterWeight::MergeFrom(const WeightedCluster_ClusterWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_weight()) {
    mutable_weight()->::google::protobuf::UInt32Value::MergeFrom(from.weight());
  }
  if (from.has_metadata_match()) {
    mutable_metadata_match()->::envoy::api::v2::Metadata::MergeFrom(from.metadata_match());
  }
}

void WeightedCluster_ClusterWeight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedCluster_ClusterWeight::CopyFrom(const WeightedCluster_ClusterWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedCluster_ClusterWeight::IsInitialized() const {
  return true;
}

void WeightedCluster_ClusterWeight::Swap(WeightedCluster_ClusterWeight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedCluster_ClusterWeight::InternalSwap(WeightedCluster_ClusterWeight* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(weight_, other->weight_);
  swap(metadata_match_, other->metadata_match_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedCluster_ClusterWeight::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedCluster_ClusterWeight

// string name = 1;
void WeightedCluster_ClusterWeight::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeightedCluster_ClusterWeight::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.WeightedCluster.ClusterWeight.name)
  return name_.GetNoArena();
}
void WeightedCluster_ClusterWeight::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}
#if LANG_CXX11
void WeightedCluster_ClusterWeight::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}
#endif
void WeightedCluster_ClusterWeight::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}
void WeightedCluster_ClusterWeight::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}
::std::string* WeightedCluster_ClusterWeight::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.WeightedCluster.ClusterWeight.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeightedCluster_ClusterWeight::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.WeightedCluster.ClusterWeight.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeightedCluster_ClusterWeight::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}

// .google.protobuf.UInt32Value weight = 2;
bool WeightedCluster_ClusterWeight::has_weight() const {
  return this != internal_default_instance() && weight_ != NULL;
}
void WeightedCluster_ClusterWeight::clear_weight() {
  if (GetArenaNoVirtual() == NULL && weight_ != NULL) delete weight_;
  weight_ = NULL;
}
const ::google::protobuf::UInt32Value& WeightedCluster_ClusterWeight::weight() const {
  const ::google::protobuf::UInt32Value* p = weight_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.WeightedCluster.ClusterWeight.weight)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* WeightedCluster_ClusterWeight::mutable_weight() {
  
  if (weight_ == NULL) {
    weight_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.WeightedCluster.ClusterWeight.weight)
  return weight_;
}
::google::protobuf::UInt32Value* WeightedCluster_ClusterWeight::release_weight() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.WeightedCluster.ClusterWeight.weight)
  
  ::google::protobuf::UInt32Value* temp = weight_;
  weight_ = NULL;
  return temp;
}
void WeightedCluster_ClusterWeight::set_allocated_weight(::google::protobuf::UInt32Value* weight) {
  delete weight_;
  if (weight != NULL && weight->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_weight = new ::google::protobuf::UInt32Value;
    new_weight->CopyFrom(*weight);
    weight = new_weight;
  }
  weight_ = weight;
  if (weight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.WeightedCluster.ClusterWeight.weight)
}

// .envoy.api.v2.Metadata metadata_match = 3;
bool WeightedCluster_ClusterWeight::has_metadata_match() const {
  return this != internal_default_instance() && metadata_match_ != NULL;
}
void WeightedCluster_ClusterWeight::clear_metadata_match() {
  if (GetArenaNoVirtual() == NULL && metadata_match_ != NULL) delete metadata_match_;
  metadata_match_ = NULL;
}
const ::envoy::api::v2::Metadata& WeightedCluster_ClusterWeight::metadata_match() const {
  const ::envoy::api::v2::Metadata* p = metadata_match_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.WeightedCluster.ClusterWeight.metadata_match)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Metadata*>(
      &::envoy::api::v2::_Metadata_default_instance_);
}
::envoy::api::v2::Metadata* WeightedCluster_ClusterWeight::mutable_metadata_match() {
  
  if (metadata_match_ == NULL) {
    metadata_match_ = new ::envoy::api::v2::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.WeightedCluster.ClusterWeight.metadata_match)
  return metadata_match_;
}
::envoy::api::v2::Metadata* WeightedCluster_ClusterWeight::release_metadata_match() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.WeightedCluster.ClusterWeight.metadata_match)
  
  ::envoy::api::v2::Metadata* temp = metadata_match_;
  metadata_match_ = NULL;
  return temp;
}
void WeightedCluster_ClusterWeight::set_allocated_metadata_match(::envoy::api::v2::Metadata* metadata_match) {
  delete metadata_match_;
  metadata_match_ = metadata_match;
  if (metadata_match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.WeightedCluster.ClusterWeight.metadata_match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedCluster::kClustersFieldNumber;
const int WeightedCluster::kRuntimeKeyPrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedCluster::WeightedCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.WeightedCluster)
}
WeightedCluster::WeightedCluster(const WeightedCluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      clusters_(from.clusters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  runtime_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.runtime_key_prefix().size() > 0) {
    runtime_key_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_prefix_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.WeightedCluster)
}

void WeightedCluster::SharedCtor() {
  runtime_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

WeightedCluster::~WeightedCluster() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.WeightedCluster)
  SharedDtor();
}

void WeightedCluster::SharedDtor() {
  runtime_key_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WeightedCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedCluster::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightedCluster& WeightedCluster::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedCluster* WeightedCluster::New(::google::protobuf::Arena* arena) const {
  WeightedCluster* n = new WeightedCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.WeightedCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clusters_.Clear();
  runtime_key_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool WeightedCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.WeightedCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.WeightedCluster.ClusterWeight clusters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string runtime_key_prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_runtime_key_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->runtime_key_prefix().data(), static_cast<int>(this->runtime_key_prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.WeightedCluster.runtime_key_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.WeightedCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.WeightedCluster)
  return false;
#undef DO_
}

void WeightedCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.WeightedCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.WeightedCluster.ClusterWeight clusters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clusters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clusters(static_cast<int>(i)), output);
  }

  // string runtime_key_prefix = 2;
  if (this->runtime_key_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key_prefix().data(), static_cast<int>(this->runtime_key_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.WeightedCluster.runtime_key_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->runtime_key_prefix(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.WeightedCluster)
}

::google::protobuf::uint8* WeightedCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.WeightedCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.WeightedCluster.ClusterWeight clusters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clusters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->clusters(static_cast<int>(i)), deterministic, target);
  }

  // string runtime_key_prefix = 2;
  if (this->runtime_key_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key_prefix().data(), static_cast<int>(this->runtime_key_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.WeightedCluster.runtime_key_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->runtime_key_prefix(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.WeightedCluster)
  return target;
}

size_t WeightedCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.WeightedCluster)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.WeightedCluster.ClusterWeight clusters = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->clusters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clusters(static_cast<int>(i)));
    }
  }

  // string runtime_key_prefix = 2;
  if (this->runtime_key_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->runtime_key_prefix());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.WeightedCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.WeightedCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.WeightedCluster)
    MergeFrom(*source);
  }
}

void WeightedCluster::MergeFrom(const WeightedCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.WeightedCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clusters_.MergeFrom(from.clusters_);
  if (from.runtime_key_prefix().size() > 0) {

    runtime_key_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_prefix_);
  }
}

void WeightedCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.WeightedCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedCluster::CopyFrom(const WeightedCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.WeightedCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedCluster::IsInitialized() const {
  return true;
}

void WeightedCluster::Swap(WeightedCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedCluster::InternalSwap(WeightedCluster* other) {
  using std::swap;
  clusters_.InternalSwap(&other->clusters_);
  runtime_key_prefix_.Swap(&other->runtime_key_prefix_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedCluster::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedCluster

// repeated .envoy.api.v2.WeightedCluster.ClusterWeight clusters = 1;
int WeightedCluster::clusters_size() const {
  return clusters_.size();
}
void WeightedCluster::clear_clusters() {
  clusters_.Clear();
}
const ::envoy::api::v2::WeightedCluster_ClusterWeight& WeightedCluster::clusters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.WeightedCluster.clusters)
  return clusters_.Get(index);
}
::envoy::api::v2::WeightedCluster_ClusterWeight* WeightedCluster::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.WeightedCluster.clusters)
  return clusters_.Mutable(index);
}
::envoy::api::v2::WeightedCluster_ClusterWeight* WeightedCluster::add_clusters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.WeightedCluster.clusters)
  return clusters_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::WeightedCluster_ClusterWeight >*
WeightedCluster::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.WeightedCluster.clusters)
  return &clusters_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::WeightedCluster_ClusterWeight >&
WeightedCluster::clusters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.WeightedCluster.clusters)
  return clusters_;
}

// string runtime_key_prefix = 2;
void WeightedCluster::clear_runtime_key_prefix() {
  runtime_key_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeightedCluster::runtime_key_prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.WeightedCluster.runtime_key_prefix)
  return runtime_key_prefix_.GetNoArena();
}
void WeightedCluster::set_runtime_key_prefix(const ::std::string& value) {
  
  runtime_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}
#if LANG_CXX11
void WeightedCluster::set_runtime_key_prefix(::std::string&& value) {
  
  runtime_key_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}
#endif
void WeightedCluster::set_runtime_key_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  runtime_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}
void WeightedCluster::set_runtime_key_prefix(const char* value, size_t size) {
  
  runtime_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}
::std::string* WeightedCluster::mutable_runtime_key_prefix() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.WeightedCluster.runtime_key_prefix)
  return runtime_key_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeightedCluster::release_runtime_key_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.WeightedCluster.runtime_key_prefix)
  
  return runtime_key_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeightedCluster::set_allocated_runtime_key_prefix(::std::string* runtime_key_prefix) {
  if (runtime_key_prefix != NULL) {
    
  } else {
    
  }
  runtime_key_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime_key_prefix);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteMatch::kPrefixFieldNumber;
const int RouteMatch::kPathFieldNumber;
const int RouteMatch::kRegexFieldNumber;
const int RouteMatch::kCaseSensitiveFieldNumber;
const int RouteMatch::kRuntimeFieldNumber;
const int RouteMatch::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteMatch::RouteMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RouteMatch)
}
RouteMatch::RouteMatch(const RouteMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      headers_(from.headers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_case_sensitive()) {
    case_sensitive_ = new ::google::protobuf::BoolValue(*from.case_sensitive_);
  } else {
    case_sensitive_ = NULL;
  }
  if (from.has_runtime()) {
    runtime_ = new ::envoy::api::v2::RuntimeUInt32(*from.runtime_);
  } else {
    runtime_ = NULL;
  }
  clear_has_path_specifier();
  switch (from.path_specifier_case()) {
    case kPrefix: {
      set_prefix(from.prefix());
      break;
    }
    case kPath: {
      set_path(from.path());
      break;
    }
    case kRegex: {
      set_regex(from.regex());
      break;
    }
    case PATH_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RouteMatch)
}

void RouteMatch::SharedCtor() {
  ::memset(&case_sensitive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runtime_) -
      reinterpret_cast<char*>(&case_sensitive_)) + sizeof(runtime_));
  clear_has_path_specifier();
  _cached_size_ = 0;
}

RouteMatch::~RouteMatch() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RouteMatch)
  SharedDtor();
}

void RouteMatch::SharedDtor() {
  if (this != internal_default_instance()) delete case_sensitive_;
  if (this != internal_default_instance()) delete runtime_;
  if (has_path_specifier()) {
    clear_path_specifier();
  }
}

void RouteMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteMatch::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteMatch& RouteMatch::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteMatch* RouteMatch::New(::google::protobuf::Arena* arena) const {
  RouteMatch* n = new RouteMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteMatch::clear_path_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.RouteMatch)
  switch (path_specifier_case()) {
    case kPrefix: {
      path_specifier_.prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kPath: {
      path_specifier_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRegex: {
      path_specifier_.regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PATH_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PATH_SPECIFIER_NOT_SET;
}


void RouteMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RouteMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  if (GetArenaNoVirtual() == NULL && case_sensitive_ != NULL) {
    delete case_sensitive_;
  }
  case_sensitive_ = NULL;
  if (GetArenaNoVirtual() == NULL && runtime_ != NULL) {
    delete runtime_;
  }
  runtime_ = NULL;
  clear_path_specifier();
  _internal_metadata_.Clear();
}

bool RouteMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RouteMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string prefix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteMatch.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteMatch.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string regex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->regex().data(), static_cast<int>(this->regex().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteMatch.regex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue case_sensitive = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_case_sensitive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RuntimeUInt32 runtime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_runtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HeaderMatcher headers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RouteMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RouteMatch)
  return false;
#undef DO_
}

void RouteMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RouteMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteMatch.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prefix(), output);
  }

  // string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteMatch.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // string regex = 3;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteMatch.regex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->regex(), output);
  }

  // .google.protobuf.BoolValue case_sensitive = 4;
  if (this->has_case_sensitive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->case_sensitive_, output);
  }

  // .envoy.api.v2.RuntimeUInt32 runtime = 5;
  if (this->has_runtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->runtime_, output);
  }

  // repeated .envoy.api.v2.HeaderMatcher headers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->headers(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RouteMatch)
}

::google::protobuf::uint8* RouteMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RouteMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteMatch.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }

  // string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteMatch.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // string regex = 3;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), static_cast<int>(this->regex().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteMatch.regex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->regex(), target);
  }

  // .google.protobuf.BoolValue case_sensitive = 4;
  if (this->has_case_sensitive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->case_sensitive_, deterministic, target);
  }

  // .envoy.api.v2.RuntimeUInt32 runtime = 5;
  if (this->has_runtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->runtime_, deterministic, target);
  }

  // repeated .envoy.api.v2.HeaderMatcher headers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->headers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RouteMatch)
  return target;
}

size_t RouteMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RouteMatch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.HeaderMatcher headers = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headers(static_cast<int>(i)));
    }
  }

  // .google.protobuf.BoolValue case_sensitive = 4;
  if (this->has_case_sensitive()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->case_sensitive_);
  }

  // .envoy.api.v2.RuntimeUInt32 runtime = 5;
  if (this->has_runtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->runtime_);
  }

  switch (path_specifier_case()) {
    // string prefix = 1;
    case kPrefix: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
      break;
    }
    // string path = 2;
    case kPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
      break;
    }
    // string regex = 3;
    case kRegex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regex());
      break;
    }
    case PATH_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RouteMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RouteMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RouteMatch)
    MergeFrom(*source);
  }
}

void RouteMatch::MergeFrom(const RouteMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RouteMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.has_case_sensitive()) {
    mutable_case_sensitive()->::google::protobuf::BoolValue::MergeFrom(from.case_sensitive());
  }
  if (from.has_runtime()) {
    mutable_runtime()->::envoy::api::v2::RuntimeUInt32::MergeFrom(from.runtime());
  }
  switch (from.path_specifier_case()) {
    case kPrefix: {
      set_prefix(from.prefix());
      break;
    }
    case kPath: {
      set_path(from.path());
      break;
    }
    case kRegex: {
      set_regex(from.regex());
      break;
    }
    case PATH_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void RouteMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RouteMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteMatch::CopyFrom(const RouteMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RouteMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteMatch::IsInitialized() const {
  return true;
}

void RouteMatch::Swap(RouteMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteMatch::InternalSwap(RouteMatch* other) {
  using std::swap;
  headers_.InternalSwap(&other->headers_);
  swap(case_sensitive_, other->case_sensitive_);
  swap(runtime_, other->runtime_);
  swap(path_specifier_, other->path_specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteMatch::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteMatch

// string prefix = 1;
bool RouteMatch::has_prefix() const {
  return path_specifier_case() == kPrefix;
}
void RouteMatch::set_has_prefix() {
  _oneof_case_[0] = kPrefix;
}
void RouteMatch::clear_prefix() {
  if (has_prefix()) {
    path_specifier_.prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_path_specifier();
  }
}
const ::std::string& RouteMatch::prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.prefix)
  if (has_prefix()) {
    return path_specifier_.prefix_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RouteMatch::set_prefix(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.prefix)
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.prefix)
}
#if LANG_CXX11
void RouteMatch::set_prefix(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.prefix)
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteMatch.prefix)
}
#endif
void RouteMatch::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteMatch.prefix)
}
void RouteMatch::set_prefix(const char* value, size_t size) {
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteMatch.prefix)
}
::std::string* RouteMatch::mutable_prefix() {
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.prefix)
  return path_specifier_.prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteMatch::release_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.prefix)
  if (has_prefix()) {
    clear_has_path_specifier();
    return path_specifier_.prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RouteMatch::set_allocated_prefix(::std::string* prefix) {
  if (!has_prefix()) {
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_path_specifier();
  if (prefix != NULL) {
    set_has_prefix();
    path_specifier_.prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        prefix);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.prefix)
}

// string path = 2;
bool RouteMatch::has_path() const {
  return path_specifier_case() == kPath;
}
void RouteMatch::set_has_path() {
  _oneof_case_[0] = kPath;
}
void RouteMatch::clear_path() {
  if (has_path()) {
    path_specifier_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_path_specifier();
  }
}
const ::std::string& RouteMatch::path() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.path)
  if (has_path()) {
    return path_specifier_.path_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RouteMatch::set_path(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.path)
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.path)
}
#if LANG_CXX11
void RouteMatch::set_path(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.path)
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteMatch.path)
}
#endif
void RouteMatch::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteMatch.path)
}
void RouteMatch::set_path(const char* value, size_t size) {
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteMatch.path)
}
::std::string* RouteMatch::mutable_path() {
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.path)
  return path_specifier_.path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteMatch::release_path() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.path)
  if (has_path()) {
    clear_has_path_specifier();
    return path_specifier_.path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RouteMatch::set_allocated_path(::std::string* path) {
  if (!has_path()) {
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_path_specifier();
  if (path != NULL) {
    set_has_path();
    path_specifier_.path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        path);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.path)
}

// string regex = 3;
bool RouteMatch::has_regex() const {
  return path_specifier_case() == kRegex;
}
void RouteMatch::set_has_regex() {
  _oneof_case_[0] = kRegex;
}
void RouteMatch::clear_regex() {
  if (has_regex()) {
    path_specifier_.regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_path_specifier();
  }
}
const ::std::string& RouteMatch::regex() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.regex)
  if (has_regex()) {
    return path_specifier_.regex_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RouteMatch::set_regex(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.regex)
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.regex)
}
#if LANG_CXX11
void RouteMatch::set_regex(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.regex)
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteMatch.regex)
}
#endif
void RouteMatch::set_regex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteMatch.regex)
}
void RouteMatch::set_regex(const char* value, size_t size) {
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteMatch.regex)
}
::std::string* RouteMatch::mutable_regex() {
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.regex)
  return path_specifier_.regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteMatch::release_regex() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.regex)
  if (has_regex()) {
    clear_has_path_specifier();
    return path_specifier_.regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RouteMatch::set_allocated_regex(::std::string* regex) {
  if (!has_regex()) {
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_path_specifier();
  if (regex != NULL) {
    set_has_regex();
    path_specifier_.regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        regex);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.regex)
}

// .google.protobuf.BoolValue case_sensitive = 4;
bool RouteMatch::has_case_sensitive() const {
  return this != internal_default_instance() && case_sensitive_ != NULL;
}
void RouteMatch::clear_case_sensitive() {
  if (GetArenaNoVirtual() == NULL && case_sensitive_ != NULL) delete case_sensitive_;
  case_sensitive_ = NULL;
}
const ::google::protobuf::BoolValue& RouteMatch::case_sensitive() const {
  const ::google::protobuf::BoolValue* p = case_sensitive_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.case_sensitive)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* RouteMatch::mutable_case_sensitive() {
  
  if (case_sensitive_ == NULL) {
    case_sensitive_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.case_sensitive)
  return case_sensitive_;
}
::google::protobuf::BoolValue* RouteMatch::release_case_sensitive() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.case_sensitive)
  
  ::google::protobuf::BoolValue* temp = case_sensitive_;
  case_sensitive_ = NULL;
  return temp;
}
void RouteMatch::set_allocated_case_sensitive(::google::protobuf::BoolValue* case_sensitive) {
  delete case_sensitive_;
  if (case_sensitive != NULL && case_sensitive->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_case_sensitive = new ::google::protobuf::BoolValue;
    new_case_sensitive->CopyFrom(*case_sensitive);
    case_sensitive = new_case_sensitive;
  }
  case_sensitive_ = case_sensitive;
  if (case_sensitive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.case_sensitive)
}

// .envoy.api.v2.RuntimeUInt32 runtime = 5;
bool RouteMatch::has_runtime() const {
  return this != internal_default_instance() && runtime_ != NULL;
}
void RouteMatch::clear_runtime() {
  if (GetArenaNoVirtual() == NULL && runtime_ != NULL) delete runtime_;
  runtime_ = NULL;
}
const ::envoy::api::v2::RuntimeUInt32& RouteMatch::runtime() const {
  const ::envoy::api::v2::RuntimeUInt32* p = runtime_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.runtime)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::RuntimeUInt32*>(
      &::envoy::api::v2::_RuntimeUInt32_default_instance_);
}
::envoy::api::v2::RuntimeUInt32* RouteMatch::mutable_runtime() {
  
  if (runtime_ == NULL) {
    runtime_ = new ::envoy::api::v2::RuntimeUInt32;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.runtime)
  return runtime_;
}
::envoy::api::v2::RuntimeUInt32* RouteMatch::release_runtime() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.runtime)
  
  ::envoy::api::v2::RuntimeUInt32* temp = runtime_;
  runtime_ = NULL;
  return temp;
}
void RouteMatch::set_allocated_runtime(::envoy::api::v2::RuntimeUInt32* runtime) {
  delete runtime_;
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.runtime)
}

// repeated .envoy.api.v2.HeaderMatcher headers = 6;
int RouteMatch::headers_size() const {
  return headers_.size();
}
void RouteMatch::clear_headers() {
  headers_.Clear();
}
const ::envoy::api::v2::HeaderMatcher& RouteMatch::headers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.headers)
  return headers_.Get(index);
}
::envoy::api::v2::HeaderMatcher* RouteMatch::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.headers)
  return headers_.Mutable(index);
}
::envoy::api::v2::HeaderMatcher* RouteMatch::add_headers() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteMatch.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >*
RouteMatch::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteMatch.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >&
RouteMatch::headers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteMatch.headers)
  return headers_;
}

bool RouteMatch::has_path_specifier() const {
  return path_specifier_case() != PATH_SPECIFIER_NOT_SET;
}
void RouteMatch::clear_has_path_specifier() {
  _oneof_case_[0] = PATH_SPECIFIER_NOT_SET;
}
RouteMatch::PathSpecifierCase RouteMatch::path_specifier_case() const {
  return RouteMatch::PathSpecifierCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CorsPolicy::kAllowOriginFieldNumber;
const int CorsPolicy::kAllowMethodsFieldNumber;
const int CorsPolicy::kAllowHeadersFieldNumber;
const int CorsPolicy::kExposeHeadersFieldNumber;
const int CorsPolicy::kMaxAgeFieldNumber;
const int CorsPolicy::kAllowCredentialsFieldNumber;
const int CorsPolicy::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CorsPolicy::CorsPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.CorsPolicy)
}
CorsPolicy::CorsPolicy(const CorsPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      allow_origin_(from.allow_origin_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allow_methods_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.allow_methods().size() > 0) {
    allow_methods_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allow_methods_);
  }
  allow_headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.allow_headers().size() > 0) {
    allow_headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allow_headers_);
  }
  expose_headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.expose_headers().size() > 0) {
    expose_headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expose_headers_);
  }
  max_age_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.max_age().size() > 0) {
    max_age_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.max_age_);
  }
  if (from.has_allow_credentials()) {
    allow_credentials_ = new ::google::protobuf::BoolValue(*from.allow_credentials_);
  } else {
    allow_credentials_ = NULL;
  }
  if (from.has_enabled()) {
    enabled_ = new ::google::protobuf::BoolValue(*from.enabled_);
  } else {
    enabled_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.CorsPolicy)
}

void CorsPolicy::SharedCtor() {
  allow_methods_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allow_headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expose_headers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_age_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&allow_credentials_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&allow_credentials_)) + sizeof(enabled_));
  _cached_size_ = 0;
}

CorsPolicy::~CorsPolicy() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.CorsPolicy)
  SharedDtor();
}

void CorsPolicy::SharedDtor() {
  allow_methods_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allow_headers_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expose_headers_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_age_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete allow_credentials_;
  if (this != internal_default_instance()) delete enabled_;
}

void CorsPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CorsPolicy::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CorsPolicy& CorsPolicy::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

CorsPolicy* CorsPolicy::New(::google::protobuf::Arena* arena) const {
  CorsPolicy* n = new CorsPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CorsPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.CorsPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_origin_.Clear();
  allow_methods_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allow_headers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expose_headers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_age_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && allow_credentials_ != NULL) {
    delete allow_credentials_;
  }
  allow_credentials_ = NULL;
  if (GetArenaNoVirtual() == NULL && enabled_ != NULL) {
    delete enabled_;
  }
  enabled_ = NULL;
  _internal_metadata_.Clear();
}

bool CorsPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.CorsPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string allow_origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_allow_origin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allow_origin(this->allow_origin_size() - 1).data(),
            static_cast<int>(this->allow_origin(this->allow_origin_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CorsPolicy.allow_origin"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string allow_methods = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allow_methods()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allow_methods().data(), static_cast<int>(this->allow_methods().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CorsPolicy.allow_methods"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string allow_headers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allow_headers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allow_headers().data(), static_cast<int>(this->allow_headers().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CorsPolicy.allow_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string expose_headers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expose_headers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expose_headers().data(), static_cast<int>(this->expose_headers().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CorsPolicy.expose_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string max_age = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_age()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->max_age().data(), static_cast<int>(this->max_age().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CorsPolicy.max_age"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue allow_credentials = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allow_credentials()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.CorsPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.CorsPolicy)
  return false;
#undef DO_
}

void CorsPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.CorsPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string allow_origin = 1;
  for (int i = 0, n = this->allow_origin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allow_origin(i).data(), static_cast<int>(this->allow_origin(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CorsPolicy.allow_origin");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->allow_origin(i), output);
  }

  // string allow_methods = 2;
  if (this->allow_methods().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allow_methods().data(), static_cast<int>(this->allow_methods().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CorsPolicy.allow_methods");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->allow_methods(), output);
  }

  // string allow_headers = 3;
  if (this->allow_headers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allow_headers().data(), static_cast<int>(this->allow_headers().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CorsPolicy.allow_headers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->allow_headers(), output);
  }

  // string expose_headers = 4;
  if (this->expose_headers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expose_headers().data(), static_cast<int>(this->expose_headers().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CorsPolicy.expose_headers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->expose_headers(), output);
  }

  // string max_age = 5;
  if (this->max_age().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->max_age().data(), static_cast<int>(this->max_age().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CorsPolicy.max_age");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->max_age(), output);
  }

  // .google.protobuf.BoolValue allow_credentials = 6;
  if (this->has_allow_credentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->allow_credentials_, output);
  }

  // .google.protobuf.BoolValue enabled = 7;
  if (this->has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->enabled_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.CorsPolicy)
}

::google::protobuf::uint8* CorsPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.CorsPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string allow_origin = 1;
  for (int i = 0, n = this->allow_origin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allow_origin(i).data(), static_cast<int>(this->allow_origin(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CorsPolicy.allow_origin");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->allow_origin(i), target);
  }

  // string allow_methods = 2;
  if (this->allow_methods().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allow_methods().data(), static_cast<int>(this->allow_methods().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CorsPolicy.allow_methods");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->allow_methods(), target);
  }

  // string allow_headers = 3;
  if (this->allow_headers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allow_headers().data(), static_cast<int>(this->allow_headers().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CorsPolicy.allow_headers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->allow_headers(), target);
  }

  // string expose_headers = 4;
  if (this->expose_headers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expose_headers().data(), static_cast<int>(this->expose_headers().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CorsPolicy.expose_headers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->expose_headers(), target);
  }

  // string max_age = 5;
  if (this->max_age().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->max_age().data(), static_cast<int>(this->max_age().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CorsPolicy.max_age");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->max_age(), target);
  }

  // .google.protobuf.BoolValue allow_credentials = 6;
  if (this->has_allow_credentials()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->allow_credentials_, deterministic, target);
  }

  // .google.protobuf.BoolValue enabled = 7;
  if (this->has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->enabled_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.CorsPolicy)
  return target;
}

size_t CorsPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.CorsPolicy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string allow_origin = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->allow_origin_size());
  for (int i = 0, n = this->allow_origin_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->allow_origin(i));
  }

  // string allow_methods = 2;
  if (this->allow_methods().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->allow_methods());
  }

  // string allow_headers = 3;
  if (this->allow_headers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->allow_headers());
  }

  // string expose_headers = 4;
  if (this->expose_headers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expose_headers());
  }

  // string max_age = 5;
  if (this->max_age().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->max_age());
  }

  // .google.protobuf.BoolValue allow_credentials = 6;
  if (this->has_allow_credentials()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->allow_credentials_);
  }

  // .google.protobuf.BoolValue enabled = 7;
  if (this->has_enabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->enabled_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CorsPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.CorsPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const CorsPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CorsPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.CorsPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.CorsPolicy)
    MergeFrom(*source);
  }
}

void CorsPolicy::MergeFrom(const CorsPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.CorsPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allow_origin_.MergeFrom(from.allow_origin_);
  if (from.allow_methods().size() > 0) {

    allow_methods_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allow_methods_);
  }
  if (from.allow_headers().size() > 0) {

    allow_headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.allow_headers_);
  }
  if (from.expose_headers().size() > 0) {

    expose_headers_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expose_headers_);
  }
  if (from.max_age().size() > 0) {

    max_age_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.max_age_);
  }
  if (from.has_allow_credentials()) {
    mutable_allow_credentials()->::google::protobuf::BoolValue::MergeFrom(from.allow_credentials());
  }
  if (from.has_enabled()) {
    mutable_enabled()->::google::protobuf::BoolValue::MergeFrom(from.enabled());
  }
}

void CorsPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.CorsPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorsPolicy::CopyFrom(const CorsPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.CorsPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorsPolicy::IsInitialized() const {
  return true;
}

void CorsPolicy::Swap(CorsPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CorsPolicy::InternalSwap(CorsPolicy* other) {
  using std::swap;
  allow_origin_.InternalSwap(&other->allow_origin_);
  allow_methods_.Swap(&other->allow_methods_);
  allow_headers_.Swap(&other->allow_headers_);
  expose_headers_.Swap(&other->expose_headers_);
  max_age_.Swap(&other->max_age_);
  swap(allow_credentials_, other->allow_credentials_);
  swap(enabled_, other->enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CorsPolicy::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CorsPolicy

// repeated string allow_origin = 1;
int CorsPolicy::allow_origin_size() const {
  return allow_origin_.size();
}
void CorsPolicy::clear_allow_origin() {
  allow_origin_.Clear();
}
const ::std::string& CorsPolicy::allow_origin(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CorsPolicy.allow_origin)
  return allow_origin_.Get(index);
}
::std::string* CorsPolicy::mutable_allow_origin(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CorsPolicy.allow_origin)
  return allow_origin_.Mutable(index);
}
void CorsPolicy::set_allow_origin(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.CorsPolicy.allow_origin)
  allow_origin_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CorsPolicy::set_allow_origin(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.CorsPolicy.allow_origin)
  allow_origin_.Mutable(index)->assign(std::move(value));
}
#endif
void CorsPolicy::set_allow_origin(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allow_origin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.CorsPolicy.allow_origin)
}
void CorsPolicy::set_allow_origin(int index, const char* value, size_t size) {
  allow_origin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.CorsPolicy.allow_origin)
}
::std::string* CorsPolicy::add_allow_origin() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.CorsPolicy.allow_origin)
  return allow_origin_.Add();
}
void CorsPolicy::add_allow_origin(const ::std::string& value) {
  allow_origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.CorsPolicy.allow_origin)
}
#if LANG_CXX11
void CorsPolicy::add_allow_origin(::std::string&& value) {
  allow_origin_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:envoy.api.v2.CorsPolicy.allow_origin)
}
#endif
void CorsPolicy::add_allow_origin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allow_origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.CorsPolicy.allow_origin)
}
void CorsPolicy::add_allow_origin(const char* value, size_t size) {
  allow_origin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.CorsPolicy.allow_origin)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CorsPolicy::allow_origin() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.CorsPolicy.allow_origin)
  return allow_origin_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CorsPolicy::mutable_allow_origin() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.CorsPolicy.allow_origin)
  return &allow_origin_;
}

// string allow_methods = 2;
void CorsPolicy::clear_allow_methods() {
  allow_methods_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CorsPolicy::allow_methods() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CorsPolicy.allow_methods)
  return allow_methods_.GetNoArena();
}
void CorsPolicy::set_allow_methods(const ::std::string& value) {
  
  allow_methods_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.CorsPolicy.allow_methods)
}
#if LANG_CXX11
void CorsPolicy::set_allow_methods(::std::string&& value) {
  
  allow_methods_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.CorsPolicy.allow_methods)
}
#endif
void CorsPolicy::set_allow_methods(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  allow_methods_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.CorsPolicy.allow_methods)
}
void CorsPolicy::set_allow_methods(const char* value, size_t size) {
  
  allow_methods_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.CorsPolicy.allow_methods)
}
::std::string* CorsPolicy::mutable_allow_methods() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CorsPolicy.allow_methods)
  return allow_methods_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CorsPolicy::release_allow_methods() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CorsPolicy.allow_methods)
  
  return allow_methods_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CorsPolicy::set_allocated_allow_methods(::std::string* allow_methods) {
  if (allow_methods != NULL) {
    
  } else {
    
  }
  allow_methods_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allow_methods);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CorsPolicy.allow_methods)
}

// string allow_headers = 3;
void CorsPolicy::clear_allow_headers() {
  allow_headers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CorsPolicy::allow_headers() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CorsPolicy.allow_headers)
  return allow_headers_.GetNoArena();
}
void CorsPolicy::set_allow_headers(const ::std::string& value) {
  
  allow_headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.CorsPolicy.allow_headers)
}
#if LANG_CXX11
void CorsPolicy::set_allow_headers(::std::string&& value) {
  
  allow_headers_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.CorsPolicy.allow_headers)
}
#endif
void CorsPolicy::set_allow_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  allow_headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.CorsPolicy.allow_headers)
}
void CorsPolicy::set_allow_headers(const char* value, size_t size) {
  
  allow_headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.CorsPolicy.allow_headers)
}
::std::string* CorsPolicy::mutable_allow_headers() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CorsPolicy.allow_headers)
  return allow_headers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CorsPolicy::release_allow_headers() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CorsPolicy.allow_headers)
  
  return allow_headers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CorsPolicy::set_allocated_allow_headers(::std::string* allow_headers) {
  if (allow_headers != NULL) {
    
  } else {
    
  }
  allow_headers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allow_headers);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CorsPolicy.allow_headers)
}

// string expose_headers = 4;
void CorsPolicy::clear_expose_headers() {
  expose_headers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CorsPolicy::expose_headers() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CorsPolicy.expose_headers)
  return expose_headers_.GetNoArena();
}
void CorsPolicy::set_expose_headers(const ::std::string& value) {
  
  expose_headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.CorsPolicy.expose_headers)
}
#if LANG_CXX11
void CorsPolicy::set_expose_headers(::std::string&& value) {
  
  expose_headers_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.CorsPolicy.expose_headers)
}
#endif
void CorsPolicy::set_expose_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expose_headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.CorsPolicy.expose_headers)
}
void CorsPolicy::set_expose_headers(const char* value, size_t size) {
  
  expose_headers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.CorsPolicy.expose_headers)
}
::std::string* CorsPolicy::mutable_expose_headers() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CorsPolicy.expose_headers)
  return expose_headers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CorsPolicy::release_expose_headers() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CorsPolicy.expose_headers)
  
  return expose_headers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CorsPolicy::set_allocated_expose_headers(::std::string* expose_headers) {
  if (expose_headers != NULL) {
    
  } else {
    
  }
  expose_headers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expose_headers);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CorsPolicy.expose_headers)
}

// string max_age = 5;
void CorsPolicy::clear_max_age() {
  max_age_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CorsPolicy::max_age() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CorsPolicy.max_age)
  return max_age_.GetNoArena();
}
void CorsPolicy::set_max_age(const ::std::string& value) {
  
  max_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.CorsPolicy.max_age)
}
#if LANG_CXX11
void CorsPolicy::set_max_age(::std::string&& value) {
  
  max_age_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.CorsPolicy.max_age)
}
#endif
void CorsPolicy::set_max_age(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  max_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.CorsPolicy.max_age)
}
void CorsPolicy::set_max_age(const char* value, size_t size) {
  
  max_age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.CorsPolicy.max_age)
}
::std::string* CorsPolicy::mutable_max_age() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CorsPolicy.max_age)
  return max_age_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CorsPolicy::release_max_age() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CorsPolicy.max_age)
  
  return max_age_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CorsPolicy::set_allocated_max_age(::std::string* max_age) {
  if (max_age != NULL) {
    
  } else {
    
  }
  max_age_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), max_age);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CorsPolicy.max_age)
}

// .google.protobuf.BoolValue allow_credentials = 6;
bool CorsPolicy::has_allow_credentials() const {
  return this != internal_default_instance() && allow_credentials_ != NULL;
}
void CorsPolicy::clear_allow_credentials() {
  if (GetArenaNoVirtual() == NULL && allow_credentials_ != NULL) delete allow_credentials_;
  allow_credentials_ = NULL;
}
const ::google::protobuf::BoolValue& CorsPolicy::allow_credentials() const {
  const ::google::protobuf::BoolValue* p = allow_credentials_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.CorsPolicy.allow_credentials)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* CorsPolicy::mutable_allow_credentials() {
  
  if (allow_credentials_ == NULL) {
    allow_credentials_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CorsPolicy.allow_credentials)
  return allow_credentials_;
}
::google::protobuf::BoolValue* CorsPolicy::release_allow_credentials() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CorsPolicy.allow_credentials)
  
  ::google::protobuf::BoolValue* temp = allow_credentials_;
  allow_credentials_ = NULL;
  return temp;
}
void CorsPolicy::set_allocated_allow_credentials(::google::protobuf::BoolValue* allow_credentials) {
  delete allow_credentials_;
  if (allow_credentials != NULL && allow_credentials->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_allow_credentials = new ::google::protobuf::BoolValue;
    new_allow_credentials->CopyFrom(*allow_credentials);
    allow_credentials = new_allow_credentials;
  }
  allow_credentials_ = allow_credentials;
  if (allow_credentials) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CorsPolicy.allow_credentials)
}

// .google.protobuf.BoolValue enabled = 7;
bool CorsPolicy::has_enabled() const {
  return this != internal_default_instance() && enabled_ != NULL;
}
void CorsPolicy::clear_enabled() {
  if (GetArenaNoVirtual() == NULL && enabled_ != NULL) delete enabled_;
  enabled_ = NULL;
}
const ::google::protobuf::BoolValue& CorsPolicy::enabled() const {
  const ::google::protobuf::BoolValue* p = enabled_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.CorsPolicy.enabled)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* CorsPolicy::mutable_enabled() {
  
  if (enabled_ == NULL) {
    enabled_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CorsPolicy.enabled)
  return enabled_;
}
::google::protobuf::BoolValue* CorsPolicy::release_enabled() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CorsPolicy.enabled)
  
  ::google::protobuf::BoolValue* temp = enabled_;
  enabled_ = NULL;
  return temp;
}
void CorsPolicy::set_allocated_enabled(::google::protobuf::BoolValue* enabled) {
  delete enabled_;
  if (enabled != NULL && enabled->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_enabled = new ::google::protobuf::BoolValue;
    new_enabled->CopyFrom(*enabled);
    enabled = new_enabled;
  }
  enabled_ = enabled;
  if (enabled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CorsPolicy.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteAction_RetryPolicy::kRetryOnFieldNumber;
const int RouteAction_RetryPolicy::kNumRetriesFieldNumber;
const int RouteAction_RetryPolicy::kPerTryTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteAction_RetryPolicy::RouteAction_RetryPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RouteAction.RetryPolicy)
}
RouteAction_RetryPolicy::RouteAction_RetryPolicy(const RouteAction_RetryPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retry_on_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.retry_on().size() > 0) {
    retry_on_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retry_on_);
  }
  if (from.has_num_retries()) {
    num_retries_ = new ::google::protobuf::UInt32Value(*from.num_retries_);
  } else {
    num_retries_ = NULL;
  }
  if (from.has_per_try_timeout()) {
    per_try_timeout_ = new ::google::protobuf::Duration(*from.per_try_timeout_);
  } else {
    per_try_timeout_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RouteAction.RetryPolicy)
}

void RouteAction_RetryPolicy::SharedCtor() {
  retry_on_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_retries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_try_timeout_) -
      reinterpret_cast<char*>(&num_retries_)) + sizeof(per_try_timeout_));
  _cached_size_ = 0;
}

RouteAction_RetryPolicy::~RouteAction_RetryPolicy() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RouteAction.RetryPolicy)
  SharedDtor();
}

void RouteAction_RetryPolicy::SharedDtor() {
  retry_on_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete num_retries_;
  if (this != internal_default_instance()) delete per_try_timeout_;
}

void RouteAction_RetryPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteAction_RetryPolicy::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteAction_RetryPolicy& RouteAction_RetryPolicy::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteAction_RetryPolicy* RouteAction_RetryPolicy::New(::google::protobuf::Arena* arena) const {
  RouteAction_RetryPolicy* n = new RouteAction_RetryPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteAction_RetryPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RouteAction.RetryPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retry_on_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && num_retries_ != NULL) {
    delete num_retries_;
  }
  num_retries_ = NULL;
  if (GetArenaNoVirtual() == NULL && per_try_timeout_ != NULL) {
    delete per_try_timeout_;
  }
  per_try_timeout_ = NULL;
  _internal_metadata_.Clear();
}

bool RouteAction_RetryPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RouteAction.RetryPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string retry_on = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retry_on()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->retry_on().data(), static_cast<int>(this->retry_on().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteAction.RetryPolicy.retry_on"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value num_retries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_num_retries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration per_try_timeout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_per_try_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RouteAction.RetryPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RouteAction.RetryPolicy)
  return false;
#undef DO_
}

void RouteAction_RetryPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RouteAction.RetryPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string retry_on = 1;
  if (this->retry_on().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retry_on().data(), static_cast<int>(this->retry_on().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.RetryPolicy.retry_on");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->retry_on(), output);
  }

  // .google.protobuf.UInt32Value num_retries = 2;
  if (this->has_num_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->num_retries_, output);
  }

  // .google.protobuf.Duration per_try_timeout = 3;
  if (this->has_per_try_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->per_try_timeout_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RouteAction.RetryPolicy)
}

::google::protobuf::uint8* RouteAction_RetryPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RouteAction.RetryPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string retry_on = 1;
  if (this->retry_on().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retry_on().data(), static_cast<int>(this->retry_on().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.RetryPolicy.retry_on");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->retry_on(), target);
  }

  // .google.protobuf.UInt32Value num_retries = 2;
  if (this->has_num_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->num_retries_, deterministic, target);
  }

  // .google.protobuf.Duration per_try_timeout = 3;
  if (this->has_per_try_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->per_try_timeout_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RouteAction.RetryPolicy)
  return target;
}

size_t RouteAction_RetryPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RouteAction.RetryPolicy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string retry_on = 1;
  if (this->retry_on().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->retry_on());
  }

  // .google.protobuf.UInt32Value num_retries = 2;
  if (this->has_num_retries()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->num_retries_);
  }

  // .google.protobuf.Duration per_try_timeout = 3;
  if (this->has_per_try_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->per_try_timeout_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteAction_RetryPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RouteAction.RetryPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteAction_RetryPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteAction_RetryPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RouteAction.RetryPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RouteAction.RetryPolicy)
    MergeFrom(*source);
  }
}

void RouteAction_RetryPolicy::MergeFrom(const RouteAction_RetryPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RouteAction.RetryPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retry_on().size() > 0) {

    retry_on_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retry_on_);
  }
  if (from.has_num_retries()) {
    mutable_num_retries()->::google::protobuf::UInt32Value::MergeFrom(from.num_retries());
  }
  if (from.has_per_try_timeout()) {
    mutable_per_try_timeout()->::google::protobuf::Duration::MergeFrom(from.per_try_timeout());
  }
}

void RouteAction_RetryPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RouteAction.RetryPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteAction_RetryPolicy::CopyFrom(const RouteAction_RetryPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RouteAction.RetryPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteAction_RetryPolicy::IsInitialized() const {
  return true;
}

void RouteAction_RetryPolicy::Swap(RouteAction_RetryPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteAction_RetryPolicy::InternalSwap(RouteAction_RetryPolicy* other) {
  using std::swap;
  retry_on_.Swap(&other->retry_on_);
  swap(num_retries_, other->num_retries_);
  swap(per_try_timeout_, other->per_try_timeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteAction_RetryPolicy::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteAction_RetryPolicy

// string retry_on = 1;
void RouteAction_RetryPolicy::clear_retry_on() {
  retry_on_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RouteAction_RetryPolicy::retry_on() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.RetryPolicy.retry_on)
  return retry_on_.GetNoArena();
}
void RouteAction_RetryPolicy::set_retry_on(const ::std::string& value) {
  
  retry_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.RetryPolicy.retry_on)
}
#if LANG_CXX11
void RouteAction_RetryPolicy::set_retry_on(::std::string&& value) {
  
  retry_on_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteAction.RetryPolicy.retry_on)
}
#endif
void RouteAction_RetryPolicy::set_retry_on(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  retry_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteAction.RetryPolicy.retry_on)
}
void RouteAction_RetryPolicy::set_retry_on(const char* value, size_t size) {
  
  retry_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteAction.RetryPolicy.retry_on)
}
::std::string* RouteAction_RetryPolicy::mutable_retry_on() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.RetryPolicy.retry_on)
  return retry_on_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteAction_RetryPolicy::release_retry_on() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.RetryPolicy.retry_on)
  
  return retry_on_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouteAction_RetryPolicy::set_allocated_retry_on(::std::string* retry_on) {
  if (retry_on != NULL) {
    
  } else {
    
  }
  retry_on_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retry_on);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.RetryPolicy.retry_on)
}

// .google.protobuf.UInt32Value num_retries = 2;
bool RouteAction_RetryPolicy::has_num_retries() const {
  return this != internal_default_instance() && num_retries_ != NULL;
}
void RouteAction_RetryPolicy::clear_num_retries() {
  if (GetArenaNoVirtual() == NULL && num_retries_ != NULL) delete num_retries_;
  num_retries_ = NULL;
}
const ::google::protobuf::UInt32Value& RouteAction_RetryPolicy::num_retries() const {
  const ::google::protobuf::UInt32Value* p = num_retries_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.RetryPolicy.num_retries)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* RouteAction_RetryPolicy::mutable_num_retries() {
  
  if (num_retries_ == NULL) {
    num_retries_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.RetryPolicy.num_retries)
  return num_retries_;
}
::google::protobuf::UInt32Value* RouteAction_RetryPolicy::release_num_retries() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.RetryPolicy.num_retries)
  
  ::google::protobuf::UInt32Value* temp = num_retries_;
  num_retries_ = NULL;
  return temp;
}
void RouteAction_RetryPolicy::set_allocated_num_retries(::google::protobuf::UInt32Value* num_retries) {
  delete num_retries_;
  if (num_retries != NULL && num_retries->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_num_retries = new ::google::protobuf::UInt32Value;
    new_num_retries->CopyFrom(*num_retries);
    num_retries = new_num_retries;
  }
  num_retries_ = num_retries;
  if (num_retries) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.RetryPolicy.num_retries)
}

// .google.protobuf.Duration per_try_timeout = 3;
bool RouteAction_RetryPolicy::has_per_try_timeout() const {
  return this != internal_default_instance() && per_try_timeout_ != NULL;
}
void RouteAction_RetryPolicy::clear_per_try_timeout() {
  if (GetArenaNoVirtual() == NULL && per_try_timeout_ != NULL) delete per_try_timeout_;
  per_try_timeout_ = NULL;
}
const ::google::protobuf::Duration& RouteAction_RetryPolicy::per_try_timeout() const {
  const ::google::protobuf::Duration* p = per_try_timeout_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.RetryPolicy.per_try_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* RouteAction_RetryPolicy::mutable_per_try_timeout() {
  
  if (per_try_timeout_ == NULL) {
    per_try_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.RetryPolicy.per_try_timeout)
  return per_try_timeout_;
}
::google::protobuf::Duration* RouteAction_RetryPolicy::release_per_try_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.RetryPolicy.per_try_timeout)
  
  ::google::protobuf::Duration* temp = per_try_timeout_;
  per_try_timeout_ = NULL;
  return temp;
}
void RouteAction_RetryPolicy::set_allocated_per_try_timeout(::google::protobuf::Duration* per_try_timeout) {
  delete per_try_timeout_;
  if (per_try_timeout != NULL && per_try_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_per_try_timeout = new ::google::protobuf::Duration;
    new_per_try_timeout->CopyFrom(*per_try_timeout);
    per_try_timeout = new_per_try_timeout;
  }
  per_try_timeout_ = per_try_timeout;
  if (per_try_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.RetryPolicy.per_try_timeout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteAction_RequestMirrorPolicy::kClusterFieldNumber;
const int RouteAction_RequestMirrorPolicy::kRuntimeKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteAction_RequestMirrorPolicy::RouteAction_RequestMirrorPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RouteAction.RequestMirrorPolicy)
}
RouteAction_RequestMirrorPolicy::RouteAction_RequestMirrorPolicy(const RouteAction_RequestMirrorPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster().size() > 0) {
    cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_);
  }
  runtime_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.runtime_key().size() > 0) {
    runtime_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RouteAction.RequestMirrorPolicy)
}

void RouteAction_RequestMirrorPolicy::SharedCtor() {
  cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  runtime_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RouteAction_RequestMirrorPolicy::~RouteAction_RequestMirrorPolicy() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RouteAction.RequestMirrorPolicy)
  SharedDtor();
}

void RouteAction_RequestMirrorPolicy::SharedDtor() {
  cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  runtime_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RouteAction_RequestMirrorPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteAction_RequestMirrorPolicy::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteAction_RequestMirrorPolicy& RouteAction_RequestMirrorPolicy::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteAction_RequestMirrorPolicy* RouteAction_RequestMirrorPolicy::New(::google::protobuf::Arena* arena) const {
  RouteAction_RequestMirrorPolicy* n = new RouteAction_RequestMirrorPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteAction_RequestMirrorPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RouteAction.RequestMirrorPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RouteAction_RequestMirrorPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RouteAction.RequestMirrorPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster().data(), static_cast<int>(this->cluster().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteAction.RequestMirrorPolicy.cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string runtime_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_runtime_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteAction.RequestMirrorPolicy.runtime_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RouteAction.RequestMirrorPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RouteAction.RequestMirrorPolicy)
  return false;
#undef DO_
}

void RouteAction_RequestMirrorPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RouteAction.RequestMirrorPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cluster = 1;
  if (this->cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), static_cast<int>(this->cluster().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.RequestMirrorPolicy.cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster(), output);
  }

  // string runtime_key = 2;
  if (this->runtime_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.RequestMirrorPolicy.runtime_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->runtime_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RouteAction.RequestMirrorPolicy)
}

::google::protobuf::uint8* RouteAction_RequestMirrorPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RouteAction.RequestMirrorPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cluster = 1;
  if (this->cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), static_cast<int>(this->cluster().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.RequestMirrorPolicy.cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster(), target);
  }

  // string runtime_key = 2;
  if (this->runtime_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.RequestMirrorPolicy.runtime_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->runtime_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RouteAction.RequestMirrorPolicy)
  return target;
}

size_t RouteAction_RequestMirrorPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RouteAction.RequestMirrorPolicy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string cluster = 1;
  if (this->cluster().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster());
  }

  // string runtime_key = 2;
  if (this->runtime_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->runtime_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteAction_RequestMirrorPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RouteAction.RequestMirrorPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteAction_RequestMirrorPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteAction_RequestMirrorPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RouteAction.RequestMirrorPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RouteAction.RequestMirrorPolicy)
    MergeFrom(*source);
  }
}

void RouteAction_RequestMirrorPolicy::MergeFrom(const RouteAction_RequestMirrorPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RouteAction.RequestMirrorPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster().size() > 0) {

    cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_);
  }
  if (from.runtime_key().size() > 0) {

    runtime_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
}

void RouteAction_RequestMirrorPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RouteAction.RequestMirrorPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteAction_RequestMirrorPolicy::CopyFrom(const RouteAction_RequestMirrorPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RouteAction.RequestMirrorPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteAction_RequestMirrorPolicy::IsInitialized() const {
  return true;
}

void RouteAction_RequestMirrorPolicy::Swap(RouteAction_RequestMirrorPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteAction_RequestMirrorPolicy::InternalSwap(RouteAction_RequestMirrorPolicy* other) {
  using std::swap;
  cluster_.Swap(&other->cluster_);
  runtime_key_.Swap(&other->runtime_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteAction_RequestMirrorPolicy::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteAction_RequestMirrorPolicy

// string cluster = 1;
void RouteAction_RequestMirrorPolicy::clear_cluster() {
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RouteAction_RequestMirrorPolicy::cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.RequestMirrorPolicy.cluster)
  return cluster_.GetNoArena();
}
void RouteAction_RequestMirrorPolicy::set_cluster(const ::std::string& value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.RequestMirrorPolicy.cluster)
}
#if LANG_CXX11
void RouteAction_RequestMirrorPolicy::set_cluster(::std::string&& value) {
  
  cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteAction.RequestMirrorPolicy.cluster)
}
#endif
void RouteAction_RequestMirrorPolicy::set_cluster(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteAction.RequestMirrorPolicy.cluster)
}
void RouteAction_RequestMirrorPolicy::set_cluster(const char* value, size_t size) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteAction.RequestMirrorPolicy.cluster)
}
::std::string* RouteAction_RequestMirrorPolicy::mutable_cluster() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.RequestMirrorPolicy.cluster)
  return cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteAction_RequestMirrorPolicy::release_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.RequestMirrorPolicy.cluster)
  
  return cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouteAction_RequestMirrorPolicy::set_allocated_cluster(::std::string* cluster) {
  if (cluster != NULL) {
    
  } else {
    
  }
  cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.RequestMirrorPolicy.cluster)
}

// string runtime_key = 2;
void RouteAction_RequestMirrorPolicy::clear_runtime_key() {
  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RouteAction_RequestMirrorPolicy::runtime_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.RequestMirrorPolicy.runtime_key)
  return runtime_key_.GetNoArena();
}
void RouteAction_RequestMirrorPolicy::set_runtime_key(const ::std::string& value) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.RequestMirrorPolicy.runtime_key)
}
#if LANG_CXX11
void RouteAction_RequestMirrorPolicy::set_runtime_key(::std::string&& value) {
  
  runtime_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteAction.RequestMirrorPolicy.runtime_key)
}
#endif
void RouteAction_RequestMirrorPolicy::set_runtime_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteAction.RequestMirrorPolicy.runtime_key)
}
void RouteAction_RequestMirrorPolicy::set_runtime_key(const char* value, size_t size) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteAction.RequestMirrorPolicy.runtime_key)
}
::std::string* RouteAction_RequestMirrorPolicy::mutable_runtime_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.RequestMirrorPolicy.runtime_key)
  return runtime_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteAction_RequestMirrorPolicy::release_runtime_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.RequestMirrorPolicy.runtime_key)
  
  return runtime_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouteAction_RequestMirrorPolicy::set_allocated_runtime_key(::std::string* runtime_key) {
  if (runtime_key != NULL) {
    
  } else {
    
  }
  runtime_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.RequestMirrorPolicy.runtime_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteAction_HashPolicy_Header::kHeaderNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteAction_HashPolicy_Header::RouteAction_HashPolicy_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RouteAction.HashPolicy.Header)
}
RouteAction_HashPolicy_Header::RouteAction_HashPolicy_Header(const RouteAction_HashPolicy_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.header_name().size() > 0) {
    header_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_name_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RouteAction.HashPolicy.Header)
}

void RouteAction_HashPolicy_Header::SharedCtor() {
  header_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RouteAction_HashPolicy_Header::~RouteAction_HashPolicy_Header() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RouteAction.HashPolicy.Header)
  SharedDtor();
}

void RouteAction_HashPolicy_Header::SharedDtor() {
  header_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RouteAction_HashPolicy_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteAction_HashPolicy_Header::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteAction_HashPolicy_Header& RouteAction_HashPolicy_Header::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteAction_HashPolicy_Header* RouteAction_HashPolicy_Header::New(::google::protobuf::Arena* arena) const {
  RouteAction_HashPolicy_Header* n = new RouteAction_HashPolicy_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteAction_HashPolicy_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RouteAction.HashPolicy.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RouteAction_HashPolicy_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RouteAction.HashPolicy.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string header_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->header_name().data(), static_cast<int>(this->header_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteAction.HashPolicy.Header.header_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RouteAction.HashPolicy.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RouteAction.HashPolicy.Header)
  return false;
#undef DO_
}

void RouteAction_HashPolicy_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RouteAction.HashPolicy.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string header_name = 1;
  if (this->header_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->header_name().data(), static_cast<int>(this->header_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.HashPolicy.Header.header_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->header_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RouteAction.HashPolicy.Header)
}

::google::protobuf::uint8* RouteAction_HashPolicy_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RouteAction.HashPolicy.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string header_name = 1;
  if (this->header_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->header_name().data(), static_cast<int>(this->header_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.HashPolicy.Header.header_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->header_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RouteAction.HashPolicy.Header)
  return target;
}

size_t RouteAction_HashPolicy_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RouteAction.HashPolicy.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string header_name = 1;
  if (this->header_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->header_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteAction_HashPolicy_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RouteAction.HashPolicy.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteAction_HashPolicy_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteAction_HashPolicy_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RouteAction.HashPolicy.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RouteAction.HashPolicy.Header)
    MergeFrom(*source);
  }
}

void RouteAction_HashPolicy_Header::MergeFrom(const RouteAction_HashPolicy_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RouteAction.HashPolicy.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.header_name().size() > 0) {

    header_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_name_);
  }
}

void RouteAction_HashPolicy_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RouteAction.HashPolicy.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteAction_HashPolicy_Header::CopyFrom(const RouteAction_HashPolicy_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RouteAction.HashPolicy.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteAction_HashPolicy_Header::IsInitialized() const {
  return true;
}

void RouteAction_HashPolicy_Header::Swap(RouteAction_HashPolicy_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteAction_HashPolicy_Header::InternalSwap(RouteAction_HashPolicy_Header* other) {
  using std::swap;
  header_name_.Swap(&other->header_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteAction_HashPolicy_Header::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteAction_HashPolicy_Header

// string header_name = 1;
void RouteAction_HashPolicy_Header::clear_header_name() {
  header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RouteAction_HashPolicy_Header::header_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.HashPolicy.Header.header_name)
  return header_name_.GetNoArena();
}
void RouteAction_HashPolicy_Header::set_header_name(const ::std::string& value) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.HashPolicy.Header.header_name)
}
#if LANG_CXX11
void RouteAction_HashPolicy_Header::set_header_name(::std::string&& value) {
  
  header_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteAction.HashPolicy.Header.header_name)
}
#endif
void RouteAction_HashPolicy_Header::set_header_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteAction.HashPolicy.Header.header_name)
}
void RouteAction_HashPolicy_Header::set_header_name(const char* value, size_t size) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteAction.HashPolicy.Header.header_name)
}
::std::string* RouteAction_HashPolicy_Header::mutable_header_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.HashPolicy.Header.header_name)
  return header_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteAction_HashPolicy_Header::release_header_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.HashPolicy.Header.header_name)
  
  return header_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouteAction_HashPolicy_Header::set_allocated_header_name(::std::string* header_name) {
  if (header_name != NULL) {
    
  } else {
    
  }
  header_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.HashPolicy.Header.header_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteAction_HashPolicy_Cookie::kNameFieldNumber;
const int RouteAction_HashPolicy_Cookie::kTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteAction_HashPolicy_Cookie::RouteAction_HashPolicy_Cookie()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RouteAction.HashPolicy.Cookie)
}
RouteAction_HashPolicy_Cookie::RouteAction_HashPolicy_Cookie(const RouteAction_HashPolicy_Cookie& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_ttl()) {
    ttl_ = new ::google::protobuf::Duration(*from.ttl_);
  } else {
    ttl_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RouteAction.HashPolicy.Cookie)
}

void RouteAction_HashPolicy_Cookie::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ttl_ = NULL;
  _cached_size_ = 0;
}

RouteAction_HashPolicy_Cookie::~RouteAction_HashPolicy_Cookie() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RouteAction.HashPolicy.Cookie)
  SharedDtor();
}

void RouteAction_HashPolicy_Cookie::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ttl_;
}

void RouteAction_HashPolicy_Cookie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteAction_HashPolicy_Cookie::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteAction_HashPolicy_Cookie& RouteAction_HashPolicy_Cookie::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteAction_HashPolicy_Cookie* RouteAction_HashPolicy_Cookie::New(::google::protobuf::Arena* arena) const {
  RouteAction_HashPolicy_Cookie* n = new RouteAction_HashPolicy_Cookie;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteAction_HashPolicy_Cookie::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RouteAction.HashPolicy.Cookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && ttl_ != NULL) {
    delete ttl_;
  }
  ttl_ = NULL;
  _internal_metadata_.Clear();
}

bool RouteAction_HashPolicy_Cookie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RouteAction.HashPolicy.Cookie)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteAction.HashPolicy.Cookie.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration ttl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ttl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RouteAction.HashPolicy.Cookie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RouteAction.HashPolicy.Cookie)
  return false;
#undef DO_
}

void RouteAction_HashPolicy_Cookie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RouteAction.HashPolicy.Cookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.HashPolicy.Cookie.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.Duration ttl = 2;
  if (this->has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ttl_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RouteAction.HashPolicy.Cookie)
}

::google::protobuf::uint8* RouteAction_HashPolicy_Cookie::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RouteAction.HashPolicy.Cookie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.HashPolicy.Cookie.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.Duration ttl = 2;
  if (this->has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ttl_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RouteAction.HashPolicy.Cookie)
  return target;
}

size_t RouteAction_HashPolicy_Cookie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RouteAction.HashPolicy.Cookie)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Duration ttl = 2;
  if (this->has_ttl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ttl_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteAction_HashPolicy_Cookie::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RouteAction.HashPolicy.Cookie)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteAction_HashPolicy_Cookie* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteAction_HashPolicy_Cookie>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RouteAction.HashPolicy.Cookie)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RouteAction.HashPolicy.Cookie)
    MergeFrom(*source);
  }
}

void RouteAction_HashPolicy_Cookie::MergeFrom(const RouteAction_HashPolicy_Cookie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RouteAction.HashPolicy.Cookie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_ttl()) {
    mutable_ttl()->::google::protobuf::Duration::MergeFrom(from.ttl());
  }
}

void RouteAction_HashPolicy_Cookie::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RouteAction.HashPolicy.Cookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteAction_HashPolicy_Cookie::CopyFrom(const RouteAction_HashPolicy_Cookie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RouteAction.HashPolicy.Cookie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteAction_HashPolicy_Cookie::IsInitialized() const {
  return true;
}

void RouteAction_HashPolicy_Cookie::Swap(RouteAction_HashPolicy_Cookie* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteAction_HashPolicy_Cookie::InternalSwap(RouteAction_HashPolicy_Cookie* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(ttl_, other->ttl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteAction_HashPolicy_Cookie::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteAction_HashPolicy_Cookie

// string name = 1;
void RouteAction_HashPolicy_Cookie::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RouteAction_HashPolicy_Cookie::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.HashPolicy.Cookie.name)
  return name_.GetNoArena();
}
void RouteAction_HashPolicy_Cookie::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.HashPolicy.Cookie.name)
}
#if LANG_CXX11
void RouteAction_HashPolicy_Cookie::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteAction.HashPolicy.Cookie.name)
}
#endif
void RouteAction_HashPolicy_Cookie::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteAction.HashPolicy.Cookie.name)
}
void RouteAction_HashPolicy_Cookie::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteAction.HashPolicy.Cookie.name)
}
::std::string* RouteAction_HashPolicy_Cookie::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.HashPolicy.Cookie.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteAction_HashPolicy_Cookie::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.HashPolicy.Cookie.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouteAction_HashPolicy_Cookie::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.HashPolicy.Cookie.name)
}

// .google.protobuf.Duration ttl = 2;
bool RouteAction_HashPolicy_Cookie::has_ttl() const {
  return this != internal_default_instance() && ttl_ != NULL;
}
void RouteAction_HashPolicy_Cookie::clear_ttl() {
  if (GetArenaNoVirtual() == NULL && ttl_ != NULL) delete ttl_;
  ttl_ = NULL;
}
const ::google::protobuf::Duration& RouteAction_HashPolicy_Cookie::ttl() const {
  const ::google::protobuf::Duration* p = ttl_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.HashPolicy.Cookie.ttl)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* RouteAction_HashPolicy_Cookie::mutable_ttl() {
  
  if (ttl_ == NULL) {
    ttl_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.HashPolicy.Cookie.ttl)
  return ttl_;
}
::google::protobuf::Duration* RouteAction_HashPolicy_Cookie::release_ttl() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.HashPolicy.Cookie.ttl)
  
  ::google::protobuf::Duration* temp = ttl_;
  ttl_ = NULL;
  return temp;
}
void RouteAction_HashPolicy_Cookie::set_allocated_ttl(::google::protobuf::Duration* ttl) {
  delete ttl_;
  if (ttl != NULL && ttl->GetArena() != NULL) {
    ::google::protobuf::Duration* new_ttl = new ::google::protobuf::Duration;
    new_ttl->CopyFrom(*ttl);
    ttl = new_ttl;
  }
  ttl_ = ttl;
  if (ttl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.HashPolicy.Cookie.ttl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteAction_HashPolicy_ConnectionProperties::kSourceIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteAction_HashPolicy_ConnectionProperties::RouteAction_HashPolicy_ConnectionProperties()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
}
RouteAction_HashPolicy_ConnectionProperties::RouteAction_HashPolicy_ConnectionProperties(const RouteAction_HashPolicy_ConnectionProperties& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_ip_ = from.source_ip_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
}

void RouteAction_HashPolicy_ConnectionProperties::SharedCtor() {
  source_ip_ = false;
  _cached_size_ = 0;
}

RouteAction_HashPolicy_ConnectionProperties::~RouteAction_HashPolicy_ConnectionProperties() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
  SharedDtor();
}

void RouteAction_HashPolicy_ConnectionProperties::SharedDtor() {
}

void RouteAction_HashPolicy_ConnectionProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteAction_HashPolicy_ConnectionProperties::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteAction_HashPolicy_ConnectionProperties& RouteAction_HashPolicy_ConnectionProperties::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteAction_HashPolicy_ConnectionProperties* RouteAction_HashPolicy_ConnectionProperties::New(::google::protobuf::Arena* arena) const {
  RouteAction_HashPolicy_ConnectionProperties* n = new RouteAction_HashPolicy_ConnectionProperties;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteAction_HashPolicy_ConnectionProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_ip_ = false;
  _internal_metadata_.Clear();
}

bool RouteAction_HashPolicy_ConnectionProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool source_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &source_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
  return false;
#undef DO_
}

void RouteAction_HashPolicy_ConnectionProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool source_ip = 1;
  if (this->source_ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->source_ip(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
}

::google::protobuf::uint8* RouteAction_HashPolicy_ConnectionProperties::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool source_ip = 1;
  if (this->source_ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->source_ip(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
  return target;
}

size_t RouteAction_HashPolicy_ConnectionProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool source_ip = 1;
  if (this->source_ip() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteAction_HashPolicy_ConnectionProperties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteAction_HashPolicy_ConnectionProperties* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteAction_HashPolicy_ConnectionProperties>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
    MergeFrom(*source);
  }
}

void RouteAction_HashPolicy_ConnectionProperties::MergeFrom(const RouteAction_HashPolicy_ConnectionProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_ip() != 0) {
    set_source_ip(from.source_ip());
  }
}

void RouteAction_HashPolicy_ConnectionProperties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteAction_HashPolicy_ConnectionProperties::CopyFrom(const RouteAction_HashPolicy_ConnectionProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteAction_HashPolicy_ConnectionProperties::IsInitialized() const {
  return true;
}

void RouteAction_HashPolicy_ConnectionProperties::Swap(RouteAction_HashPolicy_ConnectionProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteAction_HashPolicy_ConnectionProperties::InternalSwap(RouteAction_HashPolicy_ConnectionProperties* other) {
  using std::swap;
  swap(source_ip_, other->source_ip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteAction_HashPolicy_ConnectionProperties::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteAction_HashPolicy_ConnectionProperties

// bool source_ip = 1;
void RouteAction_HashPolicy_ConnectionProperties::clear_source_ip() {
  source_ip_ = false;
}
bool RouteAction_HashPolicy_ConnectionProperties::source_ip() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties.source_ip)
  return source_ip_;
}
void RouteAction_HashPolicy_ConnectionProperties::set_source_ip(bool value) {
  
  source_ip_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties.source_ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteAction_HashPolicy::kHeaderFieldNumber;
const int RouteAction_HashPolicy::kCookieFieldNumber;
const int RouteAction_HashPolicy::kConnectionPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteAction_HashPolicy::RouteAction_HashPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RouteAction.HashPolicy)
}
RouteAction_HashPolicy::RouteAction_HashPolicy(const RouteAction_HashPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_policy_specifier();
  switch (from.policy_specifier_case()) {
    case kHeader: {
      mutable_header()->::envoy::api::v2::RouteAction_HashPolicy_Header::MergeFrom(from.header());
      break;
    }
    case kCookie: {
      mutable_cookie()->::envoy::api::v2::RouteAction_HashPolicy_Cookie::MergeFrom(from.cookie());
      break;
    }
    case kConnectionProperties: {
      mutable_connection_properties()->::envoy::api::v2::RouteAction_HashPolicy_ConnectionProperties::MergeFrom(from.connection_properties());
      break;
    }
    case POLICY_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RouteAction.HashPolicy)
}

void RouteAction_HashPolicy::SharedCtor() {
  clear_has_policy_specifier();
  _cached_size_ = 0;
}

RouteAction_HashPolicy::~RouteAction_HashPolicy() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RouteAction.HashPolicy)
  SharedDtor();
}

void RouteAction_HashPolicy::SharedDtor() {
  if (has_policy_specifier()) {
    clear_policy_specifier();
  }
}

void RouteAction_HashPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteAction_HashPolicy::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteAction_HashPolicy& RouteAction_HashPolicy::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteAction_HashPolicy* RouteAction_HashPolicy::New(::google::protobuf::Arena* arena) const {
  RouteAction_HashPolicy* n = new RouteAction_HashPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteAction_HashPolicy::clear_policy_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.RouteAction.HashPolicy)
  switch (policy_specifier_case()) {
    case kHeader: {
      delete policy_specifier_.header_;
      break;
    }
    case kCookie: {
      delete policy_specifier_.cookie_;
      break;
    }
    case kConnectionProperties: {
      delete policy_specifier_.connection_properties_;
      break;
    }
    case POLICY_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = POLICY_SPECIFIER_NOT_SET;
}


void RouteAction_HashPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RouteAction.HashPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_policy_specifier();
  _internal_metadata_.Clear();
}

bool RouteAction_HashPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RouteAction.HashPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.RouteAction.HashPolicy.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RouteAction.HashPolicy.Cookie cookie = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cookie()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties connection_properties = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connection_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RouteAction.HashPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RouteAction.HashPolicy)
  return false;
#undef DO_
}

void RouteAction_HashPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RouteAction.HashPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.RouteAction.HashPolicy.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *policy_specifier_.header_, output);
  }

  // .envoy.api.v2.RouteAction.HashPolicy.Cookie cookie = 2;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *policy_specifier_.cookie_, output);
  }

  // .envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties connection_properties = 3;
  if (has_connection_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *policy_specifier_.connection_properties_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RouteAction.HashPolicy)
}

::google::protobuf::uint8* RouteAction_HashPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RouteAction.HashPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.RouteAction.HashPolicy.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *policy_specifier_.header_, deterministic, target);
  }

  // .envoy.api.v2.RouteAction.HashPolicy.Cookie cookie = 2;
  if (has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *policy_specifier_.cookie_, deterministic, target);
  }

  // .envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties connection_properties = 3;
  if (has_connection_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *policy_specifier_.connection_properties_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RouteAction.HashPolicy)
  return target;
}

size_t RouteAction_HashPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RouteAction.HashPolicy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (policy_specifier_case()) {
    // .envoy.api.v2.RouteAction.HashPolicy.Header header = 1;
    case kHeader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *policy_specifier_.header_);
      break;
    }
    // .envoy.api.v2.RouteAction.HashPolicy.Cookie cookie = 2;
    case kCookie: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *policy_specifier_.cookie_);
      break;
    }
    // .envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties connection_properties = 3;
    case kConnectionProperties: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *policy_specifier_.connection_properties_);
      break;
    }
    case POLICY_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteAction_HashPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RouteAction.HashPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteAction_HashPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteAction_HashPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RouteAction.HashPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RouteAction.HashPolicy)
    MergeFrom(*source);
  }
}

void RouteAction_HashPolicy::MergeFrom(const RouteAction_HashPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RouteAction.HashPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.policy_specifier_case()) {
    case kHeader: {
      mutable_header()->::envoy::api::v2::RouteAction_HashPolicy_Header::MergeFrom(from.header());
      break;
    }
    case kCookie: {
      mutable_cookie()->::envoy::api::v2::RouteAction_HashPolicy_Cookie::MergeFrom(from.cookie());
      break;
    }
    case kConnectionProperties: {
      mutable_connection_properties()->::envoy::api::v2::RouteAction_HashPolicy_ConnectionProperties::MergeFrom(from.connection_properties());
      break;
    }
    case POLICY_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void RouteAction_HashPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RouteAction.HashPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteAction_HashPolicy::CopyFrom(const RouteAction_HashPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RouteAction.HashPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteAction_HashPolicy::IsInitialized() const {
  return true;
}

void RouteAction_HashPolicy::Swap(RouteAction_HashPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteAction_HashPolicy::InternalSwap(RouteAction_HashPolicy* other) {
  using std::swap;
  swap(policy_specifier_, other->policy_specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteAction_HashPolicy::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteAction_HashPolicy

// .envoy.api.v2.RouteAction.HashPolicy.Header header = 1;
bool RouteAction_HashPolicy::has_header() const {
  return policy_specifier_case() == kHeader;
}
void RouteAction_HashPolicy::set_has_header() {
  _oneof_case_[0] = kHeader;
}
void RouteAction_HashPolicy::clear_header() {
  if (has_header()) {
    delete policy_specifier_.header_;
    clear_has_policy_specifier();
  }
}
 const ::envoy::api::v2::RouteAction_HashPolicy_Header& RouteAction_HashPolicy::header() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.HashPolicy.header)
  return has_header()
      ? *policy_specifier_.header_
      : ::envoy::api::v2::RouteAction_HashPolicy_Header::default_instance();
}
::envoy::api::v2::RouteAction_HashPolicy_Header* RouteAction_HashPolicy::mutable_header() {
  if (!has_header()) {
    clear_policy_specifier();
    set_has_header();
    policy_specifier_.header_ = new ::envoy::api::v2::RouteAction_HashPolicy_Header;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.HashPolicy.header)
  return policy_specifier_.header_;
}
::envoy::api::v2::RouteAction_HashPolicy_Header* RouteAction_HashPolicy::release_header() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.HashPolicy.header)
  if (has_header()) {
    clear_has_policy_specifier();
    ::envoy::api::v2::RouteAction_HashPolicy_Header* temp = policy_specifier_.header_;
    policy_specifier_.header_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RouteAction_HashPolicy::set_allocated_header(::envoy::api::v2::RouteAction_HashPolicy_Header* header) {
  clear_policy_specifier();
  if (header) {
    set_has_header();
    policy_specifier_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.HashPolicy.header)
}

// .envoy.api.v2.RouteAction.HashPolicy.Cookie cookie = 2;
bool RouteAction_HashPolicy::has_cookie() const {
  return policy_specifier_case() == kCookie;
}
void RouteAction_HashPolicy::set_has_cookie() {
  _oneof_case_[0] = kCookie;
}
void RouteAction_HashPolicy::clear_cookie() {
  if (has_cookie()) {
    delete policy_specifier_.cookie_;
    clear_has_policy_specifier();
  }
}
 const ::envoy::api::v2::RouteAction_HashPolicy_Cookie& RouteAction_HashPolicy::cookie() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.HashPolicy.cookie)
  return has_cookie()
      ? *policy_specifier_.cookie_
      : ::envoy::api::v2::RouteAction_HashPolicy_Cookie::default_instance();
}
::envoy::api::v2::RouteAction_HashPolicy_Cookie* RouteAction_HashPolicy::mutable_cookie() {
  if (!has_cookie()) {
    clear_policy_specifier();
    set_has_cookie();
    policy_specifier_.cookie_ = new ::envoy::api::v2::RouteAction_HashPolicy_Cookie;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.HashPolicy.cookie)
  return policy_specifier_.cookie_;
}
::envoy::api::v2::RouteAction_HashPolicy_Cookie* RouteAction_HashPolicy::release_cookie() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.HashPolicy.cookie)
  if (has_cookie()) {
    clear_has_policy_specifier();
    ::envoy::api::v2::RouteAction_HashPolicy_Cookie* temp = policy_specifier_.cookie_;
    policy_specifier_.cookie_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RouteAction_HashPolicy::set_allocated_cookie(::envoy::api::v2::RouteAction_HashPolicy_Cookie* cookie) {
  clear_policy_specifier();
  if (cookie) {
    set_has_cookie();
    policy_specifier_.cookie_ = cookie;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.HashPolicy.cookie)
}

// .envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties connection_properties = 3;
bool RouteAction_HashPolicy::has_connection_properties() const {
  return policy_specifier_case() == kConnectionProperties;
}
void RouteAction_HashPolicy::set_has_connection_properties() {
  _oneof_case_[0] = kConnectionProperties;
}
void RouteAction_HashPolicy::clear_connection_properties() {
  if (has_connection_properties()) {
    delete policy_specifier_.connection_properties_;
    clear_has_policy_specifier();
  }
}
 const ::envoy::api::v2::RouteAction_HashPolicy_ConnectionProperties& RouteAction_HashPolicy::connection_properties() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.HashPolicy.connection_properties)
  return has_connection_properties()
      ? *policy_specifier_.connection_properties_
      : ::envoy::api::v2::RouteAction_HashPolicy_ConnectionProperties::default_instance();
}
::envoy::api::v2::RouteAction_HashPolicy_ConnectionProperties* RouteAction_HashPolicy::mutable_connection_properties() {
  if (!has_connection_properties()) {
    clear_policy_specifier();
    set_has_connection_properties();
    policy_specifier_.connection_properties_ = new ::envoy::api::v2::RouteAction_HashPolicy_ConnectionProperties;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.HashPolicy.connection_properties)
  return policy_specifier_.connection_properties_;
}
::envoy::api::v2::RouteAction_HashPolicy_ConnectionProperties* RouteAction_HashPolicy::release_connection_properties() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.HashPolicy.connection_properties)
  if (has_connection_properties()) {
    clear_has_policy_specifier();
    ::envoy::api::v2::RouteAction_HashPolicy_ConnectionProperties* temp = policy_specifier_.connection_properties_;
    policy_specifier_.connection_properties_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RouteAction_HashPolicy::set_allocated_connection_properties(::envoy::api::v2::RouteAction_HashPolicy_ConnectionProperties* connection_properties) {
  clear_policy_specifier();
  if (connection_properties) {
    set_has_connection_properties();
    policy_specifier_.connection_properties_ = connection_properties;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.HashPolicy.connection_properties)
}

bool RouteAction_HashPolicy::has_policy_specifier() const {
  return policy_specifier_case() != POLICY_SPECIFIER_NOT_SET;
}
void RouteAction_HashPolicy::clear_has_policy_specifier() {
  _oneof_case_[0] = POLICY_SPECIFIER_NOT_SET;
}
RouteAction_HashPolicy::PolicySpecifierCase RouteAction_HashPolicy::policy_specifier_case() const {
  return RouteAction_HashPolicy::PolicySpecifierCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteAction::kClusterFieldNumber;
const int RouteAction::kClusterHeaderFieldNumber;
const int RouteAction::kWeightedClustersFieldNumber;
const int RouteAction::kMetadataMatchFieldNumber;
const int RouteAction::kPrefixRewriteFieldNumber;
const int RouteAction::kHostRewriteFieldNumber;
const int RouteAction::kAutoHostRewriteFieldNumber;
const int RouteAction::kTimeoutFieldNumber;
const int RouteAction::kRetryPolicyFieldNumber;
const int RouteAction::kRequestMirrorPolicyFieldNumber;
const int RouteAction::kPriorityFieldNumber;
const int RouteAction::kRequestHeadersToAddFieldNumber;
const int RouteAction::kRateLimitsFieldNumber;
const int RouteAction::kIncludeVhRateLimitsFieldNumber;
const int RouteAction::kHashPolicyFieldNumber;
const int RouteAction::kUseWebsocketFieldNumber;
const int RouteAction::kCorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteAction::RouteAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RouteAction)
}
RouteAction::RouteAction(const RouteAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      request_headers_to_add_(from.request_headers_to_add_),
      rate_limits_(from.rate_limits_),
      hash_policy_(from.hash_policy_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefix_rewrite().size() > 0) {
    prefix_rewrite_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_rewrite_);
  }
  if (from.has_metadata_match()) {
    metadata_match_ = new ::envoy::api::v2::Metadata(*from.metadata_match_);
  } else {
    metadata_match_ = NULL;
  }
  if (from.has_timeout()) {
    timeout_ = new ::google::protobuf::Duration(*from.timeout_);
  } else {
    timeout_ = NULL;
  }
  if (from.has_retry_policy()) {
    retry_policy_ = new ::envoy::api::v2::RouteAction_RetryPolicy(*from.retry_policy_);
  } else {
    retry_policy_ = NULL;
  }
  if (from.has_request_mirror_policy()) {
    request_mirror_policy_ = new ::envoy::api::v2::RouteAction_RequestMirrorPolicy(*from.request_mirror_policy_);
  } else {
    request_mirror_policy_ = NULL;
  }
  if (from.has_include_vh_rate_limits()) {
    include_vh_rate_limits_ = new ::google::protobuf::BoolValue(*from.include_vh_rate_limits_);
  } else {
    include_vh_rate_limits_ = NULL;
  }
  if (from.has_use_websocket()) {
    use_websocket_ = new ::google::protobuf::BoolValue(*from.use_websocket_);
  } else {
    use_websocket_ = NULL;
  }
  if (from.has_cors()) {
    cors_ = new ::envoy::api::v2::CorsPolicy(*from.cors_);
  } else {
    cors_ = NULL;
  }
  priority_ = from.priority_;
  clear_has_cluster_specifier();
  switch (from.cluster_specifier_case()) {
    case kCluster: {
      set_cluster(from.cluster());
      break;
    }
    case kClusterHeader: {
      set_cluster_header(from.cluster_header());
      break;
    }
    case kWeightedClusters: {
      mutable_weighted_clusters()->::envoy::api::v2::WeightedCluster::MergeFrom(from.weighted_clusters());
      break;
    }
    case CLUSTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  clear_has_host_rewrite_specifier();
  switch (from.host_rewrite_specifier_case()) {
    case kHostRewrite: {
      set_host_rewrite(from.host_rewrite());
      break;
    }
    case kAutoHostRewrite: {
      mutable_auto_host_rewrite()->::google::protobuf::BoolValue::MergeFrom(from.auto_host_rewrite());
      break;
    }
    case HOST_REWRITE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RouteAction)
}

void RouteAction::SharedCtor() {
  prefix_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&metadata_match_)) + sizeof(priority_));
  clear_has_cluster_specifier();
  clear_has_host_rewrite_specifier();
  _cached_size_ = 0;
}

RouteAction::~RouteAction() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RouteAction)
  SharedDtor();
}

void RouteAction::SharedDtor() {
  prefix_rewrite_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_match_;
  if (this != internal_default_instance()) delete timeout_;
  if (this != internal_default_instance()) delete retry_policy_;
  if (this != internal_default_instance()) delete request_mirror_policy_;
  if (this != internal_default_instance()) delete include_vh_rate_limits_;
  if (this != internal_default_instance()) delete use_websocket_;
  if (this != internal_default_instance()) delete cors_;
  if (has_cluster_specifier()) {
    clear_cluster_specifier();
  }
  if (has_host_rewrite_specifier()) {
    clear_host_rewrite_specifier();
  }
}

void RouteAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteAction::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteAction& RouteAction::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteAction* RouteAction::New(::google::protobuf::Arena* arena) const {
  RouteAction* n = new RouteAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteAction::clear_cluster_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.RouteAction)
  switch (cluster_specifier_case()) {
    case kCluster: {
      cluster_specifier_.cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kClusterHeader: {
      cluster_specifier_.cluster_header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kWeightedClusters: {
      delete cluster_specifier_.weighted_clusters_;
      break;
    }
    case CLUSTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLUSTER_SPECIFIER_NOT_SET;
}

void RouteAction::clear_host_rewrite_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.RouteAction)
  switch (host_rewrite_specifier_case()) {
    case kHostRewrite: {
      host_rewrite_specifier_.host_rewrite_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kAutoHostRewrite: {
      delete host_rewrite_specifier_.auto_host_rewrite_;
      break;
    }
    case HOST_REWRITE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HOST_REWRITE_SPECIFIER_NOT_SET;
}


void RouteAction::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RouteAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_to_add_.Clear();
  rate_limits_.Clear();
  hash_policy_.Clear();
  prefix_rewrite_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && metadata_match_ != NULL) {
    delete metadata_match_;
  }
  metadata_match_ = NULL;
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) {
    delete timeout_;
  }
  timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && retry_policy_ != NULL) {
    delete retry_policy_;
  }
  retry_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_mirror_policy_ != NULL) {
    delete request_mirror_policy_;
  }
  request_mirror_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && include_vh_rate_limits_ != NULL) {
    delete include_vh_rate_limits_;
  }
  include_vh_rate_limits_ = NULL;
  if (GetArenaNoVirtual() == NULL && use_websocket_ != NULL) {
    delete use_websocket_;
  }
  use_websocket_ = NULL;
  if (GetArenaNoVirtual() == NULL && cors_ != NULL) {
    delete cors_;
  }
  cors_ = NULL;
  priority_ = 0;
  clear_cluster_specifier();
  clear_host_rewrite_specifier();
  _internal_metadata_.Clear();
}

bool RouteAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RouteAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster().data(), static_cast<int>(this->cluster().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteAction.cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_header()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_header().data(), static_cast<int>(this->cluster_header().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteAction.cluster_header"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.WeightedCluster weighted_clusters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Metadata metadata_match = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefix_rewrite = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix_rewrite()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix_rewrite().data(), static_cast<int>(this->prefix_rewrite().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteAction.prefix_rewrite"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host_rewrite = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_rewrite()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_rewrite().data(), static_cast<int>(this->host_rewrite().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteAction.host_rewrite"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue auto_host_rewrite = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_host_rewrite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration timeout = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RouteAction.RetryPolicy retry_policy = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retry_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RouteAction.RequestMirrorPolicy request_mirror_policy = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_mirror_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RoutingPriority priority = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_priority(static_cast< ::envoy::api::v2::RoutingPriority >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request_headers_to_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.RateLimit rate_limits = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rate_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue include_vh_rate_limits = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_include_vh_rate_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.RouteAction.HashPolicy hash_policy = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hash_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue use_websocket = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_use_websocket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.CorsPolicy cors = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RouteAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RouteAction)
  return false;
#undef DO_
}

void RouteAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RouteAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cluster = 1;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), static_cast<int>(this->cluster().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster(), output);
  }

  // string cluster_header = 2;
  if (has_cluster_header()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_header().data(), static_cast<int>(this->cluster_header().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.cluster_header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_header(), output);
  }

  // .envoy.api.v2.WeightedCluster weighted_clusters = 3;
  if (has_weighted_clusters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *cluster_specifier_.weighted_clusters_, output);
  }

  // .envoy.api.v2.Metadata metadata_match = 4;
  if (this->has_metadata_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->metadata_match_, output);
  }

  // string prefix_rewrite = 5;
  if (this->prefix_rewrite().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix_rewrite().data(), static_cast<int>(this->prefix_rewrite().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.prefix_rewrite");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->prefix_rewrite(), output);
  }

  // string host_rewrite = 6;
  if (has_host_rewrite()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_rewrite().data(), static_cast<int>(this->host_rewrite().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.host_rewrite");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->host_rewrite(), output);
  }

  // .google.protobuf.BoolValue auto_host_rewrite = 7;
  if (has_auto_host_rewrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *host_rewrite_specifier_.auto_host_rewrite_, output);
  }

  // .google.protobuf.Duration timeout = 8;
  if (this->has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->timeout_, output);
  }

  // .envoy.api.v2.RouteAction.RetryPolicy retry_policy = 9;
  if (this->has_retry_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->retry_policy_, output);
  }

  // .envoy.api.v2.RouteAction.RequestMirrorPolicy request_mirror_policy = 10;
  if (this->has_request_mirror_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->request_mirror_policy_, output);
  }

  // .envoy.api.v2.RoutingPriority priority = 11;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->priority(), output);
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_headers_to_add_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->request_headers_to_add(static_cast<int>(i)), output);
  }

  // repeated .envoy.api.v2.RateLimit rate_limits = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rate_limits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->rate_limits(static_cast<int>(i)), output);
  }

  // .google.protobuf.BoolValue include_vh_rate_limits = 14;
  if (this->has_include_vh_rate_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->include_vh_rate_limits_, output);
  }

  // repeated .envoy.api.v2.RouteAction.HashPolicy hash_policy = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hash_policy_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->hash_policy(static_cast<int>(i)), output);
  }

  // .google.protobuf.BoolValue use_websocket = 16;
  if (this->has_use_websocket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->use_websocket_, output);
  }

  // .envoy.api.v2.CorsPolicy cors = 17;
  if (this->has_cors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->cors_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RouteAction)
}

::google::protobuf::uint8* RouteAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RouteAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cluster = 1;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), static_cast<int>(this->cluster().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster(), target);
  }

  // string cluster_header = 2;
  if (has_cluster_header()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_header().data(), static_cast<int>(this->cluster_header().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.cluster_header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_header(), target);
  }

  // .envoy.api.v2.WeightedCluster weighted_clusters = 3;
  if (has_weighted_clusters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *cluster_specifier_.weighted_clusters_, deterministic, target);
  }

  // .envoy.api.v2.Metadata metadata_match = 4;
  if (this->has_metadata_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->metadata_match_, deterministic, target);
  }

  // string prefix_rewrite = 5;
  if (this->prefix_rewrite().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix_rewrite().data(), static_cast<int>(this->prefix_rewrite().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.prefix_rewrite");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->prefix_rewrite(), target);
  }

  // string host_rewrite = 6;
  if (has_host_rewrite()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_rewrite().data(), static_cast<int>(this->host_rewrite().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteAction.host_rewrite");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host_rewrite(), target);
  }

  // .google.protobuf.BoolValue auto_host_rewrite = 7;
  if (has_auto_host_rewrite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *host_rewrite_specifier_.auto_host_rewrite_, deterministic, target);
  }

  // .google.protobuf.Duration timeout = 8;
  if (this->has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->timeout_, deterministic, target);
  }

  // .envoy.api.v2.RouteAction.RetryPolicy retry_policy = 9;
  if (this->has_retry_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->retry_policy_, deterministic, target);
  }

  // .envoy.api.v2.RouteAction.RequestMirrorPolicy request_mirror_policy = 10;
  if (this->has_request_mirror_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->request_mirror_policy_, deterministic, target);
  }

  // .envoy.api.v2.RoutingPriority priority = 11;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->priority(), target);
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_headers_to_add_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->request_headers_to_add(static_cast<int>(i)), deterministic, target);
  }

  // repeated .envoy.api.v2.RateLimit rate_limits = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rate_limits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->rate_limits(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.BoolValue include_vh_rate_limits = 14;
  if (this->has_include_vh_rate_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->include_vh_rate_limits_, deterministic, target);
  }

  // repeated .envoy.api.v2.RouteAction.HashPolicy hash_policy = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hash_policy_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->hash_policy(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.BoolValue use_websocket = 16;
  if (this->has_use_websocket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->use_websocket_, deterministic, target);
  }

  // .envoy.api.v2.CorsPolicy cors = 17;
  if (this->has_cors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->cors_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RouteAction)
  return target;
}

size_t RouteAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RouteAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->request_headers_to_add_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_headers_to_add(static_cast<int>(i)));
    }
  }

  // repeated .envoy.api.v2.RateLimit rate_limits = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->rate_limits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rate_limits(static_cast<int>(i)));
    }
  }

  // repeated .envoy.api.v2.RouteAction.HashPolicy hash_policy = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->hash_policy_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hash_policy(static_cast<int>(i)));
    }
  }

  // string prefix_rewrite = 5;
  if (this->prefix_rewrite().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix_rewrite());
  }

  // .envoy.api.v2.Metadata metadata_match = 4;
  if (this->has_metadata_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_match_);
  }

  // .google.protobuf.Duration timeout = 8;
  if (this->has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timeout_);
  }

  // .envoy.api.v2.RouteAction.RetryPolicy retry_policy = 9;
  if (this->has_retry_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->retry_policy_);
  }

  // .envoy.api.v2.RouteAction.RequestMirrorPolicy request_mirror_policy = 10;
  if (this->has_request_mirror_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_mirror_policy_);
  }

  // .google.protobuf.BoolValue include_vh_rate_limits = 14;
  if (this->has_include_vh_rate_limits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->include_vh_rate_limits_);
  }

  // .google.protobuf.BoolValue use_websocket = 16;
  if (this->has_use_websocket()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->use_websocket_);
  }

  // .envoy.api.v2.CorsPolicy cors = 17;
  if (this->has_cors()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cors_);
  }

  // .envoy.api.v2.RoutingPriority priority = 11;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  switch (cluster_specifier_case()) {
    // string cluster = 1;
    case kCluster: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster());
      break;
    }
    // string cluster_header = 2;
    case kClusterHeader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_header());
      break;
    }
    // .envoy.api.v2.WeightedCluster weighted_clusters = 3;
    case kWeightedClusters: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cluster_specifier_.weighted_clusters_);
      break;
    }
    case CLUSTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  switch (host_rewrite_specifier_case()) {
    // string host_rewrite = 6;
    case kHostRewrite: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_rewrite());
      break;
    }
    // .google.protobuf.BoolValue auto_host_rewrite = 7;
    case kAutoHostRewrite: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *host_rewrite_specifier_.auto_host_rewrite_);
      break;
    }
    case HOST_REWRITE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RouteAction)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RouteAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RouteAction)
    MergeFrom(*source);
  }
}

void RouteAction::MergeFrom(const RouteAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RouteAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_to_add_.MergeFrom(from.request_headers_to_add_);
  rate_limits_.MergeFrom(from.rate_limits_);
  hash_policy_.MergeFrom(from.hash_policy_);
  if (from.prefix_rewrite().size() > 0) {

    prefix_rewrite_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_rewrite_);
  }
  if (from.has_metadata_match()) {
    mutable_metadata_match()->::envoy::api::v2::Metadata::MergeFrom(from.metadata_match());
  }
  if (from.has_timeout()) {
    mutable_timeout()->::google::protobuf::Duration::MergeFrom(from.timeout());
  }
  if (from.has_retry_policy()) {
    mutable_retry_policy()->::envoy::api::v2::RouteAction_RetryPolicy::MergeFrom(from.retry_policy());
  }
  if (from.has_request_mirror_policy()) {
    mutable_request_mirror_policy()->::envoy::api::v2::RouteAction_RequestMirrorPolicy::MergeFrom(from.request_mirror_policy());
  }
  if (from.has_include_vh_rate_limits()) {
    mutable_include_vh_rate_limits()->::google::protobuf::BoolValue::MergeFrom(from.include_vh_rate_limits());
  }
  if (from.has_use_websocket()) {
    mutable_use_websocket()->::google::protobuf::BoolValue::MergeFrom(from.use_websocket());
  }
  if (from.has_cors()) {
    mutable_cors()->::envoy::api::v2::CorsPolicy::MergeFrom(from.cors());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  switch (from.cluster_specifier_case()) {
    case kCluster: {
      set_cluster(from.cluster());
      break;
    }
    case kClusterHeader: {
      set_cluster_header(from.cluster_header());
      break;
    }
    case kWeightedClusters: {
      mutable_weighted_clusters()->::envoy::api::v2::WeightedCluster::MergeFrom(from.weighted_clusters());
      break;
    }
    case CLUSTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  switch (from.host_rewrite_specifier_case()) {
    case kHostRewrite: {
      set_host_rewrite(from.host_rewrite());
      break;
    }
    case kAutoHostRewrite: {
      mutable_auto_host_rewrite()->::google::protobuf::BoolValue::MergeFrom(from.auto_host_rewrite());
      break;
    }
    case HOST_REWRITE_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void RouteAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RouteAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteAction::CopyFrom(const RouteAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RouteAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteAction::IsInitialized() const {
  return true;
}

void RouteAction::Swap(RouteAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteAction::InternalSwap(RouteAction* other) {
  using std::swap;
  request_headers_to_add_.InternalSwap(&other->request_headers_to_add_);
  rate_limits_.InternalSwap(&other->rate_limits_);
  hash_policy_.InternalSwap(&other->hash_policy_);
  prefix_rewrite_.Swap(&other->prefix_rewrite_);
  swap(metadata_match_, other->metadata_match_);
  swap(timeout_, other->timeout_);
  swap(retry_policy_, other->retry_policy_);
  swap(request_mirror_policy_, other->request_mirror_policy_);
  swap(include_vh_rate_limits_, other->include_vh_rate_limits_);
  swap(use_websocket_, other->use_websocket_);
  swap(cors_, other->cors_);
  swap(priority_, other->priority_);
  swap(cluster_specifier_, other->cluster_specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(host_rewrite_specifier_, other->host_rewrite_specifier_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteAction::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteAction

// string cluster = 1;
bool RouteAction::has_cluster() const {
  return cluster_specifier_case() == kCluster;
}
void RouteAction::set_has_cluster() {
  _oneof_case_[0] = kCluster;
}
void RouteAction::clear_cluster() {
  if (has_cluster()) {
    cluster_specifier_.cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_cluster_specifier();
  }
}
const ::std::string& RouteAction::cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.cluster)
  if (has_cluster()) {
    return cluster_specifier_.cluster_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RouteAction::set_cluster(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.cluster)
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.cluster)
}
#if LANG_CXX11
void RouteAction::set_cluster(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.cluster)
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteAction.cluster)
}
#endif
void RouteAction::set_cluster(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteAction.cluster)
}
void RouteAction::set_cluster(const char* value, size_t size) {
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteAction.cluster)
}
::std::string* RouteAction::mutable_cluster() {
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.cluster)
  return cluster_specifier_.cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteAction::release_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.cluster)
  if (has_cluster()) {
    clear_has_cluster_specifier();
    return cluster_specifier_.cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RouteAction::set_allocated_cluster(::std::string* cluster) {
  if (!has_cluster()) {
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_cluster_specifier();
  if (cluster != NULL) {
    set_has_cluster();
    cluster_specifier_.cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        cluster);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.cluster)
}

// string cluster_header = 2;
bool RouteAction::has_cluster_header() const {
  return cluster_specifier_case() == kClusterHeader;
}
void RouteAction::set_has_cluster_header() {
  _oneof_case_[0] = kClusterHeader;
}
void RouteAction::clear_cluster_header() {
  if (has_cluster_header()) {
    cluster_specifier_.cluster_header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_cluster_specifier();
  }
}
const ::std::string& RouteAction::cluster_header() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.cluster_header)
  if (has_cluster_header()) {
    return cluster_specifier_.cluster_header_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RouteAction::set_cluster_header(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.cluster_header)
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.cluster_header)
}
#if LANG_CXX11
void RouteAction::set_cluster_header(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.cluster_header)
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteAction.cluster_header)
}
#endif
void RouteAction::set_cluster_header(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteAction.cluster_header)
}
void RouteAction::set_cluster_header(const char* value, size_t size) {
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteAction.cluster_header)
}
::std::string* RouteAction::mutable_cluster_header() {
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.cluster_header)
  return cluster_specifier_.cluster_header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteAction::release_cluster_header() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.cluster_header)
  if (has_cluster_header()) {
    clear_has_cluster_specifier();
    return cluster_specifier_.cluster_header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RouteAction::set_allocated_cluster_header(::std::string* cluster_header) {
  if (!has_cluster_header()) {
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_cluster_specifier();
  if (cluster_header != NULL) {
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        cluster_header);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.cluster_header)
}

// .envoy.api.v2.WeightedCluster weighted_clusters = 3;
bool RouteAction::has_weighted_clusters() const {
  return cluster_specifier_case() == kWeightedClusters;
}
void RouteAction::set_has_weighted_clusters() {
  _oneof_case_[0] = kWeightedClusters;
}
void RouteAction::clear_weighted_clusters() {
  if (has_weighted_clusters()) {
    delete cluster_specifier_.weighted_clusters_;
    clear_has_cluster_specifier();
  }
}
 const ::envoy::api::v2::WeightedCluster& RouteAction::weighted_clusters() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.weighted_clusters)
  return has_weighted_clusters()
      ? *cluster_specifier_.weighted_clusters_
      : ::envoy::api::v2::WeightedCluster::default_instance();
}
::envoy::api::v2::WeightedCluster* RouteAction::mutable_weighted_clusters() {
  if (!has_weighted_clusters()) {
    clear_cluster_specifier();
    set_has_weighted_clusters();
    cluster_specifier_.weighted_clusters_ = new ::envoy::api::v2::WeightedCluster;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.weighted_clusters)
  return cluster_specifier_.weighted_clusters_;
}
::envoy::api::v2::WeightedCluster* RouteAction::release_weighted_clusters() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.weighted_clusters)
  if (has_weighted_clusters()) {
    clear_has_cluster_specifier();
    ::envoy::api::v2::WeightedCluster* temp = cluster_specifier_.weighted_clusters_;
    cluster_specifier_.weighted_clusters_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RouteAction::set_allocated_weighted_clusters(::envoy::api::v2::WeightedCluster* weighted_clusters) {
  clear_cluster_specifier();
  if (weighted_clusters) {
    set_has_weighted_clusters();
    cluster_specifier_.weighted_clusters_ = weighted_clusters;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.weighted_clusters)
}

// .envoy.api.v2.Metadata metadata_match = 4;
bool RouteAction::has_metadata_match() const {
  return this != internal_default_instance() && metadata_match_ != NULL;
}
void RouteAction::clear_metadata_match() {
  if (GetArenaNoVirtual() == NULL && metadata_match_ != NULL) delete metadata_match_;
  metadata_match_ = NULL;
}
const ::envoy::api::v2::Metadata& RouteAction::metadata_match() const {
  const ::envoy::api::v2::Metadata* p = metadata_match_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.metadata_match)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Metadata*>(
      &::envoy::api::v2::_Metadata_default_instance_);
}
::envoy::api::v2::Metadata* RouteAction::mutable_metadata_match() {
  
  if (metadata_match_ == NULL) {
    metadata_match_ = new ::envoy::api::v2::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.metadata_match)
  return metadata_match_;
}
::envoy::api::v2::Metadata* RouteAction::release_metadata_match() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.metadata_match)
  
  ::envoy::api::v2::Metadata* temp = metadata_match_;
  metadata_match_ = NULL;
  return temp;
}
void RouteAction::set_allocated_metadata_match(::envoy::api::v2::Metadata* metadata_match) {
  delete metadata_match_;
  metadata_match_ = metadata_match;
  if (metadata_match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.metadata_match)
}

// string prefix_rewrite = 5;
void RouteAction::clear_prefix_rewrite() {
  prefix_rewrite_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RouteAction::prefix_rewrite() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.prefix_rewrite)
  return prefix_rewrite_.GetNoArena();
}
void RouteAction::set_prefix_rewrite(const ::std::string& value) {
  
  prefix_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.prefix_rewrite)
}
#if LANG_CXX11
void RouteAction::set_prefix_rewrite(::std::string&& value) {
  
  prefix_rewrite_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteAction.prefix_rewrite)
}
#endif
void RouteAction::set_prefix_rewrite(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prefix_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteAction.prefix_rewrite)
}
void RouteAction::set_prefix_rewrite(const char* value, size_t size) {
  
  prefix_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteAction.prefix_rewrite)
}
::std::string* RouteAction::mutable_prefix_rewrite() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.prefix_rewrite)
  return prefix_rewrite_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteAction::release_prefix_rewrite() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.prefix_rewrite)
  
  return prefix_rewrite_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouteAction::set_allocated_prefix_rewrite(::std::string* prefix_rewrite) {
  if (prefix_rewrite != NULL) {
    
  } else {
    
  }
  prefix_rewrite_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix_rewrite);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.prefix_rewrite)
}

// string host_rewrite = 6;
bool RouteAction::has_host_rewrite() const {
  return host_rewrite_specifier_case() == kHostRewrite;
}
void RouteAction::set_has_host_rewrite() {
  _oneof_case_[1] = kHostRewrite;
}
void RouteAction::clear_host_rewrite() {
  if (has_host_rewrite()) {
    host_rewrite_specifier_.host_rewrite_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_host_rewrite_specifier();
  }
}
const ::std::string& RouteAction::host_rewrite() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.host_rewrite)
  if (has_host_rewrite()) {
    return host_rewrite_specifier_.host_rewrite_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RouteAction::set_host_rewrite(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.host_rewrite)
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  host_rewrite_specifier_.host_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.host_rewrite)
}
#if LANG_CXX11
void RouteAction::set_host_rewrite(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.host_rewrite)
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  host_rewrite_specifier_.host_rewrite_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteAction.host_rewrite)
}
#endif
void RouteAction::set_host_rewrite(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  host_rewrite_specifier_.host_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteAction.host_rewrite)
}
void RouteAction::set_host_rewrite(const char* value, size_t size) {
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  host_rewrite_specifier_.host_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteAction.host_rewrite)
}
::std::string* RouteAction::mutable_host_rewrite() {
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.host_rewrite)
  return host_rewrite_specifier_.host_rewrite_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteAction::release_host_rewrite() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.host_rewrite)
  if (has_host_rewrite()) {
    clear_has_host_rewrite_specifier();
    return host_rewrite_specifier_.host_rewrite_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RouteAction::set_allocated_host_rewrite(::std::string* host_rewrite) {
  if (!has_host_rewrite()) {
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_host_rewrite_specifier();
  if (host_rewrite != NULL) {
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        host_rewrite);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.host_rewrite)
}

// .google.protobuf.BoolValue auto_host_rewrite = 7;
bool RouteAction::has_auto_host_rewrite() const {
  return host_rewrite_specifier_case() == kAutoHostRewrite;
}
void RouteAction::set_has_auto_host_rewrite() {
  _oneof_case_[1] = kAutoHostRewrite;
}
void RouteAction::clear_auto_host_rewrite() {
  if (has_auto_host_rewrite()) {
    delete host_rewrite_specifier_.auto_host_rewrite_;
    clear_has_host_rewrite_specifier();
  }
}
 const ::google::protobuf::BoolValue& RouteAction::auto_host_rewrite() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.auto_host_rewrite)
  return has_auto_host_rewrite()
      ? *host_rewrite_specifier_.auto_host_rewrite_
      : ::google::protobuf::BoolValue::default_instance();
}
::google::protobuf::BoolValue* RouteAction::mutable_auto_host_rewrite() {
  if (!has_auto_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_auto_host_rewrite();
    host_rewrite_specifier_.auto_host_rewrite_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.auto_host_rewrite)
  return host_rewrite_specifier_.auto_host_rewrite_;
}
::google::protobuf::BoolValue* RouteAction::release_auto_host_rewrite() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.auto_host_rewrite)
  if (has_auto_host_rewrite()) {
    clear_has_host_rewrite_specifier();
    ::google::protobuf::BoolValue* temp = host_rewrite_specifier_.auto_host_rewrite_;
    host_rewrite_specifier_.auto_host_rewrite_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RouteAction::set_allocated_auto_host_rewrite(::google::protobuf::BoolValue* auto_host_rewrite) {
  clear_host_rewrite_specifier();
  if (auto_host_rewrite) {
    if (static_cast< ::google::protobuf::BoolValue*>(auto_host_rewrite)->GetArena() != NULL) {
      ::google::protobuf::BoolValue* new_auto_host_rewrite = new ::google::protobuf::BoolValue;
      new_auto_host_rewrite->CopyFrom(*auto_host_rewrite);
      auto_host_rewrite = new_auto_host_rewrite;
    }
    set_has_auto_host_rewrite();
    host_rewrite_specifier_.auto_host_rewrite_ = auto_host_rewrite;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.auto_host_rewrite)
}

// .google.protobuf.Duration timeout = 8;
bool RouteAction::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
void RouteAction::clear_timeout() {
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) delete timeout_;
  timeout_ = NULL;
}
const ::google::protobuf::Duration& RouteAction::timeout() const {
  const ::google::protobuf::Duration* p = timeout_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* RouteAction::mutable_timeout() {
  
  if (timeout_ == NULL) {
    timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.timeout)
  return timeout_;
}
::google::protobuf::Duration* RouteAction::release_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
void RouteAction::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  delete timeout_;
  if (timeout != NULL && timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_timeout = new ::google::protobuf::Duration;
    new_timeout->CopyFrom(*timeout);
    timeout = new_timeout;
  }
  timeout_ = timeout;
  if (timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.timeout)
}

// .envoy.api.v2.RouteAction.RetryPolicy retry_policy = 9;
bool RouteAction::has_retry_policy() const {
  return this != internal_default_instance() && retry_policy_ != NULL;
}
void RouteAction::clear_retry_policy() {
  if (GetArenaNoVirtual() == NULL && retry_policy_ != NULL) delete retry_policy_;
  retry_policy_ = NULL;
}
const ::envoy::api::v2::RouteAction_RetryPolicy& RouteAction::retry_policy() const {
  const ::envoy::api::v2::RouteAction_RetryPolicy* p = retry_policy_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.retry_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::RouteAction_RetryPolicy*>(
      &::envoy::api::v2::_RouteAction_RetryPolicy_default_instance_);
}
::envoy::api::v2::RouteAction_RetryPolicy* RouteAction::mutable_retry_policy() {
  
  if (retry_policy_ == NULL) {
    retry_policy_ = new ::envoy::api::v2::RouteAction_RetryPolicy;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.retry_policy)
  return retry_policy_;
}
::envoy::api::v2::RouteAction_RetryPolicy* RouteAction::release_retry_policy() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.retry_policy)
  
  ::envoy::api::v2::RouteAction_RetryPolicy* temp = retry_policy_;
  retry_policy_ = NULL;
  return temp;
}
void RouteAction::set_allocated_retry_policy(::envoy::api::v2::RouteAction_RetryPolicy* retry_policy) {
  delete retry_policy_;
  retry_policy_ = retry_policy;
  if (retry_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.retry_policy)
}

// .envoy.api.v2.RouteAction.RequestMirrorPolicy request_mirror_policy = 10;
bool RouteAction::has_request_mirror_policy() const {
  return this != internal_default_instance() && request_mirror_policy_ != NULL;
}
void RouteAction::clear_request_mirror_policy() {
  if (GetArenaNoVirtual() == NULL && request_mirror_policy_ != NULL) delete request_mirror_policy_;
  request_mirror_policy_ = NULL;
}
const ::envoy::api::v2::RouteAction_RequestMirrorPolicy& RouteAction::request_mirror_policy() const {
  const ::envoy::api::v2::RouteAction_RequestMirrorPolicy* p = request_mirror_policy_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.request_mirror_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::RouteAction_RequestMirrorPolicy*>(
      &::envoy::api::v2::_RouteAction_RequestMirrorPolicy_default_instance_);
}
::envoy::api::v2::RouteAction_RequestMirrorPolicy* RouteAction::mutable_request_mirror_policy() {
  
  if (request_mirror_policy_ == NULL) {
    request_mirror_policy_ = new ::envoy::api::v2::RouteAction_RequestMirrorPolicy;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.request_mirror_policy)
  return request_mirror_policy_;
}
::envoy::api::v2::RouteAction_RequestMirrorPolicy* RouteAction::release_request_mirror_policy() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.request_mirror_policy)
  
  ::envoy::api::v2::RouteAction_RequestMirrorPolicy* temp = request_mirror_policy_;
  request_mirror_policy_ = NULL;
  return temp;
}
void RouteAction::set_allocated_request_mirror_policy(::envoy::api::v2::RouteAction_RequestMirrorPolicy* request_mirror_policy) {
  delete request_mirror_policy_;
  request_mirror_policy_ = request_mirror_policy;
  if (request_mirror_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.request_mirror_policy)
}

// .envoy.api.v2.RoutingPriority priority = 11;
void RouteAction::clear_priority() {
  priority_ = 0;
}
::envoy::api::v2::RoutingPriority RouteAction::priority() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.priority)
  return static_cast< ::envoy::api::v2::RoutingPriority >(priority_);
}
void RouteAction::set_priority(::envoy::api::v2::RoutingPriority value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteAction.priority)
}

// repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 12;
int RouteAction::request_headers_to_add_size() const {
  return request_headers_to_add_.size();
}
void RouteAction::clear_request_headers_to_add() {
  request_headers_to_add_.Clear();
}
const ::envoy::api::v2::HeaderValueOption& RouteAction::request_headers_to_add(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.request_headers_to_add)
  return request_headers_to_add_.Get(index);
}
::envoy::api::v2::HeaderValueOption* RouteAction::mutable_request_headers_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.request_headers_to_add)
  return request_headers_to_add_.Mutable(index);
}
::envoy::api::v2::HeaderValueOption* RouteAction::add_request_headers_to_add() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteAction.request_headers_to_add)
  return request_headers_to_add_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
RouteAction::mutable_request_headers_to_add() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteAction.request_headers_to_add)
  return &request_headers_to_add_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
RouteAction::request_headers_to_add() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteAction.request_headers_to_add)
  return request_headers_to_add_;
}

// repeated .envoy.api.v2.RateLimit rate_limits = 13;
int RouteAction::rate_limits_size() const {
  return rate_limits_.size();
}
void RouteAction::clear_rate_limits() {
  rate_limits_.Clear();
}
const ::envoy::api::v2::RateLimit& RouteAction::rate_limits(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.rate_limits)
  return rate_limits_.Get(index);
}
::envoy::api::v2::RateLimit* RouteAction::mutable_rate_limits(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.rate_limits)
  return rate_limits_.Mutable(index);
}
::envoy::api::v2::RateLimit* RouteAction::add_rate_limits() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteAction.rate_limits)
  return rate_limits_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >*
RouteAction::mutable_rate_limits() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteAction.rate_limits)
  return &rate_limits_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >&
RouteAction::rate_limits() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteAction.rate_limits)
  return rate_limits_;
}

// .google.protobuf.BoolValue include_vh_rate_limits = 14;
bool RouteAction::has_include_vh_rate_limits() const {
  return this != internal_default_instance() && include_vh_rate_limits_ != NULL;
}
void RouteAction::clear_include_vh_rate_limits() {
  if (GetArenaNoVirtual() == NULL && include_vh_rate_limits_ != NULL) delete include_vh_rate_limits_;
  include_vh_rate_limits_ = NULL;
}
const ::google::protobuf::BoolValue& RouteAction::include_vh_rate_limits() const {
  const ::google::protobuf::BoolValue* p = include_vh_rate_limits_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.include_vh_rate_limits)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* RouteAction::mutable_include_vh_rate_limits() {
  
  if (include_vh_rate_limits_ == NULL) {
    include_vh_rate_limits_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.include_vh_rate_limits)
  return include_vh_rate_limits_;
}
::google::protobuf::BoolValue* RouteAction::release_include_vh_rate_limits() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.include_vh_rate_limits)
  
  ::google::protobuf::BoolValue* temp = include_vh_rate_limits_;
  include_vh_rate_limits_ = NULL;
  return temp;
}
void RouteAction::set_allocated_include_vh_rate_limits(::google::protobuf::BoolValue* include_vh_rate_limits) {
  delete include_vh_rate_limits_;
  if (include_vh_rate_limits != NULL && include_vh_rate_limits->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_include_vh_rate_limits = new ::google::protobuf::BoolValue;
    new_include_vh_rate_limits->CopyFrom(*include_vh_rate_limits);
    include_vh_rate_limits = new_include_vh_rate_limits;
  }
  include_vh_rate_limits_ = include_vh_rate_limits;
  if (include_vh_rate_limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.include_vh_rate_limits)
}

// repeated .envoy.api.v2.RouteAction.HashPolicy hash_policy = 15;
int RouteAction::hash_policy_size() const {
  return hash_policy_.size();
}
void RouteAction::clear_hash_policy() {
  hash_policy_.Clear();
}
const ::envoy::api::v2::RouteAction_HashPolicy& RouteAction::hash_policy(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.hash_policy)
  return hash_policy_.Get(index);
}
::envoy::api::v2::RouteAction_HashPolicy* RouteAction::mutable_hash_policy(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.hash_policy)
  return hash_policy_.Mutable(index);
}
::envoy::api::v2::RouteAction_HashPolicy* RouteAction::add_hash_policy() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteAction.hash_policy)
  return hash_policy_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RouteAction_HashPolicy >*
RouteAction::mutable_hash_policy() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteAction.hash_policy)
  return &hash_policy_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RouteAction_HashPolicy >&
RouteAction::hash_policy() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteAction.hash_policy)
  return hash_policy_;
}

// .google.protobuf.BoolValue use_websocket = 16;
bool RouteAction::has_use_websocket() const {
  return this != internal_default_instance() && use_websocket_ != NULL;
}
void RouteAction::clear_use_websocket() {
  if (GetArenaNoVirtual() == NULL && use_websocket_ != NULL) delete use_websocket_;
  use_websocket_ = NULL;
}
const ::google::protobuf::BoolValue& RouteAction::use_websocket() const {
  const ::google::protobuf::BoolValue* p = use_websocket_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.use_websocket)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* RouteAction::mutable_use_websocket() {
  
  if (use_websocket_ == NULL) {
    use_websocket_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.use_websocket)
  return use_websocket_;
}
::google::protobuf::BoolValue* RouteAction::release_use_websocket() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.use_websocket)
  
  ::google::protobuf::BoolValue* temp = use_websocket_;
  use_websocket_ = NULL;
  return temp;
}
void RouteAction::set_allocated_use_websocket(::google::protobuf::BoolValue* use_websocket) {
  delete use_websocket_;
  if (use_websocket != NULL && use_websocket->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_use_websocket = new ::google::protobuf::BoolValue;
    new_use_websocket->CopyFrom(*use_websocket);
    use_websocket = new_use_websocket;
  }
  use_websocket_ = use_websocket;
  if (use_websocket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.use_websocket)
}

// .envoy.api.v2.CorsPolicy cors = 17;
bool RouteAction::has_cors() const {
  return this != internal_default_instance() && cors_ != NULL;
}
void RouteAction::clear_cors() {
  if (GetArenaNoVirtual() == NULL && cors_ != NULL) delete cors_;
  cors_ = NULL;
}
const ::envoy::api::v2::CorsPolicy& RouteAction::cors() const {
  const ::envoy::api::v2::CorsPolicy* p = cors_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteAction.cors)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::CorsPolicy*>(
      &::envoy::api::v2::_CorsPolicy_default_instance_);
}
::envoy::api::v2::CorsPolicy* RouteAction::mutable_cors() {
  
  if (cors_ == NULL) {
    cors_ = new ::envoy::api::v2::CorsPolicy;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteAction.cors)
  return cors_;
}
::envoy::api::v2::CorsPolicy* RouteAction::release_cors() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteAction.cors)
  
  ::envoy::api::v2::CorsPolicy* temp = cors_;
  cors_ = NULL;
  return temp;
}
void RouteAction::set_allocated_cors(::envoy::api::v2::CorsPolicy* cors) {
  delete cors_;
  cors_ = cors;
  if (cors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteAction.cors)
}

bool RouteAction::has_cluster_specifier() const {
  return cluster_specifier_case() != CLUSTER_SPECIFIER_NOT_SET;
}
void RouteAction::clear_has_cluster_specifier() {
  _oneof_case_[0] = CLUSTER_SPECIFIER_NOT_SET;
}
bool RouteAction::has_host_rewrite_specifier() const {
  return host_rewrite_specifier_case() != HOST_REWRITE_SPECIFIER_NOT_SET;
}
void RouteAction::clear_has_host_rewrite_specifier() {
  _oneof_case_[1] = HOST_REWRITE_SPECIFIER_NOT_SET;
}
RouteAction::ClusterSpecifierCase RouteAction::cluster_specifier_case() const {
  return RouteAction::ClusterSpecifierCase(_oneof_case_[0]);
}
RouteAction::HostRewriteSpecifierCase RouteAction::host_rewrite_specifier_case() const {
  return RouteAction::HostRewriteSpecifierCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedirectAction::kHostRedirectFieldNumber;
const int RedirectAction::kPathRedirectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedirectAction::RedirectAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RedirectAction)
}
RedirectAction::RedirectAction(const RedirectAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host_redirect().size() > 0) {
    host_redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_redirect_);
  }
  path_redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path_redirect().size() > 0) {
    path_redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_redirect_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RedirectAction)
}

void RedirectAction::SharedCtor() {
  host_redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RedirectAction::~RedirectAction() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RedirectAction)
  SharedDtor();
}

void RedirectAction::SharedDtor() {
  host_redirect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_redirect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RedirectAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedirectAction::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedirectAction& RedirectAction::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedirectAction* RedirectAction::New(::google::protobuf::Arena* arena) const {
  RedirectAction* n = new RedirectAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedirectAction::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RedirectAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RedirectAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RedirectAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host_redirect = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_redirect()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_redirect().data(), static_cast<int>(this->host_redirect().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RedirectAction.host_redirect"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path_redirect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_redirect()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path_redirect().data(), static_cast<int>(this->path_redirect().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RedirectAction.path_redirect"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RedirectAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RedirectAction)
  return false;
#undef DO_
}

void RedirectAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RedirectAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host_redirect = 1;
  if (this->host_redirect().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_redirect().data(), static_cast<int>(this->host_redirect().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RedirectAction.host_redirect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_redirect(), output);
  }

  // string path_redirect = 2;
  if (this->path_redirect().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path_redirect().data(), static_cast<int>(this->path_redirect().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RedirectAction.path_redirect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path_redirect(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RedirectAction)
}

::google::protobuf::uint8* RedirectAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RedirectAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host_redirect = 1;
  if (this->host_redirect().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_redirect().data(), static_cast<int>(this->host_redirect().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RedirectAction.host_redirect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host_redirect(), target);
  }

  // string path_redirect = 2;
  if (this->path_redirect().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path_redirect().data(), static_cast<int>(this->path_redirect().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RedirectAction.path_redirect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path_redirect(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RedirectAction)
  return target;
}

size_t RedirectAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RedirectAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string host_redirect = 1;
  if (this->host_redirect().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_redirect());
  }

  // string path_redirect = 2;
  if (this->path_redirect().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path_redirect());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedirectAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RedirectAction)
  GOOGLE_DCHECK_NE(&from, this);
  const RedirectAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedirectAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RedirectAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RedirectAction)
    MergeFrom(*source);
  }
}

void RedirectAction::MergeFrom(const RedirectAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RedirectAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host_redirect().size() > 0) {

    host_redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_redirect_);
  }
  if (from.path_redirect().size() > 0) {

    path_redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_redirect_);
  }
}

void RedirectAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RedirectAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectAction::CopyFrom(const RedirectAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RedirectAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectAction::IsInitialized() const {
  return true;
}

void RedirectAction::Swap(RedirectAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedirectAction::InternalSwap(RedirectAction* other) {
  using std::swap;
  host_redirect_.Swap(&other->host_redirect_);
  path_redirect_.Swap(&other->path_redirect_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedirectAction::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedirectAction

// string host_redirect = 1;
void RedirectAction::clear_host_redirect() {
  host_redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RedirectAction::host_redirect() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RedirectAction.host_redirect)
  return host_redirect_.GetNoArena();
}
void RedirectAction::set_host_redirect(const ::std::string& value) {
  
  host_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RedirectAction.host_redirect)
}
#if LANG_CXX11
void RedirectAction::set_host_redirect(::std::string&& value) {
  
  host_redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RedirectAction.host_redirect)
}
#endif
void RedirectAction::set_host_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RedirectAction.host_redirect)
}
void RedirectAction::set_host_redirect(const char* value, size_t size) {
  
  host_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RedirectAction.host_redirect)
}
::std::string* RedirectAction::mutable_host_redirect() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RedirectAction.host_redirect)
  return host_redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedirectAction::release_host_redirect() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RedirectAction.host_redirect)
  
  return host_redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedirectAction::set_allocated_host_redirect(::std::string* host_redirect) {
  if (host_redirect != NULL) {
    
  } else {
    
  }
  host_redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_redirect);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RedirectAction.host_redirect)
}

// string path_redirect = 2;
void RedirectAction::clear_path_redirect() {
  path_redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RedirectAction::path_redirect() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RedirectAction.path_redirect)
  return path_redirect_.GetNoArena();
}
void RedirectAction::set_path_redirect(const ::std::string& value) {
  
  path_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RedirectAction.path_redirect)
}
#if LANG_CXX11
void RedirectAction::set_path_redirect(::std::string&& value) {
  
  path_redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RedirectAction.path_redirect)
}
#endif
void RedirectAction::set_path_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RedirectAction.path_redirect)
}
void RedirectAction::set_path_redirect(const char* value, size_t size) {
  
  path_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RedirectAction.path_redirect)
}
::std::string* RedirectAction::mutable_path_redirect() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RedirectAction.path_redirect)
  return path_redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedirectAction::release_path_redirect() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RedirectAction.path_redirect)
  
  return path_redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedirectAction::set_allocated_path_redirect(::std::string* path_redirect) {
  if (path_redirect != NULL) {
    
  } else {
    
  }
  path_redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_redirect);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RedirectAction.path_redirect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Decorator::kOperationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Decorator::Decorator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Decorator)
}
Decorator::Decorator(const Decorator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.operation().size() > 0) {
    operation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Decorator)
}

void Decorator::SharedCtor() {
  operation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Decorator::~Decorator() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Decorator)
  SharedDtor();
}

void Decorator::SharedDtor() {
  operation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Decorator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Decorator::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Decorator& Decorator::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

Decorator* Decorator::New(::google::protobuf::Arena* arena) const {
  Decorator* n = new Decorator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Decorator::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Decorator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Decorator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Decorator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string operation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operation().data(), static_cast<int>(this->operation().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.Decorator.operation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Decorator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Decorator)
  return false;
#undef DO_
}

void Decorator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Decorator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation = 1;
  if (this->operation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation().data(), static_cast<int>(this->operation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Decorator.operation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->operation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Decorator)
}

::google::protobuf::uint8* Decorator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Decorator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation = 1;
  if (this->operation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operation().data(), static_cast<int>(this->operation().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Decorator.operation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->operation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Decorator)
  return target;
}

size_t Decorator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Decorator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string operation = 1;
  if (this->operation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Decorator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Decorator)
  GOOGLE_DCHECK_NE(&from, this);
  const Decorator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Decorator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Decorator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Decorator)
    MergeFrom(*source);
  }
}

void Decorator::MergeFrom(const Decorator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Decorator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operation().size() > 0) {

    operation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operation_);
  }
}

void Decorator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Decorator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decorator::CopyFrom(const Decorator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Decorator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decorator::IsInitialized() const {
  return true;
}

void Decorator::Swap(Decorator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Decorator::InternalSwap(Decorator* other) {
  using std::swap;
  operation_.Swap(&other->operation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Decorator::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Decorator

// string operation = 1;
void Decorator::clear_operation() {
  operation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Decorator::operation() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Decorator.operation)
  return operation_.GetNoArena();
}
void Decorator::set_operation(const ::std::string& value) {
  
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Decorator.operation)
}
#if LANG_CXX11
void Decorator::set_operation(::std::string&& value) {
  
  operation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Decorator.operation)
}
#endif
void Decorator::set_operation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Decorator.operation)
}
void Decorator::set_operation(const char* value, size_t size) {
  
  operation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Decorator.operation)
}
::std::string* Decorator::mutable_operation() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Decorator.operation)
  return operation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Decorator::release_operation() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Decorator.operation)
  
  return operation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Decorator::set_allocated_operation(::std::string* operation) {
  if (operation != NULL) {
    
  } else {
    
  }
  operation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Decorator.operation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Route::kMatchFieldNumber;
const int Route::kRouteFieldNumber;
const int Route::kRedirectFieldNumber;
const int Route::kMetadataFieldNumber;
const int Route::kDecoratorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Route::Route()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Route)
}
Route::Route(const Route& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match()) {
    match_ = new ::envoy::api::v2::RouteMatch(*from.match_);
  } else {
    match_ = NULL;
  }
  if (from.has_metadata()) {
    metadata_ = new ::envoy::api::v2::Metadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  if (from.has_decorator()) {
    decorator_ = new ::envoy::api::v2::Decorator(*from.decorator_);
  } else {
    decorator_ = NULL;
  }
  clear_has_action();
  switch (from.action_case()) {
    case kRoute: {
      mutable_route()->::envoy::api::v2::RouteAction::MergeFrom(from.route());
      break;
    }
    case kRedirect: {
      mutable_redirect()->::envoy::api::v2::RedirectAction::MergeFrom(from.redirect());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Route)
}

void Route::SharedCtor() {
  ::memset(&match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decorator_) -
      reinterpret_cast<char*>(&match_)) + sizeof(decorator_));
  clear_has_action();
  _cached_size_ = 0;
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Route)
  SharedDtor();
}

void Route::SharedDtor() {
  if (this != internal_default_instance()) delete match_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete decorator_;
  if (has_action()) {
    clear_action();
  }
}

void Route::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Route::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Route& Route::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

Route* Route::New(::google::protobuf::Arena* arena) const {
  Route* n = new Route;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Route::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.Route)
  switch (action_case()) {
    case kRoute: {
      delete action_.route_;
      break;
    }
    case kRedirect: {
      delete action_.redirect_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && match_ != NULL) {
    delete match_;
  }
  match_ = NULL;
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && decorator_ != NULL) {
    delete decorator_;
  }
  decorator_ = NULL;
  clear_action();
  _internal_metadata_.Clear();
}

bool Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Route)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.RouteMatch match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RouteAction route = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RedirectAction redirect = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redirect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Metadata metadata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Decorator decorator = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decorator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Route)
  return false;
#undef DO_
}

void Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.RouteMatch match = 1;
  if (this->has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->match_, output);
  }

  // .envoy.api.v2.RouteAction route = 2;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *action_.route_, output);
  }

  // .envoy.api.v2.RedirectAction redirect = 3;
  if (has_redirect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *action_.redirect_, output);
  }

  // .envoy.api.v2.Metadata metadata = 4;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->metadata_, output);
  }

  // .envoy.api.v2.Decorator decorator = 5;
  if (this->has_decorator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->decorator_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Route)
}

::google::protobuf::uint8* Route::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Route)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.RouteMatch match = 1;
  if (this->has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->match_, deterministic, target);
  }

  // .envoy.api.v2.RouteAction route = 2;
  if (has_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *action_.route_, deterministic, target);
  }

  // .envoy.api.v2.RedirectAction redirect = 3;
  if (has_redirect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *action_.redirect_, deterministic, target);
  }

  // .envoy.api.v2.Metadata metadata = 4;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->metadata_, deterministic, target);
  }

  // .envoy.api.v2.Decorator decorator = 5;
  if (this->has_decorator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->decorator_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Route)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.RouteMatch match = 1;
  if (this->has_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->match_);
  }

  // .envoy.api.v2.Metadata metadata = 4;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // .envoy.api.v2.Decorator decorator = 5;
  if (this->has_decorator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->decorator_);
  }

  switch (action_case()) {
    // .envoy.api.v2.RouteAction route = 2;
    case kRoute: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.route_);
      break;
    }
    // .envoy.api.v2.RedirectAction redirect = 3;
    case kRedirect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.redirect_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Route::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const Route* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Route>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Route)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Route)
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_match()) {
    mutable_match()->::envoy::api::v2::RouteMatch::MergeFrom(from.match());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::envoy::api::v2::Metadata::MergeFrom(from.metadata());
  }
  if (from.has_decorator()) {
    mutable_decorator()->::envoy::api::v2::Decorator::MergeFrom(from.decorator());
  }
  switch (from.action_case()) {
    case kRoute: {
      mutable_route()->::envoy::api::v2::RouteAction::MergeFrom(from.route());
      break;
    }
    case kRedirect: {
      mutable_redirect()->::envoy::api::v2::RedirectAction::MergeFrom(from.redirect());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void Route::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::Swap(Route* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Route::InternalSwap(Route* other) {
  using std::swap;
  swap(match_, other->match_);
  swap(metadata_, other->metadata_);
  swap(decorator_, other->decorator_);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Route::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Route

// .envoy.api.v2.RouteMatch match = 1;
bool Route::has_match() const {
  return this != internal_default_instance() && match_ != NULL;
}
void Route::clear_match() {
  if (GetArenaNoVirtual() == NULL && match_ != NULL) delete match_;
  match_ = NULL;
}
const ::envoy::api::v2::RouteMatch& Route::match() const {
  const ::envoy::api::v2::RouteMatch* p = match_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Route.match)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::RouteMatch*>(
      &::envoy::api::v2::_RouteMatch_default_instance_);
}
::envoy::api::v2::RouteMatch* Route::mutable_match() {
  
  if (match_ == NULL) {
    match_ = new ::envoy::api::v2::RouteMatch;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Route.match)
  return match_;
}
::envoy::api::v2::RouteMatch* Route::release_match() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Route.match)
  
  ::envoy::api::v2::RouteMatch* temp = match_;
  match_ = NULL;
  return temp;
}
void Route::set_allocated_match(::envoy::api::v2::RouteMatch* match) {
  delete match_;
  match_ = match;
  if (match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Route.match)
}

// .envoy.api.v2.RouteAction route = 2;
bool Route::has_route() const {
  return action_case() == kRoute;
}
void Route::set_has_route() {
  _oneof_case_[0] = kRoute;
}
void Route::clear_route() {
  if (has_route()) {
    delete action_.route_;
    clear_has_action();
  }
}
 const ::envoy::api::v2::RouteAction& Route::route() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Route.route)
  return has_route()
      ? *action_.route_
      : ::envoy::api::v2::RouteAction::default_instance();
}
::envoy::api::v2::RouteAction* Route::mutable_route() {
  if (!has_route()) {
    clear_action();
    set_has_route();
    action_.route_ = new ::envoy::api::v2::RouteAction;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Route.route)
  return action_.route_;
}
::envoy::api::v2::RouteAction* Route::release_route() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Route.route)
  if (has_route()) {
    clear_has_action();
    ::envoy::api::v2::RouteAction* temp = action_.route_;
    action_.route_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Route::set_allocated_route(::envoy::api::v2::RouteAction* route) {
  clear_action();
  if (route) {
    set_has_route();
    action_.route_ = route;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Route.route)
}

// .envoy.api.v2.RedirectAction redirect = 3;
bool Route::has_redirect() const {
  return action_case() == kRedirect;
}
void Route::set_has_redirect() {
  _oneof_case_[0] = kRedirect;
}
void Route::clear_redirect() {
  if (has_redirect()) {
    delete action_.redirect_;
    clear_has_action();
  }
}
 const ::envoy::api::v2::RedirectAction& Route::redirect() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Route.redirect)
  return has_redirect()
      ? *action_.redirect_
      : ::envoy::api::v2::RedirectAction::default_instance();
}
::envoy::api::v2::RedirectAction* Route::mutable_redirect() {
  if (!has_redirect()) {
    clear_action();
    set_has_redirect();
    action_.redirect_ = new ::envoy::api::v2::RedirectAction;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Route.redirect)
  return action_.redirect_;
}
::envoy::api::v2::RedirectAction* Route::release_redirect() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Route.redirect)
  if (has_redirect()) {
    clear_has_action();
    ::envoy::api::v2::RedirectAction* temp = action_.redirect_;
    action_.redirect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Route::set_allocated_redirect(::envoy::api::v2::RedirectAction* redirect) {
  clear_action();
  if (redirect) {
    set_has_redirect();
    action_.redirect_ = redirect;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Route.redirect)
}

// .envoy.api.v2.Metadata metadata = 4;
bool Route::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
void Route::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::envoy::api::v2::Metadata& Route::metadata() const {
  const ::envoy::api::v2::Metadata* p = metadata_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Route.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Metadata*>(
      &::envoy::api::v2::_Metadata_default_instance_);
}
::envoy::api::v2::Metadata* Route::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::envoy::api::v2::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Route.metadata)
  return metadata_;
}
::envoy::api::v2::Metadata* Route::release_metadata() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Route.metadata)
  
  ::envoy::api::v2::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Route::set_allocated_metadata(::envoy::api::v2::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Route.metadata)
}

// .envoy.api.v2.Decorator decorator = 5;
bool Route::has_decorator() const {
  return this != internal_default_instance() && decorator_ != NULL;
}
void Route::clear_decorator() {
  if (GetArenaNoVirtual() == NULL && decorator_ != NULL) delete decorator_;
  decorator_ = NULL;
}
const ::envoy::api::v2::Decorator& Route::decorator() const {
  const ::envoy::api::v2::Decorator* p = decorator_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Route.decorator)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Decorator*>(
      &::envoy::api::v2::_Decorator_default_instance_);
}
::envoy::api::v2::Decorator* Route::mutable_decorator() {
  
  if (decorator_ == NULL) {
    decorator_ = new ::envoy::api::v2::Decorator;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Route.decorator)
  return decorator_;
}
::envoy::api::v2::Decorator* Route::release_decorator() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Route.decorator)
  
  ::envoy::api::v2::Decorator* temp = decorator_;
  decorator_ = NULL;
  return temp;
}
void Route::set_allocated_decorator(::envoy::api::v2::Decorator* decorator) {
  delete decorator_;
  decorator_ = decorator;
  if (decorator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Route.decorator)
}

bool Route::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
void Route::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
Route::ActionCase Route::action_case() const {
  return Route::ActionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VirtualCluster::kPatternFieldNumber;
const int VirtualCluster::kNameFieldNumber;
const int VirtualCluster::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualCluster::VirtualCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.VirtualCluster)
}
VirtualCluster::VirtualCluster(const VirtualCluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pattern().size() > 0) {
    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  method_ = from.method_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.VirtualCluster)
}

void VirtualCluster::SharedCtor() {
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = 0;
  _cached_size_ = 0;
}

VirtualCluster::~VirtualCluster() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.VirtualCluster)
  SharedDtor();
}

void VirtualCluster::SharedDtor() {
  pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VirtualCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualCluster::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VirtualCluster& VirtualCluster::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

VirtualCluster* VirtualCluster::New(::google::protobuf::Arena* arena) const {
  VirtualCluster* n = new VirtualCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.VirtualCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = 0;
  _internal_metadata_.Clear();
}

bool VirtualCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.VirtualCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pattern = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pattern().data(), static_cast<int>(this->pattern().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.VirtualCluster.pattern"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.VirtualCluster.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RequestMethod method = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::envoy::api::v2::RequestMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.VirtualCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.VirtualCluster)
  return false;
#undef DO_
}

void VirtualCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.VirtualCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pattern = 1;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualCluster.pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pattern(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualCluster.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .envoy.api.v2.RequestMethod method = 3;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->method(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.VirtualCluster)
}

::google::protobuf::uint8* VirtualCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.VirtualCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pattern = 1;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualCluster.pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pattern(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualCluster.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .envoy.api.v2.RequestMethod method = 3;
  if (this->method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->method(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.VirtualCluster)
  return target;
}

size_t VirtualCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.VirtualCluster)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string pattern = 1;
  if (this->pattern().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pattern());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .envoy.api.v2.RequestMethod method = 3;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.VirtualCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.VirtualCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.VirtualCluster)
    MergeFrom(*source);
  }
}

void VirtualCluster::MergeFrom(const VirtualCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.VirtualCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pattern().size() > 0) {

    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
}

void VirtualCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.VirtualCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualCluster::CopyFrom(const VirtualCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.VirtualCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualCluster::IsInitialized() const {
  return true;
}

void VirtualCluster::Swap(VirtualCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualCluster::InternalSwap(VirtualCluster* other) {
  using std::swap;
  pattern_.Swap(&other->pattern_);
  name_.Swap(&other->name_);
  swap(method_, other->method_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualCluster::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VirtualCluster

// string pattern = 1;
void VirtualCluster::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VirtualCluster::pattern() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualCluster.pattern)
  return pattern_.GetNoArena();
}
void VirtualCluster::set_pattern(const ::std::string& value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualCluster.pattern)
}
#if LANG_CXX11
void VirtualCluster::set_pattern(::std::string&& value) {
  
  pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.VirtualCluster.pattern)
}
#endif
void VirtualCluster::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualCluster.pattern)
}
void VirtualCluster::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualCluster.pattern)
}
::std::string* VirtualCluster::mutable_pattern() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualCluster.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VirtualCluster::release_pattern() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.VirtualCluster.pattern)
  
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VirtualCluster::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.VirtualCluster.pattern)
}

// string name = 2;
void VirtualCluster::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VirtualCluster::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualCluster.name)
  return name_.GetNoArena();
}
void VirtualCluster::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualCluster.name)
}
#if LANG_CXX11
void VirtualCluster::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.VirtualCluster.name)
}
#endif
void VirtualCluster::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualCluster.name)
}
void VirtualCluster::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualCluster.name)
}
::std::string* VirtualCluster::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualCluster.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VirtualCluster::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.VirtualCluster.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VirtualCluster::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.VirtualCluster.name)
}

// .envoy.api.v2.RequestMethod method = 3;
void VirtualCluster::clear_method() {
  method_ = 0;
}
::envoy::api::v2::RequestMethod VirtualCluster::method() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualCluster.method)
  return static_cast< ::envoy::api::v2::RequestMethod >(method_);
}
void VirtualCluster::set_method(::envoy::api::v2::RequestMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualCluster.method)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit_Action_SourceCluster::RateLimit_Action_SourceCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimit.Action.SourceCluster)
}
RateLimit_Action_SourceCluster::RateLimit_Action_SourceCluster(const RateLimit_Action_SourceCluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimit.Action.SourceCluster)
}

void RateLimit_Action_SourceCluster::SharedCtor() {
  _cached_size_ = 0;
}

RateLimit_Action_SourceCluster::~RateLimit_Action_SourceCluster() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimit.Action.SourceCluster)
  SharedDtor();
}

void RateLimit_Action_SourceCluster::SharedDtor() {
}

void RateLimit_Action_SourceCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit_Action_SourceCluster::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RateLimit_Action_SourceCluster& RateLimit_Action_SourceCluster::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit_Action_SourceCluster* RateLimit_Action_SourceCluster::New(::google::protobuf::Arena* arena) const {
  RateLimit_Action_SourceCluster* n = new RateLimit_Action_SourceCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit_Action_SourceCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimit.Action.SourceCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RateLimit_Action_SourceCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimit.Action.SourceCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimit.Action.SourceCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimit.Action.SourceCluster)
  return false;
#undef DO_
}

void RateLimit_Action_SourceCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimit.Action.SourceCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimit.Action.SourceCluster)
}

::google::protobuf::uint8* RateLimit_Action_SourceCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimit.Action.SourceCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimit.Action.SourceCluster)
  return target;
}

size_t RateLimit_Action_SourceCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimit.Action.SourceCluster)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit_Action_SourceCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimit.Action.SourceCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit_Action_SourceCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit_Action_SourceCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimit.Action.SourceCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimit.Action.SourceCluster)
    MergeFrom(*source);
  }
}

void RateLimit_Action_SourceCluster::MergeFrom(const RateLimit_Action_SourceCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimit.Action.SourceCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RateLimit_Action_SourceCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimit.Action.SourceCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit_Action_SourceCluster::CopyFrom(const RateLimit_Action_SourceCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimit.Action.SourceCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit_Action_SourceCluster::IsInitialized() const {
  return true;
}

void RateLimit_Action_SourceCluster::Swap(RateLimit_Action_SourceCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit_Action_SourceCluster::InternalSwap(RateLimit_Action_SourceCluster* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit_Action_SourceCluster::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit_Action_SourceCluster

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit_Action_DestinationCluster::RateLimit_Action_DestinationCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimit.Action.DestinationCluster)
}
RateLimit_Action_DestinationCluster::RateLimit_Action_DestinationCluster(const RateLimit_Action_DestinationCluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimit.Action.DestinationCluster)
}

void RateLimit_Action_DestinationCluster::SharedCtor() {
  _cached_size_ = 0;
}

RateLimit_Action_DestinationCluster::~RateLimit_Action_DestinationCluster() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimit.Action.DestinationCluster)
  SharedDtor();
}

void RateLimit_Action_DestinationCluster::SharedDtor() {
}

void RateLimit_Action_DestinationCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit_Action_DestinationCluster::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RateLimit_Action_DestinationCluster& RateLimit_Action_DestinationCluster::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit_Action_DestinationCluster* RateLimit_Action_DestinationCluster::New(::google::protobuf::Arena* arena) const {
  RateLimit_Action_DestinationCluster* n = new RateLimit_Action_DestinationCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit_Action_DestinationCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimit.Action.DestinationCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RateLimit_Action_DestinationCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimit.Action.DestinationCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimit.Action.DestinationCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimit.Action.DestinationCluster)
  return false;
#undef DO_
}

void RateLimit_Action_DestinationCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimit.Action.DestinationCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimit.Action.DestinationCluster)
}

::google::protobuf::uint8* RateLimit_Action_DestinationCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimit.Action.DestinationCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimit.Action.DestinationCluster)
  return target;
}

size_t RateLimit_Action_DestinationCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimit.Action.DestinationCluster)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit_Action_DestinationCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimit.Action.DestinationCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit_Action_DestinationCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit_Action_DestinationCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimit.Action.DestinationCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimit.Action.DestinationCluster)
    MergeFrom(*source);
  }
}

void RateLimit_Action_DestinationCluster::MergeFrom(const RateLimit_Action_DestinationCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimit.Action.DestinationCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RateLimit_Action_DestinationCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimit.Action.DestinationCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit_Action_DestinationCluster::CopyFrom(const RateLimit_Action_DestinationCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimit.Action.DestinationCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit_Action_DestinationCluster::IsInitialized() const {
  return true;
}

void RateLimit_Action_DestinationCluster::Swap(RateLimit_Action_DestinationCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit_Action_DestinationCluster::InternalSwap(RateLimit_Action_DestinationCluster* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit_Action_DestinationCluster::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit_Action_DestinationCluster

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimit_Action_RequestHeaders::kHeaderNameFieldNumber;
const int RateLimit_Action_RequestHeaders::kDescriptorKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit_Action_RequestHeaders::RateLimit_Action_RequestHeaders()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimit.Action.RequestHeaders)
}
RateLimit_Action_RequestHeaders::RateLimit_Action_RequestHeaders(const RateLimit_Action_RequestHeaders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.header_name().size() > 0) {
    header_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_name_);
  }
  descriptor_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.descriptor_key().size() > 0) {
    descriptor_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_key_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimit.Action.RequestHeaders)
}

void RateLimit_Action_RequestHeaders::SharedCtor() {
  header_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RateLimit_Action_RequestHeaders::~RateLimit_Action_RequestHeaders() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimit.Action.RequestHeaders)
  SharedDtor();
}

void RateLimit_Action_RequestHeaders::SharedDtor() {
  header_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RateLimit_Action_RequestHeaders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit_Action_RequestHeaders::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RateLimit_Action_RequestHeaders& RateLimit_Action_RequestHeaders::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit_Action_RequestHeaders* RateLimit_Action_RequestHeaders::New(::google::protobuf::Arena* arena) const {
  RateLimit_Action_RequestHeaders* n = new RateLimit_Action_RequestHeaders;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit_Action_RequestHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimit.Action.RequestHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RateLimit_Action_RequestHeaders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimit.Action.RequestHeaders)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string header_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->header_name().data(), static_cast<int>(this->header_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RateLimit.Action.RequestHeaders.header_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string descriptor_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptor_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->descriptor_key().data(), static_cast<int>(this->descriptor_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RateLimit.Action.RequestHeaders.descriptor_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimit.Action.RequestHeaders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimit.Action.RequestHeaders)
  return false;
#undef DO_
}

void RateLimit_Action_RequestHeaders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimit.Action.RequestHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string header_name = 1;
  if (this->header_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->header_name().data(), static_cast<int>(this->header_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.Action.RequestHeaders.header_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->header_name(), output);
  }

  // string descriptor_key = 2;
  if (this->descriptor_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_key().data(), static_cast<int>(this->descriptor_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.Action.RequestHeaders.descriptor_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->descriptor_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimit.Action.RequestHeaders)
}

::google::protobuf::uint8* RateLimit_Action_RequestHeaders::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimit.Action.RequestHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string header_name = 1;
  if (this->header_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->header_name().data(), static_cast<int>(this->header_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.Action.RequestHeaders.header_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->header_name(), target);
  }

  // string descriptor_key = 2;
  if (this->descriptor_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_key().data(), static_cast<int>(this->descriptor_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.Action.RequestHeaders.descriptor_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->descriptor_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimit.Action.RequestHeaders)
  return target;
}

size_t RateLimit_Action_RequestHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimit.Action.RequestHeaders)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string header_name = 1;
  if (this->header_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->header_name());
  }

  // string descriptor_key = 2;
  if (this->descriptor_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descriptor_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit_Action_RequestHeaders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimit.Action.RequestHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit_Action_RequestHeaders* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit_Action_RequestHeaders>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimit.Action.RequestHeaders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimit.Action.RequestHeaders)
    MergeFrom(*source);
  }
}

void RateLimit_Action_RequestHeaders::MergeFrom(const RateLimit_Action_RequestHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimit.Action.RequestHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.header_name().size() > 0) {

    header_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_name_);
  }
  if (from.descriptor_key().size() > 0) {

    descriptor_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_key_);
  }
}

void RateLimit_Action_RequestHeaders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimit.Action.RequestHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit_Action_RequestHeaders::CopyFrom(const RateLimit_Action_RequestHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimit.Action.RequestHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit_Action_RequestHeaders::IsInitialized() const {
  return true;
}

void RateLimit_Action_RequestHeaders::Swap(RateLimit_Action_RequestHeaders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit_Action_RequestHeaders::InternalSwap(RateLimit_Action_RequestHeaders* other) {
  using std::swap;
  header_name_.Swap(&other->header_name_);
  descriptor_key_.Swap(&other->descriptor_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit_Action_RequestHeaders::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit_Action_RequestHeaders

// string header_name = 1;
void RateLimit_Action_RequestHeaders::clear_header_name() {
  header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimit_Action_RequestHeaders::header_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.Action.RequestHeaders.header_name)
  return header_name_.GetNoArena();
}
void RateLimit_Action_RequestHeaders::set_header_name(const ::std::string& value) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.Action.RequestHeaders.header_name)
}
#if LANG_CXX11
void RateLimit_Action_RequestHeaders::set_header_name(::std::string&& value) {
  
  header_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.Action.RequestHeaders.header_name)
}
#endif
void RateLimit_Action_RequestHeaders::set_header_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.Action.RequestHeaders.header_name)
}
void RateLimit_Action_RequestHeaders::set_header_name(const char* value, size_t size) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.Action.RequestHeaders.header_name)
}
::std::string* RateLimit_Action_RequestHeaders::mutable_header_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.Action.RequestHeaders.header_name)
  return header_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit_Action_RequestHeaders::release_header_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.Action.RequestHeaders.header_name)
  
  return header_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimit_Action_RequestHeaders::set_allocated_header_name(::std::string* header_name) {
  if (header_name != NULL) {
    
  } else {
    
  }
  header_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.Action.RequestHeaders.header_name)
}

// string descriptor_key = 2;
void RateLimit_Action_RequestHeaders::clear_descriptor_key() {
  descriptor_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimit_Action_RequestHeaders::descriptor_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.Action.RequestHeaders.descriptor_key)
  return descriptor_key_.GetNoArena();
}
void RateLimit_Action_RequestHeaders::set_descriptor_key(const ::std::string& value) {
  
  descriptor_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.Action.RequestHeaders.descriptor_key)
}
#if LANG_CXX11
void RateLimit_Action_RequestHeaders::set_descriptor_key(::std::string&& value) {
  
  descriptor_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.Action.RequestHeaders.descriptor_key)
}
#endif
void RateLimit_Action_RequestHeaders::set_descriptor_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  descriptor_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.Action.RequestHeaders.descriptor_key)
}
void RateLimit_Action_RequestHeaders::set_descriptor_key(const char* value, size_t size) {
  
  descriptor_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.Action.RequestHeaders.descriptor_key)
}
::std::string* RateLimit_Action_RequestHeaders::mutable_descriptor_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.Action.RequestHeaders.descriptor_key)
  return descriptor_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit_Action_RequestHeaders::release_descriptor_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.Action.RequestHeaders.descriptor_key)
  
  return descriptor_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimit_Action_RequestHeaders::set_allocated_descriptor_key(::std::string* descriptor_key) {
  if (descriptor_key != NULL) {
    
  } else {
    
  }
  descriptor_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.Action.RequestHeaders.descriptor_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit_Action_RemoteAddress::RateLimit_Action_RemoteAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimit.Action.RemoteAddress)
}
RateLimit_Action_RemoteAddress::RateLimit_Action_RemoteAddress(const RateLimit_Action_RemoteAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimit.Action.RemoteAddress)
}

void RateLimit_Action_RemoteAddress::SharedCtor() {
  _cached_size_ = 0;
}

RateLimit_Action_RemoteAddress::~RateLimit_Action_RemoteAddress() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimit.Action.RemoteAddress)
  SharedDtor();
}

void RateLimit_Action_RemoteAddress::SharedDtor() {
}

void RateLimit_Action_RemoteAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit_Action_RemoteAddress::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RateLimit_Action_RemoteAddress& RateLimit_Action_RemoteAddress::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit_Action_RemoteAddress* RateLimit_Action_RemoteAddress::New(::google::protobuf::Arena* arena) const {
  RateLimit_Action_RemoteAddress* n = new RateLimit_Action_RemoteAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit_Action_RemoteAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimit.Action.RemoteAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RateLimit_Action_RemoteAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimit.Action.RemoteAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimit.Action.RemoteAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimit.Action.RemoteAddress)
  return false;
#undef DO_
}

void RateLimit_Action_RemoteAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimit.Action.RemoteAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimit.Action.RemoteAddress)
}

::google::protobuf::uint8* RateLimit_Action_RemoteAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimit.Action.RemoteAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimit.Action.RemoteAddress)
  return target;
}

size_t RateLimit_Action_RemoteAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimit.Action.RemoteAddress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit_Action_RemoteAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimit.Action.RemoteAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit_Action_RemoteAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit_Action_RemoteAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimit.Action.RemoteAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimit.Action.RemoteAddress)
    MergeFrom(*source);
  }
}

void RateLimit_Action_RemoteAddress::MergeFrom(const RateLimit_Action_RemoteAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimit.Action.RemoteAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RateLimit_Action_RemoteAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimit.Action.RemoteAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit_Action_RemoteAddress::CopyFrom(const RateLimit_Action_RemoteAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimit.Action.RemoteAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit_Action_RemoteAddress::IsInitialized() const {
  return true;
}

void RateLimit_Action_RemoteAddress::Swap(RateLimit_Action_RemoteAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit_Action_RemoteAddress::InternalSwap(RateLimit_Action_RemoteAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit_Action_RemoteAddress::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit_Action_RemoteAddress

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimit_Action_GenericKey::kDescriptorValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit_Action_GenericKey::RateLimit_Action_GenericKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimit.Action.GenericKey)
}
RateLimit_Action_GenericKey::RateLimit_Action_GenericKey(const RateLimit_Action_GenericKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descriptor_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.descriptor_value().size() > 0) {
    descriptor_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_value_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimit.Action.GenericKey)
}

void RateLimit_Action_GenericKey::SharedCtor() {
  descriptor_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RateLimit_Action_GenericKey::~RateLimit_Action_GenericKey() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimit.Action.GenericKey)
  SharedDtor();
}

void RateLimit_Action_GenericKey::SharedDtor() {
  descriptor_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RateLimit_Action_GenericKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit_Action_GenericKey::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RateLimit_Action_GenericKey& RateLimit_Action_GenericKey::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit_Action_GenericKey* RateLimit_Action_GenericKey::New(::google::protobuf::Arena* arena) const {
  RateLimit_Action_GenericKey* n = new RateLimit_Action_GenericKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit_Action_GenericKey::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimit.Action.GenericKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descriptor_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RateLimit_Action_GenericKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimit.Action.GenericKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string descriptor_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptor_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->descriptor_value().data(), static_cast<int>(this->descriptor_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RateLimit.Action.GenericKey.descriptor_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimit.Action.GenericKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimit.Action.GenericKey)
  return false;
#undef DO_
}

void RateLimit_Action_GenericKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimit.Action.GenericKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string descriptor_value = 1;
  if (this->descriptor_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_value().data(), static_cast<int>(this->descriptor_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.Action.GenericKey.descriptor_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->descriptor_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimit.Action.GenericKey)
}

::google::protobuf::uint8* RateLimit_Action_GenericKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimit.Action.GenericKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string descriptor_value = 1;
  if (this->descriptor_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_value().data(), static_cast<int>(this->descriptor_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.Action.GenericKey.descriptor_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->descriptor_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimit.Action.GenericKey)
  return target;
}

size_t RateLimit_Action_GenericKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimit.Action.GenericKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string descriptor_value = 1;
  if (this->descriptor_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descriptor_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit_Action_GenericKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimit.Action.GenericKey)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit_Action_GenericKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit_Action_GenericKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimit.Action.GenericKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimit.Action.GenericKey)
    MergeFrom(*source);
  }
}

void RateLimit_Action_GenericKey::MergeFrom(const RateLimit_Action_GenericKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimit.Action.GenericKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.descriptor_value().size() > 0) {

    descriptor_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_value_);
  }
}

void RateLimit_Action_GenericKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimit.Action.GenericKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit_Action_GenericKey::CopyFrom(const RateLimit_Action_GenericKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimit.Action.GenericKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit_Action_GenericKey::IsInitialized() const {
  return true;
}

void RateLimit_Action_GenericKey::Swap(RateLimit_Action_GenericKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit_Action_GenericKey::InternalSwap(RateLimit_Action_GenericKey* other) {
  using std::swap;
  descriptor_value_.Swap(&other->descriptor_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit_Action_GenericKey::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit_Action_GenericKey

// string descriptor_value = 1;
void RateLimit_Action_GenericKey::clear_descriptor_value() {
  descriptor_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimit_Action_GenericKey::descriptor_value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.Action.GenericKey.descriptor_value)
  return descriptor_value_.GetNoArena();
}
void RateLimit_Action_GenericKey::set_descriptor_value(const ::std::string& value) {
  
  descriptor_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.Action.GenericKey.descriptor_value)
}
#if LANG_CXX11
void RateLimit_Action_GenericKey::set_descriptor_value(::std::string&& value) {
  
  descriptor_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.Action.GenericKey.descriptor_value)
}
#endif
void RateLimit_Action_GenericKey::set_descriptor_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  descriptor_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.Action.GenericKey.descriptor_value)
}
void RateLimit_Action_GenericKey::set_descriptor_value(const char* value, size_t size) {
  
  descriptor_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.Action.GenericKey.descriptor_value)
}
::std::string* RateLimit_Action_GenericKey::mutable_descriptor_value() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.Action.GenericKey.descriptor_value)
  return descriptor_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit_Action_GenericKey::release_descriptor_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.Action.GenericKey.descriptor_value)
  
  return descriptor_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimit_Action_GenericKey::set_allocated_descriptor_value(::std::string* descriptor_value) {
  if (descriptor_value != NULL) {
    
  } else {
    
  }
  descriptor_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_value);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.Action.GenericKey.descriptor_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimit_Action_HeaderValueMatch::kDescriptorValueFieldNumber;
const int RateLimit_Action_HeaderValueMatch::kExpectMatchFieldNumber;
const int RateLimit_Action_HeaderValueMatch::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit_Action_HeaderValueMatch::RateLimit_Action_HeaderValueMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
}
RateLimit_Action_HeaderValueMatch::RateLimit_Action_HeaderValueMatch(const RateLimit_Action_HeaderValueMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      headers_(from.headers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descriptor_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.descriptor_value().size() > 0) {
    descriptor_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_value_);
  }
  if (from.has_expect_match()) {
    expect_match_ = new ::google::protobuf::BoolValue(*from.expect_match_);
  } else {
    expect_match_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
}

void RateLimit_Action_HeaderValueMatch::SharedCtor() {
  descriptor_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expect_match_ = NULL;
  _cached_size_ = 0;
}

RateLimit_Action_HeaderValueMatch::~RateLimit_Action_HeaderValueMatch() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
  SharedDtor();
}

void RateLimit_Action_HeaderValueMatch::SharedDtor() {
  descriptor_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expect_match_;
}

void RateLimit_Action_HeaderValueMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit_Action_HeaderValueMatch::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RateLimit_Action_HeaderValueMatch& RateLimit_Action_HeaderValueMatch::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit_Action_HeaderValueMatch* RateLimit_Action_HeaderValueMatch::New(::google::protobuf::Arena* arena) const {
  RateLimit_Action_HeaderValueMatch* n = new RateLimit_Action_HeaderValueMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit_Action_HeaderValueMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  descriptor_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && expect_match_ != NULL) {
    delete expect_match_;
  }
  expect_match_ = NULL;
  _internal_metadata_.Clear();
}

bool RateLimit_Action_HeaderValueMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string descriptor_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptor_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->descriptor_value().data(), static_cast<int>(this->descriptor_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RateLimit.Action.HeaderValueMatch.descriptor_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue expect_match = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expect_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HeaderMatcher headers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
  return false;
#undef DO_
}

void RateLimit_Action_HeaderValueMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string descriptor_value = 1;
  if (this->descriptor_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_value().data(), static_cast<int>(this->descriptor_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.Action.HeaderValueMatch.descriptor_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->descriptor_value(), output);
  }

  // .google.protobuf.BoolValue expect_match = 2;
  if (this->has_expect_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->expect_match_, output);
  }

  // repeated .envoy.api.v2.HeaderMatcher headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->headers(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
}

::google::protobuf::uint8* RateLimit_Action_HeaderValueMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string descriptor_value = 1;
  if (this->descriptor_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_value().data(), static_cast<int>(this->descriptor_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.Action.HeaderValueMatch.descriptor_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->descriptor_value(), target);
  }

  // .google.protobuf.BoolValue expect_match = 2;
  if (this->has_expect_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->expect_match_, deterministic, target);
  }

  // repeated .envoy.api.v2.HeaderMatcher headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->headers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
  return target;
}

size_t RateLimit_Action_HeaderValueMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.HeaderMatcher headers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headers(static_cast<int>(i)));
    }
  }

  // string descriptor_value = 1;
  if (this->descriptor_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descriptor_value());
  }

  // .google.protobuf.BoolValue expect_match = 2;
  if (this->has_expect_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->expect_match_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit_Action_HeaderValueMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit_Action_HeaderValueMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit_Action_HeaderValueMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
    MergeFrom(*source);
  }
}

void RateLimit_Action_HeaderValueMatch::MergeFrom(const RateLimit_Action_HeaderValueMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.descriptor_value().size() > 0) {

    descriptor_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_value_);
  }
  if (from.has_expect_match()) {
    mutable_expect_match()->::google::protobuf::BoolValue::MergeFrom(from.expect_match());
  }
}

void RateLimit_Action_HeaderValueMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit_Action_HeaderValueMatch::CopyFrom(const RateLimit_Action_HeaderValueMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimit.Action.HeaderValueMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit_Action_HeaderValueMatch::IsInitialized() const {
  return true;
}

void RateLimit_Action_HeaderValueMatch::Swap(RateLimit_Action_HeaderValueMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit_Action_HeaderValueMatch::InternalSwap(RateLimit_Action_HeaderValueMatch* other) {
  using std::swap;
  headers_.InternalSwap(&other->headers_);
  descriptor_value_.Swap(&other->descriptor_value_);
  swap(expect_match_, other->expect_match_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit_Action_HeaderValueMatch::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit_Action_HeaderValueMatch

// string descriptor_value = 1;
void RateLimit_Action_HeaderValueMatch::clear_descriptor_value() {
  descriptor_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimit_Action_HeaderValueMatch::descriptor_value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.Action.HeaderValueMatch.descriptor_value)
  return descriptor_value_.GetNoArena();
}
void RateLimit_Action_HeaderValueMatch::set_descriptor_value(const ::std::string& value) {
  
  descriptor_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.Action.HeaderValueMatch.descriptor_value)
}
#if LANG_CXX11
void RateLimit_Action_HeaderValueMatch::set_descriptor_value(::std::string&& value) {
  
  descriptor_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.Action.HeaderValueMatch.descriptor_value)
}
#endif
void RateLimit_Action_HeaderValueMatch::set_descriptor_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  descriptor_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.Action.HeaderValueMatch.descriptor_value)
}
void RateLimit_Action_HeaderValueMatch::set_descriptor_value(const char* value, size_t size) {
  
  descriptor_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.Action.HeaderValueMatch.descriptor_value)
}
::std::string* RateLimit_Action_HeaderValueMatch::mutable_descriptor_value() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.Action.HeaderValueMatch.descriptor_value)
  return descriptor_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit_Action_HeaderValueMatch::release_descriptor_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.Action.HeaderValueMatch.descriptor_value)
  
  return descriptor_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimit_Action_HeaderValueMatch::set_allocated_descriptor_value(::std::string* descriptor_value) {
  if (descriptor_value != NULL) {
    
  } else {
    
  }
  descriptor_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_value);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.Action.HeaderValueMatch.descriptor_value)
}

// .google.protobuf.BoolValue expect_match = 2;
bool RateLimit_Action_HeaderValueMatch::has_expect_match() const {
  return this != internal_default_instance() && expect_match_ != NULL;
}
void RateLimit_Action_HeaderValueMatch::clear_expect_match() {
  if (GetArenaNoVirtual() == NULL && expect_match_ != NULL) delete expect_match_;
  expect_match_ = NULL;
}
const ::google::protobuf::BoolValue& RateLimit_Action_HeaderValueMatch::expect_match() const {
  const ::google::protobuf::BoolValue* p = expect_match_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.Action.HeaderValueMatch.expect_match)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* RateLimit_Action_HeaderValueMatch::mutable_expect_match() {
  
  if (expect_match_ == NULL) {
    expect_match_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.Action.HeaderValueMatch.expect_match)
  return expect_match_;
}
::google::protobuf::BoolValue* RateLimit_Action_HeaderValueMatch::release_expect_match() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.Action.HeaderValueMatch.expect_match)
  
  ::google::protobuf::BoolValue* temp = expect_match_;
  expect_match_ = NULL;
  return temp;
}
void RateLimit_Action_HeaderValueMatch::set_allocated_expect_match(::google::protobuf::BoolValue* expect_match) {
  delete expect_match_;
  if (expect_match != NULL && expect_match->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_expect_match = new ::google::protobuf::BoolValue;
    new_expect_match->CopyFrom(*expect_match);
    expect_match = new_expect_match;
  }
  expect_match_ = expect_match;
  if (expect_match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.Action.HeaderValueMatch.expect_match)
}

// repeated .envoy.api.v2.HeaderMatcher headers = 3;
int RateLimit_Action_HeaderValueMatch::headers_size() const {
  return headers_.size();
}
void RateLimit_Action_HeaderValueMatch::clear_headers() {
  headers_.Clear();
}
const ::envoy::api::v2::HeaderMatcher& RateLimit_Action_HeaderValueMatch::headers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.Action.HeaderValueMatch.headers)
  return headers_.Get(index);
}
::envoy::api::v2::HeaderMatcher* RateLimit_Action_HeaderValueMatch::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.Action.HeaderValueMatch.headers)
  return headers_.Mutable(index);
}
::envoy::api::v2::HeaderMatcher* RateLimit_Action_HeaderValueMatch::add_headers() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RateLimit.Action.HeaderValueMatch.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >*
RateLimit_Action_HeaderValueMatch::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RateLimit.Action.HeaderValueMatch.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >&
RateLimit_Action_HeaderValueMatch::headers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RateLimit.Action.HeaderValueMatch.headers)
  return headers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimit_Action::kSourceClusterFieldNumber;
const int RateLimit_Action::kDestinationClusterFieldNumber;
const int RateLimit_Action::kRequestHeadersFieldNumber;
const int RateLimit_Action::kRemoteAddressFieldNumber;
const int RateLimit_Action::kGenericKeyFieldNumber;
const int RateLimit_Action::kHeaderValueMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit_Action::RateLimit_Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimit.Action)
}
RateLimit_Action::RateLimit_Action(const RateLimit_Action& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_action_specifier();
  switch (from.action_specifier_case()) {
    case kSourceCluster: {
      mutable_source_cluster()->::envoy::api::v2::RateLimit_Action_SourceCluster::MergeFrom(from.source_cluster());
      break;
    }
    case kDestinationCluster: {
      mutable_destination_cluster()->::envoy::api::v2::RateLimit_Action_DestinationCluster::MergeFrom(from.destination_cluster());
      break;
    }
    case kRequestHeaders: {
      mutable_request_headers()->::envoy::api::v2::RateLimit_Action_RequestHeaders::MergeFrom(from.request_headers());
      break;
    }
    case kRemoteAddress: {
      mutable_remote_address()->::envoy::api::v2::RateLimit_Action_RemoteAddress::MergeFrom(from.remote_address());
      break;
    }
    case kGenericKey: {
      mutable_generic_key()->::envoy::api::v2::RateLimit_Action_GenericKey::MergeFrom(from.generic_key());
      break;
    }
    case kHeaderValueMatch: {
      mutable_header_value_match()->::envoy::api::v2::RateLimit_Action_HeaderValueMatch::MergeFrom(from.header_value_match());
      break;
    }
    case ACTION_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimit.Action)
}

void RateLimit_Action::SharedCtor() {
  clear_has_action_specifier();
  _cached_size_ = 0;
}

RateLimit_Action::~RateLimit_Action() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimit.Action)
  SharedDtor();
}

void RateLimit_Action::SharedDtor() {
  if (has_action_specifier()) {
    clear_action_specifier();
  }
}

void RateLimit_Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit_Action::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RateLimit_Action& RateLimit_Action::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit_Action* RateLimit_Action::New(::google::protobuf::Arena* arena) const {
  RateLimit_Action* n = new RateLimit_Action;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit_Action::clear_action_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.RateLimit.Action)
  switch (action_specifier_case()) {
    case kSourceCluster: {
      delete action_specifier_.source_cluster_;
      break;
    }
    case kDestinationCluster: {
      delete action_specifier_.destination_cluster_;
      break;
    }
    case kRequestHeaders: {
      delete action_specifier_.request_headers_;
      break;
    }
    case kRemoteAddress: {
      delete action_specifier_.remote_address_;
      break;
    }
    case kGenericKey: {
      delete action_specifier_.generic_key_;
      break;
    }
    case kHeaderValueMatch: {
      delete action_specifier_.header_value_match_;
      break;
    }
    case ACTION_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_SPECIFIER_NOT_SET;
}


void RateLimit_Action::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimit.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action_specifier();
  _internal_metadata_.Clear();
}

bool RateLimit_Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimit.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.RateLimit.Action.SourceCluster source_cluster = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RateLimit.Action.DestinationCluster destination_cluster = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RateLimit.Action.RequestHeaders request_headers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RateLimit.Action.RemoteAddress remote_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RateLimit.Action.GenericKey generic_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generic_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RateLimit.Action.HeaderValueMatch header_value_match = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_value_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimit.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimit.Action)
  return false;
#undef DO_
}

void RateLimit_Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimit.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.RateLimit.Action.SourceCluster source_cluster = 1;
  if (has_source_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *action_specifier_.source_cluster_, output);
  }

  // .envoy.api.v2.RateLimit.Action.DestinationCluster destination_cluster = 2;
  if (has_destination_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *action_specifier_.destination_cluster_, output);
  }

  // .envoy.api.v2.RateLimit.Action.RequestHeaders request_headers = 3;
  if (has_request_headers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *action_specifier_.request_headers_, output);
  }

  // .envoy.api.v2.RateLimit.Action.RemoteAddress remote_address = 4;
  if (has_remote_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *action_specifier_.remote_address_, output);
  }

  // .envoy.api.v2.RateLimit.Action.GenericKey generic_key = 5;
  if (has_generic_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *action_specifier_.generic_key_, output);
  }

  // .envoy.api.v2.RateLimit.Action.HeaderValueMatch header_value_match = 6;
  if (has_header_value_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *action_specifier_.header_value_match_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimit.Action)
}

::google::protobuf::uint8* RateLimit_Action::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimit.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.RateLimit.Action.SourceCluster source_cluster = 1;
  if (has_source_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *action_specifier_.source_cluster_, deterministic, target);
  }

  // .envoy.api.v2.RateLimit.Action.DestinationCluster destination_cluster = 2;
  if (has_destination_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *action_specifier_.destination_cluster_, deterministic, target);
  }

  // .envoy.api.v2.RateLimit.Action.RequestHeaders request_headers = 3;
  if (has_request_headers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *action_specifier_.request_headers_, deterministic, target);
  }

  // .envoy.api.v2.RateLimit.Action.RemoteAddress remote_address = 4;
  if (has_remote_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *action_specifier_.remote_address_, deterministic, target);
  }

  // .envoy.api.v2.RateLimit.Action.GenericKey generic_key = 5;
  if (has_generic_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *action_specifier_.generic_key_, deterministic, target);
  }

  // .envoy.api.v2.RateLimit.Action.HeaderValueMatch header_value_match = 6;
  if (has_header_value_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *action_specifier_.header_value_match_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimit.Action)
  return target;
}

size_t RateLimit_Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimit.Action)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (action_specifier_case()) {
    // .envoy.api.v2.RateLimit.Action.SourceCluster source_cluster = 1;
    case kSourceCluster: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_specifier_.source_cluster_);
      break;
    }
    // .envoy.api.v2.RateLimit.Action.DestinationCluster destination_cluster = 2;
    case kDestinationCluster: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_specifier_.destination_cluster_);
      break;
    }
    // .envoy.api.v2.RateLimit.Action.RequestHeaders request_headers = 3;
    case kRequestHeaders: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_specifier_.request_headers_);
      break;
    }
    // .envoy.api.v2.RateLimit.Action.RemoteAddress remote_address = 4;
    case kRemoteAddress: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_specifier_.remote_address_);
      break;
    }
    // .envoy.api.v2.RateLimit.Action.GenericKey generic_key = 5;
    case kGenericKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_specifier_.generic_key_);
      break;
    }
    // .envoy.api.v2.RateLimit.Action.HeaderValueMatch header_value_match = 6;
    case kHeaderValueMatch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_specifier_.header_value_match_);
      break;
    }
    case ACTION_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit_Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimit.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit_Action* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit_Action>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimit.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimit.Action)
    MergeFrom(*source);
  }
}

void RateLimit_Action::MergeFrom(const RateLimit_Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimit.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_specifier_case()) {
    case kSourceCluster: {
      mutable_source_cluster()->::envoy::api::v2::RateLimit_Action_SourceCluster::MergeFrom(from.source_cluster());
      break;
    }
    case kDestinationCluster: {
      mutable_destination_cluster()->::envoy::api::v2::RateLimit_Action_DestinationCluster::MergeFrom(from.destination_cluster());
      break;
    }
    case kRequestHeaders: {
      mutable_request_headers()->::envoy::api::v2::RateLimit_Action_RequestHeaders::MergeFrom(from.request_headers());
      break;
    }
    case kRemoteAddress: {
      mutable_remote_address()->::envoy::api::v2::RateLimit_Action_RemoteAddress::MergeFrom(from.remote_address());
      break;
    }
    case kGenericKey: {
      mutable_generic_key()->::envoy::api::v2::RateLimit_Action_GenericKey::MergeFrom(from.generic_key());
      break;
    }
    case kHeaderValueMatch: {
      mutable_header_value_match()->::envoy::api::v2::RateLimit_Action_HeaderValueMatch::MergeFrom(from.header_value_match());
      break;
    }
    case ACTION_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void RateLimit_Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimit.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit_Action::CopyFrom(const RateLimit_Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimit.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit_Action::IsInitialized() const {
  return true;
}

void RateLimit_Action::Swap(RateLimit_Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit_Action::InternalSwap(RateLimit_Action* other) {
  using std::swap;
  swap(action_specifier_, other->action_specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit_Action::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit_Action

// .envoy.api.v2.RateLimit.Action.SourceCluster source_cluster = 1;
bool RateLimit_Action::has_source_cluster() const {
  return action_specifier_case() == kSourceCluster;
}
void RateLimit_Action::set_has_source_cluster() {
  _oneof_case_[0] = kSourceCluster;
}
void RateLimit_Action::clear_source_cluster() {
  if (has_source_cluster()) {
    delete action_specifier_.source_cluster_;
    clear_has_action_specifier();
  }
}
 const ::envoy::api::v2::RateLimit_Action_SourceCluster& RateLimit_Action::source_cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.Action.source_cluster)
  return has_source_cluster()
      ? *action_specifier_.source_cluster_
      : ::envoy::api::v2::RateLimit_Action_SourceCluster::default_instance();
}
::envoy::api::v2::RateLimit_Action_SourceCluster* RateLimit_Action::mutable_source_cluster() {
  if (!has_source_cluster()) {
    clear_action_specifier();
    set_has_source_cluster();
    action_specifier_.source_cluster_ = new ::envoy::api::v2::RateLimit_Action_SourceCluster;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.Action.source_cluster)
  return action_specifier_.source_cluster_;
}
::envoy::api::v2::RateLimit_Action_SourceCluster* RateLimit_Action::release_source_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.Action.source_cluster)
  if (has_source_cluster()) {
    clear_has_action_specifier();
    ::envoy::api::v2::RateLimit_Action_SourceCluster* temp = action_specifier_.source_cluster_;
    action_specifier_.source_cluster_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RateLimit_Action::set_allocated_source_cluster(::envoy::api::v2::RateLimit_Action_SourceCluster* source_cluster) {
  clear_action_specifier();
  if (source_cluster) {
    set_has_source_cluster();
    action_specifier_.source_cluster_ = source_cluster;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.Action.source_cluster)
}

// .envoy.api.v2.RateLimit.Action.DestinationCluster destination_cluster = 2;
bool RateLimit_Action::has_destination_cluster() const {
  return action_specifier_case() == kDestinationCluster;
}
void RateLimit_Action::set_has_destination_cluster() {
  _oneof_case_[0] = kDestinationCluster;
}
void RateLimit_Action::clear_destination_cluster() {
  if (has_destination_cluster()) {
    delete action_specifier_.destination_cluster_;
    clear_has_action_specifier();
  }
}
 const ::envoy::api::v2::RateLimit_Action_DestinationCluster& RateLimit_Action::destination_cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.Action.destination_cluster)
  return has_destination_cluster()
      ? *action_specifier_.destination_cluster_
      : ::envoy::api::v2::RateLimit_Action_DestinationCluster::default_instance();
}
::envoy::api::v2::RateLimit_Action_DestinationCluster* RateLimit_Action::mutable_destination_cluster() {
  if (!has_destination_cluster()) {
    clear_action_specifier();
    set_has_destination_cluster();
    action_specifier_.destination_cluster_ = new ::envoy::api::v2::RateLimit_Action_DestinationCluster;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.Action.destination_cluster)
  return action_specifier_.destination_cluster_;
}
::envoy::api::v2::RateLimit_Action_DestinationCluster* RateLimit_Action::release_destination_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.Action.destination_cluster)
  if (has_destination_cluster()) {
    clear_has_action_specifier();
    ::envoy::api::v2::RateLimit_Action_DestinationCluster* temp = action_specifier_.destination_cluster_;
    action_specifier_.destination_cluster_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RateLimit_Action::set_allocated_destination_cluster(::envoy::api::v2::RateLimit_Action_DestinationCluster* destination_cluster) {
  clear_action_specifier();
  if (destination_cluster) {
    set_has_destination_cluster();
    action_specifier_.destination_cluster_ = destination_cluster;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.Action.destination_cluster)
}

// .envoy.api.v2.RateLimit.Action.RequestHeaders request_headers = 3;
bool RateLimit_Action::has_request_headers() const {
  return action_specifier_case() == kRequestHeaders;
}
void RateLimit_Action::set_has_request_headers() {
  _oneof_case_[0] = kRequestHeaders;
}
void RateLimit_Action::clear_request_headers() {
  if (has_request_headers()) {
    delete action_specifier_.request_headers_;
    clear_has_action_specifier();
  }
}
 const ::envoy::api::v2::RateLimit_Action_RequestHeaders& RateLimit_Action::request_headers() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.Action.request_headers)
  return has_request_headers()
      ? *action_specifier_.request_headers_
      : ::envoy::api::v2::RateLimit_Action_RequestHeaders::default_instance();
}
::envoy::api::v2::RateLimit_Action_RequestHeaders* RateLimit_Action::mutable_request_headers() {
  if (!has_request_headers()) {
    clear_action_specifier();
    set_has_request_headers();
    action_specifier_.request_headers_ = new ::envoy::api::v2::RateLimit_Action_RequestHeaders;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.Action.request_headers)
  return action_specifier_.request_headers_;
}
::envoy::api::v2::RateLimit_Action_RequestHeaders* RateLimit_Action::release_request_headers() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.Action.request_headers)
  if (has_request_headers()) {
    clear_has_action_specifier();
    ::envoy::api::v2::RateLimit_Action_RequestHeaders* temp = action_specifier_.request_headers_;
    action_specifier_.request_headers_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RateLimit_Action::set_allocated_request_headers(::envoy::api::v2::RateLimit_Action_RequestHeaders* request_headers) {
  clear_action_specifier();
  if (request_headers) {
    set_has_request_headers();
    action_specifier_.request_headers_ = request_headers;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.Action.request_headers)
}

// .envoy.api.v2.RateLimit.Action.RemoteAddress remote_address = 4;
bool RateLimit_Action::has_remote_address() const {
  return action_specifier_case() == kRemoteAddress;
}
void RateLimit_Action::set_has_remote_address() {
  _oneof_case_[0] = kRemoteAddress;
}
void RateLimit_Action::clear_remote_address() {
  if (has_remote_address()) {
    delete action_specifier_.remote_address_;
    clear_has_action_specifier();
  }
}
 const ::envoy::api::v2::RateLimit_Action_RemoteAddress& RateLimit_Action::remote_address() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.Action.remote_address)
  return has_remote_address()
      ? *action_specifier_.remote_address_
      : ::envoy::api::v2::RateLimit_Action_RemoteAddress::default_instance();
}
::envoy::api::v2::RateLimit_Action_RemoteAddress* RateLimit_Action::mutable_remote_address() {
  if (!has_remote_address()) {
    clear_action_specifier();
    set_has_remote_address();
    action_specifier_.remote_address_ = new ::envoy::api::v2::RateLimit_Action_RemoteAddress;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.Action.remote_address)
  return action_specifier_.remote_address_;
}
::envoy::api::v2::RateLimit_Action_RemoteAddress* RateLimit_Action::release_remote_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.Action.remote_address)
  if (has_remote_address()) {
    clear_has_action_specifier();
    ::envoy::api::v2::RateLimit_Action_RemoteAddress* temp = action_specifier_.remote_address_;
    action_specifier_.remote_address_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RateLimit_Action::set_allocated_remote_address(::envoy::api::v2::RateLimit_Action_RemoteAddress* remote_address) {
  clear_action_specifier();
  if (remote_address) {
    set_has_remote_address();
    action_specifier_.remote_address_ = remote_address;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.Action.remote_address)
}

// .envoy.api.v2.RateLimit.Action.GenericKey generic_key = 5;
bool RateLimit_Action::has_generic_key() const {
  return action_specifier_case() == kGenericKey;
}
void RateLimit_Action::set_has_generic_key() {
  _oneof_case_[0] = kGenericKey;
}
void RateLimit_Action::clear_generic_key() {
  if (has_generic_key()) {
    delete action_specifier_.generic_key_;
    clear_has_action_specifier();
  }
}
 const ::envoy::api::v2::RateLimit_Action_GenericKey& RateLimit_Action::generic_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.Action.generic_key)
  return has_generic_key()
      ? *action_specifier_.generic_key_
      : ::envoy::api::v2::RateLimit_Action_GenericKey::default_instance();
}
::envoy::api::v2::RateLimit_Action_GenericKey* RateLimit_Action::mutable_generic_key() {
  if (!has_generic_key()) {
    clear_action_specifier();
    set_has_generic_key();
    action_specifier_.generic_key_ = new ::envoy::api::v2::RateLimit_Action_GenericKey;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.Action.generic_key)
  return action_specifier_.generic_key_;
}
::envoy::api::v2::RateLimit_Action_GenericKey* RateLimit_Action::release_generic_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.Action.generic_key)
  if (has_generic_key()) {
    clear_has_action_specifier();
    ::envoy::api::v2::RateLimit_Action_GenericKey* temp = action_specifier_.generic_key_;
    action_specifier_.generic_key_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RateLimit_Action::set_allocated_generic_key(::envoy::api::v2::RateLimit_Action_GenericKey* generic_key) {
  clear_action_specifier();
  if (generic_key) {
    set_has_generic_key();
    action_specifier_.generic_key_ = generic_key;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.Action.generic_key)
}

// .envoy.api.v2.RateLimit.Action.HeaderValueMatch header_value_match = 6;
bool RateLimit_Action::has_header_value_match() const {
  return action_specifier_case() == kHeaderValueMatch;
}
void RateLimit_Action::set_has_header_value_match() {
  _oneof_case_[0] = kHeaderValueMatch;
}
void RateLimit_Action::clear_header_value_match() {
  if (has_header_value_match()) {
    delete action_specifier_.header_value_match_;
    clear_has_action_specifier();
  }
}
 const ::envoy::api::v2::RateLimit_Action_HeaderValueMatch& RateLimit_Action::header_value_match() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.Action.header_value_match)
  return has_header_value_match()
      ? *action_specifier_.header_value_match_
      : ::envoy::api::v2::RateLimit_Action_HeaderValueMatch::default_instance();
}
::envoy::api::v2::RateLimit_Action_HeaderValueMatch* RateLimit_Action::mutable_header_value_match() {
  if (!has_header_value_match()) {
    clear_action_specifier();
    set_has_header_value_match();
    action_specifier_.header_value_match_ = new ::envoy::api::v2::RateLimit_Action_HeaderValueMatch;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.Action.header_value_match)
  return action_specifier_.header_value_match_;
}
::envoy::api::v2::RateLimit_Action_HeaderValueMatch* RateLimit_Action::release_header_value_match() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.Action.header_value_match)
  if (has_header_value_match()) {
    clear_has_action_specifier();
    ::envoy::api::v2::RateLimit_Action_HeaderValueMatch* temp = action_specifier_.header_value_match_;
    action_specifier_.header_value_match_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RateLimit_Action::set_allocated_header_value_match(::envoy::api::v2::RateLimit_Action_HeaderValueMatch* header_value_match) {
  clear_action_specifier();
  if (header_value_match) {
    set_has_header_value_match();
    action_specifier_.header_value_match_ = header_value_match;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.Action.header_value_match)
}

bool RateLimit_Action::has_action_specifier() const {
  return action_specifier_case() != ACTION_SPECIFIER_NOT_SET;
}
void RateLimit_Action::clear_has_action_specifier() {
  _oneof_case_[0] = ACTION_SPECIFIER_NOT_SET;
}
RateLimit_Action::ActionSpecifierCase RateLimit_Action::action_specifier_case() const {
  return RateLimit_Action::ActionSpecifierCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimit::kStageFieldNumber;
const int RateLimit::kDisableKeyFieldNumber;
const int RateLimit::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit::RateLimit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimit)
}
RateLimit::RateLimit(const RateLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      actions_(from.actions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  disable_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.disable_key().size() > 0) {
    disable_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disable_key_);
  }
  if (from.has_stage()) {
    stage_ = new ::google::protobuf::UInt32Value(*from.stage_);
  } else {
    stage_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimit)
}

void RateLimit::SharedCtor() {
  disable_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stage_ = NULL;
  _cached_size_ = 0;
}

RateLimit::~RateLimit() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimit)
  SharedDtor();
}

void RateLimit::SharedDtor() {
  disable_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stage_;
}

void RateLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RateLimit& RateLimit::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit* RateLimit::New(::google::protobuf::Arena* arena) const {
  RateLimit* n = new RateLimit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  disable_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stage_ != NULL) {
    delete stage_;
  }
  stage_ = NULL;
  _internal_metadata_.Clear();
}

bool RateLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.UInt32Value stage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string disable_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->disable_key().data(), static_cast<int>(this->disable_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RateLimit.disable_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.RateLimit.Action actions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimit)
  return false;
#undef DO_
}

void RateLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value stage = 1;
  if (this->has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stage_, output);
  }

  // string disable_key = 2;
  if (this->disable_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disable_key().data(), static_cast<int>(this->disable_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.disable_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->disable_key(), output);
  }

  // repeated .envoy.api.v2.RateLimit.Action actions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actions(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimit)
}

::google::protobuf::uint8* RateLimit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value stage = 1;
  if (this->has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stage_, deterministic, target);
  }

  // string disable_key = 2;
  if (this->disable_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disable_key().data(), static_cast<int>(this->disable_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.disable_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->disable_key(), target);
  }

  // repeated .envoy.api.v2.RateLimit.Action actions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->actions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimit)
  return target;
}

size_t RateLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.RateLimit.Action actions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actions(static_cast<int>(i)));
    }
  }

  // string disable_key = 2;
  if (this->disable_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->disable_key());
  }

  // .google.protobuf.UInt32Value stage = 1;
  if (this->has_stage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stage_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimit)
    MergeFrom(*source);
  }
}

void RateLimit::MergeFrom(const RateLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (from.disable_key().size() > 0) {

    disable_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disable_key_);
  }
  if (from.has_stage()) {
    mutable_stage()->::google::protobuf::UInt32Value::MergeFrom(from.stage());
  }
}

void RateLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit::CopyFrom(const RateLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit::IsInitialized() const {
  return true;
}

void RateLimit::Swap(RateLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit::InternalSwap(RateLimit* other) {
  using std::swap;
  actions_.InternalSwap(&other->actions_);
  disable_key_.Swap(&other->disable_key_);
  swap(stage_, other->stage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit

// .google.protobuf.UInt32Value stage = 1;
bool RateLimit::has_stage() const {
  return this != internal_default_instance() && stage_ != NULL;
}
void RateLimit::clear_stage() {
  if (GetArenaNoVirtual() == NULL && stage_ != NULL) delete stage_;
  stage_ = NULL;
}
const ::google::protobuf::UInt32Value& RateLimit::stage() const {
  const ::google::protobuf::UInt32Value* p = stage_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.stage)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* RateLimit::mutable_stage() {
  
  if (stage_ == NULL) {
    stage_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.stage)
  return stage_;
}
::google::protobuf::UInt32Value* RateLimit::release_stage() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.stage)
  
  ::google::protobuf::UInt32Value* temp = stage_;
  stage_ = NULL;
  return temp;
}
void RateLimit::set_allocated_stage(::google::protobuf::UInt32Value* stage) {
  delete stage_;
  if (stage != NULL && stage->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_stage = new ::google::protobuf::UInt32Value;
    new_stage->CopyFrom(*stage);
    stage = new_stage;
  }
  stage_ = stage;
  if (stage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.stage)
}

// string disable_key = 2;
void RateLimit::clear_disable_key() {
  disable_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimit::disable_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.disable_key)
  return disable_key_.GetNoArena();
}
void RateLimit::set_disable_key(const ::std::string& value) {
  
  disable_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.disable_key)
}
#if LANG_CXX11
void RateLimit::set_disable_key(::std::string&& value) {
  
  disable_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.disable_key)
}
#endif
void RateLimit::set_disable_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  disable_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.disable_key)
}
void RateLimit::set_disable_key(const char* value, size_t size) {
  
  disable_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.disable_key)
}
::std::string* RateLimit::mutable_disable_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.disable_key)
  return disable_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit::release_disable_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.disable_key)
  
  return disable_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimit::set_allocated_disable_key(::std::string* disable_key) {
  if (disable_key != NULL) {
    
  } else {
    
  }
  disable_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disable_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.disable_key)
}

// repeated .envoy.api.v2.RateLimit.Action actions = 3;
int RateLimit::actions_size() const {
  return actions_.size();
}
void RateLimit::clear_actions() {
  actions_.Clear();
}
const ::envoy::api::v2::RateLimit_Action& RateLimit::actions(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.actions)
  return actions_.Get(index);
}
::envoy::api::v2::RateLimit_Action* RateLimit::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.actions)
  return actions_.Mutable(index);
}
::envoy::api::v2::RateLimit_Action* RateLimit::add_actions() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RateLimit.actions)
  return actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit_Action >*
RateLimit::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RateLimit.actions)
  return &actions_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit_Action >&
RateLimit::actions() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RateLimit.actions)
  return actions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeaderMatcher::kNameFieldNumber;
const int HeaderMatcher::kValueFieldNumber;
const int HeaderMatcher::kRegexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeaderMatcher::HeaderMatcher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HeaderMatcher)
}
HeaderMatcher::HeaderMatcher(const HeaderMatcher& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_regex()) {
    regex_ = new ::google::protobuf::BoolValue(*from.regex_);
  } else {
    regex_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HeaderMatcher)
}

void HeaderMatcher::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regex_ = NULL;
  _cached_size_ = 0;
}

HeaderMatcher::~HeaderMatcher() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HeaderMatcher)
  SharedDtor();
}

void HeaderMatcher::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete regex_;
}

void HeaderMatcher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderMatcher::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeaderMatcher& HeaderMatcher::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeaderMatcher* HeaderMatcher::New(::google::protobuf::Arena* arena) const {
  HeaderMatcher* n = new HeaderMatcher;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeaderMatcher::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HeaderMatcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && regex_ != NULL) {
    delete regex_;
  }
  regex_ = NULL;
  _internal_metadata_.Clear();
}

bool HeaderMatcher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HeaderMatcher)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.HeaderMatcher.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.HeaderMatcher.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue regex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HeaderMatcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HeaderMatcher)
  return false;
#undef DO_
}

void HeaderMatcher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HeaderMatcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HeaderMatcher.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HeaderMatcher.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // .google.protobuf.BoolValue regex = 3;
  if (this->has_regex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->regex_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HeaderMatcher)
}

::google::protobuf::uint8* HeaderMatcher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HeaderMatcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HeaderMatcher.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HeaderMatcher.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // .google.protobuf.BoolValue regex = 3;
  if (this->has_regex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->regex_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HeaderMatcher)
  return target;
}

size_t HeaderMatcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HeaderMatcher)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .google.protobuf.BoolValue regex = 3;
  if (this->has_regex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->regex_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderMatcher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HeaderMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderMatcher* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeaderMatcher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HeaderMatcher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HeaderMatcher)
    MergeFrom(*source);
  }
}

void HeaderMatcher::MergeFrom(const HeaderMatcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HeaderMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_regex()) {
    mutable_regex()->::google::protobuf::BoolValue::MergeFrom(from.regex());
  }
}

void HeaderMatcher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HeaderMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderMatcher::CopyFrom(const HeaderMatcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HeaderMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderMatcher::IsInitialized() const {
  return true;
}

void HeaderMatcher::Swap(HeaderMatcher* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeaderMatcher::InternalSwap(HeaderMatcher* other) {
  using std::swap;
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  swap(regex_, other->regex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeaderMatcher::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeaderMatcher

// string name = 1;
void HeaderMatcher::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeaderMatcher::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HeaderMatcher.name)
  return name_.GetNoArena();
}
void HeaderMatcher::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HeaderMatcher.name)
}
#if LANG_CXX11
void HeaderMatcher::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HeaderMatcher.name)
}
#endif
void HeaderMatcher::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HeaderMatcher.name)
}
void HeaderMatcher::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HeaderMatcher.name)
}
::std::string* HeaderMatcher::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HeaderMatcher.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeaderMatcher::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HeaderMatcher.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderMatcher::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HeaderMatcher.name)
}

// string value = 2;
void HeaderMatcher::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeaderMatcher::value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HeaderMatcher.value)
  return value_.GetNoArena();
}
void HeaderMatcher::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HeaderMatcher.value)
}
#if LANG_CXX11
void HeaderMatcher::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HeaderMatcher.value)
}
#endif
void HeaderMatcher::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HeaderMatcher.value)
}
void HeaderMatcher::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HeaderMatcher.value)
}
::std::string* HeaderMatcher::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HeaderMatcher.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeaderMatcher::release_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HeaderMatcher.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderMatcher::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HeaderMatcher.value)
}

// .google.protobuf.BoolValue regex = 3;
bool HeaderMatcher::has_regex() const {
  return this != internal_default_instance() && regex_ != NULL;
}
void HeaderMatcher::clear_regex() {
  if (GetArenaNoVirtual() == NULL && regex_ != NULL) delete regex_;
  regex_ = NULL;
}
const ::google::protobuf::BoolValue& HeaderMatcher::regex() const {
  const ::google::protobuf::BoolValue* p = regex_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.HeaderMatcher.regex)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* HeaderMatcher::mutable_regex() {
  
  if (regex_ == NULL) {
    regex_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HeaderMatcher.regex)
  return regex_;
}
::google::protobuf::BoolValue* HeaderMatcher::release_regex() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HeaderMatcher.regex)
  
  ::google::protobuf::BoolValue* temp = regex_;
  regex_ = NULL;
  return temp;
}
void HeaderMatcher::set_allocated_regex(::google::protobuf::BoolValue* regex) {
  delete regex_;
  if (regex != NULL && regex->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_regex = new ::google::protobuf::BoolValue;
    new_regex->CopyFrom(*regex);
    regex = new_regex;
  }
  regex_ = regex;
  if (regex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HeaderMatcher.regex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VirtualHost::kNameFieldNumber;
const int VirtualHost::kDomainsFieldNumber;
const int VirtualHost::kRoutesFieldNumber;
const int VirtualHost::kRequireTlsFieldNumber;
const int VirtualHost::kVirtualClustersFieldNumber;
const int VirtualHost::kRateLimitsFieldNumber;
const int VirtualHost::kRequestHeadersToAddFieldNumber;
const int VirtualHost::kCorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualHost::VirtualHost()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.VirtualHost)
}
VirtualHost::VirtualHost(const VirtualHost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      domains_(from.domains_),
      routes_(from.routes_),
      virtual_clusters_(from.virtual_clusters_),
      rate_limits_(from.rate_limits_),
      request_headers_to_add_(from.request_headers_to_add_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_cors()) {
    cors_ = new ::envoy::api::v2::CorsPolicy(*from.cors_);
  } else {
    cors_ = NULL;
  }
  require_tls_ = from.require_tls_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.VirtualHost)
}

void VirtualHost::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cors_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_tls_) -
      reinterpret_cast<char*>(&cors_)) + sizeof(require_tls_));
  _cached_size_ = 0;
}

VirtualHost::~VirtualHost() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.VirtualHost)
  SharedDtor();
}

void VirtualHost::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cors_;
}

void VirtualHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualHost::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VirtualHost& VirtualHost::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

VirtualHost* VirtualHost::New(::google::protobuf::Arena* arena) const {
  VirtualHost* n = new VirtualHost;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualHost::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.VirtualHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domains_.Clear();
  routes_.Clear();
  virtual_clusters_.Clear();
  rate_limits_.Clear();
  request_headers_to_add_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && cors_ != NULL) {
    delete cors_;
  }
  cors_ = NULL;
  require_tls_ = 0;
  _internal_metadata_.Clear();
}

bool VirtualHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.VirtualHost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.VirtualHost.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string domains = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_domains()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domains(this->domains_size() - 1).data(),
            static_cast<int>(this->domains(this->domains_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.VirtualHost.domains"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.Route routes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.VirtualHost.TlsRequirementType require_tls = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_require_tls(static_cast< ::envoy::api::v2::VirtualHost_TlsRequirementType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.VirtualCluster virtual_clusters = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtual_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.RateLimit rate_limits = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rate_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request_headers_to_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.CorsPolicy cors = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.VirtualHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.VirtualHost)
  return false;
#undef DO_
}

void VirtualHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.VirtualHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualHost.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string domains = 2;
  for (int i = 0, n = this->domains_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domains(i).data(), static_cast<int>(this->domains(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualHost.domains");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->domains(i), output);
  }

  // repeated .envoy.api.v2.Route routes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->routes(static_cast<int>(i)), output);
  }

  // .envoy.api.v2.VirtualHost.TlsRequirementType require_tls = 4;
  if (this->require_tls() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->require_tls(), output);
  }

  // repeated .envoy.api.v2.VirtualCluster virtual_clusters = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_clusters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->virtual_clusters(static_cast<int>(i)), output);
  }

  // repeated .envoy.api.v2.RateLimit rate_limits = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rate_limits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rate_limits(static_cast<int>(i)), output);
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_headers_to_add_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->request_headers_to_add(static_cast<int>(i)), output);
  }

  // .envoy.api.v2.CorsPolicy cors = 8;
  if (this->has_cors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->cors_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.VirtualHost)
}

::google::protobuf::uint8* VirtualHost::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.VirtualHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualHost.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string domains = 2;
  for (int i = 0, n = this->domains_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domains(i).data(), static_cast<int>(this->domains(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualHost.domains");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->domains(i), target);
  }

  // repeated .envoy.api.v2.Route routes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->routes(static_cast<int>(i)), deterministic, target);
  }

  // .envoy.api.v2.VirtualHost.TlsRequirementType require_tls = 4;
  if (this->require_tls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->require_tls(), target);
  }

  // repeated .envoy.api.v2.VirtualCluster virtual_clusters = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_clusters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->virtual_clusters(static_cast<int>(i)), deterministic, target);
  }

  // repeated .envoy.api.v2.RateLimit rate_limits = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rate_limits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->rate_limits(static_cast<int>(i)), deterministic, target);
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_headers_to_add_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->request_headers_to_add(static_cast<int>(i)), deterministic, target);
  }

  // .envoy.api.v2.CorsPolicy cors = 8;
  if (this->has_cors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->cors_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.VirtualHost)
  return target;
}

size_t VirtualHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.VirtualHost)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string domains = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->domains_size());
  for (int i = 0, n = this->domains_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->domains(i));
  }

  // repeated .envoy.api.v2.Route routes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->routes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routes(static_cast<int>(i)));
    }
  }

  // repeated .envoy.api.v2.VirtualCluster virtual_clusters = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->virtual_clusters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->virtual_clusters(static_cast<int>(i)));
    }
  }

  // repeated .envoy.api.v2.RateLimit rate_limits = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->rate_limits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rate_limits(static_cast<int>(i)));
    }
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->request_headers_to_add_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_headers_to_add(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .envoy.api.v2.CorsPolicy cors = 8;
  if (this->has_cors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cors_);
  }

  // .envoy.api.v2.VirtualHost.TlsRequirementType require_tls = 4;
  if (this->require_tls() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->require_tls());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualHost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.VirtualHost)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualHost* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualHost>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.VirtualHost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.VirtualHost)
    MergeFrom(*source);
  }
}

void VirtualHost::MergeFrom(const VirtualHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.VirtualHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domains_.MergeFrom(from.domains_);
  routes_.MergeFrom(from.routes_);
  virtual_clusters_.MergeFrom(from.virtual_clusters_);
  rate_limits_.MergeFrom(from.rate_limits_);
  request_headers_to_add_.MergeFrom(from.request_headers_to_add_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_cors()) {
    mutable_cors()->::envoy::api::v2::CorsPolicy::MergeFrom(from.cors());
  }
  if (from.require_tls() != 0) {
    set_require_tls(from.require_tls());
  }
}

void VirtualHost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.VirtualHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualHost::CopyFrom(const VirtualHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.VirtualHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualHost::IsInitialized() const {
  return true;
}

void VirtualHost::Swap(VirtualHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualHost::InternalSwap(VirtualHost* other) {
  using std::swap;
  domains_.InternalSwap(&other->domains_);
  routes_.InternalSwap(&other->routes_);
  virtual_clusters_.InternalSwap(&other->virtual_clusters_);
  rate_limits_.InternalSwap(&other->rate_limits_);
  request_headers_to_add_.InternalSwap(&other->request_headers_to_add_);
  name_.Swap(&other->name_);
  swap(cors_, other->cors_);
  swap(require_tls_, other->require_tls_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualHost::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VirtualHost

// string name = 1;
void VirtualHost::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VirtualHost::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.name)
  return name_.GetNoArena();
}
void VirtualHost::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualHost.name)
}
#if LANG_CXX11
void VirtualHost::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.VirtualHost.name)
}
#endif
void VirtualHost::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualHost.name)
}
void VirtualHost::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualHost.name)
}
::std::string* VirtualHost::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VirtualHost::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.VirtualHost.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VirtualHost::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.VirtualHost.name)
}

// repeated string domains = 2;
int VirtualHost::domains_size() const {
  return domains_.size();
}
void VirtualHost::clear_domains() {
  domains_.Clear();
}
const ::std::string& VirtualHost::domains(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.domains)
  return domains_.Get(index);
}
::std::string* VirtualHost::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.domains)
  return domains_.Mutable(index);
}
void VirtualHost::set_domains(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualHost.domains)
  domains_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VirtualHost::set_domains(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualHost.domains)
  domains_.Mutable(index)->assign(std::move(value));
}
#endif
void VirtualHost::set_domains(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualHost.domains)
}
void VirtualHost::set_domains(int index, const char* value, size_t size) {
  domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualHost.domains)
}
::std::string* VirtualHost::add_domains() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.VirtualHost.domains)
  return domains_.Add();
}
void VirtualHost::add_domains(const ::std::string& value) {
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.domains)
}
#if LANG_CXX11
void VirtualHost::add_domains(::std::string&& value) {
  domains_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.domains)
}
#endif
void VirtualHost::add_domains(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.VirtualHost.domains)
}
void VirtualHost::add_domains(const char* value, size_t size) {
  domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.VirtualHost.domains)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VirtualHost::domains() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.domains)
  return domains_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VirtualHost::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.domains)
  return &domains_;
}

// repeated .envoy.api.v2.Route routes = 3;
int VirtualHost::routes_size() const {
  return routes_.size();
}
void VirtualHost::clear_routes() {
  routes_.Clear();
}
const ::envoy::api::v2::Route& VirtualHost::routes(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.routes)
  return routes_.Get(index);
}
::envoy::api::v2::Route* VirtualHost::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.routes)
  return routes_.Mutable(index);
}
::envoy::api::v2::Route* VirtualHost::add_routes() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.routes)
  return routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Route >*
VirtualHost::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.routes)
  return &routes_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Route >&
VirtualHost::routes() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.routes)
  return routes_;
}

// .envoy.api.v2.VirtualHost.TlsRequirementType require_tls = 4;
void VirtualHost::clear_require_tls() {
  require_tls_ = 0;
}
::envoy::api::v2::VirtualHost_TlsRequirementType VirtualHost::require_tls() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.require_tls)
  return static_cast< ::envoy::api::v2::VirtualHost_TlsRequirementType >(require_tls_);
}
void VirtualHost::set_require_tls(::envoy::api::v2::VirtualHost_TlsRequirementType value) {
  
  require_tls_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualHost.require_tls)
}

// repeated .envoy.api.v2.VirtualCluster virtual_clusters = 5;
int VirtualHost::virtual_clusters_size() const {
  return virtual_clusters_.size();
}
void VirtualHost::clear_virtual_clusters() {
  virtual_clusters_.Clear();
}
const ::envoy::api::v2::VirtualCluster& VirtualHost::virtual_clusters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.virtual_clusters)
  return virtual_clusters_.Get(index);
}
::envoy::api::v2::VirtualCluster* VirtualHost::mutable_virtual_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.virtual_clusters)
  return virtual_clusters_.Mutable(index);
}
::envoy::api::v2::VirtualCluster* VirtualHost::add_virtual_clusters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.virtual_clusters)
  return virtual_clusters_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualCluster >*
VirtualHost::mutable_virtual_clusters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.virtual_clusters)
  return &virtual_clusters_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualCluster >&
VirtualHost::virtual_clusters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.virtual_clusters)
  return virtual_clusters_;
}

// repeated .envoy.api.v2.RateLimit rate_limits = 6;
int VirtualHost::rate_limits_size() const {
  return rate_limits_.size();
}
void VirtualHost::clear_rate_limits() {
  rate_limits_.Clear();
}
const ::envoy::api::v2::RateLimit& VirtualHost::rate_limits(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.rate_limits)
  return rate_limits_.Get(index);
}
::envoy::api::v2::RateLimit* VirtualHost::mutable_rate_limits(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.rate_limits)
  return rate_limits_.Mutable(index);
}
::envoy::api::v2::RateLimit* VirtualHost::add_rate_limits() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.rate_limits)
  return rate_limits_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >*
VirtualHost::mutable_rate_limits() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.rate_limits)
  return &rate_limits_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >&
VirtualHost::rate_limits() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.rate_limits)
  return rate_limits_;
}

// repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 7;
int VirtualHost::request_headers_to_add_size() const {
  return request_headers_to_add_.size();
}
void VirtualHost::clear_request_headers_to_add() {
  request_headers_to_add_.Clear();
}
const ::envoy::api::v2::HeaderValueOption& VirtualHost::request_headers_to_add(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.request_headers_to_add)
  return request_headers_to_add_.Get(index);
}
::envoy::api::v2::HeaderValueOption* VirtualHost::mutable_request_headers_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.request_headers_to_add)
  return request_headers_to_add_.Mutable(index);
}
::envoy::api::v2::HeaderValueOption* VirtualHost::add_request_headers_to_add() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.request_headers_to_add)
  return request_headers_to_add_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
VirtualHost::mutable_request_headers_to_add() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.request_headers_to_add)
  return &request_headers_to_add_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
VirtualHost::request_headers_to_add() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.request_headers_to_add)
  return request_headers_to_add_;
}

// .envoy.api.v2.CorsPolicy cors = 8;
bool VirtualHost::has_cors() const {
  return this != internal_default_instance() && cors_ != NULL;
}
void VirtualHost::clear_cors() {
  if (GetArenaNoVirtual() == NULL && cors_ != NULL) delete cors_;
  cors_ = NULL;
}
const ::envoy::api::v2::CorsPolicy& VirtualHost::cors() const {
  const ::envoy::api::v2::CorsPolicy* p = cors_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.cors)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::CorsPolicy*>(
      &::envoy::api::v2::_CorsPolicy_default_instance_);
}
::envoy::api::v2::CorsPolicy* VirtualHost::mutable_cors() {
  
  if (cors_ == NULL) {
    cors_ = new ::envoy::api::v2::CorsPolicy;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.cors)
  return cors_;
}
::envoy::api::v2::CorsPolicy* VirtualHost::release_cors() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.VirtualHost.cors)
  
  ::envoy::api::v2::CorsPolicy* temp = cors_;
  cors_ = NULL;
  return temp;
}
void VirtualHost::set_allocated_cors(::envoy::api::v2::CorsPolicy* cors) {
  delete cors_;
  cors_ = cors;
  if (cors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.VirtualHost.cors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteConfiguration::kNameFieldNumber;
const int RouteConfiguration::kVirtualHostsFieldNumber;
const int RouteConfiguration::kInternalOnlyHeadersFieldNumber;
const int RouteConfiguration::kResponseHeadersToAddFieldNumber;
const int RouteConfiguration::kResponseHeadersToRemoveFieldNumber;
const int RouteConfiguration::kRequestHeadersToAddFieldNumber;
const int RouteConfiguration::kValidateClustersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteConfiguration::RouteConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RouteConfiguration)
}
RouteConfiguration::RouteConfiguration(const RouteConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      virtual_hosts_(from.virtual_hosts_),
      internal_only_headers_(from.internal_only_headers_),
      response_headers_to_add_(from.response_headers_to_add_),
      response_headers_to_remove_(from.response_headers_to_remove_),
      request_headers_to_add_(from.request_headers_to_add_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_validate_clusters()) {
    validate_clusters_ = new ::google::protobuf::BoolValue(*from.validate_clusters_);
  } else {
    validate_clusters_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RouteConfiguration)
}

void RouteConfiguration::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validate_clusters_ = NULL;
  _cached_size_ = 0;
}

RouteConfiguration::~RouteConfiguration() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RouteConfiguration)
  SharedDtor();
}

void RouteConfiguration::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete validate_clusters_;
}

void RouteConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteConfiguration::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RouteConfiguration& RouteConfiguration::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteConfiguration* RouteConfiguration::New(::google::protobuf::Arena* arena) const {
  RouteConfiguration* n = new RouteConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RouteConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtual_hosts_.Clear();
  internal_only_headers_.Clear();
  response_headers_to_add_.Clear();
  response_headers_to_remove_.Clear();
  request_headers_to_add_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && validate_clusters_ != NULL) {
    delete validate_clusters_;
  }
  validate_clusters_ = NULL;
  _internal_metadata_.Clear();
}

bool RouteConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RouteConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteConfiguration.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.VirtualHost virtual_hosts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtual_hosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string internal_only_headers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_internal_only_headers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->internal_only_headers(this->internal_only_headers_size() - 1).data(),
            static_cast<int>(this->internal_only_headers(this->internal_only_headers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteConfiguration.internal_only_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HeaderValueOption response_headers_to_add = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_response_headers_to_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string response_headers_to_remove = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_response_headers_to_remove()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response_headers_to_remove(this->response_headers_to_remove_size() - 1).data(),
            static_cast<int>(this->response_headers_to_remove(this->response_headers_to_remove_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteConfiguration.response_headers_to_remove"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request_headers_to_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue validate_clusters = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_validate_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RouteConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RouteConfiguration)
  return false;
#undef DO_
}

void RouteConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RouteConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteConfiguration.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .envoy.api.v2.VirtualHost virtual_hosts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_hosts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->virtual_hosts(static_cast<int>(i)), output);
  }

  // repeated string internal_only_headers = 3;
  for (int i = 0, n = this->internal_only_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_only_headers(i).data(), static_cast<int>(this->internal_only_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteConfiguration.internal_only_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->internal_only_headers(i), output);
  }

  // repeated .envoy.api.v2.HeaderValueOption response_headers_to_add = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->response_headers_to_add_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->response_headers_to_add(static_cast<int>(i)), output);
  }

  // repeated string response_headers_to_remove = 5;
  for (int i = 0, n = this->response_headers_to_remove_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_headers_to_remove(i).data(), static_cast<int>(this->response_headers_to_remove(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteConfiguration.response_headers_to_remove");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->response_headers_to_remove(i), output);
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_headers_to_add_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->request_headers_to_add(static_cast<int>(i)), output);
  }

  // .google.protobuf.BoolValue validate_clusters = 7;
  if (this->has_validate_clusters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->validate_clusters_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RouteConfiguration)
}

::google::protobuf::uint8* RouteConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RouteConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteConfiguration.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .envoy.api.v2.VirtualHost virtual_hosts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_hosts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->virtual_hosts(static_cast<int>(i)), deterministic, target);
  }

  // repeated string internal_only_headers = 3;
  for (int i = 0, n = this->internal_only_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_only_headers(i).data(), static_cast<int>(this->internal_only_headers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteConfiguration.internal_only_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->internal_only_headers(i), target);
  }

  // repeated .envoy.api.v2.HeaderValueOption response_headers_to_add = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->response_headers_to_add_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->response_headers_to_add(static_cast<int>(i)), deterministic, target);
  }

  // repeated string response_headers_to_remove = 5;
  for (int i = 0, n = this->response_headers_to_remove_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_headers_to_remove(i).data(), static_cast<int>(this->response_headers_to_remove(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteConfiguration.response_headers_to_remove");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->response_headers_to_remove(i), target);
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->request_headers_to_add_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->request_headers_to_add(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.BoolValue validate_clusters = 7;
  if (this->has_validate_clusters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->validate_clusters_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RouteConfiguration)
  return target;
}

size_t RouteConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RouteConfiguration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.VirtualHost virtual_hosts = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->virtual_hosts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->virtual_hosts(static_cast<int>(i)));
    }
  }

  // repeated string internal_only_headers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->internal_only_headers_size());
  for (int i = 0, n = this->internal_only_headers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->internal_only_headers(i));
  }

  // repeated .envoy.api.v2.HeaderValueOption response_headers_to_add = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->response_headers_to_add_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response_headers_to_add(static_cast<int>(i)));
    }
  }

  // repeated string response_headers_to_remove = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->response_headers_to_remove_size());
  for (int i = 0, n = this->response_headers_to_remove_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->response_headers_to_remove(i));
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->request_headers_to_add_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_headers_to_add(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.BoolValue validate_clusters = 7;
  if (this->has_validate_clusters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->validate_clusters_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RouteConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RouteConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RouteConfiguration)
    MergeFrom(*source);
  }
}

void RouteConfiguration::MergeFrom(const RouteConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RouteConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  virtual_hosts_.MergeFrom(from.virtual_hosts_);
  internal_only_headers_.MergeFrom(from.internal_only_headers_);
  response_headers_to_add_.MergeFrom(from.response_headers_to_add_);
  response_headers_to_remove_.MergeFrom(from.response_headers_to_remove_);
  request_headers_to_add_.MergeFrom(from.request_headers_to_add_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_validate_clusters()) {
    mutable_validate_clusters()->::google::protobuf::BoolValue::MergeFrom(from.validate_clusters());
  }
}

void RouteConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RouteConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteConfiguration::CopyFrom(const RouteConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RouteConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteConfiguration::IsInitialized() const {
  return true;
}

void RouteConfiguration::Swap(RouteConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteConfiguration::InternalSwap(RouteConfiguration* other) {
  using std::swap;
  virtual_hosts_.InternalSwap(&other->virtual_hosts_);
  internal_only_headers_.InternalSwap(&other->internal_only_headers_);
  response_headers_to_add_.InternalSwap(&other->response_headers_to_add_);
  response_headers_to_remove_.InternalSwap(&other->response_headers_to_remove_);
  request_headers_to_add_.InternalSwap(&other->request_headers_to_add_);
  name_.Swap(&other->name_);
  swap(validate_clusters_, other->validate_clusters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteConfiguration::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteConfiguration

// string name = 1;
void RouteConfiguration::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RouteConfiguration::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.name)
  return name_.GetNoArena();
}
void RouteConfiguration::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteConfiguration.name)
}
#if LANG_CXX11
void RouteConfiguration::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteConfiguration.name)
}
#endif
void RouteConfiguration::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteConfiguration.name)
}
void RouteConfiguration::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteConfiguration.name)
}
::std::string* RouteConfiguration::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteConfiguration::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteConfiguration.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouteConfiguration::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteConfiguration.name)
}

// repeated .envoy.api.v2.VirtualHost virtual_hosts = 2;
int RouteConfiguration::virtual_hosts_size() const {
  return virtual_hosts_.size();
}
void RouteConfiguration::clear_virtual_hosts() {
  virtual_hosts_.Clear();
}
const ::envoy::api::v2::VirtualHost& RouteConfiguration::virtual_hosts(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return virtual_hosts_.Get(index);
}
::envoy::api::v2::VirtualHost* RouteConfiguration::mutable_virtual_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return virtual_hosts_.Mutable(index);
}
::envoy::api::v2::VirtualHost* RouteConfiguration::add_virtual_hosts() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return virtual_hosts_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualHost >*
RouteConfiguration::mutable_virtual_hosts() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return &virtual_hosts_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualHost >&
RouteConfiguration::virtual_hosts() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return virtual_hosts_;
}

// repeated string internal_only_headers = 3;
int RouteConfiguration::internal_only_headers_size() const {
  return internal_only_headers_.size();
}
void RouteConfiguration::clear_internal_only_headers() {
  internal_only_headers_.Clear();
}
const ::std::string& RouteConfiguration::internal_only_headers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return internal_only_headers_.Get(index);
}
::std::string* RouteConfiguration::mutable_internal_only_headers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return internal_only_headers_.Mutable(index);
}
void RouteConfiguration::set_internal_only_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteConfiguration.internal_only_headers)
  internal_only_headers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void RouteConfiguration::set_internal_only_headers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteConfiguration.internal_only_headers)
  internal_only_headers_.Mutable(index)->assign(std::move(value));
}
#endif
void RouteConfiguration::set_internal_only_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  internal_only_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
void RouteConfiguration::set_internal_only_headers(int index, const char* value, size_t size) {
  internal_only_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
::std::string* RouteConfiguration::add_internal_only_headers() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return internal_only_headers_.Add();
}
void RouteConfiguration::add_internal_only_headers(const ::std::string& value) {
  internal_only_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
#if LANG_CXX11
void RouteConfiguration::add_internal_only_headers(::std::string&& value) {
  internal_only_headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
#endif
void RouteConfiguration::add_internal_only_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  internal_only_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
void RouteConfiguration::add_internal_only_headers(const char* value, size_t size) {
  internal_only_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RouteConfiguration::internal_only_headers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return internal_only_headers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RouteConfiguration::mutable_internal_only_headers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return &internal_only_headers_;
}

// repeated .envoy.api.v2.HeaderValueOption response_headers_to_add = 4;
int RouteConfiguration::response_headers_to_add_size() const {
  return response_headers_to_add_.size();
}
void RouteConfiguration::clear_response_headers_to_add() {
  response_headers_to_add_.Clear();
}
const ::envoy::api::v2::HeaderValueOption& RouteConfiguration::response_headers_to_add(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return response_headers_to_add_.Get(index);
}
::envoy::api::v2::HeaderValueOption* RouteConfiguration::mutable_response_headers_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return response_headers_to_add_.Mutable(index);
}
::envoy::api::v2::HeaderValueOption* RouteConfiguration::add_response_headers_to_add() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return response_headers_to_add_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
RouteConfiguration::mutable_response_headers_to_add() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return &response_headers_to_add_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
RouteConfiguration::response_headers_to_add() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return response_headers_to_add_;
}

// repeated string response_headers_to_remove = 5;
int RouteConfiguration::response_headers_to_remove_size() const {
  return response_headers_to_remove_.size();
}
void RouteConfiguration::clear_response_headers_to_remove() {
  response_headers_to_remove_.Clear();
}
const ::std::string& RouteConfiguration::response_headers_to_remove(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return response_headers_to_remove_.Get(index);
}
::std::string* RouteConfiguration::mutable_response_headers_to_remove(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return response_headers_to_remove_.Mutable(index);
}
void RouteConfiguration::set_response_headers_to_remove(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  response_headers_to_remove_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void RouteConfiguration::set_response_headers_to_remove(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  response_headers_to_remove_.Mutable(index)->assign(std::move(value));
}
#endif
void RouteConfiguration::set_response_headers_to_remove(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  response_headers_to_remove_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
void RouteConfiguration::set_response_headers_to_remove(int index, const char* value, size_t size) {
  response_headers_to_remove_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
::std::string* RouteConfiguration::add_response_headers_to_remove() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return response_headers_to_remove_.Add();
}
void RouteConfiguration::add_response_headers_to_remove(const ::std::string& value) {
  response_headers_to_remove_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
#if LANG_CXX11
void RouteConfiguration::add_response_headers_to_remove(::std::string&& value) {
  response_headers_to_remove_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
#endif
void RouteConfiguration::add_response_headers_to_remove(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  response_headers_to_remove_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
void RouteConfiguration::add_response_headers_to_remove(const char* value, size_t size) {
  response_headers_to_remove_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RouteConfiguration::response_headers_to_remove() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return response_headers_to_remove_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RouteConfiguration::mutable_response_headers_to_remove() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return &response_headers_to_remove_;
}

// repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 6;
int RouteConfiguration::request_headers_to_add_size() const {
  return request_headers_to_add_.size();
}
void RouteConfiguration::clear_request_headers_to_add() {
  request_headers_to_add_.Clear();
}
const ::envoy::api::v2::HeaderValueOption& RouteConfiguration::request_headers_to_add(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return request_headers_to_add_.Get(index);
}
::envoy::api::v2::HeaderValueOption* RouteConfiguration::mutable_request_headers_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return request_headers_to_add_.Mutable(index);
}
::envoy::api::v2::HeaderValueOption* RouteConfiguration::add_request_headers_to_add() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return request_headers_to_add_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
RouteConfiguration::mutable_request_headers_to_add() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return &request_headers_to_add_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
RouteConfiguration::request_headers_to_add() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return request_headers_to_add_;
}

// .google.protobuf.BoolValue validate_clusters = 7;
bool RouteConfiguration::has_validate_clusters() const {
  return this != internal_default_instance() && validate_clusters_ != NULL;
}
void RouteConfiguration::clear_validate_clusters() {
  if (GetArenaNoVirtual() == NULL && validate_clusters_ != NULL) delete validate_clusters_;
  validate_clusters_ = NULL;
}
const ::google::protobuf::BoolValue& RouteConfiguration::validate_clusters() const {
  const ::google::protobuf::BoolValue* p = validate_clusters_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.validate_clusters)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* RouteConfiguration::mutable_validate_clusters() {
  
  if (validate_clusters_ == NULL) {
    validate_clusters_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.validate_clusters)
  return validate_clusters_;
}
::google::protobuf::BoolValue* RouteConfiguration::release_validate_clusters() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteConfiguration.validate_clusters)
  
  ::google::protobuf::BoolValue* temp = validate_clusters_;
  validate_clusters_ = NULL;
  return temp;
}
void RouteConfiguration::set_allocated_validate_clusters(::google::protobuf::BoolValue* validate_clusters) {
  delete validate_clusters_;
  if (validate_clusters != NULL && validate_clusters->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_validate_clusters = new ::google::protobuf::BoolValue;
    new_validate_clusters->CopyFrom(*validate_clusters);
    validate_clusters = new_validate_clusters;
  }
  validate_clusters_ = validate_clusters;
  if (validate_clusters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteConfiguration.validate_clusters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
