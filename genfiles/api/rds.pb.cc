// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/rds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/rds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
class WeightedCluster_ClusterWeightDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeightedCluster_ClusterWeight> {
} _WeightedCluster_ClusterWeight_default_instance_;
class WeightedClusterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WeightedCluster> {
} _WeightedCluster_default_instance_;
class RouteMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RouteMatch> {
  public:
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr regex_;
} _RouteMatch_default_instance_;
class ForwardAction_RetryPolicyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardAction_RetryPolicy> {
} _ForwardAction_RetryPolicy_default_instance_;
class ForwardAction_RequestMirrorPolicyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardAction_RequestMirrorPolicy> {
} _ForwardAction_RequestMirrorPolicy_default_instance_;
class ForwardAction_HashPolicy_HeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardAction_HashPolicy_Header> {
} _ForwardAction_HashPolicy_Header_default_instance_;
class ForwardAction_HashPolicyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardAction_HashPolicy> {
  public:
  const ::envoy::api::v2::ForwardAction_HashPolicy_Header* header_;
} _ForwardAction_HashPolicy_default_instance_;
class ForwardActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ForwardAction> {
  public:
  ::google::protobuf::internal::ArenaStringPtr cluster_;
  ::google::protobuf::internal::ArenaStringPtr cluster_header_;
  const ::envoy::api::v2::WeightedCluster* weighted_clusters_;
  ::google::protobuf::internal::ArenaStringPtr host_rewrite_;
  const ::google::protobuf::BoolValue* auto_host_rewrite_;
} _ForwardAction_default_instance_;
class RedirectActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RedirectAction> {
} _RedirectAction_default_instance_;
class RouteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Route> {
  public:
  const ::envoy::api::v2::ForwardAction* forward_;
  const ::envoy::api::v2::RedirectAction* redirect_;
} _Route_default_instance_;
class VirtualClusterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VirtualCluster> {
} _VirtualCluster_default_instance_;
class RateLimit_RateLimitAction_RequestHeadersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RateLimit_RateLimitAction_RequestHeaders> {
} _RateLimit_RateLimitAction_RequestHeaders_default_instance_;
class RateLimit_RateLimitAction_HeaderValueMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RateLimit_RateLimitAction_HeaderValueMatch> {
} _RateLimit_RateLimitAction_HeaderValueMatch_default_instance_;
class RateLimit_RateLimitActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RateLimit_RateLimitAction> {
  public:
  const ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders* request_headers_;
  ::google::protobuf::internal::ArenaStringPtr generic_key_;
  const ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch* header_value_match_;
} _RateLimit_RateLimitAction_default_instance_;
class RateLimitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RateLimit> {
} _RateLimit_default_instance_;
class HeaderMatcherDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeaderMatcher> {
} _HeaderMatcher_default_instance_;
class VirtualHostDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VirtualHost> {
} _VirtualHost_default_instance_;
class RouteConfigurationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RouteConfiguration> {
} _RouteConfiguration_default_instance_;

namespace protobuf_api_2frds_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[18];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedCluster_ClusterWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedCluster_ClusterWeight, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedCluster_ClusterWeight, weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedCluster, clusters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedCluster, runtime_key_prefix_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMatch, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RouteMatch_default_instance_), prefix_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RouteMatch_default_instance_), path_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RouteMatch_default_instance_), regex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMatch, case_sensitive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMatch, runtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMatch, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMatch, path_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction_RetryPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction_RetryPolicy, retry_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction_RetryPolicy, num_retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction_RetryPolicy, per_try_timeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction_RequestMirrorPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction_RequestMirrorPolicy, cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction_RequestMirrorPolicy, runtime_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction_HashPolicy_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction_HashPolicy_Header, header_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction_HashPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction_HashPolicy, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ForwardAction_HashPolicy_default_instance_), header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction_HashPolicy, policy_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ForwardAction_default_instance_), cluster_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ForwardAction_default_instance_), cluster_header_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ForwardAction_default_instance_), weighted_clusters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction, prefix_rewrite_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ForwardAction_default_instance_), host_rewrite_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ForwardAction_default_instance_), auto_host_rewrite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction, retry_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction, request_mirror_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction, request_headers_to_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction, rate_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction, include_vh_rate_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction, hash_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction, cluster_specifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardAction, host_rewrite_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectAction, host_redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedirectAction, path_redirect_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, match_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Route_default_instance_), forward_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Route_default_instance_), redirect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Route, action_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualCluster, pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualCluster, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualCluster, method_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitAction_RequestHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitAction_RequestHeaders, header_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitAction_RequestHeaders, descriptor_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitAction_HeaderValueMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitAction_HeaderValueMatch, descriptor_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitAction_HeaderValueMatch, expect_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitAction_HeaderValueMatch, headers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitAction, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitAction, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitAction, type_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RateLimit_RateLimitAction_default_instance_), request_headers_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RateLimit_RateLimitAction_default_instance_), generic_key_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_RateLimit_RateLimitAction_default_instance_), header_value_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitAction, action_details_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, disable_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, actions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMatcher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMatcher, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMatcher, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderMatcher, regex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, domains_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, routes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, require_tls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, virtual_clusters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, rate_limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualHost, request_headers_to_add_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, virtual_hosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, internal_only_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, response_headers_to_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, response_headers_to_remove_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteConfiguration, request_headers_to_add_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(WeightedCluster_ClusterWeight)},
  { 6, -1, sizeof(WeightedCluster)},
  { 12, -1, sizeof(RouteMatch)},
  { 23, -1, sizeof(ForwardAction_RetryPolicy)},
  { 30, -1, sizeof(ForwardAction_RequestMirrorPolicy)},
  { 36, -1, sizeof(ForwardAction_HashPolicy_Header)},
  { 41, -1, sizeof(ForwardAction_HashPolicy)},
  { 47, -1, sizeof(ForwardAction)},
  { 67, -1, sizeof(RedirectAction)},
  { 73, -1, sizeof(Route)},
  { 82, -1, sizeof(VirtualCluster)},
  { 89, -1, sizeof(RateLimit_RateLimitAction_RequestHeaders)},
  { 95, -1, sizeof(RateLimit_RateLimitAction_HeaderValueMatch)},
  { 102, -1, sizeof(RateLimit_RateLimitAction)},
  { 111, -1, sizeof(RateLimit)},
  { 118, -1, sizeof(HeaderMatcher)},
  { 125, -1, sizeof(VirtualHost)},
  { 136, -1, sizeof(RouteConfiguration)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedCluster_ClusterWeight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedCluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouteMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardAction_RetryPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardAction_RequestMirrorPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardAction_HashPolicy_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardAction_HashPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ForwardAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RedirectAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Route_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VirtualCluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_RateLimitAction_RequestHeaders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_RateLimitAction_HeaderValueMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_RateLimitAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeaderMatcher_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VirtualHost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RouteConfiguration_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/rds.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

}  // namespace

void TableStruct::Shutdown() {
  _WeightedCluster_ClusterWeight_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _WeightedCluster_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RouteMatch_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ForwardAction_RetryPolicy_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ForwardAction_RequestMirrorPolicy_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ForwardAction_HashPolicy_Header_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ForwardAction_HashPolicy_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ForwardAction_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _RedirectAction_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Route_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _VirtualCluster_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _RateLimit_RateLimitAction_RequestHeaders_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _RateLimit_RateLimitAction_HeaderValueMatch_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _RateLimit_RateLimitAction_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _RateLimit_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _HeaderMatcher_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _VirtualHost_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _RouteConfiguration_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::InitDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  _WeightedCluster_ClusterWeight_default_instance_.DefaultConstruct();
  _WeightedCluster_default_instance_.DefaultConstruct();
  _RouteMatch_default_instance_.DefaultConstruct();
  _ForwardAction_RetryPolicy_default_instance_.DefaultConstruct();
  _ForwardAction_RequestMirrorPolicy_default_instance_.DefaultConstruct();
  _ForwardAction_HashPolicy_Header_default_instance_.DefaultConstruct();
  _ForwardAction_HashPolicy_default_instance_.DefaultConstruct();
  _ForwardAction_default_instance_.DefaultConstruct();
  _RedirectAction_default_instance_.DefaultConstruct();
  _Route_default_instance_.DefaultConstruct();
  _VirtualCluster_default_instance_.DefaultConstruct();
  _RateLimit_RateLimitAction_RequestHeaders_default_instance_.DefaultConstruct();
  _RateLimit_RateLimitAction_HeaderValueMatch_default_instance_.DefaultConstruct();
  _RateLimit_RateLimitAction_default_instance_.DefaultConstruct();
  _RateLimit_default_instance_.DefaultConstruct();
  _HeaderMatcher_default_instance_.DefaultConstruct();
  _VirtualHost_default_instance_.DefaultConstruct();
  _RouteConfiguration_default_instance_.DefaultConstruct();
  _WeightedCluster_ClusterWeight_default_instance_.get_mutable()->weight_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _RouteMatch_default_instance_.prefix_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RouteMatch_default_instance_.path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RouteMatch_default_instance_.regex_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RouteMatch_default_instance_.get_mutable()->case_sensitive_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _RouteMatch_default_instance_.get_mutable()->runtime_ = const_cast< ::envoy::api::v2::RuntimeUInt32*>(
      ::envoy::api::v2::RuntimeUInt32::internal_default_instance());
  _ForwardAction_RetryPolicy_default_instance_.get_mutable()->num_retries_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _ForwardAction_RetryPolicy_default_instance_.get_mutable()->per_try_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _ForwardAction_HashPolicy_default_instance_.header_ = const_cast< ::envoy::api::v2::ForwardAction_HashPolicy_Header*>(
      ::envoy::api::v2::ForwardAction_HashPolicy_Header::internal_default_instance());
  _ForwardAction_default_instance_.cluster_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ForwardAction_default_instance_.cluster_header_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ForwardAction_default_instance_.weighted_clusters_ = const_cast< ::envoy::api::v2::WeightedCluster*>(
      ::envoy::api::v2::WeightedCluster::internal_default_instance());
  _ForwardAction_default_instance_.host_rewrite_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ForwardAction_default_instance_.auto_host_rewrite_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _ForwardAction_default_instance_.get_mutable()->timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _ForwardAction_default_instance_.get_mutable()->retry_policy_ = const_cast< ::envoy::api::v2::ForwardAction_RetryPolicy*>(
      ::envoy::api::v2::ForwardAction_RetryPolicy::internal_default_instance());
  _ForwardAction_default_instance_.get_mutable()->request_mirror_policy_ = const_cast< ::envoy::api::v2::ForwardAction_RequestMirrorPolicy*>(
      ::envoy::api::v2::ForwardAction_RequestMirrorPolicy::internal_default_instance());
  _ForwardAction_default_instance_.get_mutable()->include_vh_rate_limits_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _Route_default_instance_.get_mutable()->match_ = const_cast< ::envoy::api::v2::RouteMatch*>(
      ::envoy::api::v2::RouteMatch::internal_default_instance());
  _Route_default_instance_.forward_ = const_cast< ::envoy::api::v2::ForwardAction*>(
      ::envoy::api::v2::ForwardAction::internal_default_instance());
  _Route_default_instance_.redirect_ = const_cast< ::envoy::api::v2::RedirectAction*>(
      ::envoy::api::v2::RedirectAction::internal_default_instance());
  _Route_default_instance_.get_mutable()->metadata_ = const_cast< ::envoy::api::v2::Metadata*>(
      ::envoy::api::v2::Metadata::internal_default_instance());
  _RateLimit_RateLimitAction_HeaderValueMatch_default_instance_.get_mutable()->expect_match_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _RateLimit_RateLimitAction_default_instance_.request_headers_ = const_cast< ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders*>(
      ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders::internal_default_instance());
  _RateLimit_RateLimitAction_default_instance_.generic_key_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _RateLimit_RateLimitAction_default_instance_.header_value_match_ = const_cast< ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch*>(
      ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch::internal_default_instance());
  _RateLimit_default_instance_.get_mutable()->stage_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _HeaderMatcher_default_instance_.get_mutable()->regex_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rapi/rds.proto\022\014envoy.api.v2\032\016api/base."
      "proto\032\034google/api/annotations.proto\032\036goo"
      "gle/protobuf/duration.proto\032\036google/prot"
      "obuf/wrappers.proto\"\271\001\n\017WeightedCluster\022"
      "=\n\010clusters\030\001 \003(\0132+.envoy.api.v2.Weighte"
      "dCluster.ClusterWeight\022\032\n\022runtime_key_pr"
      "efix\030\002 \001(\t\032K\n\rClusterWeight\022\014\n\004name\030\001 \001("
      "\t\022,\n\006weight\030\002 \001(\0132\034.google.protobuf.UInt"
      "32Value\"\341\001\n\nRouteMatch\022\020\n\006prefix\030\001 \001(\tH\000"
      "\022\016\n\004path\030\002 \001(\tH\000\022\017\n\005regex\030\003 \001(\tH\000\0222\n\016cas"
      "e_sensitive\030\004 \001(\0132\032.google.protobuf.Bool"
      "Value\022,\n\007runtime\030\005 \001(\0132\033.envoy.api.v2.Ru"
      "ntimeUInt32\022,\n\007headers\030\006 \003(\0132\033.envoy.api"
      ".v2.HeaderMatcherB\020\n\016path_specifier\"\255\010\n\r"
      "ForwardAction\022\021\n\007cluster\030\001 \001(\tH\000\022\030\n\016clus"
      "ter_header\030\002 \001(\tH\000\022:\n\021weighted_clusters\030"
      "\003 \001(\0132\035.envoy.api.v2.WeightedClusterH\000\022\026"
      "\n\016prefix_rewrite\030\004 \001(\t\022\026\n\014host_rewrite\030\005"
      " \001(\tH\001\0227\n\021auto_host_rewrite\030\006 \001(\0132\032.goog"
      "le.protobuf.BoolValueH\001\022*\n\007timeout\030\007 \001(\013"
      "2\031.google.protobuf.Duration\022=\n\014retry_pol"
      "icy\030\010 \001(\0132\'.envoy.api.v2.ForwardAction.R"
      "etryPolicy\022N\n\025request_mirror_policy\030\t \001("
      "\0132/.envoy.api.v2.ForwardAction.RequestMi"
      "rrorPolicy\022/\n\010priority\030\n \001(\0162\035.envoy.api"
      ".v2.RoutingPriority\022\?\n\026request_headers_t"
      "o_add\030\013 \003(\0132\037.envoy.api.v2.HeaderValueOp"
      "tion\022,\n\013rate_limits\030\014 \003(\0132\027.envoy.api.v2"
      ".RateLimit\022:\n\026include_vh_rate_limits\030\r \001"
      "(\0132\032.google.protobuf.BoolValue\022;\n\013hash_p"
      "olicy\030\016 \003(\0132&.envoy.api.v2.ForwardAction"
      ".HashPolicy\032\206\001\n\013RetryPolicy\022\020\n\010retry_on\030"
      "\001 \001(\t\0221\n\013num_retries\030\002 \001(\0132\034.google.prot"
      "obuf.UInt32Value\0222\n\017per_try_timeout\030\003 \001("
      "\0132\031.google.protobuf.Duration\032;\n\023RequestM"
      "irrorPolicy\022\017\n\007cluster\030\001 \001(\t\022\023\n\013runtime_"
      "key\030\002 \001(\t\032\200\001\n\nHashPolicy\022\?\n\006header\030\001 \001(\013"
      "2-.envoy.api.v2.ForwardAction.HashPolicy"
      ".HeaderH\000\032\035\n\006Header\022\023\n\013header_name\030\001 \001(\t"
      "B\022\n\020policy_specifierB\023\n\021cluster_specifie"
      "rB\030\n\026host_rewrite_specifier\">\n\016RedirectA"
      "ction\022\025\n\rhost_redirect\030\001 \001(\t\022\025\n\rpath_red"
      "irect\030\002 \001(\t\"\306\001\n\005Route\022\'\n\005match\030\001 \001(\0132\030.e"
      "nvoy.api.v2.RouteMatch\022.\n\007forward\030\002 \001(\0132"
      "\033.envoy.api.v2.ForwardActionH\000\0220\n\010redire"
      "ct\030\003 \001(\0132\034.envoy.api.v2.RedirectActionH\000"
      "\022(\n\010metadata\030\004 \001(\0132\026.envoy.api.v2.Metada"
      "taB\010\n\006action\"\?\n\016VirtualCluster\022\017\n\007patter"
      "n\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006method\030\003 \001(\t\"\215\006"
      "\n\tRateLimit\022+\n\005stage\030\001 \001(\0132\034.google.prot"
      "obuf.UInt32Value\022\023\n\013disable_key\030\002 \001(\t\0228\n"
      "\007actions\030\003 \003(\0132\'.envoy.api.v2.RateLimit."
      "RateLimitAction\032\203\005\n\017RateLimitAction\022@\n\004t"
      "ype\030\001 \001(\01622.envoy.api.v2.RateLimit.RateL"
      "imitAction.ActionType\022Q\n\017request_headers"
      "\030\002 \001(\01326.envoy.api.v2.RateLimit.RateLimi"
      "tAction.RequestHeadersH\000\022\025\n\013generic_key\030"
      "\003 \001(\tH\000\022V\n\022header_value_match\030\004 \001(\01328.en"
      "voy.api.v2.RateLimit.RateLimitAction.Hea"
      "derValueMatchH\000\032=\n\016RequestHeaders\022\023\n\013hea"
      "der_name\030\001 \001(\t\022\026\n\016descriptor_key\030\002 \001(\t\032\214"
      "\001\n\020HeaderValueMatch\022\030\n\020descriptor_value\030"
      "\001 \001(\t\0220\n\014expect_match\030\002 \001(\0132\032.google.pro"
      "tobuf.BoolValue\022,\n\007headers\030\003 \003(\0132\033.envoy"
      ".api.v2.HeaderMatcher\"\213\001\n\nActionType\022\022\n\016"
      "SOURCE_CLUSTER\020\000\022\027\n\023DESTINATION_CLUSTER\020"
      "\001\022\023\n\017REQUEST_HEADERS\020\002\022\022\n\016REMOTE_ADDRESS"
      "\020\003\022\017\n\013GENERIC_KEY\020\004\022\026\n\022HEADER_VALUE_MATC"
      "H\020\005B\020\n\016action_details\"W\n\rHeaderMatcher\022\014"
      "\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022)\n\005regex\030\003 \001"
      "(\0132\032.google.protobuf.BoolValue\"\367\002\n\013Virtu"
      "alHost\022\014\n\004name\030\001 \001(\t\022\017\n\007domains\030\002 \003(\t\022#\n"
      "\006routes\030\003 \003(\0132\023.envoy.api.v2.Route\022A\n\013re"
      "quire_tls\030\004 \001(\0162,.envoy.api.v2.VirtualHo"
      "st.TlsRequirementType\0226\n\020virtual_cluster"
      "s\030\005 \003(\0132\034.envoy.api.v2.VirtualCluster\022,\n"
      "\013rate_limits\030\006 \003(\0132\027.envoy.api.v2.RateLi"
      "mit\022\?\n\026request_headers_to_add\030\007 \003(\0132\037.en"
      "voy.api.v2.HeaderValueOption\":\n\022TlsRequi"
      "rementType\022\010\n\004NONE\020\000\022\021\n\rEXTERNAL_ONLY\020\001\022"
      "\007\n\003ALL\020\002\"\214\002\n\022RouteConfiguration\0220\n\rvirtu"
      "al_hosts\030\001 \003(\0132\031.envoy.api.v2.VirtualHos"
      "t\022\035\n\025internal_only_headers\030\002 \003(\t\022@\n\027resp"
      "onse_headers_to_add\030\003 \003(\0132\037.envoy.api.v2"
      ".HeaderValueOption\022\"\n\032response_headers_t"
      "o_remove\030\004 \003(\t\022\?\n\026request_headers_to_add"
      "\030\005 \003(\0132\037.envoy.api.v2.HeaderValueOption2"
      "\337\001\n\025RouteDiscoveryService\022U\n\014StreamRoute"
      "s\022\036.envoy.api.v2.DiscoveryRequest\032\037.envo"
      "y.api.v2.DiscoveryResponse\"\000(\0010\001\022o\n\013Fetc"
      "hRoutes\022\036.envoy.api.v2.DiscoveryRequest\032"
      "\037.envoy.api.v2.DiscoveryResponse\"\037\202\323\344\223\002\031"
      "\"\024/v2/discovery:routes:\001*b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3713);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/rds.proto", &protobuf_RegisterTypes);
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::AddDescriptors();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2frds_2eproto

const ::google::protobuf::EnumDescriptor* RateLimit_RateLimitAction_ActionType_descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_enum_descriptors[0];
}
bool RateLimit_RateLimitAction_ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RateLimit_RateLimitAction_ActionType RateLimit_RateLimitAction::SOURCE_CLUSTER;
const RateLimit_RateLimitAction_ActionType RateLimit_RateLimitAction::DESTINATION_CLUSTER;
const RateLimit_RateLimitAction_ActionType RateLimit_RateLimitAction::REQUEST_HEADERS;
const RateLimit_RateLimitAction_ActionType RateLimit_RateLimitAction::REMOTE_ADDRESS;
const RateLimit_RateLimitAction_ActionType RateLimit_RateLimitAction::GENERIC_KEY;
const RateLimit_RateLimitAction_ActionType RateLimit_RateLimitAction::HEADER_VALUE_MATCH;
const RateLimit_RateLimitAction_ActionType RateLimit_RateLimitAction::ActionType_MIN;
const RateLimit_RateLimitAction_ActionType RateLimit_RateLimitAction::ActionType_MAX;
const int RateLimit_RateLimitAction::ActionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VirtualHost_TlsRequirementType_descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_enum_descriptors[1];
}
bool VirtualHost_TlsRequirementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VirtualHost_TlsRequirementType VirtualHost::NONE;
const VirtualHost_TlsRequirementType VirtualHost::EXTERNAL_ONLY;
const VirtualHost_TlsRequirementType VirtualHost::ALL;
const VirtualHost_TlsRequirementType VirtualHost::TlsRequirementType_MIN;
const VirtualHost_TlsRequirementType VirtualHost::TlsRequirementType_MAX;
const int VirtualHost::TlsRequirementType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedCluster_ClusterWeight::kNameFieldNumber;
const int WeightedCluster_ClusterWeight::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedCluster_ClusterWeight::WeightedCluster_ClusterWeight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.WeightedCluster.ClusterWeight)
}
WeightedCluster_ClusterWeight::WeightedCluster_ClusterWeight(const WeightedCluster_ClusterWeight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_weight()) {
    weight_ = new ::google::protobuf::UInt32Value(*from.weight_);
  } else {
    weight_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.WeightedCluster.ClusterWeight)
}

void WeightedCluster_ClusterWeight::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = NULL;
  _cached_size_ = 0;
}

WeightedCluster_ClusterWeight::~WeightedCluster_ClusterWeight() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.WeightedCluster.ClusterWeight)
  SharedDtor();
}

void WeightedCluster_ClusterWeight::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete weight_;
  }
}

void WeightedCluster_ClusterWeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedCluster_ClusterWeight::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[0].descriptor;
}

const WeightedCluster_ClusterWeight& WeightedCluster_ClusterWeight::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedCluster_ClusterWeight* WeightedCluster_ClusterWeight::New(::google::protobuf::Arena* arena) const {
  WeightedCluster_ClusterWeight* n = new WeightedCluster_ClusterWeight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedCluster_ClusterWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && weight_ != NULL) {
    delete weight_;
  }
  weight_ = NULL;
}

bool WeightedCluster_ClusterWeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.WeightedCluster.ClusterWeight.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value weight = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.WeightedCluster.ClusterWeight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.WeightedCluster.ClusterWeight)
  return false;
#undef DO_
}

void WeightedCluster_ClusterWeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.WeightedCluster.ClusterWeight.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.UInt32Value weight = 2;
  if (this->has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->weight_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.WeightedCluster.ClusterWeight)
}

::google::protobuf::uint8* WeightedCluster_ClusterWeight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.WeightedCluster.ClusterWeight.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.UInt32Value weight = 2;
  if (this->has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->weight_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.WeightedCluster.ClusterWeight)
  return target;
}

size_t WeightedCluster_ClusterWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.UInt32Value weight = 2;
  if (this->has_weight()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weight_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedCluster_ClusterWeight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedCluster_ClusterWeight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedCluster_ClusterWeight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.WeightedCluster.ClusterWeight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.WeightedCluster.ClusterWeight)
    MergeFrom(*source);
  }
}

void WeightedCluster_ClusterWeight::MergeFrom(const WeightedCluster_ClusterWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_weight()) {
    mutable_weight()->::google::protobuf::UInt32Value::MergeFrom(from.weight());
  }
}

void WeightedCluster_ClusterWeight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedCluster_ClusterWeight::CopyFrom(const WeightedCluster_ClusterWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.WeightedCluster.ClusterWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedCluster_ClusterWeight::IsInitialized() const {
  return true;
}

void WeightedCluster_ClusterWeight::Swap(WeightedCluster_ClusterWeight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedCluster_ClusterWeight::InternalSwap(WeightedCluster_ClusterWeight* other) {
  name_.Swap(&other->name_);
  std::swap(weight_, other->weight_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedCluster_ClusterWeight::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedCluster_ClusterWeight

// string name = 1;
void WeightedCluster_ClusterWeight::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeightedCluster_ClusterWeight::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.WeightedCluster.ClusterWeight.name)
  return name_.GetNoArena();
}
void WeightedCluster_ClusterWeight::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}
#if LANG_CXX11
void WeightedCluster_ClusterWeight::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}
#endif
void WeightedCluster_ClusterWeight::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}
void WeightedCluster_ClusterWeight::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}
::std::string* WeightedCluster_ClusterWeight::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.WeightedCluster.ClusterWeight.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeightedCluster_ClusterWeight::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.WeightedCluster.ClusterWeight.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeightedCluster_ClusterWeight::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}

// .google.protobuf.UInt32Value weight = 2;
bool WeightedCluster_ClusterWeight::has_weight() const {
  return this != internal_default_instance() && weight_ != NULL;
}
void WeightedCluster_ClusterWeight::clear_weight() {
  if (GetArenaNoVirtual() == NULL && weight_ != NULL) delete weight_;
  weight_ = NULL;
}
const ::google::protobuf::UInt32Value& WeightedCluster_ClusterWeight::weight() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.WeightedCluster.ClusterWeight.weight)
  return weight_ != NULL ? *weight_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* WeightedCluster_ClusterWeight::mutable_weight() {
  
  if (weight_ == NULL) {
    weight_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.WeightedCluster.ClusterWeight.weight)
  return weight_;
}
::google::protobuf::UInt32Value* WeightedCluster_ClusterWeight::release_weight() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.WeightedCluster.ClusterWeight.weight)
  
  ::google::protobuf::UInt32Value* temp = weight_;
  weight_ = NULL;
  return temp;
}
void WeightedCluster_ClusterWeight::set_allocated_weight(::google::protobuf::UInt32Value* weight) {
  delete weight_;
  if (weight != NULL && weight->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_weight = new ::google::protobuf::UInt32Value;
    new_weight->CopyFrom(*weight);
    weight = new_weight;
  }
  weight_ = weight;
  if (weight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.WeightedCluster.ClusterWeight.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedCluster::kClustersFieldNumber;
const int WeightedCluster::kRuntimeKeyPrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedCluster::WeightedCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.WeightedCluster)
}
WeightedCluster::WeightedCluster(const WeightedCluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      clusters_(from.clusters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  runtime_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.runtime_key_prefix().size() > 0) {
    runtime_key_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_prefix_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.WeightedCluster)
}

void WeightedCluster::SharedCtor() {
  runtime_key_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

WeightedCluster::~WeightedCluster() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.WeightedCluster)
  SharedDtor();
}

void WeightedCluster::SharedDtor() {
  runtime_key_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WeightedCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedCluster::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[1].descriptor;
}

const WeightedCluster& WeightedCluster::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedCluster* WeightedCluster::New(::google::protobuf::Arena* arena) const {
  WeightedCluster* n = new WeightedCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.WeightedCluster)
  clusters_.Clear();
  runtime_key_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool WeightedCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.WeightedCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.WeightedCluster.ClusterWeight clusters = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_clusters()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // string runtime_key_prefix = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_runtime_key_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->runtime_key_prefix().data(), this->runtime_key_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.WeightedCluster.runtime_key_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.WeightedCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.WeightedCluster)
  return false;
#undef DO_
}

void WeightedCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.WeightedCluster)
  // repeated .envoy.api.v2.WeightedCluster.ClusterWeight clusters = 1;
  for (unsigned int i = 0, n = this->clusters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clusters(i), output);
  }

  // string runtime_key_prefix = 2;
  if (this->runtime_key_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key_prefix().data(), this->runtime_key_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.WeightedCluster.runtime_key_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->runtime_key_prefix(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.WeightedCluster)
}

::google::protobuf::uint8* WeightedCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.WeightedCluster)
  // repeated .envoy.api.v2.WeightedCluster.ClusterWeight clusters = 1;
  for (unsigned int i = 0, n = this->clusters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->clusters(i), false, target);
  }

  // string runtime_key_prefix = 2;
  if (this->runtime_key_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key_prefix().data(), this->runtime_key_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.WeightedCluster.runtime_key_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->runtime_key_prefix(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.WeightedCluster)
  return target;
}

size_t WeightedCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.WeightedCluster)
  size_t total_size = 0;

  // repeated .envoy.api.v2.WeightedCluster.ClusterWeight clusters = 1;
  {
    unsigned int count = this->clusters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clusters(i));
    }
  }

  // string runtime_key_prefix = 2;
  if (this->runtime_key_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->runtime_key_prefix());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.WeightedCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.WeightedCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.WeightedCluster)
    MergeFrom(*source);
  }
}

void WeightedCluster::MergeFrom(const WeightedCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.WeightedCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clusters_.MergeFrom(from.clusters_);
  if (from.runtime_key_prefix().size() > 0) {

    runtime_key_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_prefix_);
  }
}

void WeightedCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.WeightedCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedCluster::CopyFrom(const WeightedCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.WeightedCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedCluster::IsInitialized() const {
  return true;
}

void WeightedCluster::Swap(WeightedCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedCluster::InternalSwap(WeightedCluster* other) {
  clusters_.UnsafeArenaSwap(&other->clusters_);
  runtime_key_prefix_.Swap(&other->runtime_key_prefix_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedCluster::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedCluster

// repeated .envoy.api.v2.WeightedCluster.ClusterWeight clusters = 1;
int WeightedCluster::clusters_size() const {
  return clusters_.size();
}
void WeightedCluster::clear_clusters() {
  clusters_.Clear();
}
const ::envoy::api::v2::WeightedCluster_ClusterWeight& WeightedCluster::clusters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.WeightedCluster.clusters)
  return clusters_.Get(index);
}
::envoy::api::v2::WeightedCluster_ClusterWeight* WeightedCluster::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.WeightedCluster.clusters)
  return clusters_.Mutable(index);
}
::envoy::api::v2::WeightedCluster_ClusterWeight* WeightedCluster::add_clusters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.WeightedCluster.clusters)
  return clusters_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::WeightedCluster_ClusterWeight >*
WeightedCluster::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.WeightedCluster.clusters)
  return &clusters_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::WeightedCluster_ClusterWeight >&
WeightedCluster::clusters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.WeightedCluster.clusters)
  return clusters_;
}

// string runtime_key_prefix = 2;
void WeightedCluster::clear_runtime_key_prefix() {
  runtime_key_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WeightedCluster::runtime_key_prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.WeightedCluster.runtime_key_prefix)
  return runtime_key_prefix_.GetNoArena();
}
void WeightedCluster::set_runtime_key_prefix(const ::std::string& value) {
  
  runtime_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}
#if LANG_CXX11
void WeightedCluster::set_runtime_key_prefix(::std::string&& value) {
  
  runtime_key_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}
#endif
void WeightedCluster::set_runtime_key_prefix(const char* value) {
  
  runtime_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}
void WeightedCluster::set_runtime_key_prefix(const char* value, size_t size) {
  
  runtime_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}
::std::string* WeightedCluster::mutable_runtime_key_prefix() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.WeightedCluster.runtime_key_prefix)
  return runtime_key_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WeightedCluster::release_runtime_key_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.WeightedCluster.runtime_key_prefix)
  
  return runtime_key_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WeightedCluster::set_allocated_runtime_key_prefix(::std::string* runtime_key_prefix) {
  if (runtime_key_prefix != NULL) {
    
  } else {
    
  }
  runtime_key_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime_key_prefix);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteMatch::kPrefixFieldNumber;
const int RouteMatch::kPathFieldNumber;
const int RouteMatch::kRegexFieldNumber;
const int RouteMatch::kCaseSensitiveFieldNumber;
const int RouteMatch::kRuntimeFieldNumber;
const int RouteMatch::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteMatch::RouteMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RouteMatch)
}
RouteMatch::RouteMatch(const RouteMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      headers_(from.headers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_case_sensitive()) {
    case_sensitive_ = new ::google::protobuf::BoolValue(*from.case_sensitive_);
  } else {
    case_sensitive_ = NULL;
  }
  if (from.has_runtime()) {
    runtime_ = new ::envoy::api::v2::RuntimeUInt32(*from.runtime_);
  } else {
    runtime_ = NULL;
  }
  clear_has_path_specifier();
  switch (from.path_specifier_case()) {
    case kPrefix: {
      set_prefix(from.prefix());
      break;
    }
    case kPath: {
      set_path(from.path());
      break;
    }
    case kRegex: {
      set_regex(from.regex());
      break;
    }
    case PATH_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RouteMatch)
}

void RouteMatch::SharedCtor() {
  ::memset(&case_sensitive_, 0, reinterpret_cast<char*>(&runtime_) -
    reinterpret_cast<char*>(&case_sensitive_) + sizeof(runtime_));
  clear_has_path_specifier();
  _cached_size_ = 0;
}

RouteMatch::~RouteMatch() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RouteMatch)
  SharedDtor();
}

void RouteMatch::SharedDtor() {
  if (this != internal_default_instance()) {
    delete case_sensitive_;
  }
  if (this != internal_default_instance()) {
    delete runtime_;
  }
  if (has_path_specifier()) {
    clear_path_specifier();
  }
}

void RouteMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteMatch::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[2].descriptor;
}

const RouteMatch& RouteMatch::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteMatch* RouteMatch::New(::google::protobuf::Arena* arena) const {
  RouteMatch* n = new RouteMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteMatch::clear_path_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.RouteMatch)
  switch (path_specifier_case()) {
    case kPrefix: {
      path_specifier_.prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kPath: {
      path_specifier_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRegex: {
      path_specifier_.regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PATH_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PATH_SPECIFIER_NOT_SET;
}


void RouteMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RouteMatch)
  headers_.Clear();
  if (GetArenaNoVirtual() == NULL && case_sensitive_ != NULL) {
    delete case_sensitive_;
  }
  case_sensitive_ = NULL;
  if (GetArenaNoVirtual() == NULL && runtime_ != NULL) {
    delete runtime_;
  }
  runtime_ = NULL;
  clear_path_specifier();
}

bool RouteMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RouteMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string prefix = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteMatch.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteMatch.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string regex = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->regex().data(), this->regex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteMatch.regex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue case_sensitive = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_case_sensitive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RuntimeUInt32 runtime = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_runtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HeaderMatcher headers = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RouteMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RouteMatch)
  return false;
#undef DO_
}

void RouteMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RouteMatch)
  // string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteMatch.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prefix(), output);
  }

  // string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteMatch.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // string regex = 3;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteMatch.regex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->regex(), output);
  }

  // .google.protobuf.BoolValue case_sensitive = 4;
  if (this->has_case_sensitive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->case_sensitive_, output);
  }

  // .envoy.api.v2.RuntimeUInt32 runtime = 5;
  if (this->has_runtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->runtime_, output);
  }

  // repeated .envoy.api.v2.HeaderMatcher headers = 6;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->headers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RouteMatch)
}

::google::protobuf::uint8* RouteMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RouteMatch)
  // string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteMatch.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }

  // string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteMatch.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // string regex = 3;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regex().data(), this->regex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteMatch.regex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->regex(), target);
  }

  // .google.protobuf.BoolValue case_sensitive = 4;
  if (this->has_case_sensitive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->case_sensitive_, false, target);
  }

  // .envoy.api.v2.RuntimeUInt32 runtime = 5;
  if (this->has_runtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->runtime_, false, target);
  }

  // repeated .envoy.api.v2.HeaderMatcher headers = 6;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->headers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RouteMatch)
  return target;
}

size_t RouteMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RouteMatch)
  size_t total_size = 0;

  // repeated .envoy.api.v2.HeaderMatcher headers = 6;
  {
    unsigned int count = this->headers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headers(i));
    }
  }

  // .google.protobuf.BoolValue case_sensitive = 4;
  if (this->has_case_sensitive()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->case_sensitive_);
  }

  // .envoy.api.v2.RuntimeUInt32 runtime = 5;
  if (this->has_runtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->runtime_);
  }

  switch (path_specifier_case()) {
    // string prefix = 1;
    case kPrefix: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
      break;
    }
    // string path = 2;
    case kPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
      break;
    }
    // string regex = 3;
    case kRegex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regex());
      break;
    }
    case PATH_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RouteMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RouteMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RouteMatch)
    MergeFrom(*source);
  }
}

void RouteMatch::MergeFrom(const RouteMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RouteMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  if (from.has_case_sensitive()) {
    mutable_case_sensitive()->::google::protobuf::BoolValue::MergeFrom(from.case_sensitive());
  }
  if (from.has_runtime()) {
    mutable_runtime()->::envoy::api::v2::RuntimeUInt32::MergeFrom(from.runtime());
  }
  switch (from.path_specifier_case()) {
    case kPrefix: {
      set_prefix(from.prefix());
      break;
    }
    case kPath: {
      set_path(from.path());
      break;
    }
    case kRegex: {
      set_regex(from.regex());
      break;
    }
    case PATH_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void RouteMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RouteMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteMatch::CopyFrom(const RouteMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RouteMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteMatch::IsInitialized() const {
  return true;
}

void RouteMatch::Swap(RouteMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteMatch::InternalSwap(RouteMatch* other) {
  headers_.UnsafeArenaSwap(&other->headers_);
  std::swap(case_sensitive_, other->case_sensitive_);
  std::swap(runtime_, other->runtime_);
  std::swap(path_specifier_, other->path_specifier_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteMatch::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteMatch

// string prefix = 1;
bool RouteMatch::has_prefix() const {
  return path_specifier_case() == kPrefix;
}
void RouteMatch::set_has_prefix() {
  _oneof_case_[0] = kPrefix;
}
void RouteMatch::clear_prefix() {
  if (has_prefix()) {
    path_specifier_.prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_path_specifier();
  }
}
const ::std::string& RouteMatch::prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.prefix)
  if (has_prefix()) {
    return path_specifier_.prefix_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RouteMatch::set_prefix(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.prefix)
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.prefix)
}
#if LANG_CXX11
void RouteMatch::set_prefix(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.prefix)
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteMatch.prefix)
}
#endif
void RouteMatch::set_prefix(const char* value) {
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteMatch.prefix)
}
void RouteMatch::set_prefix(const char* value, size_t size) {
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteMatch.prefix)
}
::std::string* RouteMatch::mutable_prefix() {
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.prefix)
  return path_specifier_.prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteMatch::release_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.prefix)
  if (has_prefix()) {
    clear_has_path_specifier();
    return path_specifier_.prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RouteMatch::set_allocated_prefix(::std::string* prefix) {
  if (!has_prefix()) {
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_path_specifier();
  if (prefix != NULL) {
    set_has_prefix();
    path_specifier_.prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        prefix);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.prefix)
}

// string path = 2;
bool RouteMatch::has_path() const {
  return path_specifier_case() == kPath;
}
void RouteMatch::set_has_path() {
  _oneof_case_[0] = kPath;
}
void RouteMatch::clear_path() {
  if (has_path()) {
    path_specifier_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_path_specifier();
  }
}
const ::std::string& RouteMatch::path() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.path)
  if (has_path()) {
    return path_specifier_.path_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RouteMatch::set_path(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.path)
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.path)
}
#if LANG_CXX11
void RouteMatch::set_path(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.path)
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteMatch.path)
}
#endif
void RouteMatch::set_path(const char* value) {
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteMatch.path)
}
void RouteMatch::set_path(const char* value, size_t size) {
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteMatch.path)
}
::std::string* RouteMatch::mutable_path() {
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.path)
  return path_specifier_.path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteMatch::release_path() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.path)
  if (has_path()) {
    clear_has_path_specifier();
    return path_specifier_.path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RouteMatch::set_allocated_path(::std::string* path) {
  if (!has_path()) {
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_path_specifier();
  if (path != NULL) {
    set_has_path();
    path_specifier_.path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        path);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.path)
}

// string regex = 3;
bool RouteMatch::has_regex() const {
  return path_specifier_case() == kRegex;
}
void RouteMatch::set_has_regex() {
  _oneof_case_[0] = kRegex;
}
void RouteMatch::clear_regex() {
  if (has_regex()) {
    path_specifier_.regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_path_specifier();
  }
}
const ::std::string& RouteMatch::regex() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.regex)
  if (has_regex()) {
    return path_specifier_.regex_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RouteMatch::set_regex(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.regex)
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.regex)
}
#if LANG_CXX11
void RouteMatch::set_regex(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.regex)
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteMatch.regex)
}
#endif
void RouteMatch::set_regex(const char* value) {
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteMatch.regex)
}
void RouteMatch::set_regex(const char* value, size_t size) {
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteMatch.regex)
}
::std::string* RouteMatch::mutable_regex() {
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.regex)
  return path_specifier_.regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteMatch::release_regex() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.regex)
  if (has_regex()) {
    clear_has_path_specifier();
    return path_specifier_.regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RouteMatch::set_allocated_regex(::std::string* regex) {
  if (!has_regex()) {
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_path_specifier();
  if (regex != NULL) {
    set_has_regex();
    path_specifier_.regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        regex);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.regex)
}

// .google.protobuf.BoolValue case_sensitive = 4;
bool RouteMatch::has_case_sensitive() const {
  return this != internal_default_instance() && case_sensitive_ != NULL;
}
void RouteMatch::clear_case_sensitive() {
  if (GetArenaNoVirtual() == NULL && case_sensitive_ != NULL) delete case_sensitive_;
  case_sensitive_ = NULL;
}
const ::google::protobuf::BoolValue& RouteMatch::case_sensitive() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.case_sensitive)
  return case_sensitive_ != NULL ? *case_sensitive_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
::google::protobuf::BoolValue* RouteMatch::mutable_case_sensitive() {
  
  if (case_sensitive_ == NULL) {
    case_sensitive_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.case_sensitive)
  return case_sensitive_;
}
::google::protobuf::BoolValue* RouteMatch::release_case_sensitive() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.case_sensitive)
  
  ::google::protobuf::BoolValue* temp = case_sensitive_;
  case_sensitive_ = NULL;
  return temp;
}
void RouteMatch::set_allocated_case_sensitive(::google::protobuf::BoolValue* case_sensitive) {
  delete case_sensitive_;
  if (case_sensitive != NULL && case_sensitive->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_case_sensitive = new ::google::protobuf::BoolValue;
    new_case_sensitive->CopyFrom(*case_sensitive);
    case_sensitive = new_case_sensitive;
  }
  case_sensitive_ = case_sensitive;
  if (case_sensitive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.case_sensitive)
}

// .envoy.api.v2.RuntimeUInt32 runtime = 5;
bool RouteMatch::has_runtime() const {
  return this != internal_default_instance() && runtime_ != NULL;
}
void RouteMatch::clear_runtime() {
  if (GetArenaNoVirtual() == NULL && runtime_ != NULL) delete runtime_;
  runtime_ = NULL;
}
const ::envoy::api::v2::RuntimeUInt32& RouteMatch::runtime() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.runtime)
  return runtime_ != NULL ? *runtime_
                         : *::envoy::api::v2::RuntimeUInt32::internal_default_instance();
}
::envoy::api::v2::RuntimeUInt32* RouteMatch::mutable_runtime() {
  
  if (runtime_ == NULL) {
    runtime_ = new ::envoy::api::v2::RuntimeUInt32;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.runtime)
  return runtime_;
}
::envoy::api::v2::RuntimeUInt32* RouteMatch::release_runtime() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.runtime)
  
  ::envoy::api::v2::RuntimeUInt32* temp = runtime_;
  runtime_ = NULL;
  return temp;
}
void RouteMatch::set_allocated_runtime(::envoy::api::v2::RuntimeUInt32* runtime) {
  delete runtime_;
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.runtime)
}

// repeated .envoy.api.v2.HeaderMatcher headers = 6;
int RouteMatch::headers_size() const {
  return headers_.size();
}
void RouteMatch::clear_headers() {
  headers_.Clear();
}
const ::envoy::api::v2::HeaderMatcher& RouteMatch::headers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.headers)
  return headers_.Get(index);
}
::envoy::api::v2::HeaderMatcher* RouteMatch::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.headers)
  return headers_.Mutable(index);
}
::envoy::api::v2::HeaderMatcher* RouteMatch::add_headers() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteMatch.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >*
RouteMatch::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteMatch.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >&
RouteMatch::headers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteMatch.headers)
  return headers_;
}

bool RouteMatch::has_path_specifier() const {
  return path_specifier_case() != PATH_SPECIFIER_NOT_SET;
}
void RouteMatch::clear_has_path_specifier() {
  _oneof_case_[0] = PATH_SPECIFIER_NOT_SET;
}
RouteMatch::PathSpecifierCase RouteMatch::path_specifier_case() const {
  return RouteMatch::PathSpecifierCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardAction_RetryPolicy::kRetryOnFieldNumber;
const int ForwardAction_RetryPolicy::kNumRetriesFieldNumber;
const int ForwardAction_RetryPolicy::kPerTryTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardAction_RetryPolicy::ForwardAction_RetryPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.ForwardAction.RetryPolicy)
}
ForwardAction_RetryPolicy::ForwardAction_RetryPolicy(const ForwardAction_RetryPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retry_on_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.retry_on().size() > 0) {
    retry_on_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retry_on_);
  }
  if (from.has_num_retries()) {
    num_retries_ = new ::google::protobuf::UInt32Value(*from.num_retries_);
  } else {
    num_retries_ = NULL;
  }
  if (from.has_per_try_timeout()) {
    per_try_timeout_ = new ::google::protobuf::Duration(*from.per_try_timeout_);
  } else {
    per_try_timeout_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.ForwardAction.RetryPolicy)
}

void ForwardAction_RetryPolicy::SharedCtor() {
  retry_on_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_retries_, 0, reinterpret_cast<char*>(&per_try_timeout_) -
    reinterpret_cast<char*>(&num_retries_) + sizeof(per_try_timeout_));
  _cached_size_ = 0;
}

ForwardAction_RetryPolicy::~ForwardAction_RetryPolicy() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.ForwardAction.RetryPolicy)
  SharedDtor();
}

void ForwardAction_RetryPolicy::SharedDtor() {
  retry_on_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete num_retries_;
  }
  if (this != internal_default_instance()) {
    delete per_try_timeout_;
  }
}

void ForwardAction_RetryPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardAction_RetryPolicy::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[3].descriptor;
}

const ForwardAction_RetryPolicy& ForwardAction_RetryPolicy::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForwardAction_RetryPolicy* ForwardAction_RetryPolicy::New(::google::protobuf::Arena* arena) const {
  ForwardAction_RetryPolicy* n = new ForwardAction_RetryPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardAction_RetryPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.ForwardAction.RetryPolicy)
  retry_on_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && num_retries_ != NULL) {
    delete num_retries_;
  }
  num_retries_ = NULL;
  if (GetArenaNoVirtual() == NULL && per_try_timeout_ != NULL) {
    delete per_try_timeout_;
  }
  per_try_timeout_ = NULL;
}

bool ForwardAction_RetryPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.ForwardAction.RetryPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string retry_on = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retry_on()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->retry_on().data(), this->retry_on().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.ForwardAction.RetryPolicy.retry_on"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value num_retries = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_num_retries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration per_try_timeout = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_per_try_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.ForwardAction.RetryPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.ForwardAction.RetryPolicy)
  return false;
#undef DO_
}

void ForwardAction_RetryPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.ForwardAction.RetryPolicy)
  // string retry_on = 1;
  if (this->retry_on().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retry_on().data(), this->retry_on().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.RetryPolicy.retry_on");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->retry_on(), output);
  }

  // .google.protobuf.UInt32Value num_retries = 2;
  if (this->has_num_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->num_retries_, output);
  }

  // .google.protobuf.Duration per_try_timeout = 3;
  if (this->has_per_try_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->per_try_timeout_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.ForwardAction.RetryPolicy)
}

::google::protobuf::uint8* ForwardAction_RetryPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.ForwardAction.RetryPolicy)
  // string retry_on = 1;
  if (this->retry_on().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retry_on().data(), this->retry_on().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.RetryPolicy.retry_on");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->retry_on(), target);
  }

  // .google.protobuf.UInt32Value num_retries = 2;
  if (this->has_num_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->num_retries_, false, target);
  }

  // .google.protobuf.Duration per_try_timeout = 3;
  if (this->has_per_try_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->per_try_timeout_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.ForwardAction.RetryPolicy)
  return target;
}

size_t ForwardAction_RetryPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.ForwardAction.RetryPolicy)
  size_t total_size = 0;

  // string retry_on = 1;
  if (this->retry_on().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->retry_on());
  }

  // .google.protobuf.UInt32Value num_retries = 2;
  if (this->has_num_retries()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->num_retries_);
  }

  // .google.protobuf.Duration per_try_timeout = 3;
  if (this->has_per_try_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->per_try_timeout_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardAction_RetryPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.ForwardAction.RetryPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardAction_RetryPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardAction_RetryPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.ForwardAction.RetryPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.ForwardAction.RetryPolicy)
    MergeFrom(*source);
  }
}

void ForwardAction_RetryPolicy::MergeFrom(const ForwardAction_RetryPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.ForwardAction.RetryPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.retry_on().size() > 0) {

    retry_on_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retry_on_);
  }
  if (from.has_num_retries()) {
    mutable_num_retries()->::google::protobuf::UInt32Value::MergeFrom(from.num_retries());
  }
  if (from.has_per_try_timeout()) {
    mutable_per_try_timeout()->::google::protobuf::Duration::MergeFrom(from.per_try_timeout());
  }
}

void ForwardAction_RetryPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.ForwardAction.RetryPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardAction_RetryPolicy::CopyFrom(const ForwardAction_RetryPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.ForwardAction.RetryPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardAction_RetryPolicy::IsInitialized() const {
  return true;
}

void ForwardAction_RetryPolicy::Swap(ForwardAction_RetryPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardAction_RetryPolicy::InternalSwap(ForwardAction_RetryPolicy* other) {
  retry_on_.Swap(&other->retry_on_);
  std::swap(num_retries_, other->num_retries_);
  std::swap(per_try_timeout_, other->per_try_timeout_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardAction_RetryPolicy::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardAction_RetryPolicy

// string retry_on = 1;
void ForwardAction_RetryPolicy::clear_retry_on() {
  retry_on_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardAction_RetryPolicy::retry_on() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
  return retry_on_.GetNoArena();
}
void ForwardAction_RetryPolicy::set_retry_on(const ::std::string& value) {
  
  retry_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
}
#if LANG_CXX11
void ForwardAction_RetryPolicy::set_retry_on(::std::string&& value) {
  
  retry_on_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
}
#endif
void ForwardAction_RetryPolicy::set_retry_on(const char* value) {
  
  retry_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
}
void ForwardAction_RetryPolicy::set_retry_on(const char* value, size_t size) {
  
  retry_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
}
::std::string* ForwardAction_RetryPolicy::mutable_retry_on() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
  return retry_on_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardAction_RetryPolicy::release_retry_on() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
  
  return retry_on_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardAction_RetryPolicy::set_allocated_retry_on(::std::string* retry_on) {
  if (retry_on != NULL) {
    
  } else {
    
  }
  retry_on_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retry_on);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
}

// .google.protobuf.UInt32Value num_retries = 2;
bool ForwardAction_RetryPolicy::has_num_retries() const {
  return this != internal_default_instance() && num_retries_ != NULL;
}
void ForwardAction_RetryPolicy::clear_num_retries() {
  if (GetArenaNoVirtual() == NULL && num_retries_ != NULL) delete num_retries_;
  num_retries_ = NULL;
}
const ::google::protobuf::UInt32Value& ForwardAction_RetryPolicy::num_retries() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.RetryPolicy.num_retries)
  return num_retries_ != NULL ? *num_retries_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* ForwardAction_RetryPolicy::mutable_num_retries() {
  
  if (num_retries_ == NULL) {
    num_retries_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.RetryPolicy.num_retries)
  return num_retries_;
}
::google::protobuf::UInt32Value* ForwardAction_RetryPolicy::release_num_retries() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.RetryPolicy.num_retries)
  
  ::google::protobuf::UInt32Value* temp = num_retries_;
  num_retries_ = NULL;
  return temp;
}
void ForwardAction_RetryPolicy::set_allocated_num_retries(::google::protobuf::UInt32Value* num_retries) {
  delete num_retries_;
  if (num_retries != NULL && num_retries->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_num_retries = new ::google::protobuf::UInt32Value;
    new_num_retries->CopyFrom(*num_retries);
    num_retries = new_num_retries;
  }
  num_retries_ = num_retries;
  if (num_retries) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.RetryPolicy.num_retries)
}

// .google.protobuf.Duration per_try_timeout = 3;
bool ForwardAction_RetryPolicy::has_per_try_timeout() const {
  return this != internal_default_instance() && per_try_timeout_ != NULL;
}
void ForwardAction_RetryPolicy::clear_per_try_timeout() {
  if (GetArenaNoVirtual() == NULL && per_try_timeout_ != NULL) delete per_try_timeout_;
  per_try_timeout_ = NULL;
}
const ::google::protobuf::Duration& ForwardAction_RetryPolicy::per_try_timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.RetryPolicy.per_try_timeout)
  return per_try_timeout_ != NULL ? *per_try_timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* ForwardAction_RetryPolicy::mutable_per_try_timeout() {
  
  if (per_try_timeout_ == NULL) {
    per_try_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.RetryPolicy.per_try_timeout)
  return per_try_timeout_;
}
::google::protobuf::Duration* ForwardAction_RetryPolicy::release_per_try_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.RetryPolicy.per_try_timeout)
  
  ::google::protobuf::Duration* temp = per_try_timeout_;
  per_try_timeout_ = NULL;
  return temp;
}
void ForwardAction_RetryPolicy::set_allocated_per_try_timeout(::google::protobuf::Duration* per_try_timeout) {
  delete per_try_timeout_;
  if (per_try_timeout != NULL && per_try_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_per_try_timeout = new ::google::protobuf::Duration;
    new_per_try_timeout->CopyFrom(*per_try_timeout);
    per_try_timeout = new_per_try_timeout;
  }
  per_try_timeout_ = per_try_timeout;
  if (per_try_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.RetryPolicy.per_try_timeout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardAction_RequestMirrorPolicy::kClusterFieldNumber;
const int ForwardAction_RequestMirrorPolicy::kRuntimeKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardAction_RequestMirrorPolicy::ForwardAction_RequestMirrorPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
}
ForwardAction_RequestMirrorPolicy::ForwardAction_RequestMirrorPolicy(const ForwardAction_RequestMirrorPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster().size() > 0) {
    cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_);
  }
  runtime_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.runtime_key().size() > 0) {
    runtime_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
}

void ForwardAction_RequestMirrorPolicy::SharedCtor() {
  cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  runtime_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ForwardAction_RequestMirrorPolicy::~ForwardAction_RequestMirrorPolicy() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
  SharedDtor();
}

void ForwardAction_RequestMirrorPolicy::SharedDtor() {
  cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  runtime_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ForwardAction_RequestMirrorPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardAction_RequestMirrorPolicy::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[4].descriptor;
}

const ForwardAction_RequestMirrorPolicy& ForwardAction_RequestMirrorPolicy::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForwardAction_RequestMirrorPolicy* ForwardAction_RequestMirrorPolicy::New(::google::protobuf::Arena* arena) const {
  ForwardAction_RequestMirrorPolicy* n = new ForwardAction_RequestMirrorPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardAction_RequestMirrorPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ForwardAction_RequestMirrorPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster().data(), this->cluster().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string runtime_key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_runtime_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->runtime_key().data(), this->runtime_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
  return false;
#undef DO_
}

void ForwardAction_RequestMirrorPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
  // string cluster = 1;
  if (this->cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), this->cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster(), output);
  }

  // string runtime_key = 2;
  if (this->runtime_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), this->runtime_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->runtime_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
}

::google::protobuf::uint8* ForwardAction_RequestMirrorPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
  // string cluster = 1;
  if (this->cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), this->cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster(), target);
  }

  // string runtime_key = 2;
  if (this->runtime_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), this->runtime_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->runtime_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
  return target;
}

size_t ForwardAction_RequestMirrorPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
  size_t total_size = 0;

  // string cluster = 1;
  if (this->cluster().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster());
  }

  // string runtime_key = 2;
  if (this->runtime_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->runtime_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardAction_RequestMirrorPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardAction_RequestMirrorPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardAction_RequestMirrorPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
    MergeFrom(*source);
  }
}

void ForwardAction_RequestMirrorPolicy::MergeFrom(const ForwardAction_RequestMirrorPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster().size() > 0) {

    cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_);
  }
  if (from.runtime_key().size() > 0) {

    runtime_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
}

void ForwardAction_RequestMirrorPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardAction_RequestMirrorPolicy::CopyFrom(const ForwardAction_RequestMirrorPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardAction_RequestMirrorPolicy::IsInitialized() const {
  return true;
}

void ForwardAction_RequestMirrorPolicy::Swap(ForwardAction_RequestMirrorPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardAction_RequestMirrorPolicy::InternalSwap(ForwardAction_RequestMirrorPolicy* other) {
  cluster_.Swap(&other->cluster_);
  runtime_key_.Swap(&other->runtime_key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardAction_RequestMirrorPolicy::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardAction_RequestMirrorPolicy

// string cluster = 1;
void ForwardAction_RequestMirrorPolicy::clear_cluster() {
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardAction_RequestMirrorPolicy::cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
  return cluster_.GetNoArena();
}
void ForwardAction_RequestMirrorPolicy::set_cluster(const ::std::string& value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
}
#if LANG_CXX11
void ForwardAction_RequestMirrorPolicy::set_cluster(::std::string&& value) {
  
  cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
}
#endif
void ForwardAction_RequestMirrorPolicy::set_cluster(const char* value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
}
void ForwardAction_RequestMirrorPolicy::set_cluster(const char* value, size_t size) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
}
::std::string* ForwardAction_RequestMirrorPolicy::mutable_cluster() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
  return cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardAction_RequestMirrorPolicy::release_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
  
  return cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardAction_RequestMirrorPolicy::set_allocated_cluster(::std::string* cluster) {
  if (cluster != NULL) {
    
  } else {
    
  }
  cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
}

// string runtime_key = 2;
void ForwardAction_RequestMirrorPolicy::clear_runtime_key() {
  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardAction_RequestMirrorPolicy::runtime_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
  return runtime_key_.GetNoArena();
}
void ForwardAction_RequestMirrorPolicy::set_runtime_key(const ::std::string& value) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
}
#if LANG_CXX11
void ForwardAction_RequestMirrorPolicy::set_runtime_key(::std::string&& value) {
  
  runtime_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
}
#endif
void ForwardAction_RequestMirrorPolicy::set_runtime_key(const char* value) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
}
void ForwardAction_RequestMirrorPolicy::set_runtime_key(const char* value, size_t size) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
}
::std::string* ForwardAction_RequestMirrorPolicy::mutable_runtime_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
  return runtime_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardAction_RequestMirrorPolicy::release_runtime_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
  
  return runtime_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardAction_RequestMirrorPolicy::set_allocated_runtime_key(::std::string* runtime_key) {
  if (runtime_key != NULL) {
    
  } else {
    
  }
  runtime_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardAction_HashPolicy_Header::kHeaderNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardAction_HashPolicy_Header::ForwardAction_HashPolicy_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.ForwardAction.HashPolicy.Header)
}
ForwardAction_HashPolicy_Header::ForwardAction_HashPolicy_Header(const ForwardAction_HashPolicy_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.header_name().size() > 0) {
    header_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_name_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.ForwardAction.HashPolicy.Header)
}

void ForwardAction_HashPolicy_Header::SharedCtor() {
  header_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ForwardAction_HashPolicy_Header::~ForwardAction_HashPolicy_Header() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.ForwardAction.HashPolicy.Header)
  SharedDtor();
}

void ForwardAction_HashPolicy_Header::SharedDtor() {
  header_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ForwardAction_HashPolicy_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardAction_HashPolicy_Header::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[5].descriptor;
}

const ForwardAction_HashPolicy_Header& ForwardAction_HashPolicy_Header::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForwardAction_HashPolicy_Header* ForwardAction_HashPolicy_Header::New(::google::protobuf::Arena* arena) const {
  ForwardAction_HashPolicy_Header* n = new ForwardAction_HashPolicy_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardAction_HashPolicy_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.ForwardAction.HashPolicy.Header)
  header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ForwardAction_HashPolicy_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.ForwardAction.HashPolicy.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string header_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->header_name().data(), this->header_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.ForwardAction.HashPolicy.Header.header_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.ForwardAction.HashPolicy.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.ForwardAction.HashPolicy.Header)
  return false;
#undef DO_
}

void ForwardAction_HashPolicy_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.ForwardAction.HashPolicy.Header)
  // string header_name = 1;
  if (this->header_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->header_name().data(), this->header_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.HashPolicy.Header.header_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->header_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.ForwardAction.HashPolicy.Header)
}

::google::protobuf::uint8* ForwardAction_HashPolicy_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.ForwardAction.HashPolicy.Header)
  // string header_name = 1;
  if (this->header_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->header_name().data(), this->header_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.HashPolicy.Header.header_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->header_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.ForwardAction.HashPolicy.Header)
  return target;
}

size_t ForwardAction_HashPolicy_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.ForwardAction.HashPolicy.Header)
  size_t total_size = 0;

  // string header_name = 1;
  if (this->header_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->header_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardAction_HashPolicy_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.ForwardAction.HashPolicy.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardAction_HashPolicy_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardAction_HashPolicy_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.ForwardAction.HashPolicy.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.ForwardAction.HashPolicy.Header)
    MergeFrom(*source);
  }
}

void ForwardAction_HashPolicy_Header::MergeFrom(const ForwardAction_HashPolicy_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.ForwardAction.HashPolicy.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.header_name().size() > 0) {

    header_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_name_);
  }
}

void ForwardAction_HashPolicy_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.ForwardAction.HashPolicy.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardAction_HashPolicy_Header::CopyFrom(const ForwardAction_HashPolicy_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.ForwardAction.HashPolicy.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardAction_HashPolicy_Header::IsInitialized() const {
  return true;
}

void ForwardAction_HashPolicy_Header::Swap(ForwardAction_HashPolicy_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardAction_HashPolicy_Header::InternalSwap(ForwardAction_HashPolicy_Header* other) {
  header_name_.Swap(&other->header_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardAction_HashPolicy_Header::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardAction_HashPolicy_Header

// string header_name = 1;
void ForwardAction_HashPolicy_Header::clear_header_name() {
  header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardAction_HashPolicy_Header::header_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
  return header_name_.GetNoArena();
}
void ForwardAction_HashPolicy_Header::set_header_name(const ::std::string& value) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
}
#if LANG_CXX11
void ForwardAction_HashPolicy_Header::set_header_name(::std::string&& value) {
  
  header_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
}
#endif
void ForwardAction_HashPolicy_Header::set_header_name(const char* value) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
}
void ForwardAction_HashPolicy_Header::set_header_name(const char* value, size_t size) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
}
::std::string* ForwardAction_HashPolicy_Header::mutable_header_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
  return header_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardAction_HashPolicy_Header::release_header_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
  
  return header_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardAction_HashPolicy_Header::set_allocated_header_name(::std::string* header_name) {
  if (header_name != NULL) {
    
  } else {
    
  }
  header_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardAction_HashPolicy::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardAction_HashPolicy::ForwardAction_HashPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.ForwardAction.HashPolicy)
}
ForwardAction_HashPolicy::ForwardAction_HashPolicy(const ForwardAction_HashPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_policy_specifier();
  switch (from.policy_specifier_case()) {
    case kHeader: {
      mutable_header()->::envoy::api::v2::ForwardAction_HashPolicy_Header::MergeFrom(from.header());
      break;
    }
    case POLICY_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.ForwardAction.HashPolicy)
}

void ForwardAction_HashPolicy::SharedCtor() {
  clear_has_policy_specifier();
  _cached_size_ = 0;
}

ForwardAction_HashPolicy::~ForwardAction_HashPolicy() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.ForwardAction.HashPolicy)
  SharedDtor();
}

void ForwardAction_HashPolicy::SharedDtor() {
  if (has_policy_specifier()) {
    clear_policy_specifier();
  }
}

void ForwardAction_HashPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardAction_HashPolicy::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[6].descriptor;
}

const ForwardAction_HashPolicy& ForwardAction_HashPolicy::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForwardAction_HashPolicy* ForwardAction_HashPolicy::New(::google::protobuf::Arena* arena) const {
  ForwardAction_HashPolicy* n = new ForwardAction_HashPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardAction_HashPolicy::clear_policy_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.ForwardAction.HashPolicy)
  switch (policy_specifier_case()) {
    case kHeader: {
      delete policy_specifier_.header_;
      break;
    }
    case POLICY_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = POLICY_SPECIFIER_NOT_SET;
}


void ForwardAction_HashPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.ForwardAction.HashPolicy)
  clear_policy_specifier();
}

bool ForwardAction_HashPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.ForwardAction.HashPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.ForwardAction.HashPolicy.Header header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.ForwardAction.HashPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.ForwardAction.HashPolicy)
  return false;
#undef DO_
}

void ForwardAction_HashPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.ForwardAction.HashPolicy)
  // .envoy.api.v2.ForwardAction.HashPolicy.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *policy_specifier_.header_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.ForwardAction.HashPolicy)
}

::google::protobuf::uint8* ForwardAction_HashPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.ForwardAction.HashPolicy)
  // .envoy.api.v2.ForwardAction.HashPolicy.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *policy_specifier_.header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.ForwardAction.HashPolicy)
  return target;
}

size_t ForwardAction_HashPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.ForwardAction.HashPolicy)
  size_t total_size = 0;

  switch (policy_specifier_case()) {
    // .envoy.api.v2.ForwardAction.HashPolicy.Header header = 1;
    case kHeader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *policy_specifier_.header_);
      break;
    }
    case POLICY_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardAction_HashPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.ForwardAction.HashPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardAction_HashPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardAction_HashPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.ForwardAction.HashPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.ForwardAction.HashPolicy)
    MergeFrom(*source);
  }
}

void ForwardAction_HashPolicy::MergeFrom(const ForwardAction_HashPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.ForwardAction.HashPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.policy_specifier_case()) {
    case kHeader: {
      mutable_header()->::envoy::api::v2::ForwardAction_HashPolicy_Header::MergeFrom(from.header());
      break;
    }
    case POLICY_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void ForwardAction_HashPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.ForwardAction.HashPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardAction_HashPolicy::CopyFrom(const ForwardAction_HashPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.ForwardAction.HashPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardAction_HashPolicy::IsInitialized() const {
  return true;
}

void ForwardAction_HashPolicy::Swap(ForwardAction_HashPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardAction_HashPolicy::InternalSwap(ForwardAction_HashPolicy* other) {
  std::swap(policy_specifier_, other->policy_specifier_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardAction_HashPolicy::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardAction_HashPolicy

// .envoy.api.v2.ForwardAction.HashPolicy.Header header = 1;
bool ForwardAction_HashPolicy::has_header() const {
  return policy_specifier_case() == kHeader;
}
void ForwardAction_HashPolicy::set_has_header() {
  _oneof_case_[0] = kHeader;
}
void ForwardAction_HashPolicy::clear_header() {
  if (has_header()) {
    delete policy_specifier_.header_;
    clear_has_policy_specifier();
  }
}
 const ::envoy::api::v2::ForwardAction_HashPolicy_Header& ForwardAction_HashPolicy::header() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.HashPolicy.header)
  return has_header()
      ? *policy_specifier_.header_
      : ::envoy::api::v2::ForwardAction_HashPolicy_Header::default_instance();
}
::envoy::api::v2::ForwardAction_HashPolicy_Header* ForwardAction_HashPolicy::mutable_header() {
  if (!has_header()) {
    clear_policy_specifier();
    set_has_header();
    policy_specifier_.header_ = new ::envoy::api::v2::ForwardAction_HashPolicy_Header;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.HashPolicy.header)
  return policy_specifier_.header_;
}
::envoy::api::v2::ForwardAction_HashPolicy_Header* ForwardAction_HashPolicy::release_header() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.HashPolicy.header)
  if (has_header()) {
    clear_has_policy_specifier();
    ::envoy::api::v2::ForwardAction_HashPolicy_Header* temp = policy_specifier_.header_;
    policy_specifier_.header_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ForwardAction_HashPolicy::set_allocated_header(::envoy::api::v2::ForwardAction_HashPolicy_Header* header) {
  clear_policy_specifier();
  if (header) {
    set_has_header();
    policy_specifier_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.HashPolicy.header)
}

bool ForwardAction_HashPolicy::has_policy_specifier() const {
  return policy_specifier_case() != POLICY_SPECIFIER_NOT_SET;
}
void ForwardAction_HashPolicy::clear_has_policy_specifier() {
  _oneof_case_[0] = POLICY_SPECIFIER_NOT_SET;
}
ForwardAction_HashPolicy::PolicySpecifierCase ForwardAction_HashPolicy::policy_specifier_case() const {
  return ForwardAction_HashPolicy::PolicySpecifierCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ForwardAction::kClusterFieldNumber;
const int ForwardAction::kClusterHeaderFieldNumber;
const int ForwardAction::kWeightedClustersFieldNumber;
const int ForwardAction::kPrefixRewriteFieldNumber;
const int ForwardAction::kHostRewriteFieldNumber;
const int ForwardAction::kAutoHostRewriteFieldNumber;
const int ForwardAction::kTimeoutFieldNumber;
const int ForwardAction::kRetryPolicyFieldNumber;
const int ForwardAction::kRequestMirrorPolicyFieldNumber;
const int ForwardAction::kPriorityFieldNumber;
const int ForwardAction::kRequestHeadersToAddFieldNumber;
const int ForwardAction::kRateLimitsFieldNumber;
const int ForwardAction::kIncludeVhRateLimitsFieldNumber;
const int ForwardAction::kHashPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ForwardAction::ForwardAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.ForwardAction)
}
ForwardAction::ForwardAction(const ForwardAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      request_headers_to_add_(from.request_headers_to_add_),
      rate_limits_(from.rate_limits_),
      hash_policy_(from.hash_policy_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prefix_rewrite().size() > 0) {
    prefix_rewrite_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_rewrite_);
  }
  if (from.has_timeout()) {
    timeout_ = new ::google::protobuf::Duration(*from.timeout_);
  } else {
    timeout_ = NULL;
  }
  if (from.has_retry_policy()) {
    retry_policy_ = new ::envoy::api::v2::ForwardAction_RetryPolicy(*from.retry_policy_);
  } else {
    retry_policy_ = NULL;
  }
  if (from.has_request_mirror_policy()) {
    request_mirror_policy_ = new ::envoy::api::v2::ForwardAction_RequestMirrorPolicy(*from.request_mirror_policy_);
  } else {
    request_mirror_policy_ = NULL;
  }
  if (from.has_include_vh_rate_limits()) {
    include_vh_rate_limits_ = new ::google::protobuf::BoolValue(*from.include_vh_rate_limits_);
  } else {
    include_vh_rate_limits_ = NULL;
  }
  priority_ = from.priority_;
  clear_has_cluster_specifier();
  switch (from.cluster_specifier_case()) {
    case kCluster: {
      set_cluster(from.cluster());
      break;
    }
    case kClusterHeader: {
      set_cluster_header(from.cluster_header());
      break;
    }
    case kWeightedClusters: {
      mutable_weighted_clusters()->::envoy::api::v2::WeightedCluster::MergeFrom(from.weighted_clusters());
      break;
    }
    case CLUSTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  clear_has_host_rewrite_specifier();
  switch (from.host_rewrite_specifier_case()) {
    case kHostRewrite: {
      set_host_rewrite(from.host_rewrite());
      break;
    }
    case kAutoHostRewrite: {
      mutable_auto_host_rewrite()->::google::protobuf::BoolValue::MergeFrom(from.auto_host_rewrite());
      break;
    }
    case HOST_REWRITE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.ForwardAction)
}

void ForwardAction::SharedCtor() {
  prefix_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&timeout_) + sizeof(priority_));
  clear_has_cluster_specifier();
  clear_has_host_rewrite_specifier();
  _cached_size_ = 0;
}

ForwardAction::~ForwardAction() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.ForwardAction)
  SharedDtor();
}

void ForwardAction::SharedDtor() {
  prefix_rewrite_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete timeout_;
  }
  if (this != internal_default_instance()) {
    delete retry_policy_;
  }
  if (this != internal_default_instance()) {
    delete request_mirror_policy_;
  }
  if (this != internal_default_instance()) {
    delete include_vh_rate_limits_;
  }
  if (has_cluster_specifier()) {
    clear_cluster_specifier();
  }
  if (has_host_rewrite_specifier()) {
    clear_host_rewrite_specifier();
  }
}

void ForwardAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardAction::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[7].descriptor;
}

const ForwardAction& ForwardAction::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

ForwardAction* ForwardAction::New(::google::protobuf::Arena* arena) const {
  ForwardAction* n = new ForwardAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ForwardAction::clear_cluster_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.ForwardAction)
  switch (cluster_specifier_case()) {
    case kCluster: {
      cluster_specifier_.cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kClusterHeader: {
      cluster_specifier_.cluster_header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kWeightedClusters: {
      delete cluster_specifier_.weighted_clusters_;
      break;
    }
    case CLUSTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLUSTER_SPECIFIER_NOT_SET;
}

void ForwardAction::clear_host_rewrite_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.ForwardAction)
  switch (host_rewrite_specifier_case()) {
    case kHostRewrite: {
      host_rewrite_specifier_.host_rewrite_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kAutoHostRewrite: {
      delete host_rewrite_specifier_.auto_host_rewrite_;
      break;
    }
    case HOST_REWRITE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HOST_REWRITE_SPECIFIER_NOT_SET;
}


void ForwardAction::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.ForwardAction)
  request_headers_to_add_.Clear();
  rate_limits_.Clear();
  hash_policy_.Clear();
  prefix_rewrite_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) {
    delete timeout_;
  }
  timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && retry_policy_ != NULL) {
    delete retry_policy_;
  }
  retry_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && request_mirror_policy_ != NULL) {
    delete request_mirror_policy_;
  }
  request_mirror_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && include_vh_rate_limits_ != NULL) {
    delete include_vh_rate_limits_;
  }
  include_vh_rate_limits_ = NULL;
  priority_ = 0;
  clear_cluster_specifier();
  clear_host_rewrite_specifier();
}

bool ForwardAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.ForwardAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster().data(), this->cluster().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.ForwardAction.cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_header = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_header()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_header().data(), this->cluster_header().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.ForwardAction.cluster_header"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.WeightedCluster weighted_clusters = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prefix_rewrite = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix_rewrite()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix_rewrite().data(), this->prefix_rewrite().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.ForwardAction.prefix_rewrite"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host_rewrite = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_rewrite()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_rewrite().data(), this->host_rewrite().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.ForwardAction.host_rewrite"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue auto_host_rewrite = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_host_rewrite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration timeout = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.ForwardAction.RetryPolicy retry_policy = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retry_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.ForwardAction.RequestMirrorPolicy request_mirror_policy = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_mirror_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RoutingPriority priority = 10;
      case 10: {
        if (tag == 80u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_priority(static_cast< ::envoy::api::v2::RoutingPriority >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 11;
      case 11: {
        if (tag == 90u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_request_headers_to_add()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .envoy.api.v2.RateLimit rate_limits = 12;
      case 12: {
        if (tag == 98u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rate_limits()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .google.protobuf.BoolValue include_vh_rate_limits = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_include_vh_rate_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.ForwardAction.HashPolicy hash_policy = 14;
      case 14: {
        if (tag == 114u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_hash_policy()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.ForwardAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.ForwardAction)
  return false;
#undef DO_
}

void ForwardAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.ForwardAction)
  // string cluster = 1;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), this->cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster(), output);
  }

  // string cluster_header = 2;
  if (has_cluster_header()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_header().data(), this->cluster_header().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.cluster_header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_header(), output);
  }

  // .envoy.api.v2.WeightedCluster weighted_clusters = 3;
  if (has_weighted_clusters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *cluster_specifier_.weighted_clusters_, output);
  }

  // string prefix_rewrite = 4;
  if (this->prefix_rewrite().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix_rewrite().data(), this->prefix_rewrite().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.prefix_rewrite");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->prefix_rewrite(), output);
  }

  // string host_rewrite = 5;
  if (has_host_rewrite()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_rewrite().data(), this->host_rewrite().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.host_rewrite");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->host_rewrite(), output);
  }

  // .google.protobuf.BoolValue auto_host_rewrite = 6;
  if (has_auto_host_rewrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *host_rewrite_specifier_.auto_host_rewrite_, output);
  }

  // .google.protobuf.Duration timeout = 7;
  if (this->has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->timeout_, output);
  }

  // .envoy.api.v2.ForwardAction.RetryPolicy retry_policy = 8;
  if (this->has_retry_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->retry_policy_, output);
  }

  // .envoy.api.v2.ForwardAction.RequestMirrorPolicy request_mirror_policy = 9;
  if (this->has_request_mirror_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->request_mirror_policy_, output);
  }

  // .envoy.api.v2.RoutingPriority priority = 10;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->priority(), output);
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 11;
  for (unsigned int i = 0, n = this->request_headers_to_add_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->request_headers_to_add(i), output);
  }

  // repeated .envoy.api.v2.RateLimit rate_limits = 12;
  for (unsigned int i = 0, n = this->rate_limits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->rate_limits(i), output);
  }

  // .google.protobuf.BoolValue include_vh_rate_limits = 13;
  if (this->has_include_vh_rate_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->include_vh_rate_limits_, output);
  }

  // repeated .envoy.api.v2.ForwardAction.HashPolicy hash_policy = 14;
  for (unsigned int i = 0, n = this->hash_policy_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->hash_policy(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.ForwardAction)
}

::google::protobuf::uint8* ForwardAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.ForwardAction)
  // string cluster = 1;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), this->cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster(), target);
  }

  // string cluster_header = 2;
  if (has_cluster_header()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_header().data(), this->cluster_header().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.cluster_header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_header(), target);
  }

  // .envoy.api.v2.WeightedCluster weighted_clusters = 3;
  if (has_weighted_clusters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *cluster_specifier_.weighted_clusters_, false, target);
  }

  // string prefix_rewrite = 4;
  if (this->prefix_rewrite().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix_rewrite().data(), this->prefix_rewrite().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.prefix_rewrite");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->prefix_rewrite(), target);
  }

  // string host_rewrite = 5;
  if (has_host_rewrite()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_rewrite().data(), this->host_rewrite().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ForwardAction.host_rewrite");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->host_rewrite(), target);
  }

  // .google.protobuf.BoolValue auto_host_rewrite = 6;
  if (has_auto_host_rewrite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *host_rewrite_specifier_.auto_host_rewrite_, false, target);
  }

  // .google.protobuf.Duration timeout = 7;
  if (this->has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->timeout_, false, target);
  }

  // .envoy.api.v2.ForwardAction.RetryPolicy retry_policy = 8;
  if (this->has_retry_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->retry_policy_, false, target);
  }

  // .envoy.api.v2.ForwardAction.RequestMirrorPolicy request_mirror_policy = 9;
  if (this->has_request_mirror_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->request_mirror_policy_, false, target);
  }

  // .envoy.api.v2.RoutingPriority priority = 10;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->priority(), target);
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 11;
  for (unsigned int i = 0, n = this->request_headers_to_add_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->request_headers_to_add(i), false, target);
  }

  // repeated .envoy.api.v2.RateLimit rate_limits = 12;
  for (unsigned int i = 0, n = this->rate_limits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->rate_limits(i), false, target);
  }

  // .google.protobuf.BoolValue include_vh_rate_limits = 13;
  if (this->has_include_vh_rate_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->include_vh_rate_limits_, false, target);
  }

  // repeated .envoy.api.v2.ForwardAction.HashPolicy hash_policy = 14;
  for (unsigned int i = 0, n = this->hash_policy_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->hash_policy(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.ForwardAction)
  return target;
}

size_t ForwardAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.ForwardAction)
  size_t total_size = 0;

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 11;
  {
    unsigned int count = this->request_headers_to_add_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_headers_to_add(i));
    }
  }

  // repeated .envoy.api.v2.RateLimit rate_limits = 12;
  {
    unsigned int count = this->rate_limits_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rate_limits(i));
    }
  }

  // repeated .envoy.api.v2.ForwardAction.HashPolicy hash_policy = 14;
  {
    unsigned int count = this->hash_policy_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hash_policy(i));
    }
  }

  // string prefix_rewrite = 4;
  if (this->prefix_rewrite().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix_rewrite());
  }

  // .google.protobuf.Duration timeout = 7;
  if (this->has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timeout_);
  }

  // .envoy.api.v2.ForwardAction.RetryPolicy retry_policy = 8;
  if (this->has_retry_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->retry_policy_);
  }

  // .envoy.api.v2.ForwardAction.RequestMirrorPolicy request_mirror_policy = 9;
  if (this->has_request_mirror_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_mirror_policy_);
  }

  // .google.protobuf.BoolValue include_vh_rate_limits = 13;
  if (this->has_include_vh_rate_limits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->include_vh_rate_limits_);
  }

  // .envoy.api.v2.RoutingPriority priority = 10;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  switch (cluster_specifier_case()) {
    // string cluster = 1;
    case kCluster: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster());
      break;
    }
    // string cluster_header = 2;
    case kClusterHeader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_header());
      break;
    }
    // .envoy.api.v2.WeightedCluster weighted_clusters = 3;
    case kWeightedClusters: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cluster_specifier_.weighted_clusters_);
      break;
    }
    case CLUSTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  switch (host_rewrite_specifier_case()) {
    // string host_rewrite = 5;
    case kHostRewrite: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_rewrite());
      break;
    }
    // .google.protobuf.BoolValue auto_host_rewrite = 6;
    case kAutoHostRewrite: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *host_rewrite_specifier_.auto_host_rewrite_);
      break;
    }
    case HOST_REWRITE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.ForwardAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ForwardAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.ForwardAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.ForwardAction)
    MergeFrom(*source);
  }
}

void ForwardAction::MergeFrom(const ForwardAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.ForwardAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_headers_to_add_.MergeFrom(from.request_headers_to_add_);
  rate_limits_.MergeFrom(from.rate_limits_);
  hash_policy_.MergeFrom(from.hash_policy_);
  if (from.prefix_rewrite().size() > 0) {

    prefix_rewrite_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_rewrite_);
  }
  if (from.has_timeout()) {
    mutable_timeout()->::google::protobuf::Duration::MergeFrom(from.timeout());
  }
  if (from.has_retry_policy()) {
    mutable_retry_policy()->::envoy::api::v2::ForwardAction_RetryPolicy::MergeFrom(from.retry_policy());
  }
  if (from.has_request_mirror_policy()) {
    mutable_request_mirror_policy()->::envoy::api::v2::ForwardAction_RequestMirrorPolicy::MergeFrom(from.request_mirror_policy());
  }
  if (from.has_include_vh_rate_limits()) {
    mutable_include_vh_rate_limits()->::google::protobuf::BoolValue::MergeFrom(from.include_vh_rate_limits());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  switch (from.cluster_specifier_case()) {
    case kCluster: {
      set_cluster(from.cluster());
      break;
    }
    case kClusterHeader: {
      set_cluster_header(from.cluster_header());
      break;
    }
    case kWeightedClusters: {
      mutable_weighted_clusters()->::envoy::api::v2::WeightedCluster::MergeFrom(from.weighted_clusters());
      break;
    }
    case CLUSTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  switch (from.host_rewrite_specifier_case()) {
    case kHostRewrite: {
      set_host_rewrite(from.host_rewrite());
      break;
    }
    case kAutoHostRewrite: {
      mutable_auto_host_rewrite()->::google::protobuf::BoolValue::MergeFrom(from.auto_host_rewrite());
      break;
    }
    case HOST_REWRITE_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void ForwardAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.ForwardAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardAction::CopyFrom(const ForwardAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.ForwardAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardAction::IsInitialized() const {
  return true;
}

void ForwardAction::Swap(ForwardAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ForwardAction::InternalSwap(ForwardAction* other) {
  request_headers_to_add_.UnsafeArenaSwap(&other->request_headers_to_add_);
  rate_limits_.UnsafeArenaSwap(&other->rate_limits_);
  hash_policy_.UnsafeArenaSwap(&other->hash_policy_);
  prefix_rewrite_.Swap(&other->prefix_rewrite_);
  std::swap(timeout_, other->timeout_);
  std::swap(retry_policy_, other->retry_policy_);
  std::swap(request_mirror_policy_, other->request_mirror_policy_);
  std::swap(include_vh_rate_limits_, other->include_vh_rate_limits_);
  std::swap(priority_, other->priority_);
  std::swap(cluster_specifier_, other->cluster_specifier_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(host_rewrite_specifier_, other->host_rewrite_specifier_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ForwardAction::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ForwardAction

// string cluster = 1;
bool ForwardAction::has_cluster() const {
  return cluster_specifier_case() == kCluster;
}
void ForwardAction::set_has_cluster() {
  _oneof_case_[0] = kCluster;
}
void ForwardAction::clear_cluster() {
  if (has_cluster()) {
    cluster_specifier_.cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_cluster_specifier();
  }
}
const ::std::string& ForwardAction::cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.cluster)
  if (has_cluster()) {
    return cluster_specifier_.cluster_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ForwardAction::set_cluster(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.cluster)
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.cluster)
}
#if LANG_CXX11
void ForwardAction::set_cluster(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.cluster)
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.cluster)
}
#endif
void ForwardAction::set_cluster(const char* value) {
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.cluster)
}
void ForwardAction::set_cluster(const char* value, size_t size) {
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.cluster)
}
::std::string* ForwardAction::mutable_cluster() {
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.cluster)
  return cluster_specifier_.cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardAction::release_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.cluster)
  if (has_cluster()) {
    clear_has_cluster_specifier();
    return cluster_specifier_.cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ForwardAction::set_allocated_cluster(::std::string* cluster) {
  if (!has_cluster()) {
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_cluster_specifier();
  if (cluster != NULL) {
    set_has_cluster();
    cluster_specifier_.cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        cluster);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.cluster)
}

// string cluster_header = 2;
bool ForwardAction::has_cluster_header() const {
  return cluster_specifier_case() == kClusterHeader;
}
void ForwardAction::set_has_cluster_header() {
  _oneof_case_[0] = kClusterHeader;
}
void ForwardAction::clear_cluster_header() {
  if (has_cluster_header()) {
    cluster_specifier_.cluster_header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_cluster_specifier();
  }
}
const ::std::string& ForwardAction::cluster_header() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.cluster_header)
  if (has_cluster_header()) {
    return cluster_specifier_.cluster_header_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ForwardAction::set_cluster_header(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.cluster_header)
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.cluster_header)
}
#if LANG_CXX11
void ForwardAction::set_cluster_header(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.cluster_header)
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.cluster_header)
}
#endif
void ForwardAction::set_cluster_header(const char* value) {
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.cluster_header)
}
void ForwardAction::set_cluster_header(const char* value, size_t size) {
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.cluster_header)
}
::std::string* ForwardAction::mutable_cluster_header() {
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.cluster_header)
  return cluster_specifier_.cluster_header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardAction::release_cluster_header() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.cluster_header)
  if (has_cluster_header()) {
    clear_has_cluster_specifier();
    return cluster_specifier_.cluster_header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ForwardAction::set_allocated_cluster_header(::std::string* cluster_header) {
  if (!has_cluster_header()) {
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_cluster_specifier();
  if (cluster_header != NULL) {
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        cluster_header);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.cluster_header)
}

// .envoy.api.v2.WeightedCluster weighted_clusters = 3;
bool ForwardAction::has_weighted_clusters() const {
  return cluster_specifier_case() == kWeightedClusters;
}
void ForwardAction::set_has_weighted_clusters() {
  _oneof_case_[0] = kWeightedClusters;
}
void ForwardAction::clear_weighted_clusters() {
  if (has_weighted_clusters()) {
    delete cluster_specifier_.weighted_clusters_;
    clear_has_cluster_specifier();
  }
}
 const ::envoy::api::v2::WeightedCluster& ForwardAction::weighted_clusters() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.weighted_clusters)
  return has_weighted_clusters()
      ? *cluster_specifier_.weighted_clusters_
      : ::envoy::api::v2::WeightedCluster::default_instance();
}
::envoy::api::v2::WeightedCluster* ForwardAction::mutable_weighted_clusters() {
  if (!has_weighted_clusters()) {
    clear_cluster_specifier();
    set_has_weighted_clusters();
    cluster_specifier_.weighted_clusters_ = new ::envoy::api::v2::WeightedCluster;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.weighted_clusters)
  return cluster_specifier_.weighted_clusters_;
}
::envoy::api::v2::WeightedCluster* ForwardAction::release_weighted_clusters() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.weighted_clusters)
  if (has_weighted_clusters()) {
    clear_has_cluster_specifier();
    ::envoy::api::v2::WeightedCluster* temp = cluster_specifier_.weighted_clusters_;
    cluster_specifier_.weighted_clusters_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ForwardAction::set_allocated_weighted_clusters(::envoy::api::v2::WeightedCluster* weighted_clusters) {
  clear_cluster_specifier();
  if (weighted_clusters) {
    set_has_weighted_clusters();
    cluster_specifier_.weighted_clusters_ = weighted_clusters;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.weighted_clusters)
}

// string prefix_rewrite = 4;
void ForwardAction::clear_prefix_rewrite() {
  prefix_rewrite_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ForwardAction::prefix_rewrite() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.prefix_rewrite)
  return prefix_rewrite_.GetNoArena();
}
void ForwardAction::set_prefix_rewrite(const ::std::string& value) {
  
  prefix_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.prefix_rewrite)
}
#if LANG_CXX11
void ForwardAction::set_prefix_rewrite(::std::string&& value) {
  
  prefix_rewrite_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.prefix_rewrite)
}
#endif
void ForwardAction::set_prefix_rewrite(const char* value) {
  
  prefix_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.prefix_rewrite)
}
void ForwardAction::set_prefix_rewrite(const char* value, size_t size) {
  
  prefix_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.prefix_rewrite)
}
::std::string* ForwardAction::mutable_prefix_rewrite() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.prefix_rewrite)
  return prefix_rewrite_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardAction::release_prefix_rewrite() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.prefix_rewrite)
  
  return prefix_rewrite_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ForwardAction::set_allocated_prefix_rewrite(::std::string* prefix_rewrite) {
  if (prefix_rewrite != NULL) {
    
  } else {
    
  }
  prefix_rewrite_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix_rewrite);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.prefix_rewrite)
}

// string host_rewrite = 5;
bool ForwardAction::has_host_rewrite() const {
  return host_rewrite_specifier_case() == kHostRewrite;
}
void ForwardAction::set_has_host_rewrite() {
  _oneof_case_[1] = kHostRewrite;
}
void ForwardAction::clear_host_rewrite() {
  if (has_host_rewrite()) {
    host_rewrite_specifier_.host_rewrite_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_host_rewrite_specifier();
  }
}
const ::std::string& ForwardAction::host_rewrite() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.host_rewrite)
  if (has_host_rewrite()) {
    return host_rewrite_specifier_.host_rewrite_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ForwardAction::set_host_rewrite(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.host_rewrite)
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  host_rewrite_specifier_.host_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.host_rewrite)
}
#if LANG_CXX11
void ForwardAction::set_host_rewrite(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.host_rewrite)
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  host_rewrite_specifier_.host_rewrite_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.host_rewrite)
}
#endif
void ForwardAction::set_host_rewrite(const char* value) {
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  host_rewrite_specifier_.host_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.host_rewrite)
}
void ForwardAction::set_host_rewrite(const char* value, size_t size) {
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  host_rewrite_specifier_.host_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.host_rewrite)
}
::std::string* ForwardAction::mutable_host_rewrite() {
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.host_rewrite)
  return host_rewrite_specifier_.host_rewrite_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ForwardAction::release_host_rewrite() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.host_rewrite)
  if (has_host_rewrite()) {
    clear_has_host_rewrite_specifier();
    return host_rewrite_specifier_.host_rewrite_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ForwardAction::set_allocated_host_rewrite(::std::string* host_rewrite) {
  if (!has_host_rewrite()) {
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_host_rewrite_specifier();
  if (host_rewrite != NULL) {
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        host_rewrite);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.host_rewrite)
}

// .google.protobuf.BoolValue auto_host_rewrite = 6;
bool ForwardAction::has_auto_host_rewrite() const {
  return host_rewrite_specifier_case() == kAutoHostRewrite;
}
void ForwardAction::set_has_auto_host_rewrite() {
  _oneof_case_[1] = kAutoHostRewrite;
}
void ForwardAction::clear_auto_host_rewrite() {
  if (has_auto_host_rewrite()) {
    delete host_rewrite_specifier_.auto_host_rewrite_;
    clear_has_host_rewrite_specifier();
  }
}
 const ::google::protobuf::BoolValue& ForwardAction::auto_host_rewrite() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.auto_host_rewrite)
  return has_auto_host_rewrite()
      ? *host_rewrite_specifier_.auto_host_rewrite_
      : ::google::protobuf::BoolValue::default_instance();
}
::google::protobuf::BoolValue* ForwardAction::mutable_auto_host_rewrite() {
  if (!has_auto_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_auto_host_rewrite();
    host_rewrite_specifier_.auto_host_rewrite_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.auto_host_rewrite)
  return host_rewrite_specifier_.auto_host_rewrite_;
}
::google::protobuf::BoolValue* ForwardAction::release_auto_host_rewrite() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.auto_host_rewrite)
  if (has_auto_host_rewrite()) {
    clear_has_host_rewrite_specifier();
    ::google::protobuf::BoolValue* temp = host_rewrite_specifier_.auto_host_rewrite_;
    host_rewrite_specifier_.auto_host_rewrite_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ForwardAction::set_allocated_auto_host_rewrite(::google::protobuf::BoolValue* auto_host_rewrite) {
  clear_host_rewrite_specifier();
  if (auto_host_rewrite) {
    if (static_cast< ::google::protobuf::BoolValue*>(auto_host_rewrite)->GetArena() != NULL) {
      ::google::protobuf::BoolValue* new_auto_host_rewrite = new ::google::protobuf::BoolValue;
      new_auto_host_rewrite->CopyFrom(*auto_host_rewrite);
      auto_host_rewrite = new_auto_host_rewrite;
    }
    set_has_auto_host_rewrite();
    host_rewrite_specifier_.auto_host_rewrite_ = auto_host_rewrite;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.auto_host_rewrite)
}

// .google.protobuf.Duration timeout = 7;
bool ForwardAction::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
void ForwardAction::clear_timeout() {
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) delete timeout_;
  timeout_ = NULL;
}
const ::google::protobuf::Duration& ForwardAction::timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.timeout)
  return timeout_ != NULL ? *timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* ForwardAction::mutable_timeout() {
  
  if (timeout_ == NULL) {
    timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.timeout)
  return timeout_;
}
::google::protobuf::Duration* ForwardAction::release_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
void ForwardAction::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  delete timeout_;
  if (timeout != NULL && timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_timeout = new ::google::protobuf::Duration;
    new_timeout->CopyFrom(*timeout);
    timeout = new_timeout;
  }
  timeout_ = timeout;
  if (timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.timeout)
}

// .envoy.api.v2.ForwardAction.RetryPolicy retry_policy = 8;
bool ForwardAction::has_retry_policy() const {
  return this != internal_default_instance() && retry_policy_ != NULL;
}
void ForwardAction::clear_retry_policy() {
  if (GetArenaNoVirtual() == NULL && retry_policy_ != NULL) delete retry_policy_;
  retry_policy_ = NULL;
}
const ::envoy::api::v2::ForwardAction_RetryPolicy& ForwardAction::retry_policy() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.retry_policy)
  return retry_policy_ != NULL ? *retry_policy_
                         : *::envoy::api::v2::ForwardAction_RetryPolicy::internal_default_instance();
}
::envoy::api::v2::ForwardAction_RetryPolicy* ForwardAction::mutable_retry_policy() {
  
  if (retry_policy_ == NULL) {
    retry_policy_ = new ::envoy::api::v2::ForwardAction_RetryPolicy;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.retry_policy)
  return retry_policy_;
}
::envoy::api::v2::ForwardAction_RetryPolicy* ForwardAction::release_retry_policy() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.retry_policy)
  
  ::envoy::api::v2::ForwardAction_RetryPolicy* temp = retry_policy_;
  retry_policy_ = NULL;
  return temp;
}
void ForwardAction::set_allocated_retry_policy(::envoy::api::v2::ForwardAction_RetryPolicy* retry_policy) {
  delete retry_policy_;
  retry_policy_ = retry_policy;
  if (retry_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.retry_policy)
}

// .envoy.api.v2.ForwardAction.RequestMirrorPolicy request_mirror_policy = 9;
bool ForwardAction::has_request_mirror_policy() const {
  return this != internal_default_instance() && request_mirror_policy_ != NULL;
}
void ForwardAction::clear_request_mirror_policy() {
  if (GetArenaNoVirtual() == NULL && request_mirror_policy_ != NULL) delete request_mirror_policy_;
  request_mirror_policy_ = NULL;
}
const ::envoy::api::v2::ForwardAction_RequestMirrorPolicy& ForwardAction::request_mirror_policy() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.request_mirror_policy)
  return request_mirror_policy_ != NULL ? *request_mirror_policy_
                         : *::envoy::api::v2::ForwardAction_RequestMirrorPolicy::internal_default_instance();
}
::envoy::api::v2::ForwardAction_RequestMirrorPolicy* ForwardAction::mutable_request_mirror_policy() {
  
  if (request_mirror_policy_ == NULL) {
    request_mirror_policy_ = new ::envoy::api::v2::ForwardAction_RequestMirrorPolicy;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.request_mirror_policy)
  return request_mirror_policy_;
}
::envoy::api::v2::ForwardAction_RequestMirrorPolicy* ForwardAction::release_request_mirror_policy() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.request_mirror_policy)
  
  ::envoy::api::v2::ForwardAction_RequestMirrorPolicy* temp = request_mirror_policy_;
  request_mirror_policy_ = NULL;
  return temp;
}
void ForwardAction::set_allocated_request_mirror_policy(::envoy::api::v2::ForwardAction_RequestMirrorPolicy* request_mirror_policy) {
  delete request_mirror_policy_;
  request_mirror_policy_ = request_mirror_policy;
  if (request_mirror_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.request_mirror_policy)
}

// .envoy.api.v2.RoutingPriority priority = 10;
void ForwardAction::clear_priority() {
  priority_ = 0;
}
::envoy::api::v2::RoutingPriority ForwardAction::priority() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.priority)
  return static_cast< ::envoy::api::v2::RoutingPriority >(priority_);
}
void ForwardAction::set_priority(::envoy::api::v2::RoutingPriority value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.priority)
}

// repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 11;
int ForwardAction::request_headers_to_add_size() const {
  return request_headers_to_add_.size();
}
void ForwardAction::clear_request_headers_to_add() {
  request_headers_to_add_.Clear();
}
const ::envoy::api::v2::HeaderValueOption& ForwardAction::request_headers_to_add(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.request_headers_to_add)
  return request_headers_to_add_.Get(index);
}
::envoy::api::v2::HeaderValueOption* ForwardAction::mutable_request_headers_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.request_headers_to_add)
  return request_headers_to_add_.Mutable(index);
}
::envoy::api::v2::HeaderValueOption* ForwardAction::add_request_headers_to_add() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.ForwardAction.request_headers_to_add)
  return request_headers_to_add_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
ForwardAction::mutable_request_headers_to_add() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.ForwardAction.request_headers_to_add)
  return &request_headers_to_add_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
ForwardAction::request_headers_to_add() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.ForwardAction.request_headers_to_add)
  return request_headers_to_add_;
}

// repeated .envoy.api.v2.RateLimit rate_limits = 12;
int ForwardAction::rate_limits_size() const {
  return rate_limits_.size();
}
void ForwardAction::clear_rate_limits() {
  rate_limits_.Clear();
}
const ::envoy::api::v2::RateLimit& ForwardAction::rate_limits(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.rate_limits)
  return rate_limits_.Get(index);
}
::envoy::api::v2::RateLimit* ForwardAction::mutable_rate_limits(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.rate_limits)
  return rate_limits_.Mutable(index);
}
::envoy::api::v2::RateLimit* ForwardAction::add_rate_limits() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.ForwardAction.rate_limits)
  return rate_limits_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >*
ForwardAction::mutable_rate_limits() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.ForwardAction.rate_limits)
  return &rate_limits_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >&
ForwardAction::rate_limits() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.ForwardAction.rate_limits)
  return rate_limits_;
}

// .google.protobuf.BoolValue include_vh_rate_limits = 13;
bool ForwardAction::has_include_vh_rate_limits() const {
  return this != internal_default_instance() && include_vh_rate_limits_ != NULL;
}
void ForwardAction::clear_include_vh_rate_limits() {
  if (GetArenaNoVirtual() == NULL && include_vh_rate_limits_ != NULL) delete include_vh_rate_limits_;
  include_vh_rate_limits_ = NULL;
}
const ::google::protobuf::BoolValue& ForwardAction::include_vh_rate_limits() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.include_vh_rate_limits)
  return include_vh_rate_limits_ != NULL ? *include_vh_rate_limits_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
::google::protobuf::BoolValue* ForwardAction::mutable_include_vh_rate_limits() {
  
  if (include_vh_rate_limits_ == NULL) {
    include_vh_rate_limits_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.include_vh_rate_limits)
  return include_vh_rate_limits_;
}
::google::protobuf::BoolValue* ForwardAction::release_include_vh_rate_limits() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.include_vh_rate_limits)
  
  ::google::protobuf::BoolValue* temp = include_vh_rate_limits_;
  include_vh_rate_limits_ = NULL;
  return temp;
}
void ForwardAction::set_allocated_include_vh_rate_limits(::google::protobuf::BoolValue* include_vh_rate_limits) {
  delete include_vh_rate_limits_;
  if (include_vh_rate_limits != NULL && include_vh_rate_limits->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_include_vh_rate_limits = new ::google::protobuf::BoolValue;
    new_include_vh_rate_limits->CopyFrom(*include_vh_rate_limits);
    include_vh_rate_limits = new_include_vh_rate_limits;
  }
  include_vh_rate_limits_ = include_vh_rate_limits;
  if (include_vh_rate_limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.include_vh_rate_limits)
}

// repeated .envoy.api.v2.ForwardAction.HashPolicy hash_policy = 14;
int ForwardAction::hash_policy_size() const {
  return hash_policy_.size();
}
void ForwardAction::clear_hash_policy() {
  hash_policy_.Clear();
}
const ::envoy::api::v2::ForwardAction_HashPolicy& ForwardAction::hash_policy(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.hash_policy)
  return hash_policy_.Get(index);
}
::envoy::api::v2::ForwardAction_HashPolicy* ForwardAction::mutable_hash_policy(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.hash_policy)
  return hash_policy_.Mutable(index);
}
::envoy::api::v2::ForwardAction_HashPolicy* ForwardAction::add_hash_policy() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.ForwardAction.hash_policy)
  return hash_policy_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ForwardAction_HashPolicy >*
ForwardAction::mutable_hash_policy() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.ForwardAction.hash_policy)
  return &hash_policy_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ForwardAction_HashPolicy >&
ForwardAction::hash_policy() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.ForwardAction.hash_policy)
  return hash_policy_;
}

bool ForwardAction::has_cluster_specifier() const {
  return cluster_specifier_case() != CLUSTER_SPECIFIER_NOT_SET;
}
void ForwardAction::clear_has_cluster_specifier() {
  _oneof_case_[0] = CLUSTER_SPECIFIER_NOT_SET;
}
bool ForwardAction::has_host_rewrite_specifier() const {
  return host_rewrite_specifier_case() != HOST_REWRITE_SPECIFIER_NOT_SET;
}
void ForwardAction::clear_has_host_rewrite_specifier() {
  _oneof_case_[1] = HOST_REWRITE_SPECIFIER_NOT_SET;
}
ForwardAction::ClusterSpecifierCase ForwardAction::cluster_specifier_case() const {
  return ForwardAction::ClusterSpecifierCase(_oneof_case_[0]);
}
ForwardAction::HostRewriteSpecifierCase ForwardAction::host_rewrite_specifier_case() const {
  return ForwardAction::HostRewriteSpecifierCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedirectAction::kHostRedirectFieldNumber;
const int RedirectAction::kPathRedirectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedirectAction::RedirectAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RedirectAction)
}
RedirectAction::RedirectAction(const RedirectAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host_redirect().size() > 0) {
    host_redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_redirect_);
  }
  path_redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path_redirect().size() > 0) {
    path_redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_redirect_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RedirectAction)
}

void RedirectAction::SharedCtor() {
  host_redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_redirect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RedirectAction::~RedirectAction() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RedirectAction)
  SharedDtor();
}

void RedirectAction::SharedDtor() {
  host_redirect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_redirect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RedirectAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedirectAction::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[8].descriptor;
}

const RedirectAction& RedirectAction::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RedirectAction* RedirectAction::New(::google::protobuf::Arena* arena) const {
  RedirectAction* n = new RedirectAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedirectAction::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RedirectAction)
  host_redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RedirectAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RedirectAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host_redirect = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_redirect()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_redirect().data(), this->host_redirect().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RedirectAction.host_redirect"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path_redirect = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_redirect()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path_redirect().data(), this->path_redirect().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RedirectAction.path_redirect"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RedirectAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RedirectAction)
  return false;
#undef DO_
}

void RedirectAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RedirectAction)
  // string host_redirect = 1;
  if (this->host_redirect().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_redirect().data(), this->host_redirect().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RedirectAction.host_redirect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_redirect(), output);
  }

  // string path_redirect = 2;
  if (this->path_redirect().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path_redirect().data(), this->path_redirect().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RedirectAction.path_redirect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path_redirect(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RedirectAction)
}

::google::protobuf::uint8* RedirectAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RedirectAction)
  // string host_redirect = 1;
  if (this->host_redirect().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_redirect().data(), this->host_redirect().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RedirectAction.host_redirect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host_redirect(), target);
  }

  // string path_redirect = 2;
  if (this->path_redirect().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path_redirect().data(), this->path_redirect().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RedirectAction.path_redirect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path_redirect(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RedirectAction)
  return target;
}

size_t RedirectAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RedirectAction)
  size_t total_size = 0;

  // string host_redirect = 1;
  if (this->host_redirect().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_redirect());
  }

  // string path_redirect = 2;
  if (this->path_redirect().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path_redirect());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedirectAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RedirectAction)
  GOOGLE_DCHECK_NE(&from, this);
  const RedirectAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedirectAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RedirectAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RedirectAction)
    MergeFrom(*source);
  }
}

void RedirectAction::MergeFrom(const RedirectAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RedirectAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.host_redirect().size() > 0) {

    host_redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_redirect_);
  }
  if (from.path_redirect().size() > 0) {

    path_redirect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_redirect_);
  }
}

void RedirectAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RedirectAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectAction::CopyFrom(const RedirectAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RedirectAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectAction::IsInitialized() const {
  return true;
}

void RedirectAction::Swap(RedirectAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedirectAction::InternalSwap(RedirectAction* other) {
  host_redirect_.Swap(&other->host_redirect_);
  path_redirect_.Swap(&other->path_redirect_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedirectAction::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedirectAction

// string host_redirect = 1;
void RedirectAction::clear_host_redirect() {
  host_redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RedirectAction::host_redirect() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RedirectAction.host_redirect)
  return host_redirect_.GetNoArena();
}
void RedirectAction::set_host_redirect(const ::std::string& value) {
  
  host_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RedirectAction.host_redirect)
}
#if LANG_CXX11
void RedirectAction::set_host_redirect(::std::string&& value) {
  
  host_redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RedirectAction.host_redirect)
}
#endif
void RedirectAction::set_host_redirect(const char* value) {
  
  host_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RedirectAction.host_redirect)
}
void RedirectAction::set_host_redirect(const char* value, size_t size) {
  
  host_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RedirectAction.host_redirect)
}
::std::string* RedirectAction::mutable_host_redirect() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RedirectAction.host_redirect)
  return host_redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedirectAction::release_host_redirect() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RedirectAction.host_redirect)
  
  return host_redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedirectAction::set_allocated_host_redirect(::std::string* host_redirect) {
  if (host_redirect != NULL) {
    
  } else {
    
  }
  host_redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_redirect);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RedirectAction.host_redirect)
}

// string path_redirect = 2;
void RedirectAction::clear_path_redirect() {
  path_redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RedirectAction::path_redirect() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RedirectAction.path_redirect)
  return path_redirect_.GetNoArena();
}
void RedirectAction::set_path_redirect(const ::std::string& value) {
  
  path_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RedirectAction.path_redirect)
}
#if LANG_CXX11
void RedirectAction::set_path_redirect(::std::string&& value) {
  
  path_redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RedirectAction.path_redirect)
}
#endif
void RedirectAction::set_path_redirect(const char* value) {
  
  path_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RedirectAction.path_redirect)
}
void RedirectAction::set_path_redirect(const char* value, size_t size) {
  
  path_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RedirectAction.path_redirect)
}
::std::string* RedirectAction::mutable_path_redirect() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RedirectAction.path_redirect)
  return path_redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedirectAction::release_path_redirect() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RedirectAction.path_redirect)
  
  return path_redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedirectAction::set_allocated_path_redirect(::std::string* path_redirect) {
  if (path_redirect != NULL) {
    
  } else {
    
  }
  path_redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_redirect);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RedirectAction.path_redirect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Route::kMatchFieldNumber;
const int Route::kForwardFieldNumber;
const int Route::kRedirectFieldNumber;
const int Route::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Route::Route()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Route)
}
Route::Route(const Route& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match()) {
    match_ = new ::envoy::api::v2::RouteMatch(*from.match_);
  } else {
    match_ = NULL;
  }
  if (from.has_metadata()) {
    metadata_ = new ::envoy::api::v2::Metadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  clear_has_action();
  switch (from.action_case()) {
    case kForward: {
      mutable_forward()->::envoy::api::v2::ForwardAction::MergeFrom(from.forward());
      break;
    }
    case kRedirect: {
      mutable_redirect()->::envoy::api::v2::RedirectAction::MergeFrom(from.redirect());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Route)
}

void Route::SharedCtor() {
  ::memset(&match_, 0, reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&match_) + sizeof(metadata_));
  clear_has_action();
  _cached_size_ = 0;
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Route)
  SharedDtor();
}

void Route::SharedDtor() {
  if (this != internal_default_instance()) {
    delete match_;
  }
  if (this != internal_default_instance()) {
    delete metadata_;
  }
  if (has_action()) {
    clear_action();
  }
}

void Route::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Route::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[9].descriptor;
}

const Route& Route::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

Route* Route::New(::google::protobuf::Arena* arena) const {
  Route* n = new Route;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Route::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.Route)
  switch (action_case()) {
    case kForward: {
      delete action_.forward_;
      break;
    }
    case kRedirect: {
      delete action_.redirect_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Route)
  if (GetArenaNoVirtual() == NULL && match_ != NULL) {
    delete match_;
  }
  match_ = NULL;
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  clear_action();
}

bool Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Route)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.RouteMatch match = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.ForwardAction forward = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RedirectAction redirect = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redirect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Metadata metadata = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Route)
  return false;
#undef DO_
}

void Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Route)
  // .envoy.api.v2.RouteMatch match = 1;
  if (this->has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->match_, output);
  }

  // .envoy.api.v2.ForwardAction forward = 2;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *action_.forward_, output);
  }

  // .envoy.api.v2.RedirectAction redirect = 3;
  if (has_redirect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *action_.redirect_, output);
  }

  // .envoy.api.v2.Metadata metadata = 4;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->metadata_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Route)
}

::google::protobuf::uint8* Route::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Route)
  // .envoy.api.v2.RouteMatch match = 1;
  if (this->has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->match_, false, target);
  }

  // .envoy.api.v2.ForwardAction forward = 2;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *action_.forward_, false, target);
  }

  // .envoy.api.v2.RedirectAction redirect = 3;
  if (has_redirect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *action_.redirect_, false, target);
  }

  // .envoy.api.v2.Metadata metadata = 4;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->metadata_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Route)
  size_t total_size = 0;

  // .envoy.api.v2.RouteMatch match = 1;
  if (this->has_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->match_);
  }

  // .envoy.api.v2.Metadata metadata = 4;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  switch (action_case()) {
    // .envoy.api.v2.ForwardAction forward = 2;
    case kForward: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.forward_);
      break;
    }
    // .envoy.api.v2.RedirectAction redirect = 3;
    case kRedirect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.redirect_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Route::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const Route* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Route>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Route)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Route)
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match()) {
    mutable_match()->::envoy::api::v2::RouteMatch::MergeFrom(from.match());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::envoy::api::v2::Metadata::MergeFrom(from.metadata());
  }
  switch (from.action_case()) {
    case kForward: {
      mutable_forward()->::envoy::api::v2::ForwardAction::MergeFrom(from.forward());
      break;
    }
    case kRedirect: {
      mutable_redirect()->::envoy::api::v2::RedirectAction::MergeFrom(from.redirect());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void Route::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::Swap(Route* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Route::InternalSwap(Route* other) {
  std::swap(match_, other->match_);
  std::swap(metadata_, other->metadata_);
  std::swap(action_, other->action_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Route::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Route

// .envoy.api.v2.RouteMatch match = 1;
bool Route::has_match() const {
  return this != internal_default_instance() && match_ != NULL;
}
void Route::clear_match() {
  if (GetArenaNoVirtual() == NULL && match_ != NULL) delete match_;
  match_ = NULL;
}
const ::envoy::api::v2::RouteMatch& Route::match() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Route.match)
  return match_ != NULL ? *match_
                         : *::envoy::api::v2::RouteMatch::internal_default_instance();
}
::envoy::api::v2::RouteMatch* Route::mutable_match() {
  
  if (match_ == NULL) {
    match_ = new ::envoy::api::v2::RouteMatch;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Route.match)
  return match_;
}
::envoy::api::v2::RouteMatch* Route::release_match() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Route.match)
  
  ::envoy::api::v2::RouteMatch* temp = match_;
  match_ = NULL;
  return temp;
}
void Route::set_allocated_match(::envoy::api::v2::RouteMatch* match) {
  delete match_;
  match_ = match;
  if (match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Route.match)
}

// .envoy.api.v2.ForwardAction forward = 2;
bool Route::has_forward() const {
  return action_case() == kForward;
}
void Route::set_has_forward() {
  _oneof_case_[0] = kForward;
}
void Route::clear_forward() {
  if (has_forward()) {
    delete action_.forward_;
    clear_has_action();
  }
}
 const ::envoy::api::v2::ForwardAction& Route::forward() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Route.forward)
  return has_forward()
      ? *action_.forward_
      : ::envoy::api::v2::ForwardAction::default_instance();
}
::envoy::api::v2::ForwardAction* Route::mutable_forward() {
  if (!has_forward()) {
    clear_action();
    set_has_forward();
    action_.forward_ = new ::envoy::api::v2::ForwardAction;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Route.forward)
  return action_.forward_;
}
::envoy::api::v2::ForwardAction* Route::release_forward() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Route.forward)
  if (has_forward()) {
    clear_has_action();
    ::envoy::api::v2::ForwardAction* temp = action_.forward_;
    action_.forward_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Route::set_allocated_forward(::envoy::api::v2::ForwardAction* forward) {
  clear_action();
  if (forward) {
    set_has_forward();
    action_.forward_ = forward;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Route.forward)
}

// .envoy.api.v2.RedirectAction redirect = 3;
bool Route::has_redirect() const {
  return action_case() == kRedirect;
}
void Route::set_has_redirect() {
  _oneof_case_[0] = kRedirect;
}
void Route::clear_redirect() {
  if (has_redirect()) {
    delete action_.redirect_;
    clear_has_action();
  }
}
 const ::envoy::api::v2::RedirectAction& Route::redirect() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Route.redirect)
  return has_redirect()
      ? *action_.redirect_
      : ::envoy::api::v2::RedirectAction::default_instance();
}
::envoy::api::v2::RedirectAction* Route::mutable_redirect() {
  if (!has_redirect()) {
    clear_action();
    set_has_redirect();
    action_.redirect_ = new ::envoy::api::v2::RedirectAction;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Route.redirect)
  return action_.redirect_;
}
::envoy::api::v2::RedirectAction* Route::release_redirect() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Route.redirect)
  if (has_redirect()) {
    clear_has_action();
    ::envoy::api::v2::RedirectAction* temp = action_.redirect_;
    action_.redirect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Route::set_allocated_redirect(::envoy::api::v2::RedirectAction* redirect) {
  clear_action();
  if (redirect) {
    set_has_redirect();
    action_.redirect_ = redirect;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Route.redirect)
}

// .envoy.api.v2.Metadata metadata = 4;
bool Route::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
void Route::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::envoy::api::v2::Metadata& Route::metadata() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Route.metadata)
  return metadata_ != NULL ? *metadata_
                         : *::envoy::api::v2::Metadata::internal_default_instance();
}
::envoy::api::v2::Metadata* Route::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::envoy::api::v2::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Route.metadata)
  return metadata_;
}
::envoy::api::v2::Metadata* Route::release_metadata() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Route.metadata)
  
  ::envoy::api::v2::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Route::set_allocated_metadata(::envoy::api::v2::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Route.metadata)
}

bool Route::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
void Route::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
Route::ActionCase Route::action_case() const {
  return Route::ActionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VirtualCluster::kPatternFieldNumber;
const int VirtualCluster::kNameFieldNumber;
const int VirtualCluster::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualCluster::VirtualCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.VirtualCluster)
}
VirtualCluster::VirtualCluster(const VirtualCluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pattern().size() > 0) {
    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.method().size() > 0) {
    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.VirtualCluster)
}

void VirtualCluster::SharedCtor() {
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

VirtualCluster::~VirtualCluster() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.VirtualCluster)
  SharedDtor();
}

void VirtualCluster::SharedDtor() {
  pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VirtualCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualCluster::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[10].descriptor;
}

const VirtualCluster& VirtualCluster::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

VirtualCluster* VirtualCluster::New(::google::protobuf::Arena* arena) const {
  VirtualCluster* n = new VirtualCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.VirtualCluster)
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VirtualCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.VirtualCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pattern = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.VirtualCluster.pattern"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.VirtualCluster.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string method = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.VirtualCluster.method"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.VirtualCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.VirtualCluster)
  return false;
#undef DO_
}

void VirtualCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.VirtualCluster)
  // string pattern = 1;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualCluster.pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pattern(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualCluster.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string method = 3;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualCluster.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.VirtualCluster)
}

::google::protobuf::uint8* VirtualCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.VirtualCluster)
  // string pattern = 1;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualCluster.pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pattern(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualCluster.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string method = 3;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualCluster.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.VirtualCluster)
  return target;
}

size_t VirtualCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.VirtualCluster)
  size_t total_size = 0;

  // string pattern = 1;
  if (this->pattern().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pattern());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string method = 3;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.VirtualCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.VirtualCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.VirtualCluster)
    MergeFrom(*source);
  }
}

void VirtualCluster::MergeFrom(const VirtualCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.VirtualCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.pattern().size() > 0) {

    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
}

void VirtualCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.VirtualCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualCluster::CopyFrom(const VirtualCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.VirtualCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualCluster::IsInitialized() const {
  return true;
}

void VirtualCluster::Swap(VirtualCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualCluster::InternalSwap(VirtualCluster* other) {
  pattern_.Swap(&other->pattern_);
  name_.Swap(&other->name_);
  method_.Swap(&other->method_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualCluster::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VirtualCluster

// string pattern = 1;
void VirtualCluster::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VirtualCluster::pattern() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualCluster.pattern)
  return pattern_.GetNoArena();
}
void VirtualCluster::set_pattern(const ::std::string& value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualCluster.pattern)
}
#if LANG_CXX11
void VirtualCluster::set_pattern(::std::string&& value) {
  
  pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.VirtualCluster.pattern)
}
#endif
void VirtualCluster::set_pattern(const char* value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualCluster.pattern)
}
void VirtualCluster::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualCluster.pattern)
}
::std::string* VirtualCluster::mutable_pattern() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualCluster.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VirtualCluster::release_pattern() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.VirtualCluster.pattern)
  
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VirtualCluster::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.VirtualCluster.pattern)
}

// string name = 2;
void VirtualCluster::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VirtualCluster::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualCluster.name)
  return name_.GetNoArena();
}
void VirtualCluster::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualCluster.name)
}
#if LANG_CXX11
void VirtualCluster::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.VirtualCluster.name)
}
#endif
void VirtualCluster::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualCluster.name)
}
void VirtualCluster::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualCluster.name)
}
::std::string* VirtualCluster::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualCluster.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VirtualCluster::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.VirtualCluster.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VirtualCluster::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.VirtualCluster.name)
}

// string method = 3;
void VirtualCluster::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VirtualCluster::method() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualCluster.method)
  return method_.GetNoArena();
}
void VirtualCluster::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualCluster.method)
}
#if LANG_CXX11
void VirtualCluster::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.VirtualCluster.method)
}
#endif
void VirtualCluster::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualCluster.method)
}
void VirtualCluster::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualCluster.method)
}
::std::string* VirtualCluster::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualCluster.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VirtualCluster::release_method() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.VirtualCluster.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VirtualCluster::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.VirtualCluster.method)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimit_RateLimitAction_RequestHeaders::kHeaderNameFieldNumber;
const int RateLimit_RateLimitAction_RequestHeaders::kDescriptorKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit_RateLimitAction_RequestHeaders::RateLimit_RateLimitAction_RequestHeaders()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
}
RateLimit_RateLimitAction_RequestHeaders::RateLimit_RateLimitAction_RequestHeaders(const RateLimit_RateLimitAction_RequestHeaders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.header_name().size() > 0) {
    header_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_name_);
  }
  descriptor_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.descriptor_key().size() > 0) {
    descriptor_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_key_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
}

void RateLimit_RateLimitAction_RequestHeaders::SharedCtor() {
  header_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RateLimit_RateLimitAction_RequestHeaders::~RateLimit_RateLimitAction_RequestHeaders() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
  SharedDtor();
}

void RateLimit_RateLimitAction_RequestHeaders::SharedDtor() {
  header_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RateLimit_RateLimitAction_RequestHeaders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit_RateLimitAction_RequestHeaders::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[11].descriptor;
}

const RateLimit_RateLimitAction_RequestHeaders& RateLimit_RateLimitAction_RequestHeaders::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit_RateLimitAction_RequestHeaders* RateLimit_RateLimitAction_RequestHeaders::New(::google::protobuf::Arena* arena) const {
  RateLimit_RateLimitAction_RequestHeaders* n = new RateLimit_RateLimitAction_RequestHeaders;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit_RateLimitAction_RequestHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
  header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptor_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RateLimit_RateLimitAction_RequestHeaders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string header_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->header_name().data(), this->header_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string descriptor_key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptor_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->descriptor_key().data(), this->descriptor_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
  return false;
#undef DO_
}

void RateLimit_RateLimitAction_RequestHeaders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
  // string header_name = 1;
  if (this->header_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->header_name().data(), this->header_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->header_name(), output);
  }

  // string descriptor_key = 2;
  if (this->descriptor_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_key().data(), this->descriptor_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->descriptor_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
}

::google::protobuf::uint8* RateLimit_RateLimitAction_RequestHeaders::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
  // string header_name = 1;
  if (this->header_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->header_name().data(), this->header_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->header_name(), target);
  }

  // string descriptor_key = 2;
  if (this->descriptor_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_key().data(), this->descriptor_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->descriptor_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
  return target;
}

size_t RateLimit_RateLimitAction_RequestHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
  size_t total_size = 0;

  // string header_name = 1;
  if (this->header_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->header_name());
  }

  // string descriptor_key = 2;
  if (this->descriptor_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descriptor_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit_RateLimitAction_RequestHeaders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit_RateLimitAction_RequestHeaders* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit_RateLimitAction_RequestHeaders>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
    MergeFrom(*source);
  }
}

void RateLimit_RateLimitAction_RequestHeaders::MergeFrom(const RateLimit_RateLimitAction_RequestHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.header_name().size() > 0) {

    header_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_name_);
  }
  if (from.descriptor_key().size() > 0) {

    descriptor_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_key_);
  }
}

void RateLimit_RateLimitAction_RequestHeaders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit_RateLimitAction_RequestHeaders::CopyFrom(const RateLimit_RateLimitAction_RequestHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit_RateLimitAction_RequestHeaders::IsInitialized() const {
  return true;
}

void RateLimit_RateLimitAction_RequestHeaders::Swap(RateLimit_RateLimitAction_RequestHeaders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit_RateLimitAction_RequestHeaders::InternalSwap(RateLimit_RateLimitAction_RequestHeaders* other) {
  header_name_.Swap(&other->header_name_);
  descriptor_key_.Swap(&other->descriptor_key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit_RateLimitAction_RequestHeaders::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit_RateLimitAction_RequestHeaders

// string header_name = 1;
void RateLimit_RateLimitAction_RequestHeaders::clear_header_name() {
  header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimit_RateLimitAction_RequestHeaders::header_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
  return header_name_.GetNoArena();
}
void RateLimit_RateLimitAction_RequestHeaders::set_header_name(const ::std::string& value) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
}
#if LANG_CXX11
void RateLimit_RateLimitAction_RequestHeaders::set_header_name(::std::string&& value) {
  
  header_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
}
#endif
void RateLimit_RateLimitAction_RequestHeaders::set_header_name(const char* value) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
}
void RateLimit_RateLimitAction_RequestHeaders::set_header_name(const char* value, size_t size) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
}
::std::string* RateLimit_RateLimitAction_RequestHeaders::mutable_header_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
  return header_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit_RateLimitAction_RequestHeaders::release_header_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
  
  return header_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimit_RateLimitAction_RequestHeaders::set_allocated_header_name(::std::string* header_name) {
  if (header_name != NULL) {
    
  } else {
    
  }
  header_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
}

// string descriptor_key = 2;
void RateLimit_RateLimitAction_RequestHeaders::clear_descriptor_key() {
  descriptor_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimit_RateLimitAction_RequestHeaders::descriptor_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
  return descriptor_key_.GetNoArena();
}
void RateLimit_RateLimitAction_RequestHeaders::set_descriptor_key(const ::std::string& value) {
  
  descriptor_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
}
#if LANG_CXX11
void RateLimit_RateLimitAction_RequestHeaders::set_descriptor_key(::std::string&& value) {
  
  descriptor_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
}
#endif
void RateLimit_RateLimitAction_RequestHeaders::set_descriptor_key(const char* value) {
  
  descriptor_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
}
void RateLimit_RateLimitAction_RequestHeaders::set_descriptor_key(const char* value, size_t size) {
  
  descriptor_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
}
::std::string* RateLimit_RateLimitAction_RequestHeaders::mutable_descriptor_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
  return descriptor_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit_RateLimitAction_RequestHeaders::release_descriptor_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
  
  return descriptor_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimit_RateLimitAction_RequestHeaders::set_allocated_descriptor_key(::std::string* descriptor_key) {
  if (descriptor_key != NULL) {
    
  } else {
    
  }
  descriptor_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimit_RateLimitAction_HeaderValueMatch::kDescriptorValueFieldNumber;
const int RateLimit_RateLimitAction_HeaderValueMatch::kExpectMatchFieldNumber;
const int RateLimit_RateLimitAction_HeaderValueMatch::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit_RateLimitAction_HeaderValueMatch::RateLimit_RateLimitAction_HeaderValueMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
}
RateLimit_RateLimitAction_HeaderValueMatch::RateLimit_RateLimitAction_HeaderValueMatch(const RateLimit_RateLimitAction_HeaderValueMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      headers_(from.headers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descriptor_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.descriptor_value().size() > 0) {
    descriptor_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_value_);
  }
  if (from.has_expect_match()) {
    expect_match_ = new ::google::protobuf::BoolValue(*from.expect_match_);
  } else {
    expect_match_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
}

void RateLimit_RateLimitAction_HeaderValueMatch::SharedCtor() {
  descriptor_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expect_match_ = NULL;
  _cached_size_ = 0;
}

RateLimit_RateLimitAction_HeaderValueMatch::~RateLimit_RateLimitAction_HeaderValueMatch() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
  SharedDtor();
}

void RateLimit_RateLimitAction_HeaderValueMatch::SharedDtor() {
  descriptor_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete expect_match_;
  }
}

void RateLimit_RateLimitAction_HeaderValueMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit_RateLimitAction_HeaderValueMatch::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[12].descriptor;
}

const RateLimit_RateLimitAction_HeaderValueMatch& RateLimit_RateLimitAction_HeaderValueMatch::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit_RateLimitAction_HeaderValueMatch* RateLimit_RateLimitAction_HeaderValueMatch::New(::google::protobuf::Arena* arena) const {
  RateLimit_RateLimitAction_HeaderValueMatch* n = new RateLimit_RateLimitAction_HeaderValueMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit_RateLimitAction_HeaderValueMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
  headers_.Clear();
  descriptor_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && expect_match_ != NULL) {
    delete expect_match_;
  }
  expect_match_ = NULL;
}

bool RateLimit_RateLimitAction_HeaderValueMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string descriptor_value = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptor_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->descriptor_value().data(), this->descriptor_value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue expect_match = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expect_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HeaderMatcher headers = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
  return false;
#undef DO_
}

void RateLimit_RateLimitAction_HeaderValueMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
  // string descriptor_value = 1;
  if (this->descriptor_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_value().data(), this->descriptor_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->descriptor_value(), output);
  }

  // .google.protobuf.BoolValue expect_match = 2;
  if (this->has_expect_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->expect_match_, output);
  }

  // repeated .envoy.api.v2.HeaderMatcher headers = 3;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->headers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
}

::google::protobuf::uint8* RateLimit_RateLimitAction_HeaderValueMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
  // string descriptor_value = 1;
  if (this->descriptor_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptor_value().data(), this->descriptor_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->descriptor_value(), target);
  }

  // .google.protobuf.BoolValue expect_match = 2;
  if (this->has_expect_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->expect_match_, false, target);
  }

  // repeated .envoy.api.v2.HeaderMatcher headers = 3;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->headers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
  return target;
}

size_t RateLimit_RateLimitAction_HeaderValueMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
  size_t total_size = 0;

  // repeated .envoy.api.v2.HeaderMatcher headers = 3;
  {
    unsigned int count = this->headers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headers(i));
    }
  }

  // string descriptor_value = 1;
  if (this->descriptor_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descriptor_value());
  }

  // .google.protobuf.BoolValue expect_match = 2;
  if (this->has_expect_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->expect_match_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit_RateLimitAction_HeaderValueMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit_RateLimitAction_HeaderValueMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit_RateLimitAction_HeaderValueMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
    MergeFrom(*source);
  }
}

void RateLimit_RateLimitAction_HeaderValueMatch::MergeFrom(const RateLimit_RateLimitAction_HeaderValueMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  if (from.descriptor_value().size() > 0) {

    descriptor_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptor_value_);
  }
  if (from.has_expect_match()) {
    mutable_expect_match()->::google::protobuf::BoolValue::MergeFrom(from.expect_match());
  }
}

void RateLimit_RateLimitAction_HeaderValueMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit_RateLimitAction_HeaderValueMatch::CopyFrom(const RateLimit_RateLimitAction_HeaderValueMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit_RateLimitAction_HeaderValueMatch::IsInitialized() const {
  return true;
}

void RateLimit_RateLimitAction_HeaderValueMatch::Swap(RateLimit_RateLimitAction_HeaderValueMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit_RateLimitAction_HeaderValueMatch::InternalSwap(RateLimit_RateLimitAction_HeaderValueMatch* other) {
  headers_.UnsafeArenaSwap(&other->headers_);
  descriptor_value_.Swap(&other->descriptor_value_);
  std::swap(expect_match_, other->expect_match_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit_RateLimitAction_HeaderValueMatch::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit_RateLimitAction_HeaderValueMatch

// string descriptor_value = 1;
void RateLimit_RateLimitAction_HeaderValueMatch::clear_descriptor_value() {
  descriptor_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimit_RateLimitAction_HeaderValueMatch::descriptor_value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
  return descriptor_value_.GetNoArena();
}
void RateLimit_RateLimitAction_HeaderValueMatch::set_descriptor_value(const ::std::string& value) {
  
  descriptor_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
}
#if LANG_CXX11
void RateLimit_RateLimitAction_HeaderValueMatch::set_descriptor_value(::std::string&& value) {
  
  descriptor_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
}
#endif
void RateLimit_RateLimitAction_HeaderValueMatch::set_descriptor_value(const char* value) {
  
  descriptor_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
}
void RateLimit_RateLimitAction_HeaderValueMatch::set_descriptor_value(const char* value, size_t size) {
  
  descriptor_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
}
::std::string* RateLimit_RateLimitAction_HeaderValueMatch::mutable_descriptor_value() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
  return descriptor_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit_RateLimitAction_HeaderValueMatch::release_descriptor_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
  
  return descriptor_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimit_RateLimitAction_HeaderValueMatch::set_allocated_descriptor_value(::std::string* descriptor_value) {
  if (descriptor_value != NULL) {
    
  } else {
    
  }
  descriptor_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_value);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
}

// .google.protobuf.BoolValue expect_match = 2;
bool RateLimit_RateLimitAction_HeaderValueMatch::has_expect_match() const {
  return this != internal_default_instance() && expect_match_ != NULL;
}
void RateLimit_RateLimitAction_HeaderValueMatch::clear_expect_match() {
  if (GetArenaNoVirtual() == NULL && expect_match_ != NULL) delete expect_match_;
  expect_match_ = NULL;
}
const ::google::protobuf::BoolValue& RateLimit_RateLimitAction_HeaderValueMatch::expect_match() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.expect_match)
  return expect_match_ != NULL ? *expect_match_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
::google::protobuf::BoolValue* RateLimit_RateLimitAction_HeaderValueMatch::mutable_expect_match() {
  
  if (expect_match_ == NULL) {
    expect_match_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.expect_match)
  return expect_match_;
}
::google::protobuf::BoolValue* RateLimit_RateLimitAction_HeaderValueMatch::release_expect_match() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.expect_match)
  
  ::google::protobuf::BoolValue* temp = expect_match_;
  expect_match_ = NULL;
  return temp;
}
void RateLimit_RateLimitAction_HeaderValueMatch::set_allocated_expect_match(::google::protobuf::BoolValue* expect_match) {
  delete expect_match_;
  if (expect_match != NULL && expect_match->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_expect_match = new ::google::protobuf::BoolValue;
    new_expect_match->CopyFrom(*expect_match);
    expect_match = new_expect_match;
  }
  expect_match_ = expect_match;
  if (expect_match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.expect_match)
}

// repeated .envoy.api.v2.HeaderMatcher headers = 3;
int RateLimit_RateLimitAction_HeaderValueMatch::headers_size() const {
  return headers_.size();
}
void RateLimit_RateLimitAction_HeaderValueMatch::clear_headers() {
  headers_.Clear();
}
const ::envoy::api::v2::HeaderMatcher& RateLimit_RateLimitAction_HeaderValueMatch::headers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.headers)
  return headers_.Get(index);
}
::envoy::api::v2::HeaderMatcher* RateLimit_RateLimitAction_HeaderValueMatch::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.headers)
  return headers_.Mutable(index);
}
::envoy::api::v2::HeaderMatcher* RateLimit_RateLimitAction_HeaderValueMatch::add_headers() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >*
RateLimit_RateLimitAction_HeaderValueMatch::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >&
RateLimit_RateLimitAction_HeaderValueMatch::headers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.headers)
  return headers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimit_RateLimitAction::kTypeFieldNumber;
const int RateLimit_RateLimitAction::kRequestHeadersFieldNumber;
const int RateLimit_RateLimitAction::kGenericKeyFieldNumber;
const int RateLimit_RateLimitAction::kHeaderValueMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit_RateLimitAction::RateLimit_RateLimitAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimit.RateLimitAction)
}
RateLimit_RateLimitAction::RateLimit_RateLimitAction(const RateLimit_RateLimitAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_action_details();
  switch (from.action_details_case()) {
    case kRequestHeaders: {
      mutable_request_headers()->::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders::MergeFrom(from.request_headers());
      break;
    }
    case kGenericKey: {
      set_generic_key(from.generic_key());
      break;
    }
    case kHeaderValueMatch: {
      mutable_header_value_match()->::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch::MergeFrom(from.header_value_match());
      break;
    }
    case ACTION_DETAILS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimit.RateLimitAction)
}

void RateLimit_RateLimitAction::SharedCtor() {
  type_ = 0;
  clear_has_action_details();
  _cached_size_ = 0;
}

RateLimit_RateLimitAction::~RateLimit_RateLimitAction() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimit.RateLimitAction)
  SharedDtor();
}

void RateLimit_RateLimitAction::SharedDtor() {
  if (has_action_details()) {
    clear_action_details();
  }
}

void RateLimit_RateLimitAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit_RateLimitAction::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[13].descriptor;
}

const RateLimit_RateLimitAction& RateLimit_RateLimitAction::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit_RateLimitAction* RateLimit_RateLimitAction::New(::google::protobuf::Arena* arena) const {
  RateLimit_RateLimitAction* n = new RateLimit_RateLimitAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit_RateLimitAction::clear_action_details() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.RateLimit.RateLimitAction)
  switch (action_details_case()) {
    case kRequestHeaders: {
      delete action_details_.request_headers_;
      break;
    }
    case kGenericKey: {
      action_details_.generic_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kHeaderValueMatch: {
      delete action_details_.header_value_match_;
      break;
    }
    case ACTION_DETAILS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_DETAILS_NOT_SET;
}


void RateLimit_RateLimitAction::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimit.RateLimitAction)
  type_ = 0;
  clear_action_details();
}

bool RateLimit_RateLimitAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimit.RateLimitAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.RateLimit.RateLimitAction.ActionType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::envoy::api::v2::RateLimit_RateLimitAction_ActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders request_headers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string generic_key = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generic_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->generic_key().data(), this->generic_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RateLimit.RateLimitAction.generic_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch header_value_match = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_value_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimit.RateLimitAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimit.RateLimitAction)
  return false;
#undef DO_
}

void RateLimit_RateLimitAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimit.RateLimitAction)
  // .envoy.api.v2.RateLimit.RateLimitAction.ActionType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders request_headers = 2;
  if (has_request_headers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *action_details_.request_headers_, output);
  }

  // string generic_key = 3;
  if (has_generic_key()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->generic_key().data(), this->generic_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.RateLimitAction.generic_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->generic_key(), output);
  }

  // .envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch header_value_match = 4;
  if (has_header_value_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *action_details_.header_value_match_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimit.RateLimitAction)
}

::google::protobuf::uint8* RateLimit_RateLimitAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimit.RateLimitAction)
  // .envoy.api.v2.RateLimit.RateLimitAction.ActionType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders request_headers = 2;
  if (has_request_headers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *action_details_.request_headers_, false, target);
  }

  // string generic_key = 3;
  if (has_generic_key()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->generic_key().data(), this->generic_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.RateLimitAction.generic_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->generic_key(), target);
  }

  // .envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch header_value_match = 4;
  if (has_header_value_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *action_details_.header_value_match_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimit.RateLimitAction)
  return target;
}

size_t RateLimit_RateLimitAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimit.RateLimitAction)
  size_t total_size = 0;

  // .envoy.api.v2.RateLimit.RateLimitAction.ActionType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (action_details_case()) {
    // .envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders request_headers = 2;
    case kRequestHeaders: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_details_.request_headers_);
      break;
    }
    // string generic_key = 3;
    case kGenericKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->generic_key());
      break;
    }
    // .envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch header_value_match = 4;
    case kHeaderValueMatch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_details_.header_value_match_);
      break;
    }
    case ACTION_DETAILS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit_RateLimitAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimit.RateLimitAction)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit_RateLimitAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit_RateLimitAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimit.RateLimitAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimit.RateLimitAction)
    MergeFrom(*source);
  }
}

void RateLimit_RateLimitAction::MergeFrom(const RateLimit_RateLimitAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimit.RateLimitAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.action_details_case()) {
    case kRequestHeaders: {
      mutable_request_headers()->::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders::MergeFrom(from.request_headers());
      break;
    }
    case kGenericKey: {
      set_generic_key(from.generic_key());
      break;
    }
    case kHeaderValueMatch: {
      mutable_header_value_match()->::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch::MergeFrom(from.header_value_match());
      break;
    }
    case ACTION_DETAILS_NOT_SET: {
      break;
    }
  }
}

void RateLimit_RateLimitAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimit.RateLimitAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit_RateLimitAction::CopyFrom(const RateLimit_RateLimitAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimit.RateLimitAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit_RateLimitAction::IsInitialized() const {
  return true;
}

void RateLimit_RateLimitAction::Swap(RateLimit_RateLimitAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit_RateLimitAction::InternalSwap(RateLimit_RateLimitAction* other) {
  std::swap(type_, other->type_);
  std::swap(action_details_, other->action_details_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit_RateLimitAction::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit_RateLimitAction

// .envoy.api.v2.RateLimit.RateLimitAction.ActionType type = 1;
void RateLimit_RateLimitAction::clear_type() {
  type_ = 0;
}
::envoy::api::v2::RateLimit_RateLimitAction_ActionType RateLimit_RateLimitAction::type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.type)
  return static_cast< ::envoy::api::v2::RateLimit_RateLimitAction_ActionType >(type_);
}
void RateLimit_RateLimitAction::set_type(::envoy::api::v2::RateLimit_RateLimitAction_ActionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.type)
}

// .envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders request_headers = 2;
bool RateLimit_RateLimitAction::has_request_headers() const {
  return action_details_case() == kRequestHeaders;
}
void RateLimit_RateLimitAction::set_has_request_headers() {
  _oneof_case_[0] = kRequestHeaders;
}
void RateLimit_RateLimitAction::clear_request_headers() {
  if (has_request_headers()) {
    delete action_details_.request_headers_;
    clear_has_action_details();
  }
}
 const ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders& RateLimit_RateLimitAction::request_headers() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.request_headers)
  return has_request_headers()
      ? *action_details_.request_headers_
      : ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders::default_instance();
}
::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders* RateLimit_RateLimitAction::mutable_request_headers() {
  if (!has_request_headers()) {
    clear_action_details();
    set_has_request_headers();
    action_details_.request_headers_ = new ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.request_headers)
  return action_details_.request_headers_;
}
::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders* RateLimit_RateLimitAction::release_request_headers() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.request_headers)
  if (has_request_headers()) {
    clear_has_action_details();
    ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders* temp = action_details_.request_headers_;
    action_details_.request_headers_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RateLimit_RateLimitAction::set_allocated_request_headers(::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders* request_headers) {
  clear_action_details();
  if (request_headers) {
    set_has_request_headers();
    action_details_.request_headers_ = request_headers;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.request_headers)
}

// string generic_key = 3;
bool RateLimit_RateLimitAction::has_generic_key() const {
  return action_details_case() == kGenericKey;
}
void RateLimit_RateLimitAction::set_has_generic_key() {
  _oneof_case_[0] = kGenericKey;
}
void RateLimit_RateLimitAction::clear_generic_key() {
  if (has_generic_key()) {
    action_details_.generic_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_action_details();
  }
}
const ::std::string& RateLimit_RateLimitAction::generic_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
  if (has_generic_key()) {
    return action_details_.generic_key_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void RateLimit_RateLimitAction::set_generic_key(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
  if (!has_generic_key()) {
    clear_action_details();
    set_has_generic_key();
    action_details_.generic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  action_details_.generic_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
}
#if LANG_CXX11
void RateLimit_RateLimitAction::set_generic_key(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
  if (!has_generic_key()) {
    clear_action_details();
    set_has_generic_key();
    action_details_.generic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  action_details_.generic_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
}
#endif
void RateLimit_RateLimitAction::set_generic_key(const char* value) {
  if (!has_generic_key()) {
    clear_action_details();
    set_has_generic_key();
    action_details_.generic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  action_details_.generic_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
}
void RateLimit_RateLimitAction::set_generic_key(const char* value, size_t size) {
  if (!has_generic_key()) {
    clear_action_details();
    set_has_generic_key();
    action_details_.generic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  action_details_.generic_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
}
::std::string* RateLimit_RateLimitAction::mutable_generic_key() {
  if (!has_generic_key()) {
    clear_action_details();
    set_has_generic_key();
    action_details_.generic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
  return action_details_.generic_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit_RateLimitAction::release_generic_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
  if (has_generic_key()) {
    clear_has_action_details();
    return action_details_.generic_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void RateLimit_RateLimitAction::set_allocated_generic_key(::std::string* generic_key) {
  if (!has_generic_key()) {
    action_details_.generic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_action_details();
  if (generic_key != NULL) {
    set_has_generic_key();
    action_details_.generic_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        generic_key);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
}

// .envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch header_value_match = 4;
bool RateLimit_RateLimitAction::has_header_value_match() const {
  return action_details_case() == kHeaderValueMatch;
}
void RateLimit_RateLimitAction::set_has_header_value_match() {
  _oneof_case_[0] = kHeaderValueMatch;
}
void RateLimit_RateLimitAction::clear_header_value_match() {
  if (has_header_value_match()) {
    delete action_details_.header_value_match_;
    clear_has_action_details();
  }
}
 const ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch& RateLimit_RateLimitAction::header_value_match() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.header_value_match)
  return has_header_value_match()
      ? *action_details_.header_value_match_
      : ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch::default_instance();
}
::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch* RateLimit_RateLimitAction::mutable_header_value_match() {
  if (!has_header_value_match()) {
    clear_action_details();
    set_has_header_value_match();
    action_details_.header_value_match_ = new ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.header_value_match)
  return action_details_.header_value_match_;
}
::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch* RateLimit_RateLimitAction::release_header_value_match() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.header_value_match)
  if (has_header_value_match()) {
    clear_has_action_details();
    ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch* temp = action_details_.header_value_match_;
    action_details_.header_value_match_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RateLimit_RateLimitAction::set_allocated_header_value_match(::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch* header_value_match) {
  clear_action_details();
  if (header_value_match) {
    set_has_header_value_match();
    action_details_.header_value_match_ = header_value_match;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.header_value_match)
}

bool RateLimit_RateLimitAction::has_action_details() const {
  return action_details_case() != ACTION_DETAILS_NOT_SET;
}
void RateLimit_RateLimitAction::clear_has_action_details() {
  _oneof_case_[0] = ACTION_DETAILS_NOT_SET;
}
RateLimit_RateLimitAction::ActionDetailsCase RateLimit_RateLimitAction::action_details_case() const {
  return RateLimit_RateLimitAction::ActionDetailsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimit::kStageFieldNumber;
const int RateLimit::kDisableKeyFieldNumber;
const int RateLimit::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit::RateLimit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimit)
}
RateLimit::RateLimit(const RateLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      actions_(from.actions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  disable_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.disable_key().size() > 0) {
    disable_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disable_key_);
  }
  if (from.has_stage()) {
    stage_ = new ::google::protobuf::UInt32Value(*from.stage_);
  } else {
    stage_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimit)
}

void RateLimit::SharedCtor() {
  disable_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stage_ = NULL;
  _cached_size_ = 0;
}

RateLimit::~RateLimit() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimit)
  SharedDtor();
}

void RateLimit::SharedDtor() {
  disable_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete stage_;
  }
}

void RateLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[14].descriptor;
}

const RateLimit& RateLimit::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit* RateLimit::New(::google::protobuf::Arena* arena) const {
  RateLimit* n = new RateLimit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimit)
  actions_.Clear();
  disable_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stage_ != NULL) {
    delete stage_;
  }
  stage_ = NULL;
}

bool RateLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.UInt32Value stage = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string disable_key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->disable_key().data(), this->disable_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RateLimit.disable_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.RateLimit.RateLimitAction actions = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimit)
  return false;
#undef DO_
}

void RateLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimit)
  // .google.protobuf.UInt32Value stage = 1;
  if (this->has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stage_, output);
  }

  // string disable_key = 2;
  if (this->disable_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disable_key().data(), this->disable_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.disable_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->disable_key(), output);
  }

  // repeated .envoy.api.v2.RateLimit.RateLimitAction actions = 3;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimit)
}

::google::protobuf::uint8* RateLimit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimit)
  // .google.protobuf.UInt32Value stage = 1;
  if (this->has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stage_, false, target);
  }

  // string disable_key = 2;
  if (this->disable_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disable_key().data(), this->disable_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimit.disable_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->disable_key(), target);
  }

  // repeated .envoy.api.v2.RateLimit.RateLimitAction actions = 3;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->actions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimit)
  return target;
}

size_t RateLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimit)
  size_t total_size = 0;

  // repeated .envoy.api.v2.RateLimit.RateLimitAction actions = 3;
  {
    unsigned int count = this->actions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actions(i));
    }
  }

  // string disable_key = 2;
  if (this->disable_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->disable_key());
  }

  // .google.protobuf.UInt32Value stage = 1;
  if (this->has_stage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stage_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimit)
    MergeFrom(*source);
  }
}

void RateLimit::MergeFrom(const RateLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  actions_.MergeFrom(from.actions_);
  if (from.disable_key().size() > 0) {

    disable_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disable_key_);
  }
  if (from.has_stage()) {
    mutable_stage()->::google::protobuf::UInt32Value::MergeFrom(from.stage());
  }
}

void RateLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit::CopyFrom(const RateLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit::IsInitialized() const {
  return true;
}

void RateLimit::Swap(RateLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit::InternalSwap(RateLimit* other) {
  actions_.UnsafeArenaSwap(&other->actions_);
  disable_key_.Swap(&other->disable_key_);
  std::swap(stage_, other->stage_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit

// .google.protobuf.UInt32Value stage = 1;
bool RateLimit::has_stage() const {
  return this != internal_default_instance() && stage_ != NULL;
}
void RateLimit::clear_stage() {
  if (GetArenaNoVirtual() == NULL && stage_ != NULL) delete stage_;
  stage_ = NULL;
}
const ::google::protobuf::UInt32Value& RateLimit::stage() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.stage)
  return stage_ != NULL ? *stage_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* RateLimit::mutable_stage() {
  
  if (stage_ == NULL) {
    stage_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.stage)
  return stage_;
}
::google::protobuf::UInt32Value* RateLimit::release_stage() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.stage)
  
  ::google::protobuf::UInt32Value* temp = stage_;
  stage_ = NULL;
  return temp;
}
void RateLimit::set_allocated_stage(::google::protobuf::UInt32Value* stage) {
  delete stage_;
  if (stage != NULL && stage->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_stage = new ::google::protobuf::UInt32Value;
    new_stage->CopyFrom(*stage);
    stage = new_stage;
  }
  stage_ = stage;
  if (stage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.stage)
}

// string disable_key = 2;
void RateLimit::clear_disable_key() {
  disable_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimit::disable_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.disable_key)
  return disable_key_.GetNoArena();
}
void RateLimit::set_disable_key(const ::std::string& value) {
  
  disable_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.disable_key)
}
#if LANG_CXX11
void RateLimit::set_disable_key(::std::string&& value) {
  
  disable_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.disable_key)
}
#endif
void RateLimit::set_disable_key(const char* value) {
  
  disable_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.disable_key)
}
void RateLimit::set_disable_key(const char* value, size_t size) {
  
  disable_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.disable_key)
}
::std::string* RateLimit::mutable_disable_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.disable_key)
  return disable_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit::release_disable_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.disable_key)
  
  return disable_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimit::set_allocated_disable_key(::std::string* disable_key) {
  if (disable_key != NULL) {
    
  } else {
    
  }
  disable_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disable_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.disable_key)
}

// repeated .envoy.api.v2.RateLimit.RateLimitAction actions = 3;
int RateLimit::actions_size() const {
  return actions_.size();
}
void RateLimit::clear_actions() {
  actions_.Clear();
}
const ::envoy::api::v2::RateLimit_RateLimitAction& RateLimit::actions(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.actions)
  return actions_.Get(index);
}
::envoy::api::v2::RateLimit_RateLimitAction* RateLimit::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.actions)
  return actions_.Mutable(index);
}
::envoy::api::v2::RateLimit_RateLimitAction* RateLimit::add_actions() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RateLimit.actions)
  return actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit_RateLimitAction >*
RateLimit::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RateLimit.actions)
  return &actions_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit_RateLimitAction >&
RateLimit::actions() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RateLimit.actions)
  return actions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeaderMatcher::kNameFieldNumber;
const int HeaderMatcher::kValueFieldNumber;
const int HeaderMatcher::kRegexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeaderMatcher::HeaderMatcher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HeaderMatcher)
}
HeaderMatcher::HeaderMatcher(const HeaderMatcher& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_regex()) {
    regex_ = new ::google::protobuf::BoolValue(*from.regex_);
  } else {
    regex_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HeaderMatcher)
}

void HeaderMatcher::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regex_ = NULL;
  _cached_size_ = 0;
}

HeaderMatcher::~HeaderMatcher() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HeaderMatcher)
  SharedDtor();
}

void HeaderMatcher::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete regex_;
  }
}

void HeaderMatcher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderMatcher::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[15].descriptor;
}

const HeaderMatcher& HeaderMatcher::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeaderMatcher* HeaderMatcher::New(::google::protobuf::Arena* arena) const {
  HeaderMatcher* n = new HeaderMatcher;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeaderMatcher::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HeaderMatcher)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && regex_ != NULL) {
    delete regex_;
  }
  regex_ = NULL;
}

bool HeaderMatcher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HeaderMatcher)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.HeaderMatcher.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.HeaderMatcher.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue regex = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HeaderMatcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HeaderMatcher)
  return false;
#undef DO_
}

void HeaderMatcher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HeaderMatcher)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HeaderMatcher.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HeaderMatcher.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // .google.protobuf.BoolValue regex = 3;
  if (this->has_regex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->regex_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HeaderMatcher)
}

::google::protobuf::uint8* HeaderMatcher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HeaderMatcher)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HeaderMatcher.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HeaderMatcher.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // .google.protobuf.BoolValue regex = 3;
  if (this->has_regex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->regex_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HeaderMatcher)
  return target;
}

size_t HeaderMatcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HeaderMatcher)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .google.protobuf.BoolValue regex = 3;
  if (this->has_regex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->regex_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderMatcher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HeaderMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderMatcher* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeaderMatcher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HeaderMatcher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HeaderMatcher)
    MergeFrom(*source);
  }
}

void HeaderMatcher::MergeFrom(const HeaderMatcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HeaderMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_regex()) {
    mutable_regex()->::google::protobuf::BoolValue::MergeFrom(from.regex());
  }
}

void HeaderMatcher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HeaderMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderMatcher::CopyFrom(const HeaderMatcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HeaderMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderMatcher::IsInitialized() const {
  return true;
}

void HeaderMatcher::Swap(HeaderMatcher* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeaderMatcher::InternalSwap(HeaderMatcher* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(regex_, other->regex_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeaderMatcher::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeaderMatcher

// string name = 1;
void HeaderMatcher::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeaderMatcher::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HeaderMatcher.name)
  return name_.GetNoArena();
}
void HeaderMatcher::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HeaderMatcher.name)
}
#if LANG_CXX11
void HeaderMatcher::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HeaderMatcher.name)
}
#endif
void HeaderMatcher::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HeaderMatcher.name)
}
void HeaderMatcher::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HeaderMatcher.name)
}
::std::string* HeaderMatcher::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HeaderMatcher.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeaderMatcher::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HeaderMatcher.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderMatcher::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HeaderMatcher.name)
}

// string value = 2;
void HeaderMatcher::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HeaderMatcher::value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HeaderMatcher.value)
  return value_.GetNoArena();
}
void HeaderMatcher::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HeaderMatcher.value)
}
#if LANG_CXX11
void HeaderMatcher::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HeaderMatcher.value)
}
#endif
void HeaderMatcher::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HeaderMatcher.value)
}
void HeaderMatcher::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HeaderMatcher.value)
}
::std::string* HeaderMatcher::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HeaderMatcher.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeaderMatcher::release_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HeaderMatcher.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeaderMatcher::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HeaderMatcher.value)
}

// .google.protobuf.BoolValue regex = 3;
bool HeaderMatcher::has_regex() const {
  return this != internal_default_instance() && regex_ != NULL;
}
void HeaderMatcher::clear_regex() {
  if (GetArenaNoVirtual() == NULL && regex_ != NULL) delete regex_;
  regex_ = NULL;
}
const ::google::protobuf::BoolValue& HeaderMatcher::regex() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HeaderMatcher.regex)
  return regex_ != NULL ? *regex_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
::google::protobuf::BoolValue* HeaderMatcher::mutable_regex() {
  
  if (regex_ == NULL) {
    regex_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HeaderMatcher.regex)
  return regex_;
}
::google::protobuf::BoolValue* HeaderMatcher::release_regex() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HeaderMatcher.regex)
  
  ::google::protobuf::BoolValue* temp = regex_;
  regex_ = NULL;
  return temp;
}
void HeaderMatcher::set_allocated_regex(::google::protobuf::BoolValue* regex) {
  delete regex_;
  if (regex != NULL && regex->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_regex = new ::google::protobuf::BoolValue;
    new_regex->CopyFrom(*regex);
    regex = new_regex;
  }
  regex_ = regex;
  if (regex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HeaderMatcher.regex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VirtualHost::kNameFieldNumber;
const int VirtualHost::kDomainsFieldNumber;
const int VirtualHost::kRoutesFieldNumber;
const int VirtualHost::kRequireTlsFieldNumber;
const int VirtualHost::kVirtualClustersFieldNumber;
const int VirtualHost::kRateLimitsFieldNumber;
const int VirtualHost::kRequestHeadersToAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualHost::VirtualHost()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.VirtualHost)
}
VirtualHost::VirtualHost(const VirtualHost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      domains_(from.domains_),
      routes_(from.routes_),
      virtual_clusters_(from.virtual_clusters_),
      rate_limits_(from.rate_limits_),
      request_headers_to_add_(from.request_headers_to_add_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  require_tls_ = from.require_tls_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.VirtualHost)
}

void VirtualHost::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  require_tls_ = 0;
  _cached_size_ = 0;
}

VirtualHost::~VirtualHost() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.VirtualHost)
  SharedDtor();
}

void VirtualHost::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VirtualHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualHost::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[16].descriptor;
}

const VirtualHost& VirtualHost::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

VirtualHost* VirtualHost::New(::google::protobuf::Arena* arena) const {
  VirtualHost* n = new VirtualHost;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualHost::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.VirtualHost)
  domains_.Clear();
  routes_.Clear();
  virtual_clusters_.Clear();
  rate_limits_.Clear();
  request_headers_to_add_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  require_tls_ = 0;
}

bool VirtualHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.VirtualHost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.VirtualHost.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string domains = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_domains()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domains(this->domains_size() - 1).data(),
            this->domains(this->domains_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.VirtualHost.domains"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.Route routes = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .envoy.api.v2.VirtualHost.TlsRequirementType require_tls = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_require_tls(static_cast< ::envoy::api::v2::VirtualHost_TlsRequirementType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.VirtualCluster virtual_clusters = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_virtual_clusters()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .envoy.api.v2.RateLimit rate_limits = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rate_limits()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_request_headers_to_add()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.VirtualHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.VirtualHost)
  return false;
#undef DO_
}

void VirtualHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.VirtualHost)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualHost.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string domains = 2;
  for (int i = 0; i < this->domains_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domains(i).data(), this->domains(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualHost.domains");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->domains(i), output);
  }

  // repeated .envoy.api.v2.Route routes = 3;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->routes(i), output);
  }

  // .envoy.api.v2.VirtualHost.TlsRequirementType require_tls = 4;
  if (this->require_tls() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->require_tls(), output);
  }

  // repeated .envoy.api.v2.VirtualCluster virtual_clusters = 5;
  for (unsigned int i = 0, n = this->virtual_clusters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->virtual_clusters(i), output);
  }

  // repeated .envoy.api.v2.RateLimit rate_limits = 6;
  for (unsigned int i = 0, n = this->rate_limits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rate_limits(i), output);
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 7;
  for (unsigned int i = 0, n = this->request_headers_to_add_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->request_headers_to_add(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.VirtualHost)
}

::google::protobuf::uint8* VirtualHost::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.VirtualHost)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualHost.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string domains = 2;
  for (int i = 0; i < this->domains_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domains(i).data(), this->domains(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.VirtualHost.domains");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->domains(i), target);
  }

  // repeated .envoy.api.v2.Route routes = 3;
  for (unsigned int i = 0, n = this->routes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->routes(i), false, target);
  }

  // .envoy.api.v2.VirtualHost.TlsRequirementType require_tls = 4;
  if (this->require_tls() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->require_tls(), target);
  }

  // repeated .envoy.api.v2.VirtualCluster virtual_clusters = 5;
  for (unsigned int i = 0, n = this->virtual_clusters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->virtual_clusters(i), false, target);
  }

  // repeated .envoy.api.v2.RateLimit rate_limits = 6;
  for (unsigned int i = 0, n = this->rate_limits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->rate_limits(i), false, target);
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 7;
  for (unsigned int i = 0, n = this->request_headers_to_add_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->request_headers_to_add(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.VirtualHost)
  return target;
}

size_t VirtualHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.VirtualHost)
  size_t total_size = 0;

  // repeated string domains = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->domains_size());
  for (int i = 0; i < this->domains_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->domains(i));
  }

  // repeated .envoy.api.v2.Route routes = 3;
  {
    unsigned int count = this->routes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routes(i));
    }
  }

  // repeated .envoy.api.v2.VirtualCluster virtual_clusters = 5;
  {
    unsigned int count = this->virtual_clusters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->virtual_clusters(i));
    }
  }

  // repeated .envoy.api.v2.RateLimit rate_limits = 6;
  {
    unsigned int count = this->rate_limits_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rate_limits(i));
    }
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 7;
  {
    unsigned int count = this->request_headers_to_add_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_headers_to_add(i));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .envoy.api.v2.VirtualHost.TlsRequirementType require_tls = 4;
  if (this->require_tls() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->require_tls());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualHost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.VirtualHost)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualHost* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualHost>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.VirtualHost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.VirtualHost)
    MergeFrom(*source);
  }
}

void VirtualHost::MergeFrom(const VirtualHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.VirtualHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domains_.MergeFrom(from.domains_);
  routes_.MergeFrom(from.routes_);
  virtual_clusters_.MergeFrom(from.virtual_clusters_);
  rate_limits_.MergeFrom(from.rate_limits_);
  request_headers_to_add_.MergeFrom(from.request_headers_to_add_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.require_tls() != 0) {
    set_require_tls(from.require_tls());
  }
}

void VirtualHost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.VirtualHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualHost::CopyFrom(const VirtualHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.VirtualHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualHost::IsInitialized() const {
  return true;
}

void VirtualHost::Swap(VirtualHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualHost::InternalSwap(VirtualHost* other) {
  domains_.UnsafeArenaSwap(&other->domains_);
  routes_.UnsafeArenaSwap(&other->routes_);
  virtual_clusters_.UnsafeArenaSwap(&other->virtual_clusters_);
  rate_limits_.UnsafeArenaSwap(&other->rate_limits_);
  request_headers_to_add_.UnsafeArenaSwap(&other->request_headers_to_add_);
  name_.Swap(&other->name_);
  std::swap(require_tls_, other->require_tls_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualHost::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VirtualHost

// string name = 1;
void VirtualHost::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VirtualHost::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.name)
  return name_.GetNoArena();
}
void VirtualHost::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualHost.name)
}
#if LANG_CXX11
void VirtualHost::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.VirtualHost.name)
}
#endif
void VirtualHost::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualHost.name)
}
void VirtualHost::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualHost.name)
}
::std::string* VirtualHost::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VirtualHost::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.VirtualHost.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VirtualHost::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.VirtualHost.name)
}

// repeated string domains = 2;
int VirtualHost::domains_size() const {
  return domains_.size();
}
void VirtualHost::clear_domains() {
  domains_.Clear();
}
const ::std::string& VirtualHost::domains(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.domains)
  return domains_.Get(index);
}
::std::string* VirtualHost::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.domains)
  return domains_.Mutable(index);
}
void VirtualHost::set_domains(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualHost.domains)
  domains_.Mutable(index)->assign(value);
}
void VirtualHost::set_domains(int index, const char* value) {
  domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualHost.domains)
}
void VirtualHost::set_domains(int index, const char* value, size_t size) {
  domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualHost.domains)
}
::std::string* VirtualHost::add_domains() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.VirtualHost.domains)
  return domains_.Add();
}
void VirtualHost::add_domains(const ::std::string& value) {
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.domains)
}
void VirtualHost::add_domains(const char* value) {
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.VirtualHost.domains)
}
void VirtualHost::add_domains(const char* value, size_t size) {
  domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.VirtualHost.domains)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VirtualHost::domains() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.domains)
  return domains_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VirtualHost::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.domains)
  return &domains_;
}

// repeated .envoy.api.v2.Route routes = 3;
int VirtualHost::routes_size() const {
  return routes_.size();
}
void VirtualHost::clear_routes() {
  routes_.Clear();
}
const ::envoy::api::v2::Route& VirtualHost::routes(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.routes)
  return routes_.Get(index);
}
::envoy::api::v2::Route* VirtualHost::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.routes)
  return routes_.Mutable(index);
}
::envoy::api::v2::Route* VirtualHost::add_routes() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.routes)
  return routes_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Route >*
VirtualHost::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.routes)
  return &routes_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Route >&
VirtualHost::routes() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.routes)
  return routes_;
}

// .envoy.api.v2.VirtualHost.TlsRequirementType require_tls = 4;
void VirtualHost::clear_require_tls() {
  require_tls_ = 0;
}
::envoy::api::v2::VirtualHost_TlsRequirementType VirtualHost::require_tls() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.require_tls)
  return static_cast< ::envoy::api::v2::VirtualHost_TlsRequirementType >(require_tls_);
}
void VirtualHost::set_require_tls(::envoy::api::v2::VirtualHost_TlsRequirementType value) {
  
  require_tls_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualHost.require_tls)
}

// repeated .envoy.api.v2.VirtualCluster virtual_clusters = 5;
int VirtualHost::virtual_clusters_size() const {
  return virtual_clusters_.size();
}
void VirtualHost::clear_virtual_clusters() {
  virtual_clusters_.Clear();
}
const ::envoy::api::v2::VirtualCluster& VirtualHost::virtual_clusters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.virtual_clusters)
  return virtual_clusters_.Get(index);
}
::envoy::api::v2::VirtualCluster* VirtualHost::mutable_virtual_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.virtual_clusters)
  return virtual_clusters_.Mutable(index);
}
::envoy::api::v2::VirtualCluster* VirtualHost::add_virtual_clusters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.virtual_clusters)
  return virtual_clusters_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualCluster >*
VirtualHost::mutable_virtual_clusters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.virtual_clusters)
  return &virtual_clusters_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualCluster >&
VirtualHost::virtual_clusters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.virtual_clusters)
  return virtual_clusters_;
}

// repeated .envoy.api.v2.RateLimit rate_limits = 6;
int VirtualHost::rate_limits_size() const {
  return rate_limits_.size();
}
void VirtualHost::clear_rate_limits() {
  rate_limits_.Clear();
}
const ::envoy::api::v2::RateLimit& VirtualHost::rate_limits(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.rate_limits)
  return rate_limits_.Get(index);
}
::envoy::api::v2::RateLimit* VirtualHost::mutable_rate_limits(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.rate_limits)
  return rate_limits_.Mutable(index);
}
::envoy::api::v2::RateLimit* VirtualHost::add_rate_limits() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.rate_limits)
  return rate_limits_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >*
VirtualHost::mutable_rate_limits() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.rate_limits)
  return &rate_limits_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >&
VirtualHost::rate_limits() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.rate_limits)
  return rate_limits_;
}

// repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 7;
int VirtualHost::request_headers_to_add_size() const {
  return request_headers_to_add_.size();
}
void VirtualHost::clear_request_headers_to_add() {
  request_headers_to_add_.Clear();
}
const ::envoy::api::v2::HeaderValueOption& VirtualHost::request_headers_to_add(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.request_headers_to_add)
  return request_headers_to_add_.Get(index);
}
::envoy::api::v2::HeaderValueOption* VirtualHost::mutable_request_headers_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.request_headers_to_add)
  return request_headers_to_add_.Mutable(index);
}
::envoy::api::v2::HeaderValueOption* VirtualHost::add_request_headers_to_add() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.request_headers_to_add)
  return request_headers_to_add_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
VirtualHost::mutable_request_headers_to_add() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.request_headers_to_add)
  return &request_headers_to_add_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
VirtualHost::request_headers_to_add() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.request_headers_to_add)
  return request_headers_to_add_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteConfiguration::kVirtualHostsFieldNumber;
const int RouteConfiguration::kInternalOnlyHeadersFieldNumber;
const int RouteConfiguration::kResponseHeadersToAddFieldNumber;
const int RouteConfiguration::kResponseHeadersToRemoveFieldNumber;
const int RouteConfiguration::kRequestHeadersToAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteConfiguration::RouteConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RouteConfiguration)
}
RouteConfiguration::RouteConfiguration(const RouteConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      virtual_hosts_(from.virtual_hosts_),
      internal_only_headers_(from.internal_only_headers_),
      response_headers_to_add_(from.response_headers_to_add_),
      response_headers_to_remove_(from.response_headers_to_remove_),
      request_headers_to_add_(from.request_headers_to_add_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RouteConfiguration)
}

void RouteConfiguration::SharedCtor() {
  _cached_size_ = 0;
}

RouteConfiguration::~RouteConfiguration() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RouteConfiguration)
  SharedDtor();
}

void RouteConfiguration::SharedDtor() {
}

void RouteConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteConfiguration::descriptor() {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[17].descriptor;
}

const RouteConfiguration& RouteConfiguration::default_instance() {
  protobuf_api_2frds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteConfiguration* RouteConfiguration::New(::google::protobuf::Arena* arena) const {
  RouteConfiguration* n = new RouteConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RouteConfiguration)
  virtual_hosts_.Clear();
  internal_only_headers_.Clear();
  response_headers_to_add_.Clear();
  response_headers_to_remove_.Clear();
  request_headers_to_add_.Clear();
}

bool RouteConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RouteConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.VirtualHost virtual_hosts = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_virtual_hosts()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated string internal_only_headers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_internal_only_headers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->internal_only_headers(this->internal_only_headers_size() - 1).data(),
            this->internal_only_headers(this->internal_only_headers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteConfiguration.internal_only_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HeaderValueOption response_headers_to_add = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_response_headers_to_add()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated string response_headers_to_remove = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_response_headers_to_remove()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response_headers_to_remove(this->response_headers_to_remove_size() - 1).data(),
            this->response_headers_to_remove(this->response_headers_to_remove_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RouteConfiguration.response_headers_to_remove"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_request_headers_to_add()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RouteConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RouteConfiguration)
  return false;
#undef DO_
}

void RouteConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RouteConfiguration)
  // repeated .envoy.api.v2.VirtualHost virtual_hosts = 1;
  for (unsigned int i = 0, n = this->virtual_hosts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->virtual_hosts(i), output);
  }

  // repeated string internal_only_headers = 2;
  for (int i = 0; i < this->internal_only_headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_only_headers(i).data(), this->internal_only_headers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteConfiguration.internal_only_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->internal_only_headers(i), output);
  }

  // repeated .envoy.api.v2.HeaderValueOption response_headers_to_add = 3;
  for (unsigned int i = 0, n = this->response_headers_to_add_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->response_headers_to_add(i), output);
  }

  // repeated string response_headers_to_remove = 4;
  for (int i = 0; i < this->response_headers_to_remove_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_headers_to_remove(i).data(), this->response_headers_to_remove(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteConfiguration.response_headers_to_remove");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->response_headers_to_remove(i), output);
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 5;
  for (unsigned int i = 0, n = this->request_headers_to_add_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->request_headers_to_add(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RouteConfiguration)
}

::google::protobuf::uint8* RouteConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RouteConfiguration)
  // repeated .envoy.api.v2.VirtualHost virtual_hosts = 1;
  for (unsigned int i = 0, n = this->virtual_hosts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->virtual_hosts(i), false, target);
  }

  // repeated string internal_only_headers = 2;
  for (int i = 0; i < this->internal_only_headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->internal_only_headers(i).data(), this->internal_only_headers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteConfiguration.internal_only_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->internal_only_headers(i), target);
  }

  // repeated .envoy.api.v2.HeaderValueOption response_headers_to_add = 3;
  for (unsigned int i = 0, n = this->response_headers_to_add_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->response_headers_to_add(i), false, target);
  }

  // repeated string response_headers_to_remove = 4;
  for (int i = 0; i < this->response_headers_to_remove_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_headers_to_remove(i).data(), this->response_headers_to_remove(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RouteConfiguration.response_headers_to_remove");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->response_headers_to_remove(i), target);
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 5;
  for (unsigned int i = 0, n = this->request_headers_to_add_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->request_headers_to_add(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RouteConfiguration)
  return target;
}

size_t RouteConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RouteConfiguration)
  size_t total_size = 0;

  // repeated .envoy.api.v2.VirtualHost virtual_hosts = 1;
  {
    unsigned int count = this->virtual_hosts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->virtual_hosts(i));
    }
  }

  // repeated string internal_only_headers = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->internal_only_headers_size());
  for (int i = 0; i < this->internal_only_headers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->internal_only_headers(i));
  }

  // repeated .envoy.api.v2.HeaderValueOption response_headers_to_add = 3;
  {
    unsigned int count = this->response_headers_to_add_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response_headers_to_add(i));
    }
  }

  // repeated string response_headers_to_remove = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->response_headers_to_remove_size());
  for (int i = 0; i < this->response_headers_to_remove_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->response_headers_to_remove(i));
  }

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 5;
  {
    unsigned int count = this->request_headers_to_add_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_headers_to_add(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RouteConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RouteConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RouteConfiguration)
    MergeFrom(*source);
  }
}

void RouteConfiguration::MergeFrom(const RouteConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RouteConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  virtual_hosts_.MergeFrom(from.virtual_hosts_);
  internal_only_headers_.MergeFrom(from.internal_only_headers_);
  response_headers_to_add_.MergeFrom(from.response_headers_to_add_);
  response_headers_to_remove_.MergeFrom(from.response_headers_to_remove_);
  request_headers_to_add_.MergeFrom(from.request_headers_to_add_);
}

void RouteConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RouteConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteConfiguration::CopyFrom(const RouteConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RouteConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteConfiguration::IsInitialized() const {
  return true;
}

void RouteConfiguration::Swap(RouteConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteConfiguration::InternalSwap(RouteConfiguration* other) {
  virtual_hosts_.UnsafeArenaSwap(&other->virtual_hosts_);
  internal_only_headers_.UnsafeArenaSwap(&other->internal_only_headers_);
  response_headers_to_add_.UnsafeArenaSwap(&other->response_headers_to_add_);
  response_headers_to_remove_.UnsafeArenaSwap(&other->response_headers_to_remove_);
  request_headers_to_add_.UnsafeArenaSwap(&other->request_headers_to_add_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteConfiguration::GetMetadata() const {
  protobuf_api_2frds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frds_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteConfiguration

// repeated .envoy.api.v2.VirtualHost virtual_hosts = 1;
int RouteConfiguration::virtual_hosts_size() const {
  return virtual_hosts_.size();
}
void RouteConfiguration::clear_virtual_hosts() {
  virtual_hosts_.Clear();
}
const ::envoy::api::v2::VirtualHost& RouteConfiguration::virtual_hosts(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return virtual_hosts_.Get(index);
}
::envoy::api::v2::VirtualHost* RouteConfiguration::mutable_virtual_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return virtual_hosts_.Mutable(index);
}
::envoy::api::v2::VirtualHost* RouteConfiguration::add_virtual_hosts() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return virtual_hosts_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualHost >*
RouteConfiguration::mutable_virtual_hosts() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return &virtual_hosts_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualHost >&
RouteConfiguration::virtual_hosts() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return virtual_hosts_;
}

// repeated string internal_only_headers = 2;
int RouteConfiguration::internal_only_headers_size() const {
  return internal_only_headers_.size();
}
void RouteConfiguration::clear_internal_only_headers() {
  internal_only_headers_.Clear();
}
const ::std::string& RouteConfiguration::internal_only_headers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return internal_only_headers_.Get(index);
}
::std::string* RouteConfiguration::mutable_internal_only_headers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return internal_only_headers_.Mutable(index);
}
void RouteConfiguration::set_internal_only_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteConfiguration.internal_only_headers)
  internal_only_headers_.Mutable(index)->assign(value);
}
void RouteConfiguration::set_internal_only_headers(int index, const char* value) {
  internal_only_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
void RouteConfiguration::set_internal_only_headers(int index, const char* value, size_t size) {
  internal_only_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
::std::string* RouteConfiguration::add_internal_only_headers() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return internal_only_headers_.Add();
}
void RouteConfiguration::add_internal_only_headers(const ::std::string& value) {
  internal_only_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
void RouteConfiguration::add_internal_only_headers(const char* value) {
  internal_only_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
void RouteConfiguration::add_internal_only_headers(const char* value, size_t size) {
  internal_only_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RouteConfiguration::internal_only_headers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return internal_only_headers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RouteConfiguration::mutable_internal_only_headers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return &internal_only_headers_;
}

// repeated .envoy.api.v2.HeaderValueOption response_headers_to_add = 3;
int RouteConfiguration::response_headers_to_add_size() const {
  return response_headers_to_add_.size();
}
void RouteConfiguration::clear_response_headers_to_add() {
  response_headers_to_add_.Clear();
}
const ::envoy::api::v2::HeaderValueOption& RouteConfiguration::response_headers_to_add(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return response_headers_to_add_.Get(index);
}
::envoy::api::v2::HeaderValueOption* RouteConfiguration::mutable_response_headers_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return response_headers_to_add_.Mutable(index);
}
::envoy::api::v2::HeaderValueOption* RouteConfiguration::add_response_headers_to_add() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return response_headers_to_add_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
RouteConfiguration::mutable_response_headers_to_add() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return &response_headers_to_add_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
RouteConfiguration::response_headers_to_add() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return response_headers_to_add_;
}

// repeated string response_headers_to_remove = 4;
int RouteConfiguration::response_headers_to_remove_size() const {
  return response_headers_to_remove_.size();
}
void RouteConfiguration::clear_response_headers_to_remove() {
  response_headers_to_remove_.Clear();
}
const ::std::string& RouteConfiguration::response_headers_to_remove(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return response_headers_to_remove_.Get(index);
}
::std::string* RouteConfiguration::mutable_response_headers_to_remove(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return response_headers_to_remove_.Mutable(index);
}
void RouteConfiguration::set_response_headers_to_remove(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  response_headers_to_remove_.Mutable(index)->assign(value);
}
void RouteConfiguration::set_response_headers_to_remove(int index, const char* value) {
  response_headers_to_remove_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
void RouteConfiguration::set_response_headers_to_remove(int index, const char* value, size_t size) {
  response_headers_to_remove_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
::std::string* RouteConfiguration::add_response_headers_to_remove() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return response_headers_to_remove_.Add();
}
void RouteConfiguration::add_response_headers_to_remove(const ::std::string& value) {
  response_headers_to_remove_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
void RouteConfiguration::add_response_headers_to_remove(const char* value) {
  response_headers_to_remove_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
void RouteConfiguration::add_response_headers_to_remove(const char* value, size_t size) {
  response_headers_to_remove_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RouteConfiguration::response_headers_to_remove() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return response_headers_to_remove_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RouteConfiguration::mutable_response_headers_to_remove() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return &response_headers_to_remove_;
}

// repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 5;
int RouteConfiguration::request_headers_to_add_size() const {
  return request_headers_to_add_.size();
}
void RouteConfiguration::clear_request_headers_to_add() {
  request_headers_to_add_.Clear();
}
const ::envoy::api::v2::HeaderValueOption& RouteConfiguration::request_headers_to_add(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return request_headers_to_add_.Get(index);
}
::envoy::api::v2::HeaderValueOption* RouteConfiguration::mutable_request_headers_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return request_headers_to_add_.Mutable(index);
}
::envoy::api::v2::HeaderValueOption* RouteConfiguration::add_request_headers_to_add() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return request_headers_to_add_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
RouteConfiguration::mutable_request_headers_to_add() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return &request_headers_to_add_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
RouteConfiguration::request_headers_to_add() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return request_headers_to_add_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
