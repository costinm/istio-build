// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/address.proto

#ifndef PROTOBUF_api_2faddress_2eproto__INCLUDED
#define PROTOBUF_api_2faddress_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
class Pipe;
class PipeDefaultTypeInternal;
extern PipeDefaultTypeInternal _Pipe_default_instance_;
class ResolvedAddress;
class ResolvedAddressDefaultTypeInternal;
extern ResolvedAddressDefaultTypeInternal _ResolvedAddress_default_instance_;
class ResolvedAddress_SocketAddress;
class ResolvedAddress_SocketAddressDefaultTypeInternal;
extern ResolvedAddress_SocketAddressDefaultTypeInternal _ResolvedAddress_SocketAddress_default_instance_;
class ResolvedAddresses;
class ResolvedAddressesDefaultTypeInternal;
extern ResolvedAddressesDefaultTypeInternal _ResolvedAddresses_default_instance_;
class UnresolvedAddress;
class UnresolvedAddressDefaultTypeInternal;
extern UnresolvedAddressDefaultTypeInternal _UnresolvedAddress_default_instance_;
class UnresolvedAddress_NamedAddress;
class UnresolvedAddress_NamedAddressDefaultTypeInternal;
extern UnresolvedAddress_NamedAddressDefaultTypeInternal _UnresolvedAddress_NamedAddress_default_instance_;
class UnresolvedAddress_Resolver;
class UnresolvedAddress_ResolverDefaultTypeInternal;
extern UnresolvedAddress_ResolverDefaultTypeInternal _UnresolvedAddress_Resolver_default_instance_;
class UnresolvedAddresses;
class UnresolvedAddressesDefaultTypeInternal;
extern UnresolvedAddressesDefaultTypeInternal _UnresolvedAddresses_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace google {
namespace protobuf {
class BoolValue;
class BoolValueDefaultTypeInternal;
extern BoolValueDefaultTypeInternal _BoolValue_default_instance_;
class BytesValue;
class BytesValueDefaultTypeInternal;
extern BytesValueDefaultTypeInternal _BytesValue_default_instance_;
class DoubleValue;
class DoubleValueDefaultTypeInternal;
extern DoubleValueDefaultTypeInternal _DoubleValue_default_instance_;
class FloatValue;
class FloatValueDefaultTypeInternal;
extern FloatValueDefaultTypeInternal _FloatValue_default_instance_;
class Int32Value;
class Int32ValueDefaultTypeInternal;
extern Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
class Int64Value;
class Int64ValueDefaultTypeInternal;
extern Int64ValueDefaultTypeInternal _Int64Value_default_instance_;
class StringValue;
class StringValueDefaultTypeInternal;
extern StringValueDefaultTypeInternal _StringValue_default_instance_;
class UInt32Value;
class UInt32ValueDefaultTypeInternal;
extern UInt32ValueDefaultTypeInternal _UInt32Value_default_instance_;
class UInt64Value;
class UInt64ValueDefaultTypeInternal;
extern UInt64ValueDefaultTypeInternal _UInt64Value_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace envoy {
namespace api {
namespace v2 {

namespace protobuf_api_2faddress_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_api_2faddress_2eproto

enum UnresolvedAddress_NamedAddress_Protocol {
  UnresolvedAddress_NamedAddress_Protocol_TCP = 0,
  UnresolvedAddress_NamedAddress_Protocol_UnresolvedAddress_NamedAddress_Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UnresolvedAddress_NamedAddress_Protocol_UnresolvedAddress_NamedAddress_Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UnresolvedAddress_NamedAddress_Protocol_IsValid(int value);
const UnresolvedAddress_NamedAddress_Protocol UnresolvedAddress_NamedAddress_Protocol_Protocol_MIN = UnresolvedAddress_NamedAddress_Protocol_TCP;
const UnresolvedAddress_NamedAddress_Protocol UnresolvedAddress_NamedAddress_Protocol_Protocol_MAX = UnresolvedAddress_NamedAddress_Protocol_TCP;
const int UnresolvedAddress_NamedAddress_Protocol_Protocol_ARRAYSIZE = UnresolvedAddress_NamedAddress_Protocol_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnresolvedAddress_NamedAddress_Protocol_descriptor();
inline const ::std::string& UnresolvedAddress_NamedAddress_Protocol_Name(UnresolvedAddress_NamedAddress_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnresolvedAddress_NamedAddress_Protocol_descriptor(), value);
}
inline bool UnresolvedAddress_NamedAddress_Protocol_Parse(
    const ::std::string& name, UnresolvedAddress_NamedAddress_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnresolvedAddress_NamedAddress_Protocol>(
    UnresolvedAddress_NamedAddress_Protocol_descriptor(), name, value);
}
enum ResolvedAddress_SocketAddress_Protocol {
  ResolvedAddress_SocketAddress_Protocol_TCP = 0,
  ResolvedAddress_SocketAddress_Protocol_ResolvedAddress_SocketAddress_Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResolvedAddress_SocketAddress_Protocol_ResolvedAddress_SocketAddress_Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResolvedAddress_SocketAddress_Protocol_IsValid(int value);
const ResolvedAddress_SocketAddress_Protocol ResolvedAddress_SocketAddress_Protocol_Protocol_MIN = ResolvedAddress_SocketAddress_Protocol_TCP;
const ResolvedAddress_SocketAddress_Protocol ResolvedAddress_SocketAddress_Protocol_Protocol_MAX = ResolvedAddress_SocketAddress_Protocol_TCP;
const int ResolvedAddress_SocketAddress_Protocol_Protocol_ARRAYSIZE = ResolvedAddress_SocketAddress_Protocol_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResolvedAddress_SocketAddress_Protocol_descriptor();
inline const ::std::string& ResolvedAddress_SocketAddress_Protocol_Name(ResolvedAddress_SocketAddress_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResolvedAddress_SocketAddress_Protocol_descriptor(), value);
}
inline bool ResolvedAddress_SocketAddress_Protocol_Parse(
    const ::std::string& name, ResolvedAddress_SocketAddress_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResolvedAddress_SocketAddress_Protocol>(
    ResolvedAddress_SocketAddress_Protocol_descriptor(), name, value);
}
// ===================================================================

class Pipe : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.Pipe) */ {
 public:
  Pipe();
  virtual ~Pipe();

  Pipe(const Pipe& from);

  inline Pipe& operator=(const Pipe& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pipe& default_instance();

  static inline const Pipe* internal_default_instance() {
    return reinterpret_cast<const Pipe*>(
               &_Pipe_default_instance_);
  }

  void Swap(Pipe* other);

  // implements Message ----------------------------------------------

  inline Pipe* New() const PROTOBUF_FINAL { return New(NULL); }

  Pipe* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pipe& from);
  void MergeFrom(const Pipe& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pipe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.Pipe)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2faddress_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnresolvedAddress_NamedAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.UnresolvedAddress.NamedAddress) */ {
 public:
  UnresolvedAddress_NamedAddress();
  virtual ~UnresolvedAddress_NamedAddress();

  UnresolvedAddress_NamedAddress(const UnresolvedAddress_NamedAddress& from);

  inline UnresolvedAddress_NamedAddress& operator=(const UnresolvedAddress_NamedAddress& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnresolvedAddress_NamedAddress& default_instance();

  enum PortSpecifierCase {
    kPort = 3,
    kServiceName = 4,
    PORT_SPECIFIER_NOT_SET = 0,
  };

  static inline const UnresolvedAddress_NamedAddress* internal_default_instance() {
    return reinterpret_cast<const UnresolvedAddress_NamedAddress*>(
               &_UnresolvedAddress_NamedAddress_default_instance_);
  }

  void Swap(UnresolvedAddress_NamedAddress* other);

  // implements Message ----------------------------------------------

  inline UnresolvedAddress_NamedAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  UnresolvedAddress_NamedAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnresolvedAddress_NamedAddress& from);
  void MergeFrom(const UnresolvedAddress_NamedAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnresolvedAddress_NamedAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UnresolvedAddress_NamedAddress_Protocol Protocol;
  static const Protocol TCP =
    UnresolvedAddress_NamedAddress_Protocol_TCP;
  static inline bool Protocol_IsValid(int value) {
    return UnresolvedAddress_NamedAddress_Protocol_IsValid(value);
  }
  static const Protocol Protocol_MIN =
    UnresolvedAddress_NamedAddress_Protocol_Protocol_MIN;
  static const Protocol Protocol_MAX =
    UnresolvedAddress_NamedAddress_Protocol_Protocol_MAX;
  static const int Protocol_ARRAYSIZE =
    UnresolvedAddress_NamedAddress_Protocol_Protocol_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Protocol_descriptor() {
    return UnresolvedAddress_NamedAddress_Protocol_descriptor();
  }
  static inline const ::std::string& Protocol_Name(Protocol value) {
    return UnresolvedAddress_NamedAddress_Protocol_Name(value);
  }
  static inline bool Protocol_Parse(const ::std::string& name,
      Protocol* value) {
    return UnresolvedAddress_NamedAddress_Protocol_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // .envoy.api.v2.UnresolvedAddress.NamedAddress.Protocol protocol = 1;
  void clear_protocol();
  static const int kProtocolFieldNumber = 1;
  ::envoy::api::v2::UnresolvedAddress_NamedAddress_Protocol protocol() const;
  void set_protocol(::envoy::api::v2::UnresolvedAddress_NamedAddress_Protocol value);

  // .google.protobuf.UInt32Value port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  const ::google::protobuf::UInt32Value& port() const;
  ::google::protobuf::UInt32Value* mutable_port();
  ::google::protobuf::UInt32Value* release_port();
  void set_allocated_port(::google::protobuf::UInt32Value* port);

  // string service_name = 4;
  private:
  bool has_service_name() const;
  public:
  void clear_service_name();
  static const int kServiceNameFieldNumber = 4;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  PortSpecifierCase port_specifier_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.UnresolvedAddress.NamedAddress)
 private:
  void set_has_port();
  void set_has_service_name();

  inline bool has_port_specifier() const;
  void clear_port_specifier();
  inline void clear_has_port_specifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  int protocol_;
  union PortSpecifierUnion {
    PortSpecifierUnion() {}
    ::google::protobuf::UInt32Value* port_;
    ::google::protobuf::internal::ArenaStringPtr service_name_;
  } port_specifier_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_api_2faddress_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnresolvedAddress_Resolver : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.UnresolvedAddress.Resolver) */ {
 public:
  UnresolvedAddress_Resolver();
  virtual ~UnresolvedAddress_Resolver();

  UnresolvedAddress_Resolver(const UnresolvedAddress_Resolver& from);

  inline UnresolvedAddress_Resolver& operator=(const UnresolvedAddress_Resolver& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnresolvedAddress_Resolver& default_instance();

  static inline const UnresolvedAddress_Resolver* internal_default_instance() {
    return reinterpret_cast<const UnresolvedAddress_Resolver*>(
               &_UnresolvedAddress_Resolver_default_instance_);
  }

  void Swap(UnresolvedAddress_Resolver* other);

  // implements Message ----------------------------------------------

  inline UnresolvedAddress_Resolver* New() const PROTOBUF_FINAL { return New(NULL); }

  UnresolvedAddress_Resolver* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnresolvedAddress_Resolver& from);
  void MergeFrom(const UnresolvedAddress_Resolver& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnresolvedAddress_Resolver* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.UnresolvedAddress.Resolver)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2faddress_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnresolvedAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.UnresolvedAddress) */ {
 public:
  UnresolvedAddress();
  virtual ~UnresolvedAddress();

  UnresolvedAddress(const UnresolvedAddress& from);

  inline UnresolvedAddress& operator=(const UnresolvedAddress& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnresolvedAddress& default_instance();

  enum AddressCase {
    kNamedAddress = 2,
    kPipe = 3,
    ADDRESS_NOT_SET = 0,
  };

  static inline const UnresolvedAddress* internal_default_instance() {
    return reinterpret_cast<const UnresolvedAddress*>(
               &_UnresolvedAddress_default_instance_);
  }

  void Swap(UnresolvedAddress* other);

  // implements Message ----------------------------------------------

  inline UnresolvedAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  UnresolvedAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnresolvedAddress& from);
  void MergeFrom(const UnresolvedAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnresolvedAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UnresolvedAddress_NamedAddress NamedAddress;
  typedef UnresolvedAddress_Resolver Resolver;

  // accessors -------------------------------------------------------

  // .envoy.api.v2.UnresolvedAddress.Resolver resolver = 1;
  bool has_resolver() const;
  void clear_resolver();
  static const int kResolverFieldNumber = 1;
  const ::envoy::api::v2::UnresolvedAddress_Resolver& resolver() const;
  ::envoy::api::v2::UnresolvedAddress_Resolver* mutable_resolver();
  ::envoy::api::v2::UnresolvedAddress_Resolver* release_resolver();
  void set_allocated_resolver(::envoy::api::v2::UnresolvedAddress_Resolver* resolver);

  // .envoy.api.v2.UnresolvedAddress.NamedAddress named_address = 2;
  bool has_named_address() const;
  void clear_named_address();
  static const int kNamedAddressFieldNumber = 2;
  const ::envoy::api::v2::UnresolvedAddress_NamedAddress& named_address() const;
  ::envoy::api::v2::UnresolvedAddress_NamedAddress* mutable_named_address();
  ::envoy::api::v2::UnresolvedAddress_NamedAddress* release_named_address();
  void set_allocated_named_address(::envoy::api::v2::UnresolvedAddress_NamedAddress* named_address);

  // .envoy.api.v2.Pipe pipe = 3;
  bool has_pipe() const;
  void clear_pipe();
  static const int kPipeFieldNumber = 3;
  const ::envoy::api::v2::Pipe& pipe() const;
  ::envoy::api::v2::Pipe* mutable_pipe();
  ::envoy::api::v2::Pipe* release_pipe();
  void set_allocated_pipe(::envoy::api::v2::Pipe* pipe);

  AddressCase address_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.UnresolvedAddress)
 private:
  void set_has_named_address();
  void set_has_pipe();

  inline bool has_address() const;
  void clear_address();
  inline void clear_has_address();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::envoy::api::v2::UnresolvedAddress_Resolver* resolver_;
  union AddressUnion {
    AddressUnion() {}
    ::envoy::api::v2::UnresolvedAddress_NamedAddress* named_address_;
    ::envoy::api::v2::Pipe* pipe_;
  } address_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_api_2faddress_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnresolvedAddresses : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.UnresolvedAddresses) */ {
 public:
  UnresolvedAddresses();
  virtual ~UnresolvedAddresses();

  UnresolvedAddresses(const UnresolvedAddresses& from);

  inline UnresolvedAddresses& operator=(const UnresolvedAddresses& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnresolvedAddresses& default_instance();

  static inline const UnresolvedAddresses* internal_default_instance() {
    return reinterpret_cast<const UnresolvedAddresses*>(
               &_UnresolvedAddresses_default_instance_);
  }

  void Swap(UnresolvedAddresses* other);

  // implements Message ----------------------------------------------

  inline UnresolvedAddresses* New() const PROTOBUF_FINAL { return New(NULL); }

  UnresolvedAddresses* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnresolvedAddresses& from);
  void MergeFrom(const UnresolvedAddresses& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnresolvedAddresses* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.UnresolvedAddress addresses = 1;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 1;
  const ::envoy::api::v2::UnresolvedAddress& addresses(int index) const;
  ::envoy::api::v2::UnresolvedAddress* mutable_addresses(int index);
  ::envoy::api::v2::UnresolvedAddress* add_addresses();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::UnresolvedAddress >*
      mutable_addresses();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::UnresolvedAddress >&
      addresses() const;

  // @@protoc_insertion_point(class_scope:envoy.api.v2.UnresolvedAddresses)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::UnresolvedAddress > addresses_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2faddress_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAddress_SocketAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.ResolvedAddress.SocketAddress) */ {
 public:
  ResolvedAddress_SocketAddress();
  virtual ~ResolvedAddress_SocketAddress();

  ResolvedAddress_SocketAddress(const ResolvedAddress_SocketAddress& from);

  inline ResolvedAddress_SocketAddress& operator=(const ResolvedAddress_SocketAddress& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAddress_SocketAddress& default_instance();

  static inline const ResolvedAddress_SocketAddress* internal_default_instance() {
    return reinterpret_cast<const ResolvedAddress_SocketAddress*>(
               &_ResolvedAddress_SocketAddress_default_instance_);
  }

  void Swap(ResolvedAddress_SocketAddress* other);

  // implements Message ----------------------------------------------

  inline ResolvedAddress_SocketAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  ResolvedAddress_SocketAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResolvedAddress_SocketAddress& from);
  void MergeFrom(const ResolvedAddress_SocketAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResolvedAddress_SocketAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ResolvedAddress_SocketAddress_Protocol Protocol;
  static const Protocol TCP =
    ResolvedAddress_SocketAddress_Protocol_TCP;
  static inline bool Protocol_IsValid(int value) {
    return ResolvedAddress_SocketAddress_Protocol_IsValid(value);
  }
  static const Protocol Protocol_MIN =
    ResolvedAddress_SocketAddress_Protocol_Protocol_MIN;
  static const Protocol Protocol_MAX =
    ResolvedAddress_SocketAddress_Protocol_Protocol_MAX;
  static const int Protocol_ARRAYSIZE =
    ResolvedAddress_SocketAddress_Protocol_Protocol_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Protocol_descriptor() {
    return ResolvedAddress_SocketAddress_Protocol_descriptor();
  }
  static inline const ::std::string& Protocol_Name(Protocol value) {
    return ResolvedAddress_SocketAddress_Protocol_Name(value);
  }
  static inline bool Protocol_Parse(const ::std::string& name,
      Protocol* value) {
    return ResolvedAddress_SocketAddress_Protocol_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string ip_address = 2;
  void clear_ip_address();
  static const int kIpAddressFieldNumber = 2;
  const ::std::string& ip_address() const;
  void set_ip_address(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_address(::std::string&& value);
  #endif
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  ::std::string* mutable_ip_address();
  ::std::string* release_ip_address();
  void set_allocated_ip_address(::std::string* ip_address);

  // .google.protobuf.UInt32Value port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  const ::google::protobuf::UInt32Value& port() const;
  ::google::protobuf::UInt32Value* mutable_port();
  ::google::protobuf::UInt32Value* release_port();
  void set_allocated_port(::google::protobuf::UInt32Value* port);

  // .envoy.api.v2.ResolvedAddress.SocketAddress.Protocol protocol = 1;
  void clear_protocol();
  static const int kProtocolFieldNumber = 1;
  ::envoy::api::v2::ResolvedAddress_SocketAddress_Protocol protocol() const;
  void set_protocol(::envoy::api::v2::ResolvedAddress_SocketAddress_Protocol value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.ResolvedAddress.SocketAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_address_;
  ::google::protobuf::UInt32Value* port_;
  int protocol_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2faddress_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.ResolvedAddress) */ {
 public:
  ResolvedAddress();
  virtual ~ResolvedAddress();

  ResolvedAddress(const ResolvedAddress& from);

  inline ResolvedAddress& operator=(const ResolvedAddress& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAddress& default_instance();

  enum AddressCase {
    kSocketAddress = 2,
    kPipe = 3,
    ADDRESS_NOT_SET = 0,
  };

  static inline const ResolvedAddress* internal_default_instance() {
    return reinterpret_cast<const ResolvedAddress*>(
               &_ResolvedAddress_default_instance_);
  }

  void Swap(ResolvedAddress* other);

  // implements Message ----------------------------------------------

  inline ResolvedAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  ResolvedAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResolvedAddress& from);
  void MergeFrom(const ResolvedAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResolvedAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ResolvedAddress_SocketAddress SocketAddress;

  // accessors -------------------------------------------------------

  // .envoy.api.v2.ResolvedAddress.SocketAddress socket_address = 2;
  bool has_socket_address() const;
  void clear_socket_address();
  static const int kSocketAddressFieldNumber = 2;
  const ::envoy::api::v2::ResolvedAddress_SocketAddress& socket_address() const;
  ::envoy::api::v2::ResolvedAddress_SocketAddress* mutable_socket_address();
  ::envoy::api::v2::ResolvedAddress_SocketAddress* release_socket_address();
  void set_allocated_socket_address(::envoy::api::v2::ResolvedAddress_SocketAddress* socket_address);

  // .envoy.api.v2.Pipe pipe = 3;
  bool has_pipe() const;
  void clear_pipe();
  static const int kPipeFieldNumber = 3;
  const ::envoy::api::v2::Pipe& pipe() const;
  ::envoy::api::v2::Pipe* mutable_pipe();
  ::envoy::api::v2::Pipe* release_pipe();
  void set_allocated_pipe(::envoy::api::v2::Pipe* pipe);

  AddressCase address_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.ResolvedAddress)
 private:
  void set_has_socket_address();
  void set_has_pipe();

  inline bool has_address() const;
  void clear_address();
  inline void clear_has_address();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union AddressUnion {
    AddressUnion() {}
    ::envoy::api::v2::ResolvedAddress_SocketAddress* socket_address_;
    ::envoy::api::v2::Pipe* pipe_;
  } address_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_api_2faddress_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResolvedAddresses : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.ResolvedAddresses) */ {
 public:
  ResolvedAddresses();
  virtual ~ResolvedAddresses();

  ResolvedAddresses(const ResolvedAddresses& from);

  inline ResolvedAddresses& operator=(const ResolvedAddresses& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolvedAddresses& default_instance();

  static inline const ResolvedAddresses* internal_default_instance() {
    return reinterpret_cast<const ResolvedAddresses*>(
               &_ResolvedAddresses_default_instance_);
  }

  void Swap(ResolvedAddresses* other);

  // implements Message ----------------------------------------------

  inline ResolvedAddresses* New() const PROTOBUF_FINAL { return New(NULL); }

  ResolvedAddresses* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResolvedAddresses& from);
  void MergeFrom(const ResolvedAddresses& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResolvedAddresses* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.ResolvedAddress addresses = 1;
  int addresses_size() const;
  void clear_addresses();
  static const int kAddressesFieldNumber = 1;
  const ::envoy::api::v2::ResolvedAddress& addresses(int index) const;
  ::envoy::api::v2::ResolvedAddress* mutable_addresses(int index);
  ::envoy::api::v2::ResolvedAddress* add_addresses();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ResolvedAddress >*
      mutable_addresses();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ResolvedAddress >&
      addresses() const;

  // @@protoc_insertion_point(class_scope:envoy.api.v2.ResolvedAddresses)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ResolvedAddress > addresses_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2faddress_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Pipe

// string path = 1;
inline void Pipe::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pipe::path() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Pipe.path)
  return path_.GetNoArena();
}
inline void Pipe::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Pipe.path)
}
#if LANG_CXX11
inline void Pipe::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Pipe.path)
}
#endif
inline void Pipe::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Pipe.path)
}
inline void Pipe::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Pipe.path)
}
inline ::std::string* Pipe::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Pipe.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pipe::release_path() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Pipe.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pipe::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Pipe.path)
}

// -------------------------------------------------------------------

// UnresolvedAddress_NamedAddress

// .envoy.api.v2.UnresolvedAddress.NamedAddress.Protocol protocol = 1;
inline void UnresolvedAddress_NamedAddress::clear_protocol() {
  protocol_ = 0;
}
inline ::envoy::api::v2::UnresolvedAddress_NamedAddress_Protocol UnresolvedAddress_NamedAddress::protocol() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UnresolvedAddress.NamedAddress.protocol)
  return static_cast< ::envoy::api::v2::UnresolvedAddress_NamedAddress_Protocol >(protocol_);
}
inline void UnresolvedAddress_NamedAddress::set_protocol(::envoy::api::v2::UnresolvedAddress_NamedAddress_Protocol value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.UnresolvedAddress.NamedAddress.protocol)
}

// string address = 2;
inline void UnresolvedAddress_NamedAddress::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnresolvedAddress_NamedAddress::address() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UnresolvedAddress.NamedAddress.address)
  return address_.GetNoArena();
}
inline void UnresolvedAddress_NamedAddress::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.UnresolvedAddress.NamedAddress.address)
}
#if LANG_CXX11
inline void UnresolvedAddress_NamedAddress::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.UnresolvedAddress.NamedAddress.address)
}
#endif
inline void UnresolvedAddress_NamedAddress::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.UnresolvedAddress.NamedAddress.address)
}
inline void UnresolvedAddress_NamedAddress::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.UnresolvedAddress.NamedAddress.address)
}
inline ::std::string* UnresolvedAddress_NamedAddress::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UnresolvedAddress.NamedAddress.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnresolvedAddress_NamedAddress::release_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UnresolvedAddress.NamedAddress.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnresolvedAddress_NamedAddress::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UnresolvedAddress.NamedAddress.address)
}

// .google.protobuf.UInt32Value port = 3;
inline bool UnresolvedAddress_NamedAddress::has_port() const {
  return port_specifier_case() == kPort;
}
inline void UnresolvedAddress_NamedAddress::set_has_port() {
  _oneof_case_[0] = kPort;
}
inline void UnresolvedAddress_NamedAddress::clear_port() {
  if (has_port()) {
    delete port_specifier_.port_;
    clear_has_port_specifier();
  }
}
inline  const ::google::protobuf::UInt32Value& UnresolvedAddress_NamedAddress::port() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UnresolvedAddress.NamedAddress.port)
  return has_port()
      ? *port_specifier_.port_
      : ::google::protobuf::UInt32Value::default_instance();
}
inline ::google::protobuf::UInt32Value* UnresolvedAddress_NamedAddress::mutable_port() {
  if (!has_port()) {
    clear_port_specifier();
    set_has_port();
    port_specifier_.port_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UnresolvedAddress.NamedAddress.port)
  return port_specifier_.port_;
}
inline ::google::protobuf::UInt32Value* UnresolvedAddress_NamedAddress::release_port() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UnresolvedAddress.NamedAddress.port)
  if (has_port()) {
    clear_has_port_specifier();
    ::google::protobuf::UInt32Value* temp = port_specifier_.port_;
    port_specifier_.port_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UnresolvedAddress_NamedAddress::set_allocated_port(::google::protobuf::UInt32Value* port) {
  clear_port_specifier();
  if (port) {
    if (static_cast< ::google::protobuf::UInt32Value*>(port)->GetArena() != NULL) {
      ::google::protobuf::UInt32Value* new_port = new ::google::protobuf::UInt32Value;
      new_port->CopyFrom(*port);
      port = new_port;
    }
    set_has_port();
    port_specifier_.port_ = port;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UnresolvedAddress.NamedAddress.port)
}

// string service_name = 4;
inline bool UnresolvedAddress_NamedAddress::has_service_name() const {
  return port_specifier_case() == kServiceName;
}
inline void UnresolvedAddress_NamedAddress::set_has_service_name() {
  _oneof_case_[0] = kServiceName;
}
inline void UnresolvedAddress_NamedAddress::clear_service_name() {
  if (has_service_name()) {
    port_specifier_.service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_port_specifier();
  }
}
inline const ::std::string& UnresolvedAddress_NamedAddress::service_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UnresolvedAddress.NamedAddress.service_name)
  if (has_service_name()) {
    return port_specifier_.service_name_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void UnresolvedAddress_NamedAddress::set_service_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.UnresolvedAddress.NamedAddress.service_name)
  if (!has_service_name()) {
    clear_port_specifier();
    set_has_service_name();
    port_specifier_.service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_specifier_.service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.UnresolvedAddress.NamedAddress.service_name)
}
#if LANG_CXX11
inline void UnresolvedAddress_NamedAddress::set_service_name(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.UnresolvedAddress.NamedAddress.service_name)
  if (!has_service_name()) {
    clear_port_specifier();
    set_has_service_name();
    port_specifier_.service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_specifier_.service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.UnresolvedAddress.NamedAddress.service_name)
}
#endif
inline void UnresolvedAddress_NamedAddress::set_service_name(const char* value) {
  if (!has_service_name()) {
    clear_port_specifier();
    set_has_service_name();
    port_specifier_.service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_specifier_.service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.UnresolvedAddress.NamedAddress.service_name)
}
inline void UnresolvedAddress_NamedAddress::set_service_name(const char* value, size_t size) {
  if (!has_service_name()) {
    clear_port_specifier();
    set_has_service_name();
    port_specifier_.service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_specifier_.service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.UnresolvedAddress.NamedAddress.service_name)
}
inline ::std::string* UnresolvedAddress_NamedAddress::mutable_service_name() {
  if (!has_service_name()) {
    clear_port_specifier();
    set_has_service_name();
    port_specifier_.service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UnresolvedAddress.NamedAddress.service_name)
  return port_specifier_.service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnresolvedAddress_NamedAddress::release_service_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UnresolvedAddress.NamedAddress.service_name)
  if (has_service_name()) {
    clear_has_port_specifier();
    return port_specifier_.service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void UnresolvedAddress_NamedAddress::set_allocated_service_name(::std::string* service_name) {
  if (!has_service_name()) {
    port_specifier_.service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_port_specifier();
  if (service_name != NULL) {
    set_has_service_name();
    port_specifier_.service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        service_name);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UnresolvedAddress.NamedAddress.service_name)
}

inline bool UnresolvedAddress_NamedAddress::has_port_specifier() const {
  return port_specifier_case() != PORT_SPECIFIER_NOT_SET;
}
inline void UnresolvedAddress_NamedAddress::clear_has_port_specifier() {
  _oneof_case_[0] = PORT_SPECIFIER_NOT_SET;
}
inline UnresolvedAddress_NamedAddress::PortSpecifierCase UnresolvedAddress_NamedAddress::port_specifier_case() const {
  return UnresolvedAddress_NamedAddress::PortSpecifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UnresolvedAddress_Resolver

// string name = 1;
inline void UnresolvedAddress_Resolver::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnresolvedAddress_Resolver::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UnresolvedAddress.Resolver.name)
  return name_.GetNoArena();
}
inline void UnresolvedAddress_Resolver::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.UnresolvedAddress.Resolver.name)
}
#if LANG_CXX11
inline void UnresolvedAddress_Resolver::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.UnresolvedAddress.Resolver.name)
}
#endif
inline void UnresolvedAddress_Resolver::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.UnresolvedAddress.Resolver.name)
}
inline void UnresolvedAddress_Resolver::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.UnresolvedAddress.Resolver.name)
}
inline ::std::string* UnresolvedAddress_Resolver::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UnresolvedAddress.Resolver.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnresolvedAddress_Resolver::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UnresolvedAddress.Resolver.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnresolvedAddress_Resolver::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UnresolvedAddress.Resolver.name)
}

// -------------------------------------------------------------------

// UnresolvedAddress

// .envoy.api.v2.UnresolvedAddress.Resolver resolver = 1;
inline bool UnresolvedAddress::has_resolver() const {
  return this != internal_default_instance() && resolver_ != NULL;
}
inline void UnresolvedAddress::clear_resolver() {
  if (GetArenaNoVirtual() == NULL && resolver_ != NULL) delete resolver_;
  resolver_ = NULL;
}
inline const ::envoy::api::v2::UnresolvedAddress_Resolver& UnresolvedAddress::resolver() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UnresolvedAddress.resolver)
  return resolver_ != NULL ? *resolver_
                         : *::envoy::api::v2::UnresolvedAddress_Resolver::internal_default_instance();
}
inline ::envoy::api::v2::UnresolvedAddress_Resolver* UnresolvedAddress::mutable_resolver() {
  
  if (resolver_ == NULL) {
    resolver_ = new ::envoy::api::v2::UnresolvedAddress_Resolver;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UnresolvedAddress.resolver)
  return resolver_;
}
inline ::envoy::api::v2::UnresolvedAddress_Resolver* UnresolvedAddress::release_resolver() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UnresolvedAddress.resolver)
  
  ::envoy::api::v2::UnresolvedAddress_Resolver* temp = resolver_;
  resolver_ = NULL;
  return temp;
}
inline void UnresolvedAddress::set_allocated_resolver(::envoy::api::v2::UnresolvedAddress_Resolver* resolver) {
  delete resolver_;
  resolver_ = resolver;
  if (resolver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UnresolvedAddress.resolver)
}

// .envoy.api.v2.UnresolvedAddress.NamedAddress named_address = 2;
inline bool UnresolvedAddress::has_named_address() const {
  return address_case() == kNamedAddress;
}
inline void UnresolvedAddress::set_has_named_address() {
  _oneof_case_[0] = kNamedAddress;
}
inline void UnresolvedAddress::clear_named_address() {
  if (has_named_address()) {
    delete address_.named_address_;
    clear_has_address();
  }
}
inline  const ::envoy::api::v2::UnresolvedAddress_NamedAddress& UnresolvedAddress::named_address() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UnresolvedAddress.named_address)
  return has_named_address()
      ? *address_.named_address_
      : ::envoy::api::v2::UnresolvedAddress_NamedAddress::default_instance();
}
inline ::envoy::api::v2::UnresolvedAddress_NamedAddress* UnresolvedAddress::mutable_named_address() {
  if (!has_named_address()) {
    clear_address();
    set_has_named_address();
    address_.named_address_ = new ::envoy::api::v2::UnresolvedAddress_NamedAddress;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UnresolvedAddress.named_address)
  return address_.named_address_;
}
inline ::envoy::api::v2::UnresolvedAddress_NamedAddress* UnresolvedAddress::release_named_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UnresolvedAddress.named_address)
  if (has_named_address()) {
    clear_has_address();
    ::envoy::api::v2::UnresolvedAddress_NamedAddress* temp = address_.named_address_;
    address_.named_address_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UnresolvedAddress::set_allocated_named_address(::envoy::api::v2::UnresolvedAddress_NamedAddress* named_address) {
  clear_address();
  if (named_address) {
    set_has_named_address();
    address_.named_address_ = named_address;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UnresolvedAddress.named_address)
}

// .envoy.api.v2.Pipe pipe = 3;
inline bool UnresolvedAddress::has_pipe() const {
  return address_case() == kPipe;
}
inline void UnresolvedAddress::set_has_pipe() {
  _oneof_case_[0] = kPipe;
}
inline void UnresolvedAddress::clear_pipe() {
  if (has_pipe()) {
    delete address_.pipe_;
    clear_has_address();
  }
}
inline  const ::envoy::api::v2::Pipe& UnresolvedAddress::pipe() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UnresolvedAddress.pipe)
  return has_pipe()
      ? *address_.pipe_
      : ::envoy::api::v2::Pipe::default_instance();
}
inline ::envoy::api::v2::Pipe* UnresolvedAddress::mutable_pipe() {
  if (!has_pipe()) {
    clear_address();
    set_has_pipe();
    address_.pipe_ = new ::envoy::api::v2::Pipe;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UnresolvedAddress.pipe)
  return address_.pipe_;
}
inline ::envoy::api::v2::Pipe* UnresolvedAddress::release_pipe() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UnresolvedAddress.pipe)
  if (has_pipe()) {
    clear_has_address();
    ::envoy::api::v2::Pipe* temp = address_.pipe_;
    address_.pipe_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void UnresolvedAddress::set_allocated_pipe(::envoy::api::v2::Pipe* pipe) {
  clear_address();
  if (pipe) {
    set_has_pipe();
    address_.pipe_ = pipe;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UnresolvedAddress.pipe)
}

inline bool UnresolvedAddress::has_address() const {
  return address_case() != ADDRESS_NOT_SET;
}
inline void UnresolvedAddress::clear_has_address() {
  _oneof_case_[0] = ADDRESS_NOT_SET;
}
inline UnresolvedAddress::AddressCase UnresolvedAddress::address_case() const {
  return UnresolvedAddress::AddressCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UnresolvedAddresses

// repeated .envoy.api.v2.UnresolvedAddress addresses = 1;
inline int UnresolvedAddresses::addresses_size() const {
  return addresses_.size();
}
inline void UnresolvedAddresses::clear_addresses() {
  addresses_.Clear();
}
inline const ::envoy::api::v2::UnresolvedAddress& UnresolvedAddresses::addresses(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UnresolvedAddresses.addresses)
  return addresses_.Get(index);
}
inline ::envoy::api::v2::UnresolvedAddress* UnresolvedAddresses::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UnresolvedAddresses.addresses)
  return addresses_.Mutable(index);
}
inline ::envoy::api::v2::UnresolvedAddress* UnresolvedAddresses::add_addresses() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.UnresolvedAddresses.addresses)
  return addresses_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::UnresolvedAddress >*
UnresolvedAddresses::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.UnresolvedAddresses.addresses)
  return &addresses_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::UnresolvedAddress >&
UnresolvedAddresses::addresses() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.UnresolvedAddresses.addresses)
  return addresses_;
}

// -------------------------------------------------------------------

// ResolvedAddress_SocketAddress

// .envoy.api.v2.ResolvedAddress.SocketAddress.Protocol protocol = 1;
inline void ResolvedAddress_SocketAddress::clear_protocol() {
  protocol_ = 0;
}
inline ::envoy::api::v2::ResolvedAddress_SocketAddress_Protocol ResolvedAddress_SocketAddress::protocol() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ResolvedAddress.SocketAddress.protocol)
  return static_cast< ::envoy::api::v2::ResolvedAddress_SocketAddress_Protocol >(protocol_);
}
inline void ResolvedAddress_SocketAddress::set_protocol(::envoy::api::v2::ResolvedAddress_SocketAddress_Protocol value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.ResolvedAddress.SocketAddress.protocol)
}

// string ip_address = 2;
inline void ResolvedAddress_SocketAddress::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResolvedAddress_SocketAddress::ip_address() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ResolvedAddress.SocketAddress.ip_address)
  return ip_address_.GetNoArena();
}
inline void ResolvedAddress_SocketAddress::set_ip_address(const ::std::string& value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ResolvedAddress.SocketAddress.ip_address)
}
#if LANG_CXX11
inline void ResolvedAddress_SocketAddress::set_ip_address(::std::string&& value) {
  
  ip_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ResolvedAddress.SocketAddress.ip_address)
}
#endif
inline void ResolvedAddress_SocketAddress::set_ip_address(const char* value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ResolvedAddress.SocketAddress.ip_address)
}
inline void ResolvedAddress_SocketAddress::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ResolvedAddress.SocketAddress.ip_address)
}
inline ::std::string* ResolvedAddress_SocketAddress::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ResolvedAddress.SocketAddress.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResolvedAddress_SocketAddress::release_ip_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ResolvedAddress.SocketAddress.ip_address)
  
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResolvedAddress_SocketAddress::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ResolvedAddress.SocketAddress.ip_address)
}

// .google.protobuf.UInt32Value port = 3;
inline bool ResolvedAddress_SocketAddress::has_port() const {
  return this != internal_default_instance() && port_ != NULL;
}
inline void ResolvedAddress_SocketAddress::clear_port() {
  if (GetArenaNoVirtual() == NULL && port_ != NULL) delete port_;
  port_ = NULL;
}
inline const ::google::protobuf::UInt32Value& ResolvedAddress_SocketAddress::port() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ResolvedAddress.SocketAddress.port)
  return port_ != NULL ? *port_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* ResolvedAddress_SocketAddress::mutable_port() {
  
  if (port_ == NULL) {
    port_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ResolvedAddress.SocketAddress.port)
  return port_;
}
inline ::google::protobuf::UInt32Value* ResolvedAddress_SocketAddress::release_port() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ResolvedAddress.SocketAddress.port)
  
  ::google::protobuf::UInt32Value* temp = port_;
  port_ = NULL;
  return temp;
}
inline void ResolvedAddress_SocketAddress::set_allocated_port(::google::protobuf::UInt32Value* port) {
  delete port_;
  if (port != NULL && port->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_port = new ::google::protobuf::UInt32Value;
    new_port->CopyFrom(*port);
    port = new_port;
  }
  port_ = port;
  if (port) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ResolvedAddress.SocketAddress.port)
}

// -------------------------------------------------------------------

// ResolvedAddress

// .envoy.api.v2.ResolvedAddress.SocketAddress socket_address = 2;
inline bool ResolvedAddress::has_socket_address() const {
  return address_case() == kSocketAddress;
}
inline void ResolvedAddress::set_has_socket_address() {
  _oneof_case_[0] = kSocketAddress;
}
inline void ResolvedAddress::clear_socket_address() {
  if (has_socket_address()) {
    delete address_.socket_address_;
    clear_has_address();
  }
}
inline  const ::envoy::api::v2::ResolvedAddress_SocketAddress& ResolvedAddress::socket_address() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ResolvedAddress.socket_address)
  return has_socket_address()
      ? *address_.socket_address_
      : ::envoy::api::v2::ResolvedAddress_SocketAddress::default_instance();
}
inline ::envoy::api::v2::ResolvedAddress_SocketAddress* ResolvedAddress::mutable_socket_address() {
  if (!has_socket_address()) {
    clear_address();
    set_has_socket_address();
    address_.socket_address_ = new ::envoy::api::v2::ResolvedAddress_SocketAddress;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ResolvedAddress.socket_address)
  return address_.socket_address_;
}
inline ::envoy::api::v2::ResolvedAddress_SocketAddress* ResolvedAddress::release_socket_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ResolvedAddress.socket_address)
  if (has_socket_address()) {
    clear_has_address();
    ::envoy::api::v2::ResolvedAddress_SocketAddress* temp = address_.socket_address_;
    address_.socket_address_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ResolvedAddress::set_allocated_socket_address(::envoy::api::v2::ResolvedAddress_SocketAddress* socket_address) {
  clear_address();
  if (socket_address) {
    set_has_socket_address();
    address_.socket_address_ = socket_address;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ResolvedAddress.socket_address)
}

// .envoy.api.v2.Pipe pipe = 3;
inline bool ResolvedAddress::has_pipe() const {
  return address_case() == kPipe;
}
inline void ResolvedAddress::set_has_pipe() {
  _oneof_case_[0] = kPipe;
}
inline void ResolvedAddress::clear_pipe() {
  if (has_pipe()) {
    delete address_.pipe_;
    clear_has_address();
  }
}
inline  const ::envoy::api::v2::Pipe& ResolvedAddress::pipe() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ResolvedAddress.pipe)
  return has_pipe()
      ? *address_.pipe_
      : ::envoy::api::v2::Pipe::default_instance();
}
inline ::envoy::api::v2::Pipe* ResolvedAddress::mutable_pipe() {
  if (!has_pipe()) {
    clear_address();
    set_has_pipe();
    address_.pipe_ = new ::envoy::api::v2::Pipe;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ResolvedAddress.pipe)
  return address_.pipe_;
}
inline ::envoy::api::v2::Pipe* ResolvedAddress::release_pipe() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ResolvedAddress.pipe)
  if (has_pipe()) {
    clear_has_address();
    ::envoy::api::v2::Pipe* temp = address_.pipe_;
    address_.pipe_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ResolvedAddress::set_allocated_pipe(::envoy::api::v2::Pipe* pipe) {
  clear_address();
  if (pipe) {
    set_has_pipe();
    address_.pipe_ = pipe;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ResolvedAddress.pipe)
}

inline bool ResolvedAddress::has_address() const {
  return address_case() != ADDRESS_NOT_SET;
}
inline void ResolvedAddress::clear_has_address() {
  _oneof_case_[0] = ADDRESS_NOT_SET;
}
inline ResolvedAddress::AddressCase ResolvedAddress::address_case() const {
  return ResolvedAddress::AddressCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResolvedAddresses

// repeated .envoy.api.v2.ResolvedAddress addresses = 1;
inline int ResolvedAddresses::addresses_size() const {
  return addresses_.size();
}
inline void ResolvedAddresses::clear_addresses() {
  addresses_.Clear();
}
inline const ::envoy::api::v2::ResolvedAddress& ResolvedAddresses::addresses(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ResolvedAddresses.addresses)
  return addresses_.Get(index);
}
inline ::envoy::api::v2::ResolvedAddress* ResolvedAddresses::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ResolvedAddresses.addresses)
  return addresses_.Mutable(index);
}
inline ::envoy::api::v2::ResolvedAddress* ResolvedAddresses::add_addresses() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.ResolvedAddresses.addresses)
  return addresses_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ResolvedAddress >*
ResolvedAddresses::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.ResolvedAddresses.addresses)
  return &addresses_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ResolvedAddress >&
ResolvedAddresses::addresses() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.ResolvedAddresses.addresses)
  return addresses_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v2
}  // namespace api
}  // namespace envoy

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::envoy::api::v2::UnresolvedAddress_NamedAddress_Protocol> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::UnresolvedAddress_NamedAddress_Protocol>() {
  return ::envoy::api::v2::UnresolvedAddress_NamedAddress_Protocol_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::ResolvedAddress_SocketAddress_Protocol> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::ResolvedAddress_SocketAddress_Protocol>() {
  return ::envoy::api::v2::ResolvedAddress_SocketAddress_Protocol_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2faddress_2eproto__INCLUDED
