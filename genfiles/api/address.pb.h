// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/address.proto

#ifndef PROTOBUF_api_2faddress_2eproto__INCLUDED
#define PROTOBUF_api_2faddress_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class BindConfig;
class BindConfigDefaultTypeInternal;
extern BindConfigDefaultTypeInternal _BindConfig_default_instance_;
class Pipe;
class PipeDefaultTypeInternal;
extern PipeDefaultTypeInternal _Pipe_default_instance_;
class SocketAddress;
class SocketAddressDefaultTypeInternal;
extern SocketAddressDefaultTypeInternal _SocketAddress_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace envoy

namespace envoy {
namespace api {
namespace v2 {

namespace protobuf_api_2faddress_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_api_2faddress_2eproto

enum SocketAddress_Protocol {
  SocketAddress_Protocol_TCP = 0,
  SocketAddress_Protocol_UDP = 1,
  SocketAddress_Protocol_SocketAddress_Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SocketAddress_Protocol_SocketAddress_Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SocketAddress_Protocol_IsValid(int value);
const SocketAddress_Protocol SocketAddress_Protocol_Protocol_MIN = SocketAddress_Protocol_TCP;
const SocketAddress_Protocol SocketAddress_Protocol_Protocol_MAX = SocketAddress_Protocol_UDP;
const int SocketAddress_Protocol_Protocol_ARRAYSIZE = SocketAddress_Protocol_Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* SocketAddress_Protocol_descriptor();
inline const ::std::string& SocketAddress_Protocol_Name(SocketAddress_Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    SocketAddress_Protocol_descriptor(), value);
}
inline bool SocketAddress_Protocol_Parse(
    const ::std::string& name, SocketAddress_Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SocketAddress_Protocol>(
    SocketAddress_Protocol_descriptor(), name, value);
}
// ===================================================================

class Pipe : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.Pipe) */ {
 public:
  Pipe();
  virtual ~Pipe();

  Pipe(const Pipe& from);

  inline Pipe& operator=(const Pipe& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pipe(Pipe&& from) noexcept
    : Pipe() {
    *this = ::std::move(from);
  }

  inline Pipe& operator=(Pipe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pipe& default_instance();

  static inline const Pipe* internal_default_instance() {
    return reinterpret_cast<const Pipe*>(
               &_Pipe_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Pipe* other);
  friend void swap(Pipe& a, Pipe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pipe* New() const PROTOBUF_FINAL { return New(NULL); }

  Pipe* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pipe& from);
  void MergeFrom(const Pipe& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pipe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.Pipe)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct protobuf_api_2faddress_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SocketAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.SocketAddress) */ {
 public:
  SocketAddress();
  virtual ~SocketAddress();

  SocketAddress(const SocketAddress& from);

  inline SocketAddress& operator=(const SocketAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SocketAddress(SocketAddress&& from) noexcept
    : SocketAddress() {
    *this = ::std::move(from);
  }

  inline SocketAddress& operator=(SocketAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SocketAddress& default_instance();

  enum PortSpecifierCase {
    kPortValue = 3,
    kNamedPort = 4,
    PORT_SPECIFIER_NOT_SET = 0,
  };

  static inline const SocketAddress* internal_default_instance() {
    return reinterpret_cast<const SocketAddress*>(
               &_SocketAddress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SocketAddress* other);
  friend void swap(SocketAddress& a, SocketAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SocketAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  SocketAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SocketAddress& from);
  void MergeFrom(const SocketAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SocketAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SocketAddress_Protocol Protocol;
  static const Protocol TCP =
    SocketAddress_Protocol_TCP;
  static const Protocol UDP =
    SocketAddress_Protocol_UDP;
  static inline bool Protocol_IsValid(int value) {
    return SocketAddress_Protocol_IsValid(value);
  }
  static const Protocol Protocol_MIN =
    SocketAddress_Protocol_Protocol_MIN;
  static const Protocol Protocol_MAX =
    SocketAddress_Protocol_Protocol_MAX;
  static const int Protocol_ARRAYSIZE =
    SocketAddress_Protocol_Protocol_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Protocol_descriptor() {
    return SocketAddress_Protocol_descriptor();
  }
  static inline const ::std::string& Protocol_Name(Protocol value) {
    return SocketAddress_Protocol_Name(value);
  }
  static inline bool Protocol_Parse(const ::std::string& name,
      Protocol* value) {
    return SocketAddress_Protocol_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string resolver_name = 5;
  void clear_resolver_name();
  static const int kResolverNameFieldNumber = 5;
  const ::std::string& resolver_name() const;
  void set_resolver_name(const ::std::string& value);
  #if LANG_CXX11
  void set_resolver_name(::std::string&& value);
  #endif
  void set_resolver_name(const char* value);
  void set_resolver_name(const char* value, size_t size);
  ::std::string* mutable_resolver_name();
  ::std::string* release_resolver_name();
  void set_allocated_resolver_name(::std::string* resolver_name);

  // .envoy.api.v2.SocketAddress.Protocol protocol = 1;
  void clear_protocol();
  static const int kProtocolFieldNumber = 1;
  ::envoy::api::v2::SocketAddress_Protocol protocol() const;
  void set_protocol(::envoy::api::v2::SocketAddress_Protocol value);

  // uint32 port_value = 3;
  private:
  bool has_port_value() const;
  public:
  void clear_port_value();
  static const int kPortValueFieldNumber = 3;
  ::google::protobuf::uint32 port_value() const;
  void set_port_value(::google::protobuf::uint32 value);

  // string named_port = 4;
  private:
  bool has_named_port() const;
  public:
  void clear_named_port();
  static const int kNamedPortFieldNumber = 4;
  const ::std::string& named_port() const;
  void set_named_port(const ::std::string& value);
  #if LANG_CXX11
  void set_named_port(::std::string&& value);
  #endif
  void set_named_port(const char* value);
  void set_named_port(const char* value, size_t size);
  ::std::string* mutable_named_port();
  ::std::string* release_named_port();
  void set_allocated_named_port(::std::string* named_port);

  PortSpecifierCase port_specifier_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.SocketAddress)
 private:
  void set_has_port_value();
  void set_has_named_port();

  inline bool has_port_specifier() const;
  void clear_port_specifier();
  inline void clear_has_port_specifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr resolver_name_;
  int protocol_;
  union PortSpecifierUnion {
    PortSpecifierUnion() {}
    ::google::protobuf::uint32 port_value_;
    ::google::protobuf::internal::ArenaStringPtr named_port_;
  } port_specifier_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_api_2faddress_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BindConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.BindConfig) */ {
 public:
  BindConfig();
  virtual ~BindConfig();

  BindConfig(const BindConfig& from);

  inline BindConfig& operator=(const BindConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BindConfig(BindConfig&& from) noexcept
    : BindConfig() {
    *this = ::std::move(from);
  }

  inline BindConfig& operator=(BindConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BindConfig& default_instance();

  static inline const BindConfig* internal_default_instance() {
    return reinterpret_cast<const BindConfig*>(
               &_BindConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BindConfig* other);
  friend void swap(BindConfig& a, BindConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BindConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  BindConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BindConfig& from);
  void MergeFrom(const BindConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BindConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .envoy.api.v2.SocketAddress source_address = 1;
  bool has_source_address() const;
  void clear_source_address();
  static const int kSourceAddressFieldNumber = 1;
  const ::envoy::api::v2::SocketAddress& source_address() const;
  ::envoy::api::v2::SocketAddress* mutable_source_address();
  ::envoy::api::v2::SocketAddress* release_source_address();
  void set_allocated_source_address(::envoy::api::v2::SocketAddress* source_address);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.BindConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::envoy::api::v2::SocketAddress* source_address_;
  mutable int _cached_size_;
  friend struct protobuf_api_2faddress_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  enum AddressCase {
    kSocketAddress = 1,
    kPipe = 2,
    ADDRESS_NOT_SET = 0,
  };

  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Address* other);
  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const PROTOBUF_FINAL { return New(NULL); }

  Address* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .envoy.api.v2.SocketAddress socket_address = 1;
  bool has_socket_address() const;
  void clear_socket_address();
  static const int kSocketAddressFieldNumber = 1;
  const ::envoy::api::v2::SocketAddress& socket_address() const;
  ::envoy::api::v2::SocketAddress* mutable_socket_address();
  ::envoy::api::v2::SocketAddress* release_socket_address();
  void set_allocated_socket_address(::envoy::api::v2::SocketAddress* socket_address);

  // .envoy.api.v2.Pipe pipe = 2;
  bool has_pipe() const;
  void clear_pipe();
  static const int kPipeFieldNumber = 2;
  const ::envoy::api::v2::Pipe& pipe() const;
  ::envoy::api::v2::Pipe* mutable_pipe();
  ::envoy::api::v2::Pipe* release_pipe();
  void set_allocated_pipe(::envoy::api::v2::Pipe* pipe);

  AddressCase address_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.Address)
 private:
  void set_has_socket_address();
  void set_has_pipe();

  inline bool has_address() const;
  void clear_address();
  inline void clear_has_address();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union AddressUnion {
    AddressUnion() {}
    ::envoy::api::v2::SocketAddress* socket_address_;
    ::envoy::api::v2::Pipe* pipe_;
  } address_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_api_2faddress_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pipe

// string path = 1;
inline void Pipe::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pipe::path() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Pipe.path)
  return path_.GetNoArena();
}
inline void Pipe::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Pipe.path)
}
#if LANG_CXX11
inline void Pipe::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Pipe.path)
}
#endif
inline void Pipe::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Pipe.path)
}
inline void Pipe::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Pipe.path)
}
inline ::std::string* Pipe::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Pipe.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pipe::release_path() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Pipe.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pipe::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Pipe.path)
}

// -------------------------------------------------------------------

// SocketAddress

// .envoy.api.v2.SocketAddress.Protocol protocol = 1;
inline void SocketAddress::clear_protocol() {
  protocol_ = 0;
}
inline ::envoy::api::v2::SocketAddress_Protocol SocketAddress::protocol() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.SocketAddress.protocol)
  return static_cast< ::envoy::api::v2::SocketAddress_Protocol >(protocol_);
}
inline void SocketAddress::set_protocol(::envoy::api::v2::SocketAddress_Protocol value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.protocol)
}

// string address = 2;
inline void SocketAddress::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SocketAddress::address() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.SocketAddress.address)
  return address_.GetNoArena();
}
inline void SocketAddress::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.address)
}
#if LANG_CXX11
inline void SocketAddress::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.SocketAddress.address)
}
#endif
inline void SocketAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.SocketAddress.address)
}
inline void SocketAddress::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.SocketAddress.address)
}
inline ::std::string* SocketAddress::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.SocketAddress.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SocketAddress::release_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.SocketAddress.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SocketAddress::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.SocketAddress.address)
}

// uint32 port_value = 3;
inline bool SocketAddress::has_port_value() const {
  return port_specifier_case() == kPortValue;
}
inline void SocketAddress::set_has_port_value() {
  _oneof_case_[0] = kPortValue;
}
inline void SocketAddress::clear_port_value() {
  if (has_port_value()) {
    port_specifier_.port_value_ = 0u;
    clear_has_port_specifier();
  }
}
inline ::google::protobuf::uint32 SocketAddress::port_value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.SocketAddress.port_value)
  if (has_port_value()) {
    return port_specifier_.port_value_;
  }
  return 0u;
}
inline void SocketAddress::set_port_value(::google::protobuf::uint32 value) {
  if (!has_port_value()) {
    clear_port_specifier();
    set_has_port_value();
  }
  port_specifier_.port_value_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.port_value)
}

// string named_port = 4;
inline bool SocketAddress::has_named_port() const {
  return port_specifier_case() == kNamedPort;
}
inline void SocketAddress::set_has_named_port() {
  _oneof_case_[0] = kNamedPort;
}
inline void SocketAddress::clear_named_port() {
  if (has_named_port()) {
    port_specifier_.named_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_port_specifier();
  }
}
inline const ::std::string& SocketAddress::named_port() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.SocketAddress.named_port)
  if (has_named_port()) {
    return port_specifier_.named_port_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SocketAddress::set_named_port(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.named_port)
  if (!has_named_port()) {
    clear_port_specifier();
    set_has_named_port();
    port_specifier_.named_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_specifier_.named_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.named_port)
}
#if LANG_CXX11
inline void SocketAddress::set_named_port(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.named_port)
  if (!has_named_port()) {
    clear_port_specifier();
    set_has_named_port();
    port_specifier_.named_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_specifier_.named_port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.SocketAddress.named_port)
}
#endif
inline void SocketAddress::set_named_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_named_port()) {
    clear_port_specifier();
    set_has_named_port();
    port_specifier_.named_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_specifier_.named_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.SocketAddress.named_port)
}
inline void SocketAddress::set_named_port(const char* value, size_t size) {
  if (!has_named_port()) {
    clear_port_specifier();
    set_has_named_port();
    port_specifier_.named_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_specifier_.named_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.SocketAddress.named_port)
}
inline ::std::string* SocketAddress::mutable_named_port() {
  if (!has_named_port()) {
    clear_port_specifier();
    set_has_named_port();
    port_specifier_.named_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.SocketAddress.named_port)
  return port_specifier_.named_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SocketAddress::release_named_port() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.SocketAddress.named_port)
  if (has_named_port()) {
    clear_has_port_specifier();
    return port_specifier_.named_port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void SocketAddress::set_allocated_named_port(::std::string* named_port) {
  if (!has_named_port()) {
    port_specifier_.named_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_port_specifier();
  if (named_port != NULL) {
    set_has_named_port();
    port_specifier_.named_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        named_port);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.SocketAddress.named_port)
}

// string resolver_name = 5;
inline void SocketAddress::clear_resolver_name() {
  resolver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SocketAddress::resolver_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.SocketAddress.resolver_name)
  return resolver_name_.GetNoArena();
}
inline void SocketAddress::set_resolver_name(const ::std::string& value) {
  
  resolver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.resolver_name)
}
#if LANG_CXX11
inline void SocketAddress::set_resolver_name(::std::string&& value) {
  
  resolver_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.SocketAddress.resolver_name)
}
#endif
inline void SocketAddress::set_resolver_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resolver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.SocketAddress.resolver_name)
}
inline void SocketAddress::set_resolver_name(const char* value, size_t size) {
  
  resolver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.SocketAddress.resolver_name)
}
inline ::std::string* SocketAddress::mutable_resolver_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.SocketAddress.resolver_name)
  return resolver_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SocketAddress::release_resolver_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.SocketAddress.resolver_name)
  
  return resolver_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SocketAddress::set_allocated_resolver_name(::std::string* resolver_name) {
  if (resolver_name != NULL) {
    
  } else {
    
  }
  resolver_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resolver_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.SocketAddress.resolver_name)
}

inline bool SocketAddress::has_port_specifier() const {
  return port_specifier_case() != PORT_SPECIFIER_NOT_SET;
}
inline void SocketAddress::clear_has_port_specifier() {
  _oneof_case_[0] = PORT_SPECIFIER_NOT_SET;
}
inline SocketAddress::PortSpecifierCase SocketAddress::port_specifier_case() const {
  return SocketAddress::PortSpecifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BindConfig

// .envoy.api.v2.SocketAddress source_address = 1;
inline bool BindConfig::has_source_address() const {
  return this != internal_default_instance() && source_address_ != NULL;
}
inline void BindConfig::clear_source_address() {
  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) delete source_address_;
  source_address_ = NULL;
}
inline const ::envoy::api::v2::SocketAddress& BindConfig::source_address() const {
  const ::envoy::api::v2::SocketAddress* p = source_address_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.BindConfig.source_address)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::SocketAddress*>(
      &::envoy::api::v2::_SocketAddress_default_instance_);
}
inline ::envoy::api::v2::SocketAddress* BindConfig::mutable_source_address() {
  
  if (source_address_ == NULL) {
    source_address_ = new ::envoy::api::v2::SocketAddress;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.BindConfig.source_address)
  return source_address_;
}
inline ::envoy::api::v2::SocketAddress* BindConfig::release_source_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.BindConfig.source_address)
  
  ::envoy::api::v2::SocketAddress* temp = source_address_;
  source_address_ = NULL;
  return temp;
}
inline void BindConfig::set_allocated_source_address(::envoy::api::v2::SocketAddress* source_address) {
  delete source_address_;
  source_address_ = source_address;
  if (source_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.BindConfig.source_address)
}

// -------------------------------------------------------------------

// Address

// .envoy.api.v2.SocketAddress socket_address = 1;
inline bool Address::has_socket_address() const {
  return address_case() == kSocketAddress;
}
inline void Address::set_has_socket_address() {
  _oneof_case_[0] = kSocketAddress;
}
inline void Address::clear_socket_address() {
  if (has_socket_address()) {
    delete address_.socket_address_;
    clear_has_address();
  }
}
inline  const ::envoy::api::v2::SocketAddress& Address::socket_address() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Address.socket_address)
  return has_socket_address()
      ? *address_.socket_address_
      : ::envoy::api::v2::SocketAddress::default_instance();
}
inline ::envoy::api::v2::SocketAddress* Address::mutable_socket_address() {
  if (!has_socket_address()) {
    clear_address();
    set_has_socket_address();
    address_.socket_address_ = new ::envoy::api::v2::SocketAddress;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Address.socket_address)
  return address_.socket_address_;
}
inline ::envoy::api::v2::SocketAddress* Address::release_socket_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Address.socket_address)
  if (has_socket_address()) {
    clear_has_address();
    ::envoy::api::v2::SocketAddress* temp = address_.socket_address_;
    address_.socket_address_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Address::set_allocated_socket_address(::envoy::api::v2::SocketAddress* socket_address) {
  clear_address();
  if (socket_address) {
    set_has_socket_address();
    address_.socket_address_ = socket_address;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Address.socket_address)
}

// .envoy.api.v2.Pipe pipe = 2;
inline bool Address::has_pipe() const {
  return address_case() == kPipe;
}
inline void Address::set_has_pipe() {
  _oneof_case_[0] = kPipe;
}
inline void Address::clear_pipe() {
  if (has_pipe()) {
    delete address_.pipe_;
    clear_has_address();
  }
}
inline  const ::envoy::api::v2::Pipe& Address::pipe() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Address.pipe)
  return has_pipe()
      ? *address_.pipe_
      : ::envoy::api::v2::Pipe::default_instance();
}
inline ::envoy::api::v2::Pipe* Address::mutable_pipe() {
  if (!has_pipe()) {
    clear_address();
    set_has_pipe();
    address_.pipe_ = new ::envoy::api::v2::Pipe;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Address.pipe)
  return address_.pipe_;
}
inline ::envoy::api::v2::Pipe* Address::release_pipe() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Address.pipe)
  if (has_pipe()) {
    clear_has_address();
    ::envoy::api::v2::Pipe* temp = address_.pipe_;
    address_.pipe_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Address::set_allocated_pipe(::envoy::api::v2::Pipe* pipe) {
  clear_address();
  if (pipe) {
    set_has_pipe();
    address_.pipe_ = pipe;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Address.pipe)
}

inline bool Address::has_address() const {
  return address_case() != ADDRESS_NOT_SET;
}
inline void Address::clear_has_address() {
  _oneof_case_[0] = ADDRESS_NOT_SET;
}
inline Address::AddressCase Address::address_case() const {
  return Address::AddressCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v2
}  // namespace api
}  // namespace envoy

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::envoy::api::v2::SocketAddress_Protocol> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::SocketAddress_Protocol>() {
  return ::envoy::api::v2::SocketAddress_Protocol_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2faddress_2eproto__INCLUDED
