// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/rlds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/rlds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
class RateLimitRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RateLimitRequest> {
} _RateLimitRequest_default_instance_;
class RateLimitDescriptor_EntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RateLimitDescriptor_Entry> {
} _RateLimitDescriptor_Entry_default_instance_;
class RateLimitDescriptorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RateLimitDescriptor> {
} _RateLimitDescriptor_default_instance_;
class RateLimitResponse_RateLimitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RateLimitResponse_RateLimit> {
} _RateLimitResponse_RateLimit_default_instance_;
class RateLimitResponse_DescriptorStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RateLimitResponse_DescriptorStatus> {
} _RateLimitResponse_DescriptorStatus_default_instance_;
class RateLimitResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RateLimitResponse> {
} _RateLimitResponse_default_instance_;

namespace protobuf_api_2frlds_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitRequest, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitRequest, descriptors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitRequest, hits_addend_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitDescriptor_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitDescriptor_Entry, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitDescriptor_Entry, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitDescriptor, entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitResponse_RateLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitResponse_RateLimit, requests_per_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitResponse_RateLimit, unit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitResponse_DescriptorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitResponse_DescriptorStatus, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitResponse_DescriptorStatus, current_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitResponse_DescriptorStatus, limit_remaining_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitResponse, overall_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimitResponse, statuses_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(RateLimitRequest)},
  { 7, -1, sizeof(RateLimitDescriptor_Entry)},
  { 13, -1, sizeof(RateLimitDescriptor)},
  { 18, -1, sizeof(RateLimitResponse_RateLimit)},
  { 24, -1, sizeof(RateLimitResponse_DescriptorStatus)},
  { 31, -1, sizeof(RateLimitResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimitDescriptor_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimitDescriptor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimitResponse_RateLimit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimitResponse_DescriptorStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimitResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/rlds.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _RateLimitRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RateLimitDescriptor_Entry_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RateLimitDescriptor_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _RateLimitResponse_RateLimit_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _RateLimitResponse_DescriptorStatus_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _RateLimitResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RateLimitRequest_default_instance_.DefaultConstruct();
  _RateLimitDescriptor_Entry_default_instance_.DefaultConstruct();
  _RateLimitDescriptor_default_instance_.DefaultConstruct();
  _RateLimitResponse_RateLimit_default_instance_.DefaultConstruct();
  _RateLimitResponse_DescriptorStatus_default_instance_.DefaultConstruct();
  _RateLimitResponse_default_instance_.DefaultConstruct();
  _RateLimitResponse_DescriptorStatus_default_instance_.get_mutable()->current_limit_ = const_cast< ::envoy::api::v2::RateLimitResponse_RateLimit*>(
      ::envoy::api::v2::RateLimitResponse_RateLimit::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016api/rlds.proto\022\014envoy.api.v2\"o\n\020RateLi"
      "mitRequest\022\016\n\006domain\030\001 \001(\t\0226\n\013descriptor"
      "s\030\002 \003(\0132!.envoy.api.v2.RateLimitDescript"
      "or\022\023\n\013hits_addend\030\003 \001(\r\"t\n\023RateLimitDesc"
      "riptor\0228\n\007entries\030\001 \003(\0132\'.envoy.api.v2.R"
      "ateLimitDescriptor.Entry\032#\n\005Entry\022\013\n\003key"
      "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\213\004\n\021RateLimitRespo"
      "nse\022:\n\014overall_code\030\001 \001(\0162$.envoy.api.v2"
      ".RateLimitResponse.Code\022B\n\010statuses\030\002 \003("
      "\01320.envoy.api.v2.RateLimitResponse.Descr"
      "iptorStatus\032\244\001\n\tRateLimit\022\031\n\021requests_pe"
      "r_unit\030\001 \001(\r\022<\n\004unit\030\002 \001(\0162..envoy.api.v"
      "2.RateLimitResponse.RateLimit.Unit\">\n\004Un"
      "it\022\013\n\007UNKNOWN\020\000\022\n\n\006SECOND\020\001\022\n\n\006MINUTE\020\002\022"
      "\010\n\004HOUR\020\003\022\007\n\003DAY\020\004\032\241\001\n\020DescriptorStatus\022"
      "2\n\004code\030\001 \001(\0162$.envoy.api.v2.RateLimitRe"
      "sponse.Code\022@\n\rcurrent_limit\030\002 \001(\0132).env"
      "oy.api.v2.RateLimitResponse.RateLimit\022\027\n"
      "\017limit_remaining\030\003 \001(\r\"+\n\004Code\022\013\n\007UNKNOW"
      "N\020\000\022\006\n\002OK\020\001\022\016\n\nOVER_LIMIT\020\0022q\n\031RateLimit"
      "DiscoveryService\022T\n\017ShouldRateLimit\022\036.en"
      "voy.api.v2.RateLimitRequest\032\037.envoy.api."
      "v2.RateLimitResponse\"\000B\013Z\tratelimitb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 923);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/rlds.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2frlds_2eproto

const ::google::protobuf::EnumDescriptor* RateLimitResponse_RateLimit_Unit_descriptor() {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_enum_descriptors[0];
}
bool RateLimitResponse_RateLimit_Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RateLimitResponse_RateLimit_Unit RateLimitResponse_RateLimit::UNKNOWN;
const RateLimitResponse_RateLimit_Unit RateLimitResponse_RateLimit::SECOND;
const RateLimitResponse_RateLimit_Unit RateLimitResponse_RateLimit::MINUTE;
const RateLimitResponse_RateLimit_Unit RateLimitResponse_RateLimit::HOUR;
const RateLimitResponse_RateLimit_Unit RateLimitResponse_RateLimit::DAY;
const RateLimitResponse_RateLimit_Unit RateLimitResponse_RateLimit::Unit_MIN;
const RateLimitResponse_RateLimit_Unit RateLimitResponse_RateLimit::Unit_MAX;
const int RateLimitResponse_RateLimit::Unit_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RateLimitResponse_Code_descriptor() {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_enum_descriptors[1];
}
bool RateLimitResponse_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RateLimitResponse_Code RateLimitResponse::UNKNOWN;
const RateLimitResponse_Code RateLimitResponse::OK;
const RateLimitResponse_Code RateLimitResponse::OVER_LIMIT;
const RateLimitResponse_Code RateLimitResponse::Code_MIN;
const RateLimitResponse_Code RateLimitResponse::Code_MAX;
const int RateLimitResponse::Code_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimitRequest::kDomainFieldNumber;
const int RateLimitRequest::kDescriptorsFieldNumber;
const int RateLimitRequest::kHitsAddendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimitRequest::RateLimitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frlds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimitRequest)
}
RateLimitRequest::RateLimitRequest(const RateLimitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      descriptors_(from.descriptors_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  hits_addend_ = from.hits_addend_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimitRequest)
}

void RateLimitRequest::SharedCtor() {
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hits_addend_ = 0u;
  _cached_size_ = 0;
}

RateLimitRequest::~RateLimitRequest() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimitRequest)
  SharedDtor();
}

void RateLimitRequest::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RateLimitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimitRequest::descriptor() {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_metadata[0].descriptor;
}

const RateLimitRequest& RateLimitRequest::default_instance() {
  protobuf_api_2frlds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimitRequest* RateLimitRequest::New(::google::protobuf::Arena* arena) const {
  RateLimitRequest* n = new RateLimitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimitRequest)
  descriptors_.Clear();
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hits_addend_ = 0u;
}

bool RateLimitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string domain = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RateLimitRequest.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.RateLimitDescriptor descriptors = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_descriptors()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 hits_addend = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hits_addend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimitRequest)
  return false;
#undef DO_
}

void RateLimitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimitRequest)
  // string domain = 1;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimitRequest.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain(), output);
  }

  // repeated .envoy.api.v2.RateLimitDescriptor descriptors = 2;
  for (unsigned int i = 0, n = this->descriptors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->descriptors(i), output);
  }

  // uint32 hits_addend = 3;
  if (this->hits_addend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hits_addend(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimitRequest)
}

::google::protobuf::uint8* RateLimitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimitRequest)
  // string domain = 1;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimitRequest.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }

  // repeated .envoy.api.v2.RateLimitDescriptor descriptors = 2;
  for (unsigned int i = 0, n = this->descriptors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->descriptors(i), false, target);
  }

  // uint32 hits_addend = 3;
  if (this->hits_addend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hits_addend(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimitRequest)
  return target;
}

size_t RateLimitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimitRequest)
  size_t total_size = 0;

  // repeated .envoy.api.v2.RateLimitDescriptor descriptors = 2;
  {
    unsigned int count = this->descriptors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->descriptors(i));
    }
  }

  // string domain = 1;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // uint32 hits_addend = 3;
  if (this->hits_addend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hits_addend());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimitRequest)
    MergeFrom(*source);
  }
}

void RateLimitRequest::MergeFrom(const RateLimitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descriptors_.MergeFrom(from.descriptors_);
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.hits_addend() != 0) {
    set_hits_addend(from.hits_addend());
  }
}

void RateLimitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimitRequest::CopyFrom(const RateLimitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimitRequest::IsInitialized() const {
  return true;
}

void RateLimitRequest::Swap(RateLimitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimitRequest::InternalSwap(RateLimitRequest* other) {
  descriptors_.UnsafeArenaSwap(&other->descriptors_);
  domain_.Swap(&other->domain_);
  std::swap(hits_addend_, other->hits_addend_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimitRequest::GetMetadata() const {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimitRequest

// string domain = 1;
void RateLimitRequest::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimitRequest::domain() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimitRequest.domain)
  return domain_.GetNoArena();
}
void RateLimitRequest::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimitRequest.domain)
}
#if LANG_CXX11
void RateLimitRequest::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimitRequest.domain)
}
#endif
void RateLimitRequest::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimitRequest.domain)
}
void RateLimitRequest::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimitRequest.domain)
}
::std::string* RateLimitRequest::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimitRequest.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimitRequest::release_domain() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimitRequest.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimitRequest::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimitRequest.domain)
}

// repeated .envoy.api.v2.RateLimitDescriptor descriptors = 2;
int RateLimitRequest::descriptors_size() const {
  return descriptors_.size();
}
void RateLimitRequest::clear_descriptors() {
  descriptors_.Clear();
}
const ::envoy::api::v2::RateLimitDescriptor& RateLimitRequest::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimitRequest.descriptors)
  return descriptors_.Get(index);
}
::envoy::api::v2::RateLimitDescriptor* RateLimitRequest::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimitRequest.descriptors)
  return descriptors_.Mutable(index);
}
::envoy::api::v2::RateLimitDescriptor* RateLimitRequest::add_descriptors() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RateLimitRequest.descriptors)
  return descriptors_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimitDescriptor >*
RateLimitRequest::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RateLimitRequest.descriptors)
  return &descriptors_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimitDescriptor >&
RateLimitRequest::descriptors() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RateLimitRequest.descriptors)
  return descriptors_;
}

// uint32 hits_addend = 3;
void RateLimitRequest::clear_hits_addend() {
  hits_addend_ = 0u;
}
::google::protobuf::uint32 RateLimitRequest::hits_addend() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimitRequest.hits_addend)
  return hits_addend_;
}
void RateLimitRequest::set_hits_addend(::google::protobuf::uint32 value) {
  
  hits_addend_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimitRequest.hits_addend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimitDescriptor_Entry::kKeyFieldNumber;
const int RateLimitDescriptor_Entry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimitDescriptor_Entry::RateLimitDescriptor_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frlds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimitDescriptor.Entry)
}
RateLimitDescriptor_Entry::RateLimitDescriptor_Entry(const RateLimitDescriptor_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimitDescriptor.Entry)
}

void RateLimitDescriptor_Entry::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RateLimitDescriptor_Entry::~RateLimitDescriptor_Entry() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimitDescriptor.Entry)
  SharedDtor();
}

void RateLimitDescriptor_Entry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RateLimitDescriptor_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimitDescriptor_Entry::descriptor() {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_metadata[1].descriptor;
}

const RateLimitDescriptor_Entry& RateLimitDescriptor_Entry::default_instance() {
  protobuf_api_2frlds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimitDescriptor_Entry* RateLimitDescriptor_Entry::New(::google::protobuf::Arena* arena) const {
  RateLimitDescriptor_Entry* n = new RateLimitDescriptor_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimitDescriptor_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimitDescriptor.Entry)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RateLimitDescriptor_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimitDescriptor.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RateLimitDescriptor.Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.RateLimitDescriptor.Entry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimitDescriptor.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimitDescriptor.Entry)
  return false;
#undef DO_
}

void RateLimitDescriptor_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimitDescriptor.Entry)
  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimitDescriptor.Entry.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimitDescriptor.Entry.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimitDescriptor.Entry)
}

::google::protobuf::uint8* RateLimitDescriptor_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimitDescriptor.Entry)
  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimitDescriptor.Entry.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.RateLimitDescriptor.Entry.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimitDescriptor.Entry)
  return target;
}

size_t RateLimitDescriptor_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimitDescriptor.Entry)
  size_t total_size = 0;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimitDescriptor_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimitDescriptor.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimitDescriptor_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimitDescriptor_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimitDescriptor.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimitDescriptor.Entry)
    MergeFrom(*source);
  }
}

void RateLimitDescriptor_Entry::MergeFrom(const RateLimitDescriptor_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimitDescriptor.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void RateLimitDescriptor_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimitDescriptor.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimitDescriptor_Entry::CopyFrom(const RateLimitDescriptor_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimitDescriptor.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimitDescriptor_Entry::IsInitialized() const {
  return true;
}

void RateLimitDescriptor_Entry::Swap(RateLimitDescriptor_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimitDescriptor_Entry::InternalSwap(RateLimitDescriptor_Entry* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimitDescriptor_Entry::GetMetadata() const {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimitDescriptor_Entry

// string key = 1;
void RateLimitDescriptor_Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimitDescriptor_Entry::key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimitDescriptor.Entry.key)
  return key_.GetNoArena();
}
void RateLimitDescriptor_Entry::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimitDescriptor.Entry.key)
}
#if LANG_CXX11
void RateLimitDescriptor_Entry::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimitDescriptor.Entry.key)
}
#endif
void RateLimitDescriptor_Entry::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimitDescriptor.Entry.key)
}
void RateLimitDescriptor_Entry::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimitDescriptor.Entry.key)
}
::std::string* RateLimitDescriptor_Entry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimitDescriptor.Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimitDescriptor_Entry::release_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimitDescriptor.Entry.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimitDescriptor_Entry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimitDescriptor.Entry.key)
}

// string value = 2;
void RateLimitDescriptor_Entry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimitDescriptor_Entry::value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimitDescriptor.Entry.value)
  return value_.GetNoArena();
}
void RateLimitDescriptor_Entry::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimitDescriptor.Entry.value)
}
#if LANG_CXX11
void RateLimitDescriptor_Entry::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimitDescriptor.Entry.value)
}
#endif
void RateLimitDescriptor_Entry::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimitDescriptor.Entry.value)
}
void RateLimitDescriptor_Entry::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimitDescriptor.Entry.value)
}
::std::string* RateLimitDescriptor_Entry::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimitDescriptor.Entry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimitDescriptor_Entry::release_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimitDescriptor.Entry.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimitDescriptor_Entry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimitDescriptor.Entry.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimitDescriptor::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimitDescriptor::RateLimitDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frlds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimitDescriptor)
}
RateLimitDescriptor::RateLimitDescriptor(const RateLimitDescriptor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimitDescriptor)
}

void RateLimitDescriptor::SharedCtor() {
  _cached_size_ = 0;
}

RateLimitDescriptor::~RateLimitDescriptor() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimitDescriptor)
  SharedDtor();
}

void RateLimitDescriptor::SharedDtor() {
}

void RateLimitDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimitDescriptor::descriptor() {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_metadata[2].descriptor;
}

const RateLimitDescriptor& RateLimitDescriptor::default_instance() {
  protobuf_api_2frlds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimitDescriptor* RateLimitDescriptor::New(::google::protobuf::Arena* arena) const {
  RateLimitDescriptor* n = new RateLimitDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimitDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimitDescriptor)
  entries_.Clear();
}

bool RateLimitDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimitDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.RateLimitDescriptor.Entry entries = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimitDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimitDescriptor)
  return false;
#undef DO_
}

void RateLimitDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimitDescriptor)
  // repeated .envoy.api.v2.RateLimitDescriptor.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimitDescriptor)
}

::google::protobuf::uint8* RateLimitDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimitDescriptor)
  // repeated .envoy.api.v2.RateLimitDescriptor.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimitDescriptor)
  return target;
}

size_t RateLimitDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimitDescriptor)
  size_t total_size = 0;

  // repeated .envoy.api.v2.RateLimitDescriptor.Entry entries = 1;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimitDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimitDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimitDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimitDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimitDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimitDescriptor)
    MergeFrom(*source);
  }
}

void RateLimitDescriptor::MergeFrom(const RateLimitDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimitDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entries_.MergeFrom(from.entries_);
}

void RateLimitDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimitDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimitDescriptor::CopyFrom(const RateLimitDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimitDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimitDescriptor::IsInitialized() const {
  return true;
}

void RateLimitDescriptor::Swap(RateLimitDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimitDescriptor::InternalSwap(RateLimitDescriptor* other) {
  entries_.UnsafeArenaSwap(&other->entries_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimitDescriptor::GetMetadata() const {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimitDescriptor

// repeated .envoy.api.v2.RateLimitDescriptor.Entry entries = 1;
int RateLimitDescriptor::entries_size() const {
  return entries_.size();
}
void RateLimitDescriptor::clear_entries() {
  entries_.Clear();
}
const ::envoy::api::v2::RateLimitDescriptor_Entry& RateLimitDescriptor::entries(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimitDescriptor.entries)
  return entries_.Get(index);
}
::envoy::api::v2::RateLimitDescriptor_Entry* RateLimitDescriptor::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimitDescriptor.entries)
  return entries_.Mutable(index);
}
::envoy::api::v2::RateLimitDescriptor_Entry* RateLimitDescriptor::add_entries() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RateLimitDescriptor.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimitDescriptor_Entry >*
RateLimitDescriptor::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RateLimitDescriptor.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimitDescriptor_Entry >&
RateLimitDescriptor::entries() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RateLimitDescriptor.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimitResponse_RateLimit::kRequestsPerUnitFieldNumber;
const int RateLimitResponse_RateLimit::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimitResponse_RateLimit::RateLimitResponse_RateLimit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frlds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimitResponse.RateLimit)
}
RateLimitResponse_RateLimit::RateLimitResponse_RateLimit(const RateLimitResponse_RateLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&requests_per_unit_, &from.requests_per_unit_,
    reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&requests_per_unit_) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimitResponse.RateLimit)
}

void RateLimitResponse_RateLimit::SharedCtor() {
  ::memset(&requests_per_unit_, 0, reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&requests_per_unit_) + sizeof(unit_));
  _cached_size_ = 0;
}

RateLimitResponse_RateLimit::~RateLimitResponse_RateLimit() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimitResponse.RateLimit)
  SharedDtor();
}

void RateLimitResponse_RateLimit::SharedDtor() {
}

void RateLimitResponse_RateLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimitResponse_RateLimit::descriptor() {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_metadata[3].descriptor;
}

const RateLimitResponse_RateLimit& RateLimitResponse_RateLimit::default_instance() {
  protobuf_api_2frlds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimitResponse_RateLimit* RateLimitResponse_RateLimit::New(::google::protobuf::Arena* arena) const {
  RateLimitResponse_RateLimit* n = new RateLimitResponse_RateLimit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimitResponse_RateLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimitResponse.RateLimit)
  ::memset(&requests_per_unit_, 0, reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&requests_per_unit_) + sizeof(unit_));
}

bool RateLimitResponse_RateLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimitResponse.RateLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 requests_per_unit = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requests_per_unit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RateLimitResponse.RateLimit.Unit unit = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unit(static_cast< ::envoy::api::v2::RateLimitResponse_RateLimit_Unit >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimitResponse.RateLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimitResponse.RateLimit)
  return false;
#undef DO_
}

void RateLimitResponse_RateLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimitResponse.RateLimit)
  // uint32 requests_per_unit = 1;
  if (this->requests_per_unit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requests_per_unit(), output);
  }

  // .envoy.api.v2.RateLimitResponse.RateLimit.Unit unit = 2;
  if (this->unit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unit(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimitResponse.RateLimit)
}

::google::protobuf::uint8* RateLimitResponse_RateLimit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimitResponse.RateLimit)
  // uint32 requests_per_unit = 1;
  if (this->requests_per_unit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->requests_per_unit(), target);
  }

  // .envoy.api.v2.RateLimitResponse.RateLimit.Unit unit = 2;
  if (this->unit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimitResponse.RateLimit)
  return target;
}

size_t RateLimitResponse_RateLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimitResponse.RateLimit)
  size_t total_size = 0;

  // uint32 requests_per_unit = 1;
  if (this->requests_per_unit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requests_per_unit());
  }

  // .envoy.api.v2.RateLimitResponse.RateLimit.Unit unit = 2;
  if (this->unit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimitResponse_RateLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimitResponse.RateLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimitResponse_RateLimit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimitResponse_RateLimit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimitResponse.RateLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimitResponse.RateLimit)
    MergeFrom(*source);
  }
}

void RateLimitResponse_RateLimit::MergeFrom(const RateLimitResponse_RateLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimitResponse.RateLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.requests_per_unit() != 0) {
    set_requests_per_unit(from.requests_per_unit());
  }
  if (from.unit() != 0) {
    set_unit(from.unit());
  }
}

void RateLimitResponse_RateLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimitResponse.RateLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimitResponse_RateLimit::CopyFrom(const RateLimitResponse_RateLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimitResponse.RateLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimitResponse_RateLimit::IsInitialized() const {
  return true;
}

void RateLimitResponse_RateLimit::Swap(RateLimitResponse_RateLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimitResponse_RateLimit::InternalSwap(RateLimitResponse_RateLimit* other) {
  std::swap(requests_per_unit_, other->requests_per_unit_);
  std::swap(unit_, other->unit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimitResponse_RateLimit::GetMetadata() const {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimitResponse_RateLimit

// uint32 requests_per_unit = 1;
void RateLimitResponse_RateLimit::clear_requests_per_unit() {
  requests_per_unit_ = 0u;
}
::google::protobuf::uint32 RateLimitResponse_RateLimit::requests_per_unit() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimitResponse.RateLimit.requests_per_unit)
  return requests_per_unit_;
}
void RateLimitResponse_RateLimit::set_requests_per_unit(::google::protobuf::uint32 value) {
  
  requests_per_unit_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimitResponse.RateLimit.requests_per_unit)
}

// .envoy.api.v2.RateLimitResponse.RateLimit.Unit unit = 2;
void RateLimitResponse_RateLimit::clear_unit() {
  unit_ = 0;
}
::envoy::api::v2::RateLimitResponse_RateLimit_Unit RateLimitResponse_RateLimit::unit() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimitResponse.RateLimit.unit)
  return static_cast< ::envoy::api::v2::RateLimitResponse_RateLimit_Unit >(unit_);
}
void RateLimitResponse_RateLimit::set_unit(::envoy::api::v2::RateLimitResponse_RateLimit_Unit value) {
  
  unit_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimitResponse.RateLimit.unit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimitResponse_DescriptorStatus::kCodeFieldNumber;
const int RateLimitResponse_DescriptorStatus::kCurrentLimitFieldNumber;
const int RateLimitResponse_DescriptorStatus::kLimitRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimitResponse_DescriptorStatus::RateLimitResponse_DescriptorStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frlds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimitResponse.DescriptorStatus)
}
RateLimitResponse_DescriptorStatus::RateLimitResponse_DescriptorStatus(const RateLimitResponse_DescriptorStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_current_limit()) {
    current_limit_ = new ::envoy::api::v2::RateLimitResponse_RateLimit(*from.current_limit_);
  } else {
    current_limit_ = NULL;
  }
  ::memcpy(&code_, &from.code_,
    reinterpret_cast<char*>(&limit_remaining_) -
    reinterpret_cast<char*>(&code_) + sizeof(limit_remaining_));
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimitResponse.DescriptorStatus)
}

void RateLimitResponse_DescriptorStatus::SharedCtor() {
  ::memset(&current_limit_, 0, reinterpret_cast<char*>(&limit_remaining_) -
    reinterpret_cast<char*>(&current_limit_) + sizeof(limit_remaining_));
  _cached_size_ = 0;
}

RateLimitResponse_DescriptorStatus::~RateLimitResponse_DescriptorStatus() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimitResponse.DescriptorStatus)
  SharedDtor();
}

void RateLimitResponse_DescriptorStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete current_limit_;
  }
}

void RateLimitResponse_DescriptorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimitResponse_DescriptorStatus::descriptor() {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_metadata[4].descriptor;
}

const RateLimitResponse_DescriptorStatus& RateLimitResponse_DescriptorStatus::default_instance() {
  protobuf_api_2frlds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimitResponse_DescriptorStatus* RateLimitResponse_DescriptorStatus::New(::google::protobuf::Arena* arena) const {
  RateLimitResponse_DescriptorStatus* n = new RateLimitResponse_DescriptorStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimitResponse_DescriptorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimitResponse.DescriptorStatus)
  if (GetArenaNoVirtual() == NULL && current_limit_ != NULL) {
    delete current_limit_;
  }
  current_limit_ = NULL;
  ::memset(&code_, 0, reinterpret_cast<char*>(&limit_remaining_) -
    reinterpret_cast<char*>(&code_) + sizeof(limit_remaining_));
}

bool RateLimitResponse_DescriptorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimitResponse.DescriptorStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.RateLimitResponse.Code code = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::envoy::api::v2::RateLimitResponse_Code >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RateLimitResponse.RateLimit current_limit = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit_remaining = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimitResponse.DescriptorStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimitResponse.DescriptorStatus)
  return false;
#undef DO_
}

void RateLimitResponse_DescriptorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimitResponse.DescriptorStatus)
  // .envoy.api.v2.RateLimitResponse.Code code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // .envoy.api.v2.RateLimitResponse.RateLimit current_limit = 2;
  if (this->has_current_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->current_limit_, output);
  }

  // uint32 limit_remaining = 3;
  if (this->limit_remaining() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit_remaining(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimitResponse.DescriptorStatus)
}

::google::protobuf::uint8* RateLimitResponse_DescriptorStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimitResponse.DescriptorStatus)
  // .envoy.api.v2.RateLimitResponse.Code code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // .envoy.api.v2.RateLimitResponse.RateLimit current_limit = 2;
  if (this->has_current_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->current_limit_, false, target);
  }

  // uint32 limit_remaining = 3;
  if (this->limit_remaining() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit_remaining(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimitResponse.DescriptorStatus)
  return target;
}

size_t RateLimitResponse_DescriptorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimitResponse.DescriptorStatus)
  size_t total_size = 0;

  // .envoy.api.v2.RateLimitResponse.RateLimit current_limit = 2;
  if (this->has_current_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->current_limit_);
  }

  // .envoy.api.v2.RateLimitResponse.Code code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  // uint32 limit_remaining = 3;
  if (this->limit_remaining() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit_remaining());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimitResponse_DescriptorStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimitResponse.DescriptorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimitResponse_DescriptorStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimitResponse_DescriptorStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimitResponse.DescriptorStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimitResponse.DescriptorStatus)
    MergeFrom(*source);
  }
}

void RateLimitResponse_DescriptorStatus::MergeFrom(const RateLimitResponse_DescriptorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimitResponse.DescriptorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_current_limit()) {
    mutable_current_limit()->::envoy::api::v2::RateLimitResponse_RateLimit::MergeFrom(from.current_limit());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.limit_remaining() != 0) {
    set_limit_remaining(from.limit_remaining());
  }
}

void RateLimitResponse_DescriptorStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimitResponse.DescriptorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimitResponse_DescriptorStatus::CopyFrom(const RateLimitResponse_DescriptorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimitResponse.DescriptorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimitResponse_DescriptorStatus::IsInitialized() const {
  return true;
}

void RateLimitResponse_DescriptorStatus::Swap(RateLimitResponse_DescriptorStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimitResponse_DescriptorStatus::InternalSwap(RateLimitResponse_DescriptorStatus* other) {
  std::swap(current_limit_, other->current_limit_);
  std::swap(code_, other->code_);
  std::swap(limit_remaining_, other->limit_remaining_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimitResponse_DescriptorStatus::GetMetadata() const {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimitResponse_DescriptorStatus

// .envoy.api.v2.RateLimitResponse.Code code = 1;
void RateLimitResponse_DescriptorStatus::clear_code() {
  code_ = 0;
}
::envoy::api::v2::RateLimitResponse_Code RateLimitResponse_DescriptorStatus::code() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimitResponse.DescriptorStatus.code)
  return static_cast< ::envoy::api::v2::RateLimitResponse_Code >(code_);
}
void RateLimitResponse_DescriptorStatus::set_code(::envoy::api::v2::RateLimitResponse_Code value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimitResponse.DescriptorStatus.code)
}

// .envoy.api.v2.RateLimitResponse.RateLimit current_limit = 2;
bool RateLimitResponse_DescriptorStatus::has_current_limit() const {
  return this != internal_default_instance() && current_limit_ != NULL;
}
void RateLimitResponse_DescriptorStatus::clear_current_limit() {
  if (GetArenaNoVirtual() == NULL && current_limit_ != NULL) delete current_limit_;
  current_limit_ = NULL;
}
const ::envoy::api::v2::RateLimitResponse_RateLimit& RateLimitResponse_DescriptorStatus::current_limit() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimitResponse.DescriptorStatus.current_limit)
  return current_limit_ != NULL ? *current_limit_
                         : *::envoy::api::v2::RateLimitResponse_RateLimit::internal_default_instance();
}
::envoy::api::v2::RateLimitResponse_RateLimit* RateLimitResponse_DescriptorStatus::mutable_current_limit() {
  
  if (current_limit_ == NULL) {
    current_limit_ = new ::envoy::api::v2::RateLimitResponse_RateLimit;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimitResponse.DescriptorStatus.current_limit)
  return current_limit_;
}
::envoy::api::v2::RateLimitResponse_RateLimit* RateLimitResponse_DescriptorStatus::release_current_limit() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimitResponse.DescriptorStatus.current_limit)
  
  ::envoy::api::v2::RateLimitResponse_RateLimit* temp = current_limit_;
  current_limit_ = NULL;
  return temp;
}
void RateLimitResponse_DescriptorStatus::set_allocated_current_limit(::envoy::api::v2::RateLimitResponse_RateLimit* current_limit) {
  delete current_limit_;
  current_limit_ = current_limit;
  if (current_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimitResponse.DescriptorStatus.current_limit)
}

// uint32 limit_remaining = 3;
void RateLimitResponse_DescriptorStatus::clear_limit_remaining() {
  limit_remaining_ = 0u;
}
::google::protobuf::uint32 RateLimitResponse_DescriptorStatus::limit_remaining() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimitResponse.DescriptorStatus.limit_remaining)
  return limit_remaining_;
}
void RateLimitResponse_DescriptorStatus::set_limit_remaining(::google::protobuf::uint32 value) {
  
  limit_remaining_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimitResponse.DescriptorStatus.limit_remaining)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimitResponse::kOverallCodeFieldNumber;
const int RateLimitResponse::kStatusesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimitResponse::RateLimitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2frlds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.RateLimitResponse)
}
RateLimitResponse::RateLimitResponse(const RateLimitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      statuses_(from.statuses_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  overall_code_ = from.overall_code_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.RateLimitResponse)
}

void RateLimitResponse::SharedCtor() {
  overall_code_ = 0;
  _cached_size_ = 0;
}

RateLimitResponse::~RateLimitResponse() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.RateLimitResponse)
  SharedDtor();
}

void RateLimitResponse::SharedDtor() {
}

void RateLimitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimitResponse::descriptor() {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_metadata[5].descriptor;
}

const RateLimitResponse& RateLimitResponse::default_instance() {
  protobuf_api_2frlds_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimitResponse* RateLimitResponse::New(::google::protobuf::Arena* arena) const {
  RateLimitResponse* n = new RateLimitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.RateLimitResponse)
  statuses_.Clear();
  overall_code_ = 0;
}

bool RateLimitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.RateLimitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.RateLimitResponse.Code overall_code = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_overall_code(static_cast< ::envoy::api::v2::RateLimitResponse_Code >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.RateLimitResponse.DescriptorStatus statuses = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_statuses()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.RateLimitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.RateLimitResponse)
  return false;
#undef DO_
}

void RateLimitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.RateLimitResponse)
  // .envoy.api.v2.RateLimitResponse.Code overall_code = 1;
  if (this->overall_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->overall_code(), output);
  }

  // repeated .envoy.api.v2.RateLimitResponse.DescriptorStatus statuses = 2;
  for (unsigned int i = 0, n = this->statuses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statuses(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.RateLimitResponse)
}

::google::protobuf::uint8* RateLimitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.RateLimitResponse)
  // .envoy.api.v2.RateLimitResponse.Code overall_code = 1;
  if (this->overall_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->overall_code(), target);
  }

  // repeated .envoy.api.v2.RateLimitResponse.DescriptorStatus statuses = 2;
  for (unsigned int i = 0, n = this->statuses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->statuses(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.RateLimitResponse)
  return target;
}

size_t RateLimitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.RateLimitResponse)
  size_t total_size = 0;

  // repeated .envoy.api.v2.RateLimitResponse.DescriptorStatus statuses = 2;
  {
    unsigned int count = this->statuses_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statuses(i));
    }
  }

  // .envoy.api.v2.RateLimitResponse.Code overall_code = 1;
  if (this->overall_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->overall_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.RateLimitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.RateLimitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.RateLimitResponse)
    MergeFrom(*source);
  }
}

void RateLimitResponse::MergeFrom(const RateLimitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.RateLimitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  statuses_.MergeFrom(from.statuses_);
  if (from.overall_code() != 0) {
    set_overall_code(from.overall_code());
  }
}

void RateLimitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.RateLimitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimitResponse::CopyFrom(const RateLimitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.RateLimitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimitResponse::IsInitialized() const {
  return true;
}

void RateLimitResponse::Swap(RateLimitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimitResponse::InternalSwap(RateLimitResponse* other) {
  statuses_.UnsafeArenaSwap(&other->statuses_);
  std::swap(overall_code_, other->overall_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimitResponse::GetMetadata() const {
  protobuf_api_2frlds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2frlds_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimitResponse

// .envoy.api.v2.RateLimitResponse.Code overall_code = 1;
void RateLimitResponse::clear_overall_code() {
  overall_code_ = 0;
}
::envoy::api::v2::RateLimitResponse_Code RateLimitResponse::overall_code() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimitResponse.overall_code)
  return static_cast< ::envoy::api::v2::RateLimitResponse_Code >(overall_code_);
}
void RateLimitResponse::set_overall_code(::envoy::api::v2::RateLimitResponse_Code value) {
  
  overall_code_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimitResponse.overall_code)
}

// repeated .envoy.api.v2.RateLimitResponse.DescriptorStatus statuses = 2;
int RateLimitResponse::statuses_size() const {
  return statuses_.size();
}
void RateLimitResponse::clear_statuses() {
  statuses_.Clear();
}
const ::envoy::api::v2::RateLimitResponse_DescriptorStatus& RateLimitResponse::statuses(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimitResponse.statuses)
  return statuses_.Get(index);
}
::envoy::api::v2::RateLimitResponse_DescriptorStatus* RateLimitResponse::mutable_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimitResponse.statuses)
  return statuses_.Mutable(index);
}
::envoy::api::v2::RateLimitResponse_DescriptorStatus* RateLimitResponse::add_statuses() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RateLimitResponse.statuses)
  return statuses_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimitResponse_DescriptorStatus >*
RateLimitResponse::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RateLimitResponse.statuses)
  return &statuses_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimitResponse_DescriptorStatus >&
RateLimitResponse::statuses() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RateLimitResponse.statuses)
  return statuses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
