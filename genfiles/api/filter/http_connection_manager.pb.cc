// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/http_connection_manager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/filter/http_connection_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
namespace filter {
class RdsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Rds>
     _instance;
} _Rds_default_instance_;
class ComparisonFilterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ComparisonFilter>
     _instance;
} _ComparisonFilter_default_instance_;
class StatusCodeFilterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StatusCodeFilter>
     _instance;
} _StatusCodeFilter_default_instance_;
class DurationFilterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DurationFilter>
     _instance;
} _DurationFilter_default_instance_;
class NotHealthCheckFilterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NotHealthCheckFilter>
     _instance;
} _NotHealthCheckFilter_default_instance_;
class TraceableFilterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TraceableFilter>
     _instance;
} _TraceableFilter_default_instance_;
class RuntimeFilterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RuntimeFilter>
     _instance;
} _RuntimeFilter_default_instance_;
class AndFilterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AndFilter>
     _instance;
} _AndFilter_default_instance_;
class OrFilterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OrFilter>
     _instance;
} _OrFilter_default_instance_;
class AccessLogFilterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AccessLogFilter>
     _instance;
  const ::envoy::api::v2::filter::StatusCodeFilter* status_code_filter_;
  const ::envoy::api::v2::filter::DurationFilter* duration_filter_;
  const ::envoy::api::v2::filter::NotHealthCheckFilter* not_health_check_filter_;
  const ::envoy::api::v2::filter::TraceableFilter* traceable_filter_;
  const ::envoy::api::v2::filter::RuntimeFilter* runtime_filter_;
  const ::envoy::api::v2::filter::AndFilter* and_filter_;
  const ::envoy::api::v2::filter::OrFilter* or_filter_;
} _AccessLogFilter_default_instance_;
class FileAccessLogDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FileAccessLog>
     _instance;
} _FileAccessLog_default_instance_;
class AccessLogDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AccessLog>
     _instance;
} _AccessLog_default_instance_;
class HttpFilter_DeprecatedV1DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HttpFilter_DeprecatedV1>
     _instance;
} _HttpFilter_DeprecatedV1_default_instance_;
class HttpFilterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HttpFilter>
     _instance;
} _HttpFilter_default_instance_;
class HttpConnectionManager_TracingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HttpConnectionManager_Tracing>
     _instance;
} _HttpConnectionManager_Tracing_default_instance_;
class HttpConnectionManager_SetCurrentClientCertDetailsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HttpConnectionManager_SetCurrentClientCertDetails>
     _instance;
} _HttpConnectionManager_SetCurrentClientCertDetails_default_instance_;
class HttpConnectionManagerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HttpConnectionManager>
     _instance;
  const ::envoy::api::v2::filter::Rds* rds_;
  const ::envoy::api::v2::RouteConfiguration* route_config_;
} _HttpConnectionManager_default_instance_;

namespace protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rds, config_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rds, route_config_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComparisonFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComparisonFilter, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComparisonFilter, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusCodeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusCodeFilter, comparison_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationFilter, comparison_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotHealthCheckFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceableFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeFilter, runtime_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndFilter, filters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrFilter, filters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(AccessLogFilterDefaultTypeInternal, status_code_filter_),
  offsetof(AccessLogFilterDefaultTypeInternal, duration_filter_),
  offsetof(AccessLogFilterDefaultTypeInternal, not_health_check_filter_),
  offsetof(AccessLogFilterDefaultTypeInternal, traceable_filter_),
  offsetof(AccessLogFilterDefaultTypeInternal, runtime_filter_),
  offsetof(AccessLogFilterDefaultTypeInternal, and_filter_),
  offsetof(AccessLogFilterDefaultTypeInternal, or_filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogFilter, filter_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAccessLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAccessLog, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileAccessLog, format_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLog, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLog, filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLog, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpFilter_DeprecatedV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpFilter_DeprecatedV1, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpFilter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpFilter, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpFilter, deprecated_v1_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager_Tracing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager_Tracing, operation_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager_Tracing, request_headers_for_tags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager_SetCurrentClientCertDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager_SetCurrentClientCertDetails, subject_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager_SetCurrentClientCertDetails, san_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, codec_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, stat_prefix_),
  offsetof(HttpConnectionManagerDefaultTypeInternal, rds_),
  offsetof(HttpConnectionManagerDefaultTypeInternal, route_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, http_filters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, add_user_agent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, tracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, http_protocol_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, http2_protocol_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, server_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, idle_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, drain_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, access_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, use_remote_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, generate_request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, forward_client_cert_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, set_current_client_cert_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, route_specifier_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Rds)},
  { 7, -1, sizeof(ComparisonFilter)},
  { 14, -1, sizeof(StatusCodeFilter)},
  { 20, -1, sizeof(DurationFilter)},
  { 26, -1, sizeof(NotHealthCheckFilter)},
  { 31, -1, sizeof(TraceableFilter)},
  { 36, -1, sizeof(RuntimeFilter)},
  { 42, -1, sizeof(AndFilter)},
  { 48, -1, sizeof(OrFilter)},
  { 54, -1, sizeof(AccessLogFilter)},
  { 67, -1, sizeof(FileAccessLog)},
  { 74, -1, sizeof(AccessLog)},
  { 82, -1, sizeof(HttpFilter_DeprecatedV1)},
  { 88, -1, sizeof(HttpFilter)},
  { 96, -1, sizeof(HttpConnectionManager_Tracing)},
  { 103, -1, sizeof(HttpConnectionManager_SetCurrentClientCertDetails)},
  { 110, -1, sizeof(HttpConnectionManager)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Rds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComparisonFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatusCodeFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DurationFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotHealthCheckFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TraceableFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RuntimeFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AndFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OrFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccessLogFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FileAccessLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccessLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HttpFilter_DeprecatedV1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HttpFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HttpConnectionManager_Tracing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HttpConnectionManager_SetCurrentClientCertDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HttpConnectionManager_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/filter/http_connection_manager.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2fdiscovery_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2fprotocol_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2frds_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  _Rds_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Rds_default_instance_);_ComparisonFilter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ComparisonFilter_default_instance_);_StatusCodeFilter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StatusCodeFilter_default_instance_);_DurationFilter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DurationFilter_default_instance_);_NotHealthCheckFilter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NotHealthCheckFilter_default_instance_);_TraceableFilter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TraceableFilter_default_instance_);_RuntimeFilter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RuntimeFilter_default_instance_);_AndFilter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AndFilter_default_instance_);_OrFilter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OrFilter_default_instance_);_AccessLogFilter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AccessLogFilter_default_instance_);_FileAccessLog_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FileAccessLog_default_instance_);_AccessLog_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AccessLog_default_instance_);_HttpFilter_DeprecatedV1_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HttpFilter_DeprecatedV1_default_instance_);_HttpFilter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HttpFilter_default_instance_);_HttpConnectionManager_Tracing_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HttpConnectionManager_Tracing_default_instance_);_HttpConnectionManager_SetCurrentClientCertDetails_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HttpConnectionManager_SetCurrentClientCertDetails_default_instance_);_HttpConnectionManager_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HttpConnectionManager_default_instance_);_Rds_default_instance_._instance.get_mutable()->config_source_ = const_cast< ::envoy::api::v2::ConfigSource*>(
      ::envoy::api::v2::ConfigSource::internal_default_instance());
  _ComparisonFilter_default_instance_._instance.get_mutable()->value_ = const_cast< ::envoy::api::v2::RuntimeUInt32*>(
      ::envoy::api::v2::RuntimeUInt32::internal_default_instance());
  _StatusCodeFilter_default_instance_._instance.get_mutable()->comparison_ = const_cast< ::envoy::api::v2::filter::ComparisonFilter*>(
      ::envoy::api::v2::filter::ComparisonFilter::internal_default_instance());
  _DurationFilter_default_instance_._instance.get_mutable()->comparison_ = const_cast< ::envoy::api::v2::filter::ComparisonFilter*>(
      ::envoy::api::v2::filter::ComparisonFilter::internal_default_instance());
  _AccessLogFilter_default_instance_.status_code_filter_ = const_cast< ::envoy::api::v2::filter::StatusCodeFilter*>(
      ::envoy::api::v2::filter::StatusCodeFilter::internal_default_instance());
  _AccessLogFilter_default_instance_.duration_filter_ = const_cast< ::envoy::api::v2::filter::DurationFilter*>(
      ::envoy::api::v2::filter::DurationFilter::internal_default_instance());
  _AccessLogFilter_default_instance_.not_health_check_filter_ = const_cast< ::envoy::api::v2::filter::NotHealthCheckFilter*>(
      ::envoy::api::v2::filter::NotHealthCheckFilter::internal_default_instance());
  _AccessLogFilter_default_instance_.traceable_filter_ = const_cast< ::envoy::api::v2::filter::TraceableFilter*>(
      ::envoy::api::v2::filter::TraceableFilter::internal_default_instance());
  _AccessLogFilter_default_instance_.runtime_filter_ = const_cast< ::envoy::api::v2::filter::RuntimeFilter*>(
      ::envoy::api::v2::filter::RuntimeFilter::internal_default_instance());
  _AccessLogFilter_default_instance_.and_filter_ = const_cast< ::envoy::api::v2::filter::AndFilter*>(
      ::envoy::api::v2::filter::AndFilter::internal_default_instance());
  _AccessLogFilter_default_instance_.or_filter_ = const_cast< ::envoy::api::v2::filter::OrFilter*>(
      ::envoy::api::v2::filter::OrFilter::internal_default_instance());
  _AccessLog_default_instance_._instance.get_mutable()->filter_ = const_cast< ::envoy::api::v2::filter::AccessLogFilter*>(
      ::envoy::api::v2::filter::AccessLogFilter::internal_default_instance());
  _AccessLog_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  _HttpFilter_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  _HttpFilter_default_instance_._instance.get_mutable()->deprecated_v1_ = const_cast< ::envoy::api::v2::filter::HttpFilter_DeprecatedV1*>(
      ::envoy::api::v2::filter::HttpFilter_DeprecatedV1::internal_default_instance());
  _HttpConnectionManager_SetCurrentClientCertDetails_default_instance_._instance.get_mutable()->subject_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _HttpConnectionManager_SetCurrentClientCertDetails_default_instance_._instance.get_mutable()->san_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _HttpConnectionManager_default_instance_.rds_ = const_cast< ::envoy::api::v2::filter::Rds*>(
      ::envoy::api::v2::filter::Rds::internal_default_instance());
  _HttpConnectionManager_default_instance_.route_config_ = const_cast< ::envoy::api::v2::RouteConfiguration*>(
      ::envoy::api::v2::RouteConfiguration::internal_default_instance());
  _HttpConnectionManager_default_instance_._instance.get_mutable()->add_user_agent_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _HttpConnectionManager_default_instance_._instance.get_mutable()->tracing_ = const_cast< ::envoy::api::v2::filter::HttpConnectionManager_Tracing*>(
      ::envoy::api::v2::filter::HttpConnectionManager_Tracing::internal_default_instance());
  _HttpConnectionManager_default_instance_._instance.get_mutable()->http_protocol_options_ = const_cast< ::envoy::api::v2::Http1ProtocolOptions*>(
      ::envoy::api::v2::Http1ProtocolOptions::internal_default_instance());
  _HttpConnectionManager_default_instance_._instance.get_mutable()->http2_protocol_options_ = const_cast< ::envoy::api::v2::Http2ProtocolOptions*>(
      ::envoy::api::v2::Http2ProtocolOptions::internal_default_instance());
  _HttpConnectionManager_default_instance_._instance.get_mutable()->idle_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _HttpConnectionManager_default_instance_._instance.get_mutable()->drain_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _HttpConnectionManager_default_instance_._instance.get_mutable()->use_remote_address_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _HttpConnectionManager_default_instance_._instance.get_mutable()->generate_request_id_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _HttpConnectionManager_default_instance_._instance.get_mutable()->set_current_client_cert_details_ = const_cast< ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails*>(
      ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n(api/filter/http_connection_manager.pro"
      "to\022\023envoy.api.v2.filter\032\016api/base.proto\032"
      "\023api/discovery.proto\032\022api/protocol.proto"
      "\032\rapi/rds.proto\032\036google/protobuf/duratio"
      "n.proto\032\034google/protobuf/struct.proto\032\036g"
      "oogle/protobuf/wrappers.proto\"S\n\003Rds\0221\n\r"
      "config_source\030\001 \001(\0132\032.envoy.api.v2.Confi"
      "gSource\022\031\n\021route_config_name\030\002 \001(\t\"\212\001\n\020C"
      "omparisonFilter\0224\n\002op\030\001 \001(\0162(.envoy.api."
      "v2.filter.ComparisonFilter.Op\022*\n\005value\030\002"
      " \001(\0132\033.envoy.api.v2.RuntimeUInt32\"\024\n\002Op\022"
      "\006\n\002EQ\020\000\022\006\n\002GE\020\001\"M\n\020StatusCodeFilter\0229\n\nc"
      "omparison\030\001 \001(\0132%.envoy.api.v2.filter.Co"
      "mparisonFilter\"K\n\016DurationFilter\0229\n\ncomp"
      "arison\030\001 \001(\0132%.envoy.api.v2.filter.Compa"
      "risonFilter\"\026\n\024NotHealthCheckFilter\"\021\n\017T"
      "raceableFilter\"$\n\rRuntimeFilter\022\023\n\013runti"
      "me_key\030\001 \001(\t\"B\n\tAndFilter\0225\n\007filters\030\001 \003"
      "(\0132$.envoy.api.v2.filter.AccessLogFilter"
      "\"A\n\010OrFilter\0225\n\007filters\030\002 \003(\0132$.envoy.ap"
      "i.v2.filter.AccessLogFilter\"\342\003\n\017AccessLo"
      "gFilter\022C\n\022status_code_filter\030\001 \001(\0132%.en"
      "voy.api.v2.filter.StatusCodeFilterH\000\022>\n\017"
      "duration_filter\030\002 \001(\0132#.envoy.api.v2.fil"
      "ter.DurationFilterH\000\022L\n\027not_health_check"
      "_filter\030\003 \001(\0132).envoy.api.v2.filter.NotH"
      "ealthCheckFilterH\000\022@\n\020traceable_filter\030\004"
      " \001(\0132$.envoy.api.v2.filter.TraceableFilt"
      "erH\000\022<\n\016runtime_filter\030\005 \001(\0132\".envoy.api"
      ".v2.filter.RuntimeFilterH\000\0224\n\nand_filter"
      "\030\006 \001(\0132\036.envoy.api.v2.filter.AndFilterH\000"
      "\0222\n\tor_filter\030\007 \001(\0132\035.envoy.api.v2.filte"
      "r.OrFilterH\000B\022\n\020filter_specifier\"-\n\rFile"
      "AccessLog\022\014\n\004path\030\001 \001(\t\022\016\n\006format\030\002 \001(\t\""
      "x\n\tAccessLog\022\014\n\004name\030\001 \001(\t\0224\n\006filter\030\002 \001"
      "(\0132$.envoy.api.v2.filter.AccessLogFilter"
      "\022\'\n\006config\030\003 \001(\0132\027.google.protobuf.Struc"
      "t\"\246\001\n\nHttpFilter\022\014\n\004name\030\001 \001(\t\022\'\n\006config"
      "\030\002 \001(\0132\027.google.protobuf.Struct\022C\n\rdepre"
      "cated_v1\030\003 \001(\0132,.envoy.api.v2.filter.Htt"
      "pFilter.DeprecatedV1\032\034\n\014DeprecatedV1\022\014\n\004"
      "type\030\001 \001(\t\"\352\013\n\025HttpConnectionManager\022H\n\n"
      "codec_type\030\001 \001(\01624.envoy.api.v2.filter.H"
      "ttpConnectionManager.CodecType\022\023\n\013stat_p"
      "refix\030\002 \001(\t\022\'\n\003rds\030\003 \001(\0132\030.envoy.api.v2."
      "filter.RdsH\000\0228\n\014route_config\030\004 \001(\0132 .env"
      "oy.api.v2.RouteConfigurationH\000\0225\n\014http_f"
      "ilters\030\005 \003(\0132\037.envoy.api.v2.filter.HttpF"
      "ilter\0222\n\016add_user_agent\030\006 \001(\0132\032.google.p"
      "rotobuf.BoolValue\022C\n\007tracing\030\007 \001(\01322.env"
      "oy.api.v2.filter.HttpConnectionManager.T"
      "racing\022A\n\025http_protocol_options\030\010 \001(\0132\"."
      "envoy.api.v2.Http1ProtocolOptions\022B\n\026htt"
      "p2_protocol_options\030\t \001(\0132\".envoy.api.v2"
      ".Http2ProtocolOptions\022\023\n\013server_name\030\n \001"
      "(\t\022/\n\014idle_timeout\030\013 \001(\0132\031.google.protob"
      "uf.Duration\0220\n\rdrain_timeout\030\014 \001(\0132\031.goo"
      "gle.protobuf.Duration\0222\n\naccess_log\030\r \003("
      "\0132\036.envoy.api.v2.filter.AccessLog\0226\n\022use"
      "_remote_address\030\016 \001(\0132\032.google.protobuf."
      "BoolValue\0227\n\023generate_request_id\030\017 \001(\0132\032"
      ".google.protobuf.BoolValue\022h\n\033forward_cl"
      "ient_cert_details\030\020 \001(\0162C.envoy.api.v2.f"
      "ilter.HttpConnectionManager.ForwardClien"
      "tCertDetails\022o\n\037set_current_client_cert_"
      "details\030\021 \001(\0132F.envoy.api.v2.filter.Http"
      "ConnectionManager.SetCurrentClientCertDe"
      "tails\032\257\001\n\007Tracing\022X\n\016operation_name\030\001 \001("
      "\0162@.envoy.api.v2.filter.HttpConnectionMa"
      "nager.Tracing.OperationName\022 \n\030request_h"
      "eaders_for_tags\030\002 \003(\t\"(\n\rOperationName\022\013"
      "\n\007INGRESS\020\000\022\n\n\006EGRESS\020\001\032s\n\033SetCurrentCli"
      "entCertDetails\022+\n\007subject\030\001 \001(\0132\032.google"
      ".protobuf.BoolValue\022\'\n\003san\030\002 \001(\0132\032.googl"
      "e.protobuf.BoolValue\"+\n\tCodecType\022\010\n\004AUT"
      "O\020\000\022\t\n\005HTTP1\020\001\022\t\n\005HTTP2\020\002\"y\n\030ForwardClie"
      "ntCertDetails\022\014\n\010SANITIZE\020\000\022\020\n\014FORWARD_O"
      "NLY\020\001\022\022\n\016APPEND_FORWARD\020\002\022\020\n\014SANITIZE_SE"
      "T\020\003\022\027\n\023ALWAYS_FORWARD_ONLY\020\004B\021\n\017route_sp"
      "ecifierb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/filter/http_connection_manager.proto", &protobuf_RegisterTypes);
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2fdiscovery_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2fprotocol_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2frds_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto

const ::google::protobuf::EnumDescriptor* ComparisonFilter_Op_descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_enum_descriptors[0];
}
bool ComparisonFilter_Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ComparisonFilter_Op ComparisonFilter::EQ;
const ComparisonFilter_Op ComparisonFilter::GE;
const ComparisonFilter_Op ComparisonFilter::Op_MIN;
const ComparisonFilter_Op ComparisonFilter::Op_MAX;
const int ComparisonFilter::Op_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HttpConnectionManager_Tracing_OperationName_descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_enum_descriptors[1];
}
bool HttpConnectionManager_Tracing_OperationName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::INGRESS;
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::EGRESS;
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::OperationName_MIN;
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::OperationName_MAX;
const int HttpConnectionManager_Tracing::OperationName_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HttpConnectionManager_CodecType_descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_enum_descriptors[2];
}
bool HttpConnectionManager_CodecType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HttpConnectionManager_CodecType HttpConnectionManager::AUTO;
const HttpConnectionManager_CodecType HttpConnectionManager::HTTP1;
const HttpConnectionManager_CodecType HttpConnectionManager::HTTP2;
const HttpConnectionManager_CodecType HttpConnectionManager::CodecType_MIN;
const HttpConnectionManager_CodecType HttpConnectionManager::CodecType_MAX;
const int HttpConnectionManager::CodecType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HttpConnectionManager_ForwardClientCertDetails_descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_enum_descriptors[3];
}
bool HttpConnectionManager_ForwardClientCertDetails_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::SANITIZE;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::FORWARD_ONLY;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::APPEND_FORWARD;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::SANITIZE_SET;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::ALWAYS_FORWARD_ONLY;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::ForwardClientCertDetails_MIN;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::ForwardClientCertDetails_MAX;
const int HttpConnectionManager::ForwardClientCertDetails_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rds::kConfigSourceFieldNumber;
const int Rds::kRouteConfigNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rds::Rds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.Rds)
}
Rds::Rds(const Rds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  route_config_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_config_name().size() > 0) {
    route_config_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_config_name_);
  }
  if (from.has_config_source()) {
    config_source_ = new ::envoy::api::v2::ConfigSource(*from.config_source_);
  } else {
    config_source_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.Rds)
}

void Rds::SharedCtor() {
  route_config_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_source_ = NULL;
  _cached_size_ = 0;
}

Rds::~Rds() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.Rds)
  SharedDtor();
}

void Rds::SharedDtor() {
  route_config_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_source_;
}

void Rds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rds::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rds& Rds::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

Rds* Rds::New(::google::protobuf::Arena* arena) const {
  Rds* n = new Rds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rds::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.Rds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_config_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && config_source_ != NULL) {
    delete config_source_;
  }
  config_source_ = NULL;
  _internal_metadata_.Clear();
}

bool Rds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.Rds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.ConfigSource config_source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_config_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_config_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_config_name().data(), static_cast<int>(this->route_config_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.Rds.route_config_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.Rds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.Rds)
  return false;
#undef DO_
}

void Rds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.Rds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.ConfigSource config_source = 1;
  if (this->has_config_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_source_, output);
  }

  // string route_config_name = 2;
  if (this->route_config_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_config_name().data(), static_cast<int>(this->route_config_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.Rds.route_config_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->route_config_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.Rds)
}

::google::protobuf::uint8* Rds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.Rds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.ConfigSource config_source = 1;
  if (this->has_config_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->config_source_, deterministic, target);
  }

  // string route_config_name = 2;
  if (this->route_config_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_config_name().data(), static_cast<int>(this->route_config_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.Rds.route_config_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->route_config_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.Rds)
  return target;
}

size_t Rds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.Rds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string route_config_name = 2;
  if (this->route_config_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_config_name());
  }

  // .envoy.api.v2.ConfigSource config_source = 1;
  if (this->has_config_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_source_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.Rds)
  GOOGLE_DCHECK_NE(&from, this);
  const Rds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.Rds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.Rds)
    MergeFrom(*source);
  }
}

void Rds::MergeFrom(const Rds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.Rds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.route_config_name().size() > 0) {

    route_config_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_config_name_);
  }
  if (from.has_config_source()) {
    mutable_config_source()->::envoy::api::v2::ConfigSource::MergeFrom(from.config_source());
  }
}

void Rds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.Rds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rds::CopyFrom(const Rds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.Rds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rds::IsInitialized() const {
  return true;
}

void Rds::Swap(Rds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rds::InternalSwap(Rds* other) {
  using std::swap;
  route_config_name_.Swap(&other->route_config_name_);
  swap(config_source_, other->config_source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rds::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rds

// .envoy.api.v2.ConfigSource config_source = 1;
bool Rds::has_config_source() const {
  return this != internal_default_instance() && config_source_ != NULL;
}
void Rds::clear_config_source() {
  if (GetArenaNoVirtual() == NULL && config_source_ != NULL) delete config_source_;
  config_source_ = NULL;
}
const ::envoy::api::v2::ConfigSource& Rds::config_source() const {
  const ::envoy::api::v2::ConfigSource* p = config_source_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.Rds.config_source)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::ConfigSource*>(
      &::envoy::api::v2::_ConfigSource_default_instance_);
}
::envoy::api::v2::ConfigSource* Rds::mutable_config_source() {
  
  if (config_source_ == NULL) {
    config_source_ = new ::envoy::api::v2::ConfigSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.Rds.config_source)
  return config_source_;
}
::envoy::api::v2::ConfigSource* Rds::release_config_source() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.Rds.config_source)
  
  ::envoy::api::v2::ConfigSource* temp = config_source_;
  config_source_ = NULL;
  return temp;
}
void Rds::set_allocated_config_source(::envoy::api::v2::ConfigSource* config_source) {
  delete config_source_;
  config_source_ = config_source;
  if (config_source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.Rds.config_source)
}

// string route_config_name = 2;
void Rds::clear_route_config_name() {
  route_config_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Rds::route_config_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.Rds.route_config_name)
  return route_config_name_.GetNoArena();
}
void Rds::set_route_config_name(const ::std::string& value) {
  
  route_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.Rds.route_config_name)
}
#if LANG_CXX11
void Rds::set_route_config_name(::std::string&& value) {
  
  route_config_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.Rds.route_config_name)
}
#endif
void Rds::set_route_config_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  route_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.Rds.route_config_name)
}
void Rds::set_route_config_name(const char* value, size_t size) {
  
  route_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.Rds.route_config_name)
}
::std::string* Rds::mutable_route_config_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.Rds.route_config_name)
  return route_config_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Rds::release_route_config_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.Rds.route_config_name)
  
  return route_config_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rds::set_allocated_route_config_name(::std::string* route_config_name) {
  if (route_config_name != NULL) {
    
  } else {
    
  }
  route_config_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_config_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.Rds.route_config_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComparisonFilter::kOpFieldNumber;
const int ComparisonFilter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComparisonFilter::ComparisonFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.ComparisonFilter)
}
ComparisonFilter::ComparisonFilter(const ComparisonFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::envoy::api::v2::RuntimeUInt32(*from.value_);
  } else {
    value_ = NULL;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.ComparisonFilter)
}

void ComparisonFilter::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&value_)) + sizeof(op_));
  _cached_size_ = 0;
}

ComparisonFilter::~ComparisonFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.ComparisonFilter)
  SharedDtor();
}

void ComparisonFilter::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void ComparisonFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComparisonFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ComparisonFilter& ComparisonFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComparisonFilter* ComparisonFilter::New(::google::protobuf::Arena* arena) const {
  ComparisonFilter* n = new ComparisonFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComparisonFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.ComparisonFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  op_ = 0;
  _internal_metadata_.Clear();
}

bool ComparisonFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.ComparisonFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.ComparisonFilter.Op op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::envoy::api::v2::filter::ComparisonFilter_Op >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RuntimeUInt32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.ComparisonFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.ComparisonFilter)
  return false;
#undef DO_
}

void ComparisonFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.ComparisonFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.ComparisonFilter.Op op = 1;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.ComparisonFilter)
}

::google::protobuf::uint8* ComparisonFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.ComparisonFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.ComparisonFilter.Op op = 1;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.ComparisonFilter)
  return target;
}

size_t ComparisonFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.ComparisonFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // .envoy.api.v2.filter.ComparisonFilter.Op op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComparisonFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.ComparisonFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ComparisonFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComparisonFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.ComparisonFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.ComparisonFilter)
    MergeFrom(*source);
  }
}

void ComparisonFilter::MergeFrom(const ComparisonFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.ComparisonFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    mutable_value()->::envoy::api::v2::RuntimeUInt32::MergeFrom(from.value());
  }
  if (from.op() != 0) {
    set_op(from.op());
  }
}

void ComparisonFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.ComparisonFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComparisonFilter::CopyFrom(const ComparisonFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.ComparisonFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComparisonFilter::IsInitialized() const {
  return true;
}

void ComparisonFilter::Swap(ComparisonFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComparisonFilter::InternalSwap(ComparisonFilter* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(op_, other->op_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComparisonFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComparisonFilter

// .envoy.api.v2.filter.ComparisonFilter.Op op = 1;
void ComparisonFilter::clear_op() {
  op_ = 0;
}
::envoy::api::v2::filter::ComparisonFilter_Op ComparisonFilter::op() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.ComparisonFilter.op)
  return static_cast< ::envoy::api::v2::filter::ComparisonFilter_Op >(op_);
}
void ComparisonFilter::set_op(::envoy::api::v2::filter::ComparisonFilter_Op value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.ComparisonFilter.op)
}

// .envoy.api.v2.RuntimeUInt32 value = 2;
bool ComparisonFilter::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void ComparisonFilter::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::envoy::api::v2::RuntimeUInt32& ComparisonFilter::value() const {
  const ::envoy::api::v2::RuntimeUInt32* p = value_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.ComparisonFilter.value)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::RuntimeUInt32*>(
      &::envoy::api::v2::_RuntimeUInt32_default_instance_);
}
::envoy::api::v2::RuntimeUInt32* ComparisonFilter::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::envoy::api::v2::RuntimeUInt32;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.ComparisonFilter.value)
  return value_;
}
::envoy::api::v2::RuntimeUInt32* ComparisonFilter::release_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.ComparisonFilter.value)
  
  ::envoy::api::v2::RuntimeUInt32* temp = value_;
  value_ = NULL;
  return temp;
}
void ComparisonFilter::set_allocated_value(::envoy::api::v2::RuntimeUInt32* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.ComparisonFilter.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusCodeFilter::kComparisonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusCodeFilter::StatusCodeFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.StatusCodeFilter)
}
StatusCodeFilter::StatusCodeFilter(const StatusCodeFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_comparison()) {
    comparison_ = new ::envoy::api::v2::filter::ComparisonFilter(*from.comparison_);
  } else {
    comparison_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.StatusCodeFilter)
}

void StatusCodeFilter::SharedCtor() {
  comparison_ = NULL;
  _cached_size_ = 0;
}

StatusCodeFilter::~StatusCodeFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.StatusCodeFilter)
  SharedDtor();
}

void StatusCodeFilter::SharedDtor() {
  if (this != internal_default_instance()) delete comparison_;
}

void StatusCodeFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusCodeFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatusCodeFilter& StatusCodeFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatusCodeFilter* StatusCodeFilter::New(::google::protobuf::Arena* arena) const {
  StatusCodeFilter* n = new StatusCodeFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusCodeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.StatusCodeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && comparison_ != NULL) {
    delete comparison_;
  }
  comparison_ = NULL;
  _internal_metadata_.Clear();
}

bool StatusCodeFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.StatusCodeFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comparison()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.StatusCodeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.StatusCodeFilter)
  return false;
#undef DO_
}

void StatusCodeFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.StatusCodeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->comparison_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.StatusCodeFilter)
}

::google::protobuf::uint8* StatusCodeFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.StatusCodeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->comparison_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.StatusCodeFilter)
  return target;
}

size_t StatusCodeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.StatusCodeFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comparison_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusCodeFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.StatusCodeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusCodeFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusCodeFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.StatusCodeFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.StatusCodeFilter)
    MergeFrom(*source);
  }
}

void StatusCodeFilter::MergeFrom(const StatusCodeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.StatusCodeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_comparison()) {
    mutable_comparison()->::envoy::api::v2::filter::ComparisonFilter::MergeFrom(from.comparison());
  }
}

void StatusCodeFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.StatusCodeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusCodeFilter::CopyFrom(const StatusCodeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.StatusCodeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusCodeFilter::IsInitialized() const {
  return true;
}

void StatusCodeFilter::Swap(StatusCodeFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusCodeFilter::InternalSwap(StatusCodeFilter* other) {
  using std::swap;
  swap(comparison_, other->comparison_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusCodeFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusCodeFilter

// .envoy.api.v2.filter.ComparisonFilter comparison = 1;
bool StatusCodeFilter::has_comparison() const {
  return this != internal_default_instance() && comparison_ != NULL;
}
void StatusCodeFilter::clear_comparison() {
  if (GetArenaNoVirtual() == NULL && comparison_ != NULL) delete comparison_;
  comparison_ = NULL;
}
const ::envoy::api::v2::filter::ComparisonFilter& StatusCodeFilter::comparison() const {
  const ::envoy::api::v2::filter::ComparisonFilter* p = comparison_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.StatusCodeFilter.comparison)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::ComparisonFilter*>(
      &::envoy::api::v2::filter::_ComparisonFilter_default_instance_);
}
::envoy::api::v2::filter::ComparisonFilter* StatusCodeFilter::mutable_comparison() {
  
  if (comparison_ == NULL) {
    comparison_ = new ::envoy::api::v2::filter::ComparisonFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.StatusCodeFilter.comparison)
  return comparison_;
}
::envoy::api::v2::filter::ComparisonFilter* StatusCodeFilter::release_comparison() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.StatusCodeFilter.comparison)
  
  ::envoy::api::v2::filter::ComparisonFilter* temp = comparison_;
  comparison_ = NULL;
  return temp;
}
void StatusCodeFilter::set_allocated_comparison(::envoy::api::v2::filter::ComparisonFilter* comparison) {
  delete comparison_;
  comparison_ = comparison;
  if (comparison) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.StatusCodeFilter.comparison)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DurationFilter::kComparisonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DurationFilter::DurationFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.DurationFilter)
}
DurationFilter::DurationFilter(const DurationFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_comparison()) {
    comparison_ = new ::envoy::api::v2::filter::ComparisonFilter(*from.comparison_);
  } else {
    comparison_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.DurationFilter)
}

void DurationFilter::SharedCtor() {
  comparison_ = NULL;
  _cached_size_ = 0;
}

DurationFilter::~DurationFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.DurationFilter)
  SharedDtor();
}

void DurationFilter::SharedDtor() {
  if (this != internal_default_instance()) delete comparison_;
}

void DurationFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DurationFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DurationFilter& DurationFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

DurationFilter* DurationFilter::New(::google::protobuf::Arena* arena) const {
  DurationFilter* n = new DurationFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DurationFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.DurationFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && comparison_ != NULL) {
    delete comparison_;
  }
  comparison_ = NULL;
  _internal_metadata_.Clear();
}

bool DurationFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.DurationFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comparison()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.DurationFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.DurationFilter)
  return false;
#undef DO_
}

void DurationFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.DurationFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->comparison_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.DurationFilter)
}

::google::protobuf::uint8* DurationFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.DurationFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->comparison_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.DurationFilter)
  return target;
}

size_t DurationFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.DurationFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  if (this->has_comparison()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->comparison_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DurationFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.DurationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const DurationFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DurationFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.DurationFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.DurationFilter)
    MergeFrom(*source);
  }
}

void DurationFilter::MergeFrom(const DurationFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.DurationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_comparison()) {
    mutable_comparison()->::envoy::api::v2::filter::ComparisonFilter::MergeFrom(from.comparison());
  }
}

void DurationFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.DurationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DurationFilter::CopyFrom(const DurationFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.DurationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurationFilter::IsInitialized() const {
  return true;
}

void DurationFilter::Swap(DurationFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DurationFilter::InternalSwap(DurationFilter* other) {
  using std::swap;
  swap(comparison_, other->comparison_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DurationFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DurationFilter

// .envoy.api.v2.filter.ComparisonFilter comparison = 1;
bool DurationFilter::has_comparison() const {
  return this != internal_default_instance() && comparison_ != NULL;
}
void DurationFilter::clear_comparison() {
  if (GetArenaNoVirtual() == NULL && comparison_ != NULL) delete comparison_;
  comparison_ = NULL;
}
const ::envoy::api::v2::filter::ComparisonFilter& DurationFilter::comparison() const {
  const ::envoy::api::v2::filter::ComparisonFilter* p = comparison_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.DurationFilter.comparison)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::ComparisonFilter*>(
      &::envoy::api::v2::filter::_ComparisonFilter_default_instance_);
}
::envoy::api::v2::filter::ComparisonFilter* DurationFilter::mutable_comparison() {
  
  if (comparison_ == NULL) {
    comparison_ = new ::envoy::api::v2::filter::ComparisonFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.DurationFilter.comparison)
  return comparison_;
}
::envoy::api::v2::filter::ComparisonFilter* DurationFilter::release_comparison() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.DurationFilter.comparison)
  
  ::envoy::api::v2::filter::ComparisonFilter* temp = comparison_;
  comparison_ = NULL;
  return temp;
}
void DurationFilter::set_allocated_comparison(::envoy::api::v2::filter::ComparisonFilter* comparison) {
  delete comparison_;
  comparison_ = comparison;
  if (comparison) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.DurationFilter.comparison)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotHealthCheckFilter::NotHealthCheckFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.NotHealthCheckFilter)
}
NotHealthCheckFilter::NotHealthCheckFilter(const NotHealthCheckFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.NotHealthCheckFilter)
}

void NotHealthCheckFilter::SharedCtor() {
  _cached_size_ = 0;
}

NotHealthCheckFilter::~NotHealthCheckFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.NotHealthCheckFilter)
  SharedDtor();
}

void NotHealthCheckFilter::SharedDtor() {
}

void NotHealthCheckFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotHealthCheckFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotHealthCheckFilter& NotHealthCheckFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotHealthCheckFilter* NotHealthCheckFilter::New(::google::protobuf::Arena* arena) const {
  NotHealthCheckFilter* n = new NotHealthCheckFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotHealthCheckFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.NotHealthCheckFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool NotHealthCheckFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.NotHealthCheckFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.NotHealthCheckFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.NotHealthCheckFilter)
  return false;
#undef DO_
}

void NotHealthCheckFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.NotHealthCheckFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.NotHealthCheckFilter)
}

::google::protobuf::uint8* NotHealthCheckFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.NotHealthCheckFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.NotHealthCheckFilter)
  return target;
}

size_t NotHealthCheckFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.NotHealthCheckFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotHealthCheckFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.NotHealthCheckFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const NotHealthCheckFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotHealthCheckFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.NotHealthCheckFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.NotHealthCheckFilter)
    MergeFrom(*source);
  }
}

void NotHealthCheckFilter::MergeFrom(const NotHealthCheckFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.NotHealthCheckFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NotHealthCheckFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.NotHealthCheckFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotHealthCheckFilter::CopyFrom(const NotHealthCheckFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.NotHealthCheckFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotHealthCheckFilter::IsInitialized() const {
  return true;
}

void NotHealthCheckFilter::Swap(NotHealthCheckFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotHealthCheckFilter::InternalSwap(NotHealthCheckFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotHealthCheckFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotHealthCheckFilter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceableFilter::TraceableFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.TraceableFilter)
}
TraceableFilter::TraceableFilter(const TraceableFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.TraceableFilter)
}

void TraceableFilter::SharedCtor() {
  _cached_size_ = 0;
}

TraceableFilter::~TraceableFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.TraceableFilter)
  SharedDtor();
}

void TraceableFilter::SharedDtor() {
}

void TraceableFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceableFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TraceableFilter& TraceableFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

TraceableFilter* TraceableFilter::New(::google::protobuf::Arena* arena) const {
  TraceableFilter* n = new TraceableFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TraceableFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.TraceableFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool TraceableFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.TraceableFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.TraceableFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.TraceableFilter)
  return false;
#undef DO_
}

void TraceableFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.TraceableFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.TraceableFilter)
}

::google::protobuf::uint8* TraceableFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.TraceableFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.TraceableFilter)
  return target;
}

size_t TraceableFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.TraceableFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceableFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.TraceableFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceableFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceableFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.TraceableFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.TraceableFilter)
    MergeFrom(*source);
  }
}

void TraceableFilter::MergeFrom(const TraceableFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.TraceableFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TraceableFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.TraceableFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceableFilter::CopyFrom(const TraceableFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.TraceableFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceableFilter::IsInitialized() const {
  return true;
}

void TraceableFilter::Swap(TraceableFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceableFilter::InternalSwap(TraceableFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TraceableFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TraceableFilter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuntimeFilter::kRuntimeKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuntimeFilter::RuntimeFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.RuntimeFilter)
}
RuntimeFilter::RuntimeFilter(const RuntimeFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  runtime_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.runtime_key().size() > 0) {
    runtime_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.RuntimeFilter)
}

void RuntimeFilter::SharedCtor() {
  runtime_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RuntimeFilter::~RuntimeFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.RuntimeFilter)
  SharedDtor();
}

void RuntimeFilter::SharedDtor() {
  runtime_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RuntimeFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuntimeFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RuntimeFilter& RuntimeFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

RuntimeFilter* RuntimeFilter::New(::google::protobuf::Arena* arena) const {
  RuntimeFilter* n = new RuntimeFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RuntimeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.RuntimeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RuntimeFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.RuntimeFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string runtime_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_runtime_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.RuntimeFilter.runtime_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.RuntimeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.RuntimeFilter)
  return false;
#undef DO_
}

void RuntimeFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.RuntimeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string runtime_key = 1;
  if (this->runtime_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RuntimeFilter.runtime_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->runtime_key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.RuntimeFilter)
}

::google::protobuf::uint8* RuntimeFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.RuntimeFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string runtime_key = 1;
  if (this->runtime_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), static_cast<int>(this->runtime_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RuntimeFilter.runtime_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->runtime_key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.RuntimeFilter)
  return target;
}

size_t RuntimeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.RuntimeFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string runtime_key = 1;
  if (this->runtime_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->runtime_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuntimeFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.RuntimeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuntimeFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.RuntimeFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.RuntimeFilter)
    MergeFrom(*source);
  }
}

void RuntimeFilter::MergeFrom(const RuntimeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.RuntimeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.runtime_key().size() > 0) {

    runtime_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
}

void RuntimeFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.RuntimeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeFilter::CopyFrom(const RuntimeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.RuntimeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeFilter::IsInitialized() const {
  return true;
}

void RuntimeFilter::Swap(RuntimeFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RuntimeFilter::InternalSwap(RuntimeFilter* other) {
  using std::swap;
  runtime_key_.Swap(&other->runtime_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RuntimeFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RuntimeFilter

// string runtime_key = 1;
void RuntimeFilter::clear_runtime_key() {
  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RuntimeFilter::runtime_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.RuntimeFilter.runtime_key)
  return runtime_key_.GetNoArena();
}
void RuntimeFilter::set_runtime_key(const ::std::string& value) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
#if LANG_CXX11
void RuntimeFilter::set_runtime_key(::std::string&& value) {
  
  runtime_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
#endif
void RuntimeFilter::set_runtime_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
void RuntimeFilter::set_runtime_key(const char* value, size_t size) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
::std::string* RuntimeFilter::mutable_runtime_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.RuntimeFilter.runtime_key)
  return runtime_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RuntimeFilter::release_runtime_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.RuntimeFilter.runtime_key)
  
  return runtime_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RuntimeFilter::set_allocated_runtime_key(::std::string* runtime_key) {
  if (runtime_key != NULL) {
    
  } else {
    
  }
  runtime_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AndFilter::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AndFilter::AndFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.AndFilter)
}
AndFilter::AndFilter(const AndFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filters_(from.filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.AndFilter)
}

void AndFilter::SharedCtor() {
  _cached_size_ = 0;
}

AndFilter::~AndFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.AndFilter)
  SharedDtor();
}

void AndFilter::SharedDtor() {
}

void AndFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AndFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AndFilter& AndFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

AndFilter* AndFilter::New(::google::protobuf::Arena* arena) const {
  AndFilter* n = new AndFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AndFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.AndFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _internal_metadata_.Clear();
}

bool AndFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.AndFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.AndFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.AndFilter)
  return false;
#undef DO_
}

void AndFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.AndFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filters(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.AndFilter)
}

::google::protobuf::uint8* AndFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.AndFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->filters(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.AndFilter)
  return target;
}

size_t AndFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.AndFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filters(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AndFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.AndFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const AndFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AndFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.AndFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.AndFilter)
    MergeFrom(*source);
  }
}

void AndFilter::MergeFrom(const AndFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.AndFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
}

void AndFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.AndFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AndFilter::CopyFrom(const AndFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.AndFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndFilter::IsInitialized() const {
  return true;
}

void AndFilter::Swap(AndFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AndFilter::InternalSwap(AndFilter* other) {
  using std::swap;
  filters_.InternalSwap(&other->filters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AndFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AndFilter

// repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
int AndFilter::filters_size() const {
  return filters_.size();
}
void AndFilter::clear_filters() {
  filters_.Clear();
}
const ::envoy::api::v2::filter::AccessLogFilter& AndFilter::filters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AndFilter.filters)
  return filters_.Get(index);
}
::envoy::api::v2::filter::AccessLogFilter* AndFilter::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AndFilter.filters)
  return filters_.Mutable(index);
}
::envoy::api::v2::filter::AccessLogFilter* AndFilter::add_filters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.AndFilter.filters)
  return filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >*
AndFilter::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.AndFilter.filters)
  return &filters_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >&
AndFilter::filters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.AndFilter.filters)
  return filters_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrFilter::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrFilter::OrFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.OrFilter)
}
OrFilter::OrFilter(const OrFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filters_(from.filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.OrFilter)
}

void OrFilter::SharedCtor() {
  _cached_size_ = 0;
}

OrFilter::~OrFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.OrFilter)
  SharedDtor();
}

void OrFilter::SharedDtor() {
}

void OrFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrFilter& OrFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

OrFilter* OrFilter::New(::google::protobuf::Arena* arena) const {
  OrFilter* n = new OrFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.OrFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  _internal_metadata_.Clear();
}

bool OrFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.OrFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.OrFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.OrFilter)
  return false;
#undef DO_
}

void OrFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.OrFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filters(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.OrFilter)
}

::google::protobuf::uint8* OrFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.OrFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->filters(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.OrFilter)
  return target;
}

size_t OrFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.OrFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filters(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.OrFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const OrFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.OrFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.OrFilter)
    MergeFrom(*source);
  }
}

void OrFilter::MergeFrom(const OrFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.OrFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
}

void OrFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.OrFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrFilter::CopyFrom(const OrFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.OrFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrFilter::IsInitialized() const {
  return true;
}

void OrFilter::Swap(OrFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrFilter::InternalSwap(OrFilter* other) {
  using std::swap;
  filters_.InternalSwap(&other->filters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrFilter

// repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
int OrFilter::filters_size() const {
  return filters_.size();
}
void OrFilter::clear_filters() {
  filters_.Clear();
}
const ::envoy::api::v2::filter::AccessLogFilter& OrFilter::filters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.OrFilter.filters)
  return filters_.Get(index);
}
::envoy::api::v2::filter::AccessLogFilter* OrFilter::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.OrFilter.filters)
  return filters_.Mutable(index);
}
::envoy::api::v2::filter::AccessLogFilter* OrFilter::add_filters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.OrFilter.filters)
  return filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >*
OrFilter::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.OrFilter.filters)
  return &filters_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >&
OrFilter::filters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.OrFilter.filters)
  return filters_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLogFilter::kStatusCodeFilterFieldNumber;
const int AccessLogFilter::kDurationFilterFieldNumber;
const int AccessLogFilter::kNotHealthCheckFilterFieldNumber;
const int AccessLogFilter::kTraceableFilterFieldNumber;
const int AccessLogFilter::kRuntimeFilterFieldNumber;
const int AccessLogFilter::kAndFilterFieldNumber;
const int AccessLogFilter::kOrFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLogFilter::AccessLogFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.AccessLogFilter)
}
AccessLogFilter::AccessLogFilter(const AccessLogFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_filter_specifier();
  switch (from.filter_specifier_case()) {
    case kStatusCodeFilter: {
      mutable_status_code_filter()->::envoy::api::v2::filter::StatusCodeFilter::MergeFrom(from.status_code_filter());
      break;
    }
    case kDurationFilter: {
      mutable_duration_filter()->::envoy::api::v2::filter::DurationFilter::MergeFrom(from.duration_filter());
      break;
    }
    case kNotHealthCheckFilter: {
      mutable_not_health_check_filter()->::envoy::api::v2::filter::NotHealthCheckFilter::MergeFrom(from.not_health_check_filter());
      break;
    }
    case kTraceableFilter: {
      mutable_traceable_filter()->::envoy::api::v2::filter::TraceableFilter::MergeFrom(from.traceable_filter());
      break;
    }
    case kRuntimeFilter: {
      mutable_runtime_filter()->::envoy::api::v2::filter::RuntimeFilter::MergeFrom(from.runtime_filter());
      break;
    }
    case kAndFilter: {
      mutable_and_filter()->::envoy::api::v2::filter::AndFilter::MergeFrom(from.and_filter());
      break;
    }
    case kOrFilter: {
      mutable_or_filter()->::envoy::api::v2::filter::OrFilter::MergeFrom(from.or_filter());
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.AccessLogFilter)
}

void AccessLogFilter::SharedCtor() {
  clear_has_filter_specifier();
  _cached_size_ = 0;
}

AccessLogFilter::~AccessLogFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.AccessLogFilter)
  SharedDtor();
}

void AccessLogFilter::SharedDtor() {
  if (has_filter_specifier()) {
    clear_filter_specifier();
  }
}

void AccessLogFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessLogFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLogFilter& AccessLogFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccessLogFilter* AccessLogFilter::New(::google::protobuf::Arena* arena) const {
  AccessLogFilter* n = new AccessLogFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessLogFilter::clear_filter_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.filter.AccessLogFilter)
  switch (filter_specifier_case()) {
    case kStatusCodeFilter: {
      delete filter_specifier_.status_code_filter_;
      break;
    }
    case kDurationFilter: {
      delete filter_specifier_.duration_filter_;
      break;
    }
    case kNotHealthCheckFilter: {
      delete filter_specifier_.not_health_check_filter_;
      break;
    }
    case kTraceableFilter: {
      delete filter_specifier_.traceable_filter_;
      break;
    }
    case kRuntimeFilter: {
      delete filter_specifier_.runtime_filter_;
      break;
    }
    case kAndFilter: {
      delete filter_specifier_.and_filter_;
      break;
    }
    case kOrFilter: {
      delete filter_specifier_.or_filter_;
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILTER_SPECIFIER_NOT_SET;
}


void AccessLogFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.AccessLogFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_filter_specifier();
  _internal_metadata_.Clear();
}

bool AccessLogFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.AccessLogFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.StatusCodeFilter status_code_filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_code_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.DurationFilter duration_filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duration_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check_filter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_health_check_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.TraceableFilter traceable_filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traceable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.RuntimeFilter runtime_filter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_runtime_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.AndFilter and_filter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_and_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.OrFilter or_filter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_or_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.AccessLogFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.AccessLogFilter)
  return false;
#undef DO_
}

void AccessLogFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.AccessLogFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.StatusCodeFilter status_code_filter = 1;
  if (has_status_code_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *filter_specifier_.status_code_filter_, output);
  }

  // .envoy.api.v2.filter.DurationFilter duration_filter = 2;
  if (has_duration_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *filter_specifier_.duration_filter_, output);
  }

  // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check_filter = 3;
  if (has_not_health_check_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *filter_specifier_.not_health_check_filter_, output);
  }

  // .envoy.api.v2.filter.TraceableFilter traceable_filter = 4;
  if (has_traceable_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *filter_specifier_.traceable_filter_, output);
  }

  // .envoy.api.v2.filter.RuntimeFilter runtime_filter = 5;
  if (has_runtime_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *filter_specifier_.runtime_filter_, output);
  }

  // .envoy.api.v2.filter.AndFilter and_filter = 6;
  if (has_and_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *filter_specifier_.and_filter_, output);
  }

  // .envoy.api.v2.filter.OrFilter or_filter = 7;
  if (has_or_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *filter_specifier_.or_filter_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.AccessLogFilter)
}

::google::protobuf::uint8* AccessLogFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.AccessLogFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.StatusCodeFilter status_code_filter = 1;
  if (has_status_code_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *filter_specifier_.status_code_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.DurationFilter duration_filter = 2;
  if (has_duration_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *filter_specifier_.duration_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check_filter = 3;
  if (has_not_health_check_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *filter_specifier_.not_health_check_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.TraceableFilter traceable_filter = 4;
  if (has_traceable_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *filter_specifier_.traceable_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.RuntimeFilter runtime_filter = 5;
  if (has_runtime_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *filter_specifier_.runtime_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.AndFilter and_filter = 6;
  if (has_and_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *filter_specifier_.and_filter_, deterministic, target);
  }

  // .envoy.api.v2.filter.OrFilter or_filter = 7;
  if (has_or_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *filter_specifier_.or_filter_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.AccessLogFilter)
  return target;
}

size_t AccessLogFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.AccessLogFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (filter_specifier_case()) {
    // .envoy.api.v2.filter.StatusCodeFilter status_code_filter = 1;
    case kStatusCodeFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.status_code_filter_);
      break;
    }
    // .envoy.api.v2.filter.DurationFilter duration_filter = 2;
    case kDurationFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.duration_filter_);
      break;
    }
    // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check_filter = 3;
    case kNotHealthCheckFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.not_health_check_filter_);
      break;
    }
    // .envoy.api.v2.filter.TraceableFilter traceable_filter = 4;
    case kTraceableFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.traceable_filter_);
      break;
    }
    // .envoy.api.v2.filter.RuntimeFilter runtime_filter = 5;
    case kRuntimeFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.runtime_filter_);
      break;
    }
    // .envoy.api.v2.filter.AndFilter and_filter = 6;
    case kAndFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.and_filter_);
      break;
    }
    // .envoy.api.v2.filter.OrFilter or_filter = 7;
    case kOrFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.or_filter_);
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessLogFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.AccessLogFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLogFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLogFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.AccessLogFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.AccessLogFilter)
    MergeFrom(*source);
  }
}

void AccessLogFilter::MergeFrom(const AccessLogFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.AccessLogFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.filter_specifier_case()) {
    case kStatusCodeFilter: {
      mutable_status_code_filter()->::envoy::api::v2::filter::StatusCodeFilter::MergeFrom(from.status_code_filter());
      break;
    }
    case kDurationFilter: {
      mutable_duration_filter()->::envoy::api::v2::filter::DurationFilter::MergeFrom(from.duration_filter());
      break;
    }
    case kNotHealthCheckFilter: {
      mutable_not_health_check_filter()->::envoy::api::v2::filter::NotHealthCheckFilter::MergeFrom(from.not_health_check_filter());
      break;
    }
    case kTraceableFilter: {
      mutable_traceable_filter()->::envoy::api::v2::filter::TraceableFilter::MergeFrom(from.traceable_filter());
      break;
    }
    case kRuntimeFilter: {
      mutable_runtime_filter()->::envoy::api::v2::filter::RuntimeFilter::MergeFrom(from.runtime_filter());
      break;
    }
    case kAndFilter: {
      mutable_and_filter()->::envoy::api::v2::filter::AndFilter::MergeFrom(from.and_filter());
      break;
    }
    case kOrFilter: {
      mutable_or_filter()->::envoy::api::v2::filter::OrFilter::MergeFrom(from.or_filter());
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void AccessLogFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.AccessLogFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLogFilter::CopyFrom(const AccessLogFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.AccessLogFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLogFilter::IsInitialized() const {
  return true;
}

void AccessLogFilter::Swap(AccessLogFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLogFilter::InternalSwap(AccessLogFilter* other) {
  using std::swap;
  swap(filter_specifier_, other->filter_specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessLogFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessLogFilter

// .envoy.api.v2.filter.StatusCodeFilter status_code_filter = 1;
bool AccessLogFilter::has_status_code_filter() const {
  return filter_specifier_case() == kStatusCodeFilter;
}
void AccessLogFilter::set_has_status_code_filter() {
  _oneof_case_[0] = kStatusCodeFilter;
}
void AccessLogFilter::clear_status_code_filter() {
  if (has_status_code_filter()) {
    delete filter_specifier_.status_code_filter_;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::StatusCodeFilter& AccessLogFilter::status_code_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.status_code_filter)
  return has_status_code_filter()
      ? *filter_specifier_.status_code_filter_
      : ::envoy::api::v2::filter::StatusCodeFilter::default_instance();
}
::envoy::api::v2::filter::StatusCodeFilter* AccessLogFilter::mutable_status_code_filter() {
  if (!has_status_code_filter()) {
    clear_filter_specifier();
    set_has_status_code_filter();
    filter_specifier_.status_code_filter_ = new ::envoy::api::v2::filter::StatusCodeFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.status_code_filter)
  return filter_specifier_.status_code_filter_;
}
::envoy::api::v2::filter::StatusCodeFilter* AccessLogFilter::release_status_code_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.status_code_filter)
  if (has_status_code_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::StatusCodeFilter* temp = filter_specifier_.status_code_filter_;
    filter_specifier_.status_code_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_status_code_filter(::envoy::api::v2::filter::StatusCodeFilter* status_code_filter) {
  clear_filter_specifier();
  if (status_code_filter) {
    set_has_status_code_filter();
    filter_specifier_.status_code_filter_ = status_code_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.status_code_filter)
}

// .envoy.api.v2.filter.DurationFilter duration_filter = 2;
bool AccessLogFilter::has_duration_filter() const {
  return filter_specifier_case() == kDurationFilter;
}
void AccessLogFilter::set_has_duration_filter() {
  _oneof_case_[0] = kDurationFilter;
}
void AccessLogFilter::clear_duration_filter() {
  if (has_duration_filter()) {
    delete filter_specifier_.duration_filter_;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::DurationFilter& AccessLogFilter::duration_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.duration_filter)
  return has_duration_filter()
      ? *filter_specifier_.duration_filter_
      : ::envoy::api::v2::filter::DurationFilter::default_instance();
}
::envoy::api::v2::filter::DurationFilter* AccessLogFilter::mutable_duration_filter() {
  if (!has_duration_filter()) {
    clear_filter_specifier();
    set_has_duration_filter();
    filter_specifier_.duration_filter_ = new ::envoy::api::v2::filter::DurationFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.duration_filter)
  return filter_specifier_.duration_filter_;
}
::envoy::api::v2::filter::DurationFilter* AccessLogFilter::release_duration_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.duration_filter)
  if (has_duration_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::DurationFilter* temp = filter_specifier_.duration_filter_;
    filter_specifier_.duration_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_duration_filter(::envoy::api::v2::filter::DurationFilter* duration_filter) {
  clear_filter_specifier();
  if (duration_filter) {
    set_has_duration_filter();
    filter_specifier_.duration_filter_ = duration_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.duration_filter)
}

// .envoy.api.v2.filter.NotHealthCheckFilter not_health_check_filter = 3;
bool AccessLogFilter::has_not_health_check_filter() const {
  return filter_specifier_case() == kNotHealthCheckFilter;
}
void AccessLogFilter::set_has_not_health_check_filter() {
  _oneof_case_[0] = kNotHealthCheckFilter;
}
void AccessLogFilter::clear_not_health_check_filter() {
  if (has_not_health_check_filter()) {
    delete filter_specifier_.not_health_check_filter_;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::NotHealthCheckFilter& AccessLogFilter::not_health_check_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.not_health_check_filter)
  return has_not_health_check_filter()
      ? *filter_specifier_.not_health_check_filter_
      : ::envoy::api::v2::filter::NotHealthCheckFilter::default_instance();
}
::envoy::api::v2::filter::NotHealthCheckFilter* AccessLogFilter::mutable_not_health_check_filter() {
  if (!has_not_health_check_filter()) {
    clear_filter_specifier();
    set_has_not_health_check_filter();
    filter_specifier_.not_health_check_filter_ = new ::envoy::api::v2::filter::NotHealthCheckFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.not_health_check_filter)
  return filter_specifier_.not_health_check_filter_;
}
::envoy::api::v2::filter::NotHealthCheckFilter* AccessLogFilter::release_not_health_check_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.not_health_check_filter)
  if (has_not_health_check_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::NotHealthCheckFilter* temp = filter_specifier_.not_health_check_filter_;
    filter_specifier_.not_health_check_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_not_health_check_filter(::envoy::api::v2::filter::NotHealthCheckFilter* not_health_check_filter) {
  clear_filter_specifier();
  if (not_health_check_filter) {
    set_has_not_health_check_filter();
    filter_specifier_.not_health_check_filter_ = not_health_check_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.not_health_check_filter)
}

// .envoy.api.v2.filter.TraceableFilter traceable_filter = 4;
bool AccessLogFilter::has_traceable_filter() const {
  return filter_specifier_case() == kTraceableFilter;
}
void AccessLogFilter::set_has_traceable_filter() {
  _oneof_case_[0] = kTraceableFilter;
}
void AccessLogFilter::clear_traceable_filter() {
  if (has_traceable_filter()) {
    delete filter_specifier_.traceable_filter_;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::TraceableFilter& AccessLogFilter::traceable_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.traceable_filter)
  return has_traceable_filter()
      ? *filter_specifier_.traceable_filter_
      : ::envoy::api::v2::filter::TraceableFilter::default_instance();
}
::envoy::api::v2::filter::TraceableFilter* AccessLogFilter::mutable_traceable_filter() {
  if (!has_traceable_filter()) {
    clear_filter_specifier();
    set_has_traceable_filter();
    filter_specifier_.traceable_filter_ = new ::envoy::api::v2::filter::TraceableFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.traceable_filter)
  return filter_specifier_.traceable_filter_;
}
::envoy::api::v2::filter::TraceableFilter* AccessLogFilter::release_traceable_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.traceable_filter)
  if (has_traceable_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::TraceableFilter* temp = filter_specifier_.traceable_filter_;
    filter_specifier_.traceable_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_traceable_filter(::envoy::api::v2::filter::TraceableFilter* traceable_filter) {
  clear_filter_specifier();
  if (traceable_filter) {
    set_has_traceable_filter();
    filter_specifier_.traceable_filter_ = traceable_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.traceable_filter)
}

// .envoy.api.v2.filter.RuntimeFilter runtime_filter = 5;
bool AccessLogFilter::has_runtime_filter() const {
  return filter_specifier_case() == kRuntimeFilter;
}
void AccessLogFilter::set_has_runtime_filter() {
  _oneof_case_[0] = kRuntimeFilter;
}
void AccessLogFilter::clear_runtime_filter() {
  if (has_runtime_filter()) {
    delete filter_specifier_.runtime_filter_;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::RuntimeFilter& AccessLogFilter::runtime_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.runtime_filter)
  return has_runtime_filter()
      ? *filter_specifier_.runtime_filter_
      : ::envoy::api::v2::filter::RuntimeFilter::default_instance();
}
::envoy::api::v2::filter::RuntimeFilter* AccessLogFilter::mutable_runtime_filter() {
  if (!has_runtime_filter()) {
    clear_filter_specifier();
    set_has_runtime_filter();
    filter_specifier_.runtime_filter_ = new ::envoy::api::v2::filter::RuntimeFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.runtime_filter)
  return filter_specifier_.runtime_filter_;
}
::envoy::api::v2::filter::RuntimeFilter* AccessLogFilter::release_runtime_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.runtime_filter)
  if (has_runtime_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::RuntimeFilter* temp = filter_specifier_.runtime_filter_;
    filter_specifier_.runtime_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_runtime_filter(::envoy::api::v2::filter::RuntimeFilter* runtime_filter) {
  clear_filter_specifier();
  if (runtime_filter) {
    set_has_runtime_filter();
    filter_specifier_.runtime_filter_ = runtime_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.runtime_filter)
}

// .envoy.api.v2.filter.AndFilter and_filter = 6;
bool AccessLogFilter::has_and_filter() const {
  return filter_specifier_case() == kAndFilter;
}
void AccessLogFilter::set_has_and_filter() {
  _oneof_case_[0] = kAndFilter;
}
void AccessLogFilter::clear_and_filter() {
  if (has_and_filter()) {
    delete filter_specifier_.and_filter_;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::AndFilter& AccessLogFilter::and_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.and_filter)
  return has_and_filter()
      ? *filter_specifier_.and_filter_
      : ::envoy::api::v2::filter::AndFilter::default_instance();
}
::envoy::api::v2::filter::AndFilter* AccessLogFilter::mutable_and_filter() {
  if (!has_and_filter()) {
    clear_filter_specifier();
    set_has_and_filter();
    filter_specifier_.and_filter_ = new ::envoy::api::v2::filter::AndFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.and_filter)
  return filter_specifier_.and_filter_;
}
::envoy::api::v2::filter::AndFilter* AccessLogFilter::release_and_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.and_filter)
  if (has_and_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::AndFilter* temp = filter_specifier_.and_filter_;
    filter_specifier_.and_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_and_filter(::envoy::api::v2::filter::AndFilter* and_filter) {
  clear_filter_specifier();
  if (and_filter) {
    set_has_and_filter();
    filter_specifier_.and_filter_ = and_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.and_filter)
}

// .envoy.api.v2.filter.OrFilter or_filter = 7;
bool AccessLogFilter::has_or_filter() const {
  return filter_specifier_case() == kOrFilter;
}
void AccessLogFilter::set_has_or_filter() {
  _oneof_case_[0] = kOrFilter;
}
void AccessLogFilter::clear_or_filter() {
  if (has_or_filter()) {
    delete filter_specifier_.or_filter_;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::OrFilter& AccessLogFilter::or_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.or_filter)
  return has_or_filter()
      ? *filter_specifier_.or_filter_
      : ::envoy::api::v2::filter::OrFilter::default_instance();
}
::envoy::api::v2::filter::OrFilter* AccessLogFilter::mutable_or_filter() {
  if (!has_or_filter()) {
    clear_filter_specifier();
    set_has_or_filter();
    filter_specifier_.or_filter_ = new ::envoy::api::v2::filter::OrFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.or_filter)
  return filter_specifier_.or_filter_;
}
::envoy::api::v2::filter::OrFilter* AccessLogFilter::release_or_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.or_filter)
  if (has_or_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::OrFilter* temp = filter_specifier_.or_filter_;
    filter_specifier_.or_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_or_filter(::envoy::api::v2::filter::OrFilter* or_filter) {
  clear_filter_specifier();
  if (or_filter) {
    set_has_or_filter();
    filter_specifier_.or_filter_ = or_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.or_filter)
}

bool AccessLogFilter::has_filter_specifier() const {
  return filter_specifier_case() != FILTER_SPECIFIER_NOT_SET;
}
void AccessLogFilter::clear_has_filter_specifier() {
  _oneof_case_[0] = FILTER_SPECIFIER_NOT_SET;
}
AccessLogFilter::FilterSpecifierCase AccessLogFilter::filter_specifier_case() const {
  return AccessLogFilter::FilterSpecifierCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileAccessLog::kPathFieldNumber;
const int FileAccessLog::kFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileAccessLog::FileAccessLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.FileAccessLog)
}
FileAccessLog::FileAccessLog(const FileAccessLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.format().size() > 0) {
    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.FileAccessLog)
}

void FileAccessLog::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FileAccessLog::~FileAccessLog() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.FileAccessLog)
  SharedDtor();
}

void FileAccessLog::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileAccessLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileAccessLog::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileAccessLog& FileAccessLog::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileAccessLog* FileAccessLog::New(::google::protobuf::Arena* arena) const {
  FileAccessLog* n = new FileAccessLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileAccessLog::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.FileAccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FileAccessLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.FileAccessLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.FileAccessLog.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->format().data(), static_cast<int>(this->format().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.FileAccessLog.format"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.FileAccessLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.FileAccessLog)
  return false;
#undef DO_
}

void FileAccessLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.FileAccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.FileAccessLog.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // string format = 2;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.FileAccessLog.format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->format(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.FileAccessLog)
}

::google::protobuf::uint8* FileAccessLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.FileAccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.FileAccessLog.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // string format = 2;
  if (this->format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.FileAccessLog.format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->format(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.FileAccessLog)
  return target;
}

size_t FileAccessLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.FileAccessLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string format = 2;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileAccessLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.FileAccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  const FileAccessLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileAccessLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.FileAccessLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.FileAccessLog)
    MergeFrom(*source);
  }
}

void FileAccessLog::MergeFrom(const FileAccessLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.FileAccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.format().size() > 0) {

    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
}

void FileAccessLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.FileAccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileAccessLog::CopyFrom(const FileAccessLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.FileAccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileAccessLog::IsInitialized() const {
  return true;
}

void FileAccessLog::Swap(FileAccessLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileAccessLog::InternalSwap(FileAccessLog* other) {
  using std::swap;
  path_.Swap(&other->path_);
  format_.Swap(&other->format_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileAccessLog::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileAccessLog

// string path = 1;
void FileAccessLog::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileAccessLog::path() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.FileAccessLog.path)
  return path_.GetNoArena();
}
void FileAccessLog::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.FileAccessLog.path)
}
#if LANG_CXX11
void FileAccessLog::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.FileAccessLog.path)
}
#endif
void FileAccessLog::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.FileAccessLog.path)
}
void FileAccessLog::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.FileAccessLog.path)
}
::std::string* FileAccessLog::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.FileAccessLog.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileAccessLog::release_path() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.FileAccessLog.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileAccessLog::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.FileAccessLog.path)
}

// string format = 2;
void FileAccessLog::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileAccessLog::format() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.FileAccessLog.format)
  return format_.GetNoArena();
}
void FileAccessLog::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.FileAccessLog.format)
}
#if LANG_CXX11
void FileAccessLog::set_format(::std::string&& value) {
  
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.FileAccessLog.format)
}
#endif
void FileAccessLog::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.FileAccessLog.format)
}
void FileAccessLog::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.FileAccessLog.format)
}
::std::string* FileAccessLog::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.FileAccessLog.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileAccessLog::release_format() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.FileAccessLog.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileAccessLog::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.FileAccessLog.format)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLog::kNameFieldNumber;
const int AccessLog::kFilterFieldNumber;
const int AccessLog::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLog::AccessLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.AccessLog)
}
AccessLog::AccessLog(const AccessLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_filter()) {
    filter_ = new ::envoy::api::v2::filter::AccessLogFilter(*from.filter_);
  } else {
    filter_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::google::protobuf::Struct(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.AccessLog)
}

void AccessLog::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(config_));
  _cached_size_ = 0;
}

AccessLog::~AccessLog() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.AccessLog)
  SharedDtor();
}

void AccessLog::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete config_;
}

void AccessLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessLog::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccessLog& AccessLog::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccessLog* AccessLog::New(::google::protobuf::Arena* arena) const {
  AccessLog* n = new AccessLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessLog::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.AccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) {
    delete filter_;
  }
  filter_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool AccessLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.AccessLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.AccessLog.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.AccessLogFilter filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.AccessLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.AccessLog)
  return false;
#undef DO_
}

void AccessLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.AccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.AccessLog.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .envoy.api.v2.filter.AccessLogFilter filter = 2;
  if (this->has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->filter_, output);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.AccessLog)
}

::google::protobuf::uint8* AccessLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.AccessLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.AccessLog.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .envoy.api.v2.filter.AccessLogFilter filter = 2;
  if (this->has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->filter_, deterministic, target);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.AccessLog)
  return target;
}

size_t AccessLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.AccessLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .envoy.api.v2.filter.AccessLogFilter filter = 2;
  if (this->has_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->filter_);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.AccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.AccessLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.AccessLog)
    MergeFrom(*source);
  }
}

void AccessLog::MergeFrom(const AccessLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.AccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_filter()) {
    mutable_filter()->::envoy::api::v2::filter::AccessLogFilter::MergeFrom(from.filter());
  }
  if (from.has_config()) {
    mutable_config()->::google::protobuf::Struct::MergeFrom(from.config());
  }
}

void AccessLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.AccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLog::CopyFrom(const AccessLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.AccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLog::IsInitialized() const {
  return true;
}

void AccessLog::Swap(AccessLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLog::InternalSwap(AccessLog* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(filter_, other->filter_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessLog::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessLog

// string name = 1;
void AccessLog::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AccessLog::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.name)
  return name_.GetNoArena();
}
void AccessLog::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.name)
}
#if LANG_CXX11
void AccessLog::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.AccessLog.name)
}
#endif
void AccessLog::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.AccessLog.name)
}
void AccessLog::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.AccessLog.name)
}
::std::string* AccessLog::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccessLog::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AccessLog::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.name)
}

// .envoy.api.v2.filter.AccessLogFilter filter = 2;
bool AccessLog::has_filter() const {
  return this != internal_default_instance() && filter_ != NULL;
}
void AccessLog::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
}
const ::envoy::api::v2::filter::AccessLogFilter& AccessLog::filter() const {
  const ::envoy::api::v2::filter::AccessLogFilter* p = filter_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.filter)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::AccessLogFilter*>(
      &::envoy::api::v2::filter::_AccessLogFilter_default_instance_);
}
::envoy::api::v2::filter::AccessLogFilter* AccessLog::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::envoy::api::v2::filter::AccessLogFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.filter)
  return filter_;
}
::envoy::api::v2::filter::AccessLogFilter* AccessLog::release_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.filter)
  
  ::envoy::api::v2::filter::AccessLogFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
void AccessLog::set_allocated_filter(::envoy::api::v2::filter::AccessLogFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.filter)
}

// .google.protobuf.Struct config = 3;
bool AccessLog::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void AccessLog::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::google::protobuf::Struct& AccessLog::config() const {
  const ::google::protobuf::Struct* p = config_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
::google::protobuf::Struct* AccessLog::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.config)
  return config_;
}
::google::protobuf::Struct* AccessLog::release_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.config)
  
  ::google::protobuf::Struct* temp = config_;
  config_ = NULL;
  return temp;
}
void AccessLog::set_allocated_config(::google::protobuf::Struct* config) {
  delete config_;
  if (config != NULL && config->GetArena() != NULL) {
    ::google::protobuf::Struct* new_config = new ::google::protobuf::Struct;
    new_config->CopyFrom(*config);
    config = new_config;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpFilter_DeprecatedV1::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpFilter_DeprecatedV1::HttpFilter_DeprecatedV1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
}
HttpFilter_DeprecatedV1::HttpFilter_DeprecatedV1(const HttpFilter_DeprecatedV1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
}

void HttpFilter_DeprecatedV1::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HttpFilter_DeprecatedV1::~HttpFilter_DeprecatedV1() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
  SharedDtor();
}

void HttpFilter_DeprecatedV1::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HttpFilter_DeprecatedV1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpFilter_DeprecatedV1::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpFilter_DeprecatedV1& HttpFilter_DeprecatedV1::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

HttpFilter_DeprecatedV1* HttpFilter_DeprecatedV1::New(::google::protobuf::Arena* arena) const {
  HttpFilter_DeprecatedV1* n = new HttpFilter_DeprecatedV1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpFilter_DeprecatedV1::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool HttpFilter_DeprecatedV1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.HttpFilter.DeprecatedV1.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
  return false;
#undef DO_
}

void HttpFilter_DeprecatedV1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpFilter.DeprecatedV1.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
}

::google::protobuf::uint8* HttpFilter_DeprecatedV1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpFilter.DeprecatedV1.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
  return target;
}

size_t HttpFilter_DeprecatedV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpFilter_DeprecatedV1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpFilter_DeprecatedV1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpFilter_DeprecatedV1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
    MergeFrom(*source);
  }
}

void HttpFilter_DeprecatedV1::MergeFrom(const HttpFilter_DeprecatedV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void HttpFilter_DeprecatedV1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpFilter_DeprecatedV1::CopyFrom(const HttpFilter_DeprecatedV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpFilter_DeprecatedV1::IsInitialized() const {
  return true;
}

void HttpFilter_DeprecatedV1::Swap(HttpFilter_DeprecatedV1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpFilter_DeprecatedV1::InternalSwap(HttpFilter_DeprecatedV1* other) {
  using std::swap;
  type_.Swap(&other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpFilter_DeprecatedV1::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpFilter_DeprecatedV1

// string type = 1;
void HttpFilter_DeprecatedV1::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpFilter_DeprecatedV1::type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
  return type_.GetNoArena();
}
void HttpFilter_DeprecatedV1::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
}
#if LANG_CXX11
void HttpFilter_DeprecatedV1::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
}
#endif
void HttpFilter_DeprecatedV1::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
}
void HttpFilter_DeprecatedV1::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
}
::std::string* HttpFilter_DeprecatedV1::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpFilter_DeprecatedV1::release_type() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpFilter_DeprecatedV1::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpFilter::kNameFieldNumber;
const int HttpFilter::kConfigFieldNumber;
const int HttpFilter::kDeprecatedV1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpFilter::HttpFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.HttpFilter)
}
HttpFilter::HttpFilter(const HttpFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_config()) {
    config_ = new ::google::protobuf::Struct(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_deprecated_v1()) {
    deprecated_v1_ = new ::envoy::api::v2::filter::HttpFilter_DeprecatedV1(*from.deprecated_v1_);
  } else {
    deprecated_v1_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.HttpFilter)
}

void HttpFilter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deprecated_v1_) -
      reinterpret_cast<char*>(&config_)) + sizeof(deprecated_v1_));
  _cached_size_ = 0;
}

HttpFilter::~HttpFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.HttpFilter)
  SharedDtor();
}

void HttpFilter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete deprecated_v1_;
}

void HttpFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpFilter& HttpFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

HttpFilter* HttpFilter::New(::google::protobuf::Arena* arena) const {
  HttpFilter* n = new HttpFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.HttpFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && deprecated_v1_ != NULL) {
    delete deprecated_v1_;
  }
  deprecated_v1_ = NULL;
  _internal_metadata_.Clear();
}

bool HttpFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.HttpFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.HttpFilter.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.HttpFilter.DeprecatedV1 deprecated_v1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_v1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.HttpFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.HttpFilter)
  return false;
#undef DO_
}

void HttpFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.HttpFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpFilter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.Struct config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  // .envoy.api.v2.filter.HttpFilter.DeprecatedV1 deprecated_v1 = 3;
  if (this->has_deprecated_v1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->deprecated_v1_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.HttpFilter)
}

::google::protobuf::uint8* HttpFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.HttpFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpFilter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.Struct config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_, deterministic, target);
  }

  // .envoy.api.v2.filter.HttpFilter.DeprecatedV1 deprecated_v1 = 3;
  if (this->has_deprecated_v1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->deprecated_v1_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.HttpFilter)
  return target;
}

size_t HttpFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.HttpFilter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Struct config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // .envoy.api.v2.filter.HttpFilter.DeprecatedV1 deprecated_v1 = 3;
  if (this->has_deprecated_v1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->deprecated_v1_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.HttpFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.HttpFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.HttpFilter)
    MergeFrom(*source);
  }
}

void HttpFilter::MergeFrom(const HttpFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.HttpFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_config()) {
    mutable_config()->::google::protobuf::Struct::MergeFrom(from.config());
  }
  if (from.has_deprecated_v1()) {
    mutable_deprecated_v1()->::envoy::api::v2::filter::HttpFilter_DeprecatedV1::MergeFrom(from.deprecated_v1());
  }
}

void HttpFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.HttpFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpFilter::CopyFrom(const HttpFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.HttpFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpFilter::IsInitialized() const {
  return true;
}

void HttpFilter::Swap(HttpFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpFilter::InternalSwap(HttpFilter* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(config_, other->config_);
  swap(deprecated_v1_, other->deprecated_v1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpFilter

// string name = 1;
void HttpFilter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpFilter::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.name)
  return name_.GetNoArena();
}
void HttpFilter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpFilter.name)
}
#if LANG_CXX11
void HttpFilter::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpFilter.name)
}
#endif
void HttpFilter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpFilter.name)
}
void HttpFilter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpFilter.name)
}
::std::string* HttpFilter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpFilter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpFilter::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpFilter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpFilter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpFilter.name)
}

// .google.protobuf.Struct config = 2;
bool HttpFilter::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void HttpFilter::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::google::protobuf::Struct& HttpFilter::config() const {
  const ::google::protobuf::Struct* p = config_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
::google::protobuf::Struct* HttpFilter::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpFilter.config)
  return config_;
}
::google::protobuf::Struct* HttpFilter::release_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpFilter.config)
  
  ::google::protobuf::Struct* temp = config_;
  config_ = NULL;
  return temp;
}
void HttpFilter::set_allocated_config(::google::protobuf::Struct* config) {
  delete config_;
  if (config != NULL && config->GetArena() != NULL) {
    ::google::protobuf::Struct* new_config = new ::google::protobuf::Struct;
    new_config->CopyFrom(*config);
    config = new_config;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpFilter.config)
}

// .envoy.api.v2.filter.HttpFilter.DeprecatedV1 deprecated_v1 = 3;
bool HttpFilter::has_deprecated_v1() const {
  return this != internal_default_instance() && deprecated_v1_ != NULL;
}
void HttpFilter::clear_deprecated_v1() {
  if (GetArenaNoVirtual() == NULL && deprecated_v1_ != NULL) delete deprecated_v1_;
  deprecated_v1_ = NULL;
}
const ::envoy::api::v2::filter::HttpFilter_DeprecatedV1& HttpFilter::deprecated_v1() const {
  const ::envoy::api::v2::filter::HttpFilter_DeprecatedV1* p = deprecated_v1_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.deprecated_v1)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::HttpFilter_DeprecatedV1*>(
      &::envoy::api::v2::filter::_HttpFilter_DeprecatedV1_default_instance_);
}
::envoy::api::v2::filter::HttpFilter_DeprecatedV1* HttpFilter::mutable_deprecated_v1() {
  
  if (deprecated_v1_ == NULL) {
    deprecated_v1_ = new ::envoy::api::v2::filter::HttpFilter_DeprecatedV1;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpFilter.deprecated_v1)
  return deprecated_v1_;
}
::envoy::api::v2::filter::HttpFilter_DeprecatedV1* HttpFilter::release_deprecated_v1() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpFilter.deprecated_v1)
  
  ::envoy::api::v2::filter::HttpFilter_DeprecatedV1* temp = deprecated_v1_;
  deprecated_v1_ = NULL;
  return temp;
}
void HttpFilter::set_allocated_deprecated_v1(::envoy::api::v2::filter::HttpFilter_DeprecatedV1* deprecated_v1) {
  delete deprecated_v1_;
  deprecated_v1_ = deprecated_v1;
  if (deprecated_v1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpFilter.deprecated_v1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpConnectionManager_Tracing::kOperationNameFieldNumber;
const int HttpConnectionManager_Tracing::kRequestHeadersForTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpConnectionManager_Tracing::HttpConnectionManager_Tracing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.HttpConnectionManager.Tracing)
}
HttpConnectionManager_Tracing::HttpConnectionManager_Tracing(const HttpConnectionManager_Tracing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      request_headers_for_tags_(from.request_headers_for_tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_name_ = from.operation_name_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.HttpConnectionManager.Tracing)
}

void HttpConnectionManager_Tracing::SharedCtor() {
  operation_name_ = 0;
  _cached_size_ = 0;
}

HttpConnectionManager_Tracing::~HttpConnectionManager_Tracing() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  SharedDtor();
}

void HttpConnectionManager_Tracing::SharedDtor() {
}

void HttpConnectionManager_Tracing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpConnectionManager_Tracing::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpConnectionManager_Tracing& HttpConnectionManager_Tracing::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

HttpConnectionManager_Tracing* HttpConnectionManager_Tracing::New(::google::protobuf::Arena* arena) const {
  HttpConnectionManager_Tracing* n = new HttpConnectionManager_Tracing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpConnectionManager_Tracing::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_headers_for_tags_.Clear();
  operation_name_ = 0;
  _internal_metadata_.Clear();
}

bool HttpConnectionManager_Tracing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation_name(static_cast< ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string request_headers_for_tags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_request_headers_for_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_headers_for_tags(this->request_headers_for_tags_size() - 1).data(),
            static_cast<int>(this->request_headers_for_tags(this->request_headers_for_tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  return false;
#undef DO_
}

void HttpConnectionManager_Tracing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
  if (this->operation_name() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation_name(), output);
  }

  // repeated string request_headers_for_tags = 2;
  for (int i = 0, n = this->request_headers_for_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_headers_for_tags(i).data(), static_cast<int>(this->request_headers_for_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->request_headers_for_tags(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.HttpConnectionManager.Tracing)
}

::google::protobuf::uint8* HttpConnectionManager_Tracing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
  if (this->operation_name() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation_name(), target);
  }

  // repeated string request_headers_for_tags = 2;
  for (int i = 0, n = this->request_headers_for_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_headers_for_tags(i).data(), static_cast<int>(this->request_headers_for_tags(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->request_headers_for_tags(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  return target;
}

size_t HttpConnectionManager_Tracing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string request_headers_for_tags = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->request_headers_for_tags_size());
  for (int i = 0, n = this->request_headers_for_tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->request_headers_for_tags(i));
  }

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
  if (this->operation_name() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpConnectionManager_Tracing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpConnectionManager_Tracing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpConnectionManager_Tracing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.HttpConnectionManager.Tracing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.HttpConnectionManager.Tracing)
    MergeFrom(*source);
  }
}

void HttpConnectionManager_Tracing::MergeFrom(const HttpConnectionManager_Tracing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_for_tags_.MergeFrom(from.request_headers_for_tags_);
  if (from.operation_name() != 0) {
    set_operation_name(from.operation_name());
  }
}

void HttpConnectionManager_Tracing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpConnectionManager_Tracing::CopyFrom(const HttpConnectionManager_Tracing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpConnectionManager_Tracing::IsInitialized() const {
  return true;
}

void HttpConnectionManager_Tracing::Swap(HttpConnectionManager_Tracing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpConnectionManager_Tracing::InternalSwap(HttpConnectionManager_Tracing* other) {
  using std::swap;
  request_headers_for_tags_.InternalSwap(&other->request_headers_for_tags_);
  swap(operation_name_, other->operation_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpConnectionManager_Tracing::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpConnectionManager_Tracing

// .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
void HttpConnectionManager_Tracing::clear_operation_name() {
  operation_name_ = 0;
}
::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::operation_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.Tracing.operation_name)
  return static_cast< ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName >(operation_name_);
}
void HttpConnectionManager_Tracing::set_operation_name(::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName value) {
  
  operation_name_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.Tracing.operation_name)
}

// repeated string request_headers_for_tags = 2;
int HttpConnectionManager_Tracing::request_headers_for_tags_size() const {
  return request_headers_for_tags_.size();
}
void HttpConnectionManager_Tracing::clear_request_headers_for_tags() {
  request_headers_for_tags_.Clear();
}
const ::std::string& HttpConnectionManager_Tracing::request_headers_for_tags(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Get(index);
}
::std::string* HttpConnectionManager_Tracing::mutable_request_headers_for_tags(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Mutable(index);
}
void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  request_headers_for_tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  request_headers_for_tags_.Mutable(index)->assign(std::move(value));
}
#endif
void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  request_headers_for_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const char* value, size_t size) {
  request_headers_for_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
::std::string* HttpConnectionManager_Tracing::add_request_headers_for_tags() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Add();
}
void HttpConnectionManager_Tracing::add_request_headers_for_tags(const ::std::string& value) {
  request_headers_for_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
#if LANG_CXX11
void HttpConnectionManager_Tracing::add_request_headers_for_tags(::std::string&& value) {
  request_headers_for_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
#endif
void HttpConnectionManager_Tracing::add_request_headers_for_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  request_headers_for_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
void HttpConnectionManager_Tracing::add_request_headers_for_tags(const char* value, size_t size) {
  request_headers_for_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
HttpConnectionManager_Tracing::request_headers_for_tags() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
HttpConnectionManager_Tracing::mutable_request_headers_for_tags() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return &request_headers_for_tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpConnectionManager_SetCurrentClientCertDetails::kSubjectFieldNumber;
const int HttpConnectionManager_SetCurrentClientCertDetails::kSanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpConnectionManager_SetCurrentClientCertDetails::HttpConnectionManager_SetCurrentClientCertDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
}
HttpConnectionManager_SetCurrentClientCertDetails::HttpConnectionManager_SetCurrentClientCertDetails(const HttpConnectionManager_SetCurrentClientCertDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_subject()) {
    subject_ = new ::google::protobuf::BoolValue(*from.subject_);
  } else {
    subject_ = NULL;
  }
  if (from.has_san()) {
    san_ = new ::google::protobuf::BoolValue(*from.san_);
  } else {
    san_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
}

void HttpConnectionManager_SetCurrentClientCertDetails::SharedCtor() {
  ::memset(&subject_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&san_) -
      reinterpret_cast<char*>(&subject_)) + sizeof(san_));
  _cached_size_ = 0;
}

HttpConnectionManager_SetCurrentClientCertDetails::~HttpConnectionManager_SetCurrentClientCertDetails() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
  SharedDtor();
}

void HttpConnectionManager_SetCurrentClientCertDetails::SharedDtor() {
  if (this != internal_default_instance()) delete subject_;
  if (this != internal_default_instance()) delete san_;
}

void HttpConnectionManager_SetCurrentClientCertDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpConnectionManager_SetCurrentClientCertDetails::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpConnectionManager_SetCurrentClientCertDetails& HttpConnectionManager_SetCurrentClientCertDetails::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

HttpConnectionManager_SetCurrentClientCertDetails* HttpConnectionManager_SetCurrentClientCertDetails::New(::google::protobuf::Arena* arena) const {
  HttpConnectionManager_SetCurrentClientCertDetails* n = new HttpConnectionManager_SetCurrentClientCertDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpConnectionManager_SetCurrentClientCertDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && subject_ != NULL) {
    delete subject_;
  }
  subject_ = NULL;
  if (GetArenaNoVirtual() == NULL && san_ != NULL) {
    delete san_;
  }
  san_ = NULL;
  _internal_metadata_.Clear();
}

bool HttpConnectionManager_SetCurrentClientCertDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.BoolValue subject = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subject()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue san = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_san()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
  return false;
#undef DO_
}

void HttpConnectionManager_SetCurrentClientCertDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue subject = 1;
  if (this->has_subject()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->subject_, output);
  }

  // .google.protobuf.BoolValue san = 2;
  if (this->has_san()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->san_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
}

::google::protobuf::uint8* HttpConnectionManager_SetCurrentClientCertDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue subject = 1;
  if (this->has_subject()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->subject_, deterministic, target);
  }

  // .google.protobuf.BoolValue san = 2;
  if (this->has_san()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->san_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
  return target;
}

size_t HttpConnectionManager_SetCurrentClientCertDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.BoolValue subject = 1;
  if (this->has_subject()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->subject_);
  }

  // .google.protobuf.BoolValue san = 2;
  if (this->has_san()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->san_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpConnectionManager_SetCurrentClientCertDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpConnectionManager_SetCurrentClientCertDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpConnectionManager_SetCurrentClientCertDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
    MergeFrom(*source);
  }
}

void HttpConnectionManager_SetCurrentClientCertDetails::MergeFrom(const HttpConnectionManager_SetCurrentClientCertDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subject()) {
    mutable_subject()->::google::protobuf::BoolValue::MergeFrom(from.subject());
  }
  if (from.has_san()) {
    mutable_san()->::google::protobuf::BoolValue::MergeFrom(from.san());
  }
}

void HttpConnectionManager_SetCurrentClientCertDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpConnectionManager_SetCurrentClientCertDetails::CopyFrom(const HttpConnectionManager_SetCurrentClientCertDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpConnectionManager_SetCurrentClientCertDetails::IsInitialized() const {
  return true;
}

void HttpConnectionManager_SetCurrentClientCertDetails::Swap(HttpConnectionManager_SetCurrentClientCertDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpConnectionManager_SetCurrentClientCertDetails::InternalSwap(HttpConnectionManager_SetCurrentClientCertDetails* other) {
  using std::swap;
  swap(subject_, other->subject_);
  swap(san_, other->san_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpConnectionManager_SetCurrentClientCertDetails::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpConnectionManager_SetCurrentClientCertDetails

// .google.protobuf.BoolValue subject = 1;
bool HttpConnectionManager_SetCurrentClientCertDetails::has_subject() const {
  return this != internal_default_instance() && subject_ != NULL;
}
void HttpConnectionManager_SetCurrentClientCertDetails::clear_subject() {
  if (GetArenaNoVirtual() == NULL && subject_ != NULL) delete subject_;
  subject_ = NULL;
}
const ::google::protobuf::BoolValue& HttpConnectionManager_SetCurrentClientCertDetails::subject() const {
  const ::google::protobuf::BoolValue* p = subject_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.subject)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* HttpConnectionManager_SetCurrentClientCertDetails::mutable_subject() {
  
  if (subject_ == NULL) {
    subject_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.subject)
  return subject_;
}
::google::protobuf::BoolValue* HttpConnectionManager_SetCurrentClientCertDetails::release_subject() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.subject)
  
  ::google::protobuf::BoolValue* temp = subject_;
  subject_ = NULL;
  return temp;
}
void HttpConnectionManager_SetCurrentClientCertDetails::set_allocated_subject(::google::protobuf::BoolValue* subject) {
  delete subject_;
  if (subject != NULL && subject->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_subject = new ::google::protobuf::BoolValue;
    new_subject->CopyFrom(*subject);
    subject = new_subject;
  }
  subject_ = subject;
  if (subject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.subject)
}

// .google.protobuf.BoolValue san = 2;
bool HttpConnectionManager_SetCurrentClientCertDetails::has_san() const {
  return this != internal_default_instance() && san_ != NULL;
}
void HttpConnectionManager_SetCurrentClientCertDetails::clear_san() {
  if (GetArenaNoVirtual() == NULL && san_ != NULL) delete san_;
  san_ = NULL;
}
const ::google::protobuf::BoolValue& HttpConnectionManager_SetCurrentClientCertDetails::san() const {
  const ::google::protobuf::BoolValue* p = san_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.san)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* HttpConnectionManager_SetCurrentClientCertDetails::mutable_san() {
  
  if (san_ == NULL) {
    san_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.san)
  return san_;
}
::google::protobuf::BoolValue* HttpConnectionManager_SetCurrentClientCertDetails::release_san() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.san)
  
  ::google::protobuf::BoolValue* temp = san_;
  san_ = NULL;
  return temp;
}
void HttpConnectionManager_SetCurrentClientCertDetails::set_allocated_san(::google::protobuf::BoolValue* san) {
  delete san_;
  if (san != NULL && san->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_san = new ::google::protobuf::BoolValue;
    new_san->CopyFrom(*san);
    san = new_san;
  }
  san_ = san;
  if (san) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.san)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpConnectionManager::kCodecTypeFieldNumber;
const int HttpConnectionManager::kStatPrefixFieldNumber;
const int HttpConnectionManager::kRdsFieldNumber;
const int HttpConnectionManager::kRouteConfigFieldNumber;
const int HttpConnectionManager::kHttpFiltersFieldNumber;
const int HttpConnectionManager::kAddUserAgentFieldNumber;
const int HttpConnectionManager::kTracingFieldNumber;
const int HttpConnectionManager::kHttpProtocolOptionsFieldNumber;
const int HttpConnectionManager::kHttp2ProtocolOptionsFieldNumber;
const int HttpConnectionManager::kServerNameFieldNumber;
const int HttpConnectionManager::kIdleTimeoutFieldNumber;
const int HttpConnectionManager::kDrainTimeoutFieldNumber;
const int HttpConnectionManager::kAccessLogFieldNumber;
const int HttpConnectionManager::kUseRemoteAddressFieldNumber;
const int HttpConnectionManager::kGenerateRequestIdFieldNumber;
const int HttpConnectionManager::kForwardClientCertDetailsFieldNumber;
const int HttpConnectionManager::kSetCurrentClientCertDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpConnectionManager::HttpConnectionManager()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.HttpConnectionManager)
}
HttpConnectionManager::HttpConnectionManager(const HttpConnectionManager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      http_filters_(from.http_filters_),
      access_log_(from.access_log_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stat_prefix().size() > 0) {
    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.has_add_user_agent()) {
    add_user_agent_ = new ::google::protobuf::BoolValue(*from.add_user_agent_);
  } else {
    add_user_agent_ = NULL;
  }
  if (from.has_tracing()) {
    tracing_ = new ::envoy::api::v2::filter::HttpConnectionManager_Tracing(*from.tracing_);
  } else {
    tracing_ = NULL;
  }
  if (from.has_http_protocol_options()) {
    http_protocol_options_ = new ::envoy::api::v2::Http1ProtocolOptions(*from.http_protocol_options_);
  } else {
    http_protocol_options_ = NULL;
  }
  if (from.has_http2_protocol_options()) {
    http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions(*from.http2_protocol_options_);
  } else {
    http2_protocol_options_ = NULL;
  }
  if (from.has_idle_timeout()) {
    idle_timeout_ = new ::google::protobuf::Duration(*from.idle_timeout_);
  } else {
    idle_timeout_ = NULL;
  }
  if (from.has_drain_timeout()) {
    drain_timeout_ = new ::google::protobuf::Duration(*from.drain_timeout_);
  } else {
    drain_timeout_ = NULL;
  }
  if (from.has_use_remote_address()) {
    use_remote_address_ = new ::google::protobuf::BoolValue(*from.use_remote_address_);
  } else {
    use_remote_address_ = NULL;
  }
  if (from.has_generate_request_id()) {
    generate_request_id_ = new ::google::protobuf::BoolValue(*from.generate_request_id_);
  } else {
    generate_request_id_ = NULL;
  }
  if (from.has_set_current_client_cert_details()) {
    set_current_client_cert_details_ = new ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails(*from.set_current_client_cert_details_);
  } else {
    set_current_client_cert_details_ = NULL;
  }
  ::memcpy(&codec_type_, &from.codec_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&forward_client_cert_details_) -
    reinterpret_cast<char*>(&codec_type_)) + sizeof(forward_client_cert_details_));
  clear_has_route_specifier();
  switch (from.route_specifier_case()) {
    case kRds: {
      mutable_rds()->::envoy::api::v2::filter::Rds::MergeFrom(from.rds());
      break;
    }
    case kRouteConfig: {
      mutable_route_config()->::envoy::api::v2::RouteConfiguration::MergeFrom(from.route_config());
      break;
    }
    case ROUTE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.HttpConnectionManager)
}

void HttpConnectionManager::SharedCtor() {
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&add_user_agent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forward_client_cert_details_) -
      reinterpret_cast<char*>(&add_user_agent_)) + sizeof(forward_client_cert_details_));
  clear_has_route_specifier();
  _cached_size_ = 0;
}

HttpConnectionManager::~HttpConnectionManager() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.HttpConnectionManager)
  SharedDtor();
}

void HttpConnectionManager::SharedDtor() {
  stat_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete add_user_agent_;
  if (this != internal_default_instance()) delete tracing_;
  if (this != internal_default_instance()) delete http_protocol_options_;
  if (this != internal_default_instance()) delete http2_protocol_options_;
  if (this != internal_default_instance()) delete idle_timeout_;
  if (this != internal_default_instance()) delete drain_timeout_;
  if (this != internal_default_instance()) delete use_remote_address_;
  if (this != internal_default_instance()) delete generate_request_id_;
  if (this != internal_default_instance()) delete set_current_client_cert_details_;
  if (has_route_specifier()) {
    clear_route_specifier();
  }
}

void HttpConnectionManager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpConnectionManager::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpConnectionManager& HttpConnectionManager::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

HttpConnectionManager* HttpConnectionManager::New(::google::protobuf::Arena* arena) const {
  HttpConnectionManager* n = new HttpConnectionManager;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpConnectionManager::clear_route_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.filter.HttpConnectionManager)
  switch (route_specifier_case()) {
    case kRds: {
      delete route_specifier_.rds_;
      break;
    }
    case kRouteConfig: {
      delete route_specifier_.route_config_;
      break;
    }
    case ROUTE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ROUTE_SPECIFIER_NOT_SET;
}


void HttpConnectionManager::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.HttpConnectionManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  http_filters_.Clear();
  access_log_.Clear();
  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && add_user_agent_ != NULL) {
    delete add_user_agent_;
  }
  add_user_agent_ = NULL;
  if (GetArenaNoVirtual() == NULL && tracing_ != NULL) {
    delete tracing_;
  }
  tracing_ = NULL;
  if (GetArenaNoVirtual() == NULL && http_protocol_options_ != NULL) {
    delete http_protocol_options_;
  }
  http_protocol_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && http2_protocol_options_ != NULL) {
    delete http2_protocol_options_;
  }
  http2_protocol_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && idle_timeout_ != NULL) {
    delete idle_timeout_;
  }
  idle_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && drain_timeout_ != NULL) {
    delete drain_timeout_;
  }
  drain_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && use_remote_address_ != NULL) {
    delete use_remote_address_;
  }
  use_remote_address_ = NULL;
  if (GetArenaNoVirtual() == NULL && generate_request_id_ != NULL) {
    delete generate_request_id_;
  }
  generate_request_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && set_current_client_cert_details_ != NULL) {
    delete set_current_client_cert_details_;
  }
  set_current_client_cert_details_ = NULL;
  ::memset(&codec_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forward_client_cert_details_) -
      reinterpret_cast<char*>(&codec_type_)) + sizeof(forward_client_cert_details_));
  clear_route_specifier();
  _internal_metadata_.Clear();
}

bool HttpConnectionManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.HttpConnectionManager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_codec_type(static_cast< ::envoy::api::v2::filter::HttpConnectionManager_CodecType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stat_prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stat_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stat_prefix().data(), static_cast<int>(this->stat_prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.HttpConnectionManager.stat_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.Rds rds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RouteConfiguration route_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_http_filters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue add_user_agent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_user_agent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tracing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http2_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), static_cast<int>(this->server_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.HttpConnectionManager.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration idle_timeout = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_idle_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration drain_timeout = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drain_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.filter.AccessLog access_log = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_access_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue use_remote_address = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_use_remote_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue generate_request_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generate_request_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_forward_client_cert_details(static_cast< ::envoy::api::v2::filter::HttpConnectionManager_ForwardClientCertDetails >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_current_client_cert_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.HttpConnectionManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.HttpConnectionManager)
  return false;
#undef DO_
}

void HttpConnectionManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.HttpConnectionManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
  if (this->codec_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->codec_type(), output);
  }

  // string stat_prefix = 2;
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), static_cast<int>(this->stat_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpConnectionManager.stat_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stat_prefix(), output);
  }

  // .envoy.api.v2.filter.Rds rds = 3;
  if (has_rds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *route_specifier_.rds_, output);
  }

  // .envoy.api.v2.RouteConfiguration route_config = 4;
  if (has_route_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *route_specifier_.route_config_, output);
  }

  // repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->http_filters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->http_filters(static_cast<int>(i)), output);
  }

  // .google.protobuf.BoolValue add_user_agent = 6;
  if (this->has_add_user_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->add_user_agent_, output);
  }

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
  if (this->has_tracing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->tracing_, output);
  }

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
  if (this->has_http_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->http_protocol_options_, output);
  }

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
  if (this->has_http2_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->http2_protocol_options_, output);
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpConnectionManager.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->server_name(), output);
  }

  // .google.protobuf.Duration idle_timeout = 11;
  if (this->has_idle_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->idle_timeout_, output);
  }

  // .google.protobuf.Duration drain_timeout = 12;
  if (this->has_drain_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->drain_timeout_, output);
  }

  // repeated .envoy.api.v2.filter.AccessLog access_log = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_log_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->access_log(static_cast<int>(i)), output);
  }

  // .google.protobuf.BoolValue use_remote_address = 14;
  if (this->has_use_remote_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->use_remote_address_, output);
  }

  // .google.protobuf.BoolValue generate_request_id = 15;
  if (this->has_generate_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->generate_request_id_, output);
  }

  // .envoy.api.v2.filter.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
  if (this->forward_client_cert_details() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->forward_client_cert_details(), output);
  }

  // .envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
  if (this->has_set_current_client_cert_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->set_current_client_cert_details_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.HttpConnectionManager)
}

::google::protobuf::uint8* HttpConnectionManager::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.HttpConnectionManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
  if (this->codec_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->codec_type(), target);
  }

  // string stat_prefix = 2;
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), static_cast<int>(this->stat_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpConnectionManager.stat_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stat_prefix(), target);
  }

  // .envoy.api.v2.filter.Rds rds = 3;
  if (has_rds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *route_specifier_.rds_, deterministic, target);
  }

  // .envoy.api.v2.RouteConfiguration route_config = 4;
  if (has_route_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *route_specifier_.route_config_, deterministic, target);
  }

  // repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->http_filters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->http_filters(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.BoolValue add_user_agent = 6;
  if (this->has_add_user_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->add_user_agent_, deterministic, target);
  }

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
  if (this->has_tracing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->tracing_, deterministic, target);
  }

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
  if (this->has_http_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->http_protocol_options_, deterministic, target);
  }

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
  if (this->has_http2_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->http2_protocol_options_, deterministic, target);
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), static_cast<int>(this->server_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpConnectionManager.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->server_name(), target);
  }

  // .google.protobuf.Duration idle_timeout = 11;
  if (this->has_idle_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->idle_timeout_, deterministic, target);
  }

  // .google.protobuf.Duration drain_timeout = 12;
  if (this->has_drain_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->drain_timeout_, deterministic, target);
  }

  // repeated .envoy.api.v2.filter.AccessLog access_log = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->access_log_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->access_log(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.BoolValue use_remote_address = 14;
  if (this->has_use_remote_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->use_remote_address_, deterministic, target);
  }

  // .google.protobuf.BoolValue generate_request_id = 15;
  if (this->has_generate_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->generate_request_id_, deterministic, target);
  }

  // .envoy.api.v2.filter.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
  if (this->forward_client_cert_details() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->forward_client_cert_details(), target);
  }

  // .envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
  if (this->has_set_current_client_cert_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->set_current_client_cert_details_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.HttpConnectionManager)
  return target;
}

size_t HttpConnectionManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.HttpConnectionManager)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->http_filters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->http_filters(static_cast<int>(i)));
    }
  }

  // repeated .envoy.api.v2.filter.AccessLog access_log = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->access_log_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->access_log(static_cast<int>(i)));
    }
  }

  // string stat_prefix = 2;
  if (this->stat_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stat_prefix());
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // .google.protobuf.BoolValue add_user_agent = 6;
  if (this->has_add_user_agent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->add_user_agent_);
  }

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
  if (this->has_tracing()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tracing_);
  }

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
  if (this->has_http_protocol_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->http_protocol_options_);
  }

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
  if (this->has_http2_protocol_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->http2_protocol_options_);
  }

  // .google.protobuf.Duration idle_timeout = 11;
  if (this->has_idle_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->idle_timeout_);
  }

  // .google.protobuf.Duration drain_timeout = 12;
  if (this->has_drain_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->drain_timeout_);
  }

  // .google.protobuf.BoolValue use_remote_address = 14;
  if (this->has_use_remote_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->use_remote_address_);
  }

  // .google.protobuf.BoolValue generate_request_id = 15;
  if (this->has_generate_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->generate_request_id_);
  }

  // .envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
  if (this->has_set_current_client_cert_details()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->set_current_client_cert_details_);
  }

  // .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
  if (this->codec_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->codec_type());
  }

  // .envoy.api.v2.filter.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
  if (this->forward_client_cert_details() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->forward_client_cert_details());
  }

  switch (route_specifier_case()) {
    // .envoy.api.v2.filter.Rds rds = 3;
    case kRds: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *route_specifier_.rds_);
      break;
    }
    // .envoy.api.v2.RouteConfiguration route_config = 4;
    case kRouteConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *route_specifier_.route_config_);
      break;
    }
    case ROUTE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpConnectionManager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.HttpConnectionManager)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpConnectionManager* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpConnectionManager>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.HttpConnectionManager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.HttpConnectionManager)
    MergeFrom(*source);
  }
}

void HttpConnectionManager::MergeFrom(const HttpConnectionManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.HttpConnectionManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  http_filters_.MergeFrom(from.http_filters_);
  access_log_.MergeFrom(from.access_log_);
  if (from.stat_prefix().size() > 0) {

    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.has_add_user_agent()) {
    mutable_add_user_agent()->::google::protobuf::BoolValue::MergeFrom(from.add_user_agent());
  }
  if (from.has_tracing()) {
    mutable_tracing()->::envoy::api::v2::filter::HttpConnectionManager_Tracing::MergeFrom(from.tracing());
  }
  if (from.has_http_protocol_options()) {
    mutable_http_protocol_options()->::envoy::api::v2::Http1ProtocolOptions::MergeFrom(from.http_protocol_options());
  }
  if (from.has_http2_protocol_options()) {
    mutable_http2_protocol_options()->::envoy::api::v2::Http2ProtocolOptions::MergeFrom(from.http2_protocol_options());
  }
  if (from.has_idle_timeout()) {
    mutable_idle_timeout()->::google::protobuf::Duration::MergeFrom(from.idle_timeout());
  }
  if (from.has_drain_timeout()) {
    mutable_drain_timeout()->::google::protobuf::Duration::MergeFrom(from.drain_timeout());
  }
  if (from.has_use_remote_address()) {
    mutable_use_remote_address()->::google::protobuf::BoolValue::MergeFrom(from.use_remote_address());
  }
  if (from.has_generate_request_id()) {
    mutable_generate_request_id()->::google::protobuf::BoolValue::MergeFrom(from.generate_request_id());
  }
  if (from.has_set_current_client_cert_details()) {
    mutable_set_current_client_cert_details()->::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails::MergeFrom(from.set_current_client_cert_details());
  }
  if (from.codec_type() != 0) {
    set_codec_type(from.codec_type());
  }
  if (from.forward_client_cert_details() != 0) {
    set_forward_client_cert_details(from.forward_client_cert_details());
  }
  switch (from.route_specifier_case()) {
    case kRds: {
      mutable_rds()->::envoy::api::v2::filter::Rds::MergeFrom(from.rds());
      break;
    }
    case kRouteConfig: {
      mutable_route_config()->::envoy::api::v2::RouteConfiguration::MergeFrom(from.route_config());
      break;
    }
    case ROUTE_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void HttpConnectionManager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.HttpConnectionManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpConnectionManager::CopyFrom(const HttpConnectionManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.HttpConnectionManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpConnectionManager::IsInitialized() const {
  return true;
}

void HttpConnectionManager::Swap(HttpConnectionManager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpConnectionManager::InternalSwap(HttpConnectionManager* other) {
  using std::swap;
  http_filters_.InternalSwap(&other->http_filters_);
  access_log_.InternalSwap(&other->access_log_);
  stat_prefix_.Swap(&other->stat_prefix_);
  server_name_.Swap(&other->server_name_);
  swap(add_user_agent_, other->add_user_agent_);
  swap(tracing_, other->tracing_);
  swap(http_protocol_options_, other->http_protocol_options_);
  swap(http2_protocol_options_, other->http2_protocol_options_);
  swap(idle_timeout_, other->idle_timeout_);
  swap(drain_timeout_, other->drain_timeout_);
  swap(use_remote_address_, other->use_remote_address_);
  swap(generate_request_id_, other->generate_request_id_);
  swap(set_current_client_cert_details_, other->set_current_client_cert_details_);
  swap(codec_type_, other->codec_type_);
  swap(forward_client_cert_details_, other->forward_client_cert_details_);
  swap(route_specifier_, other->route_specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpConnectionManager::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpConnectionManager

// .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
void HttpConnectionManager::clear_codec_type() {
  codec_type_ = 0;
}
::envoy::api::v2::filter::HttpConnectionManager_CodecType HttpConnectionManager::codec_type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.codec_type)
  return static_cast< ::envoy::api::v2::filter::HttpConnectionManager_CodecType >(codec_type_);
}
void HttpConnectionManager::set_codec_type(::envoy::api::v2::filter::HttpConnectionManager_CodecType value) {
  
  codec_type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.codec_type)
}

// string stat_prefix = 2;
void HttpConnectionManager::clear_stat_prefix() {
  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpConnectionManager::stat_prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
  return stat_prefix_.GetNoArena();
}
void HttpConnectionManager::set_stat_prefix(const ::std::string& value) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
#if LANG_CXX11
void HttpConnectionManager::set_stat_prefix(::std::string&& value) {
  
  stat_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
#endif
void HttpConnectionManager::set_stat_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
void HttpConnectionManager::set_stat_prefix(const char* value, size_t size) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
::std::string* HttpConnectionManager::mutable_stat_prefix() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
  return stat_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpConnectionManager::release_stat_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
  
  return stat_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpConnectionManager::set_allocated_stat_prefix(::std::string* stat_prefix) {
  if (stat_prefix != NULL) {
    
  } else {
    
  }
  stat_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stat_prefix);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}

// .envoy.api.v2.filter.Rds rds = 3;
bool HttpConnectionManager::has_rds() const {
  return route_specifier_case() == kRds;
}
void HttpConnectionManager::set_has_rds() {
  _oneof_case_[0] = kRds;
}
void HttpConnectionManager::clear_rds() {
  if (has_rds()) {
    delete route_specifier_.rds_;
    clear_has_route_specifier();
  }
}
 const ::envoy::api::v2::filter::Rds& HttpConnectionManager::rds() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.rds)
  return has_rds()
      ? *route_specifier_.rds_
      : ::envoy::api::v2::filter::Rds::default_instance();
}
::envoy::api::v2::filter::Rds* HttpConnectionManager::mutable_rds() {
  if (!has_rds()) {
    clear_route_specifier();
    set_has_rds();
    route_specifier_.rds_ = new ::envoy::api::v2::filter::Rds;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.rds)
  return route_specifier_.rds_;
}
::envoy::api::v2::filter::Rds* HttpConnectionManager::release_rds() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.rds)
  if (has_rds()) {
    clear_has_route_specifier();
    ::envoy::api::v2::filter::Rds* temp = route_specifier_.rds_;
    route_specifier_.rds_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HttpConnectionManager::set_allocated_rds(::envoy::api::v2::filter::Rds* rds) {
  clear_route_specifier();
  if (rds) {
    set_has_rds();
    route_specifier_.rds_ = rds;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.rds)
}

// .envoy.api.v2.RouteConfiguration route_config = 4;
bool HttpConnectionManager::has_route_config() const {
  return route_specifier_case() == kRouteConfig;
}
void HttpConnectionManager::set_has_route_config() {
  _oneof_case_[0] = kRouteConfig;
}
void HttpConnectionManager::clear_route_config() {
  if (has_route_config()) {
    delete route_specifier_.route_config_;
    clear_has_route_specifier();
  }
}
 const ::envoy::api::v2::RouteConfiguration& HttpConnectionManager::route_config() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.route_config)
  return has_route_config()
      ? *route_specifier_.route_config_
      : ::envoy::api::v2::RouteConfiguration::default_instance();
}
::envoy::api::v2::RouteConfiguration* HttpConnectionManager::mutable_route_config() {
  if (!has_route_config()) {
    clear_route_specifier();
    set_has_route_config();
    route_specifier_.route_config_ = new ::envoy::api::v2::RouteConfiguration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.route_config)
  return route_specifier_.route_config_;
}
::envoy::api::v2::RouteConfiguration* HttpConnectionManager::release_route_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.route_config)
  if (has_route_config()) {
    clear_has_route_specifier();
    ::envoy::api::v2::RouteConfiguration* temp = route_specifier_.route_config_;
    route_specifier_.route_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HttpConnectionManager::set_allocated_route_config(::envoy::api::v2::RouteConfiguration* route_config) {
  clear_route_specifier();
  if (route_config) {
    set_has_route_config();
    route_specifier_.route_config_ = route_config;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.route_config)
}

// repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
int HttpConnectionManager::http_filters_size() const {
  return http_filters_.size();
}
void HttpConnectionManager::clear_http_filters() {
  http_filters_.Clear();
}
const ::envoy::api::v2::filter::HttpFilter& HttpConnectionManager::http_filters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_.Get(index);
}
::envoy::api::v2::filter::HttpFilter* HttpConnectionManager::mutable_http_filters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_.Mutable(index);
}
::envoy::api::v2::filter::HttpFilter* HttpConnectionManager::add_http_filters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter >*
HttpConnectionManager::mutable_http_filters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return &http_filters_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter >&
HttpConnectionManager::http_filters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_;
}

// .google.protobuf.BoolValue add_user_agent = 6;
bool HttpConnectionManager::has_add_user_agent() const {
  return this != internal_default_instance() && add_user_agent_ != NULL;
}
void HttpConnectionManager::clear_add_user_agent() {
  if (GetArenaNoVirtual() == NULL && add_user_agent_ != NULL) delete add_user_agent_;
  add_user_agent_ = NULL;
}
const ::google::protobuf::BoolValue& HttpConnectionManager::add_user_agent() const {
  const ::google::protobuf::BoolValue* p = add_user_agent_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* HttpConnectionManager::mutable_add_user_agent() {
  
  if (add_user_agent_ == NULL) {
    add_user_agent_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
  return add_user_agent_;
}
::google::protobuf::BoolValue* HttpConnectionManager::release_add_user_agent() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
  
  ::google::protobuf::BoolValue* temp = add_user_agent_;
  add_user_agent_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_add_user_agent(::google::protobuf::BoolValue* add_user_agent) {
  delete add_user_agent_;
  if (add_user_agent != NULL && add_user_agent->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_add_user_agent = new ::google::protobuf::BoolValue;
    new_add_user_agent->CopyFrom(*add_user_agent);
    add_user_agent = new_add_user_agent;
  }
  add_user_agent_ = add_user_agent;
  if (add_user_agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
}

// .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
bool HttpConnectionManager::has_tracing() const {
  return this != internal_default_instance() && tracing_ != NULL;
}
void HttpConnectionManager::clear_tracing() {
  if (GetArenaNoVirtual() == NULL && tracing_ != NULL) delete tracing_;
  tracing_ = NULL;
}
const ::envoy::api::v2::filter::HttpConnectionManager_Tracing& HttpConnectionManager::tracing() const {
  const ::envoy::api::v2::filter::HttpConnectionManager_Tracing* p = tracing_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.tracing)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::HttpConnectionManager_Tracing*>(
      &::envoy::api::v2::filter::_HttpConnectionManager_Tracing_default_instance_);
}
::envoy::api::v2::filter::HttpConnectionManager_Tracing* HttpConnectionManager::mutable_tracing() {
  
  if (tracing_ == NULL) {
    tracing_ = new ::envoy::api::v2::filter::HttpConnectionManager_Tracing;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.tracing)
  return tracing_;
}
::envoy::api::v2::filter::HttpConnectionManager_Tracing* HttpConnectionManager::release_tracing() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.tracing)
  
  ::envoy::api::v2::filter::HttpConnectionManager_Tracing* temp = tracing_;
  tracing_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_tracing(::envoy::api::v2::filter::HttpConnectionManager_Tracing* tracing) {
  delete tracing_;
  tracing_ = tracing;
  if (tracing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.tracing)
}

// .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
bool HttpConnectionManager::has_http_protocol_options() const {
  return this != internal_default_instance() && http_protocol_options_ != NULL;
}
void HttpConnectionManager::clear_http_protocol_options() {
  if (GetArenaNoVirtual() == NULL && http_protocol_options_ != NULL) delete http_protocol_options_;
  http_protocol_options_ = NULL;
}
const ::envoy::api::v2::Http1ProtocolOptions& HttpConnectionManager::http_protocol_options() const {
  const ::envoy::api::v2::Http1ProtocolOptions* p = http_protocol_options_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Http1ProtocolOptions*>(
      &::envoy::api::v2::_Http1ProtocolOptions_default_instance_);
}
::envoy::api::v2::Http1ProtocolOptions* HttpConnectionManager::mutable_http_protocol_options() {
  
  if (http_protocol_options_ == NULL) {
    http_protocol_options_ = new ::envoy::api::v2::Http1ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
  return http_protocol_options_;
}
::envoy::api::v2::Http1ProtocolOptions* HttpConnectionManager::release_http_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
  
  ::envoy::api::v2::Http1ProtocolOptions* temp = http_protocol_options_;
  http_protocol_options_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_http_protocol_options(::envoy::api::v2::Http1ProtocolOptions* http_protocol_options) {
  delete http_protocol_options_;
  http_protocol_options_ = http_protocol_options;
  if (http_protocol_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
}

// .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
bool HttpConnectionManager::has_http2_protocol_options() const {
  return this != internal_default_instance() && http2_protocol_options_ != NULL;
}
void HttpConnectionManager::clear_http2_protocol_options() {
  if (GetArenaNoVirtual() == NULL && http2_protocol_options_ != NULL) delete http2_protocol_options_;
  http2_protocol_options_ = NULL;
}
const ::envoy::api::v2::Http2ProtocolOptions& HttpConnectionManager::http2_protocol_options() const {
  const ::envoy::api::v2::Http2ProtocolOptions* p = http2_protocol_options_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Http2ProtocolOptions*>(
      &::envoy::api::v2::_Http2ProtocolOptions_default_instance_);
}
::envoy::api::v2::Http2ProtocolOptions* HttpConnectionManager::mutable_http2_protocol_options() {
  
  if (http2_protocol_options_ == NULL) {
    http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
  return http2_protocol_options_;
}
::envoy::api::v2::Http2ProtocolOptions* HttpConnectionManager::release_http2_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
  
  ::envoy::api::v2::Http2ProtocolOptions* temp = http2_protocol_options_;
  http2_protocol_options_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options) {
  delete http2_protocol_options_;
  http2_protocol_options_ = http2_protocol_options;
  if (http2_protocol_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
}

// string server_name = 10;
void HttpConnectionManager::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpConnectionManager::server_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.server_name)
  return server_name_.GetNoArena();
}
void HttpConnectionManager::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
#if LANG_CXX11
void HttpConnectionManager::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
#endif
void HttpConnectionManager::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
void HttpConnectionManager::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
::std::string* HttpConnectionManager::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpConnectionManager::release_server_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpConnectionManager::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.server_name)
}

// .google.protobuf.Duration idle_timeout = 11;
bool HttpConnectionManager::has_idle_timeout() const {
  return this != internal_default_instance() && idle_timeout_ != NULL;
}
void HttpConnectionManager::clear_idle_timeout() {
  if (GetArenaNoVirtual() == NULL && idle_timeout_ != NULL) delete idle_timeout_;
  idle_timeout_ = NULL;
}
const ::google::protobuf::Duration& HttpConnectionManager::idle_timeout() const {
  const ::google::protobuf::Duration* p = idle_timeout_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* HttpConnectionManager::mutable_idle_timeout() {
  
  if (idle_timeout_ == NULL) {
    idle_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
  return idle_timeout_;
}
::google::protobuf::Duration* HttpConnectionManager::release_idle_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
  
  ::google::protobuf::Duration* temp = idle_timeout_;
  idle_timeout_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_idle_timeout(::google::protobuf::Duration* idle_timeout) {
  delete idle_timeout_;
  if (idle_timeout != NULL && idle_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_idle_timeout = new ::google::protobuf::Duration;
    new_idle_timeout->CopyFrom(*idle_timeout);
    idle_timeout = new_idle_timeout;
  }
  idle_timeout_ = idle_timeout;
  if (idle_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
}

// .google.protobuf.Duration drain_timeout = 12;
bool HttpConnectionManager::has_drain_timeout() const {
  return this != internal_default_instance() && drain_timeout_ != NULL;
}
void HttpConnectionManager::clear_drain_timeout() {
  if (GetArenaNoVirtual() == NULL && drain_timeout_ != NULL) delete drain_timeout_;
  drain_timeout_ = NULL;
}
const ::google::protobuf::Duration& HttpConnectionManager::drain_timeout() const {
  const ::google::protobuf::Duration* p = drain_timeout_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* HttpConnectionManager::mutable_drain_timeout() {
  
  if (drain_timeout_ == NULL) {
    drain_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
  return drain_timeout_;
}
::google::protobuf::Duration* HttpConnectionManager::release_drain_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
  
  ::google::protobuf::Duration* temp = drain_timeout_;
  drain_timeout_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_drain_timeout(::google::protobuf::Duration* drain_timeout) {
  delete drain_timeout_;
  if (drain_timeout != NULL && drain_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_drain_timeout = new ::google::protobuf::Duration;
    new_drain_timeout->CopyFrom(*drain_timeout);
    drain_timeout = new_drain_timeout;
  }
  drain_timeout_ = drain_timeout;
  if (drain_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
}

// repeated .envoy.api.v2.filter.AccessLog access_log = 13;
int HttpConnectionManager::access_log_size() const {
  return access_log_.size();
}
void HttpConnectionManager::clear_access_log() {
  access_log_.Clear();
}
const ::envoy::api::v2::filter::AccessLog& HttpConnectionManager::access_log(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return access_log_.Get(index);
}
::envoy::api::v2::filter::AccessLog* HttpConnectionManager::mutable_access_log(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return access_log_.Mutable(index);
}
::envoy::api::v2::filter::AccessLog* HttpConnectionManager::add_access_log() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return access_log_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLog >*
HttpConnectionManager::mutable_access_log() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return &access_log_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLog >&
HttpConnectionManager::access_log() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return access_log_;
}

// .google.protobuf.BoolValue use_remote_address = 14;
bool HttpConnectionManager::has_use_remote_address() const {
  return this != internal_default_instance() && use_remote_address_ != NULL;
}
void HttpConnectionManager::clear_use_remote_address() {
  if (GetArenaNoVirtual() == NULL && use_remote_address_ != NULL) delete use_remote_address_;
  use_remote_address_ = NULL;
}
const ::google::protobuf::BoolValue& HttpConnectionManager::use_remote_address() const {
  const ::google::protobuf::BoolValue* p = use_remote_address_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* HttpConnectionManager::mutable_use_remote_address() {
  
  if (use_remote_address_ == NULL) {
    use_remote_address_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
  return use_remote_address_;
}
::google::protobuf::BoolValue* HttpConnectionManager::release_use_remote_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
  
  ::google::protobuf::BoolValue* temp = use_remote_address_;
  use_remote_address_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_use_remote_address(::google::protobuf::BoolValue* use_remote_address) {
  delete use_remote_address_;
  if (use_remote_address != NULL && use_remote_address->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_use_remote_address = new ::google::protobuf::BoolValue;
    new_use_remote_address->CopyFrom(*use_remote_address);
    use_remote_address = new_use_remote_address;
  }
  use_remote_address_ = use_remote_address;
  if (use_remote_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
}

// .google.protobuf.BoolValue generate_request_id = 15;
bool HttpConnectionManager::has_generate_request_id() const {
  return this != internal_default_instance() && generate_request_id_ != NULL;
}
void HttpConnectionManager::clear_generate_request_id() {
  if (GetArenaNoVirtual() == NULL && generate_request_id_ != NULL) delete generate_request_id_;
  generate_request_id_ = NULL;
}
const ::google::protobuf::BoolValue& HttpConnectionManager::generate_request_id() const {
  const ::google::protobuf::BoolValue* p = generate_request_id_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* HttpConnectionManager::mutable_generate_request_id() {
  
  if (generate_request_id_ == NULL) {
    generate_request_id_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
  return generate_request_id_;
}
::google::protobuf::BoolValue* HttpConnectionManager::release_generate_request_id() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
  
  ::google::protobuf::BoolValue* temp = generate_request_id_;
  generate_request_id_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_generate_request_id(::google::protobuf::BoolValue* generate_request_id) {
  delete generate_request_id_;
  if (generate_request_id != NULL && generate_request_id->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_generate_request_id = new ::google::protobuf::BoolValue;
    new_generate_request_id->CopyFrom(*generate_request_id);
    generate_request_id = new_generate_request_id;
  }
  generate_request_id_ = generate_request_id;
  if (generate_request_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
}

// .envoy.api.v2.filter.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
void HttpConnectionManager::clear_forward_client_cert_details() {
  forward_client_cert_details_ = 0;
}
::envoy::api::v2::filter::HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::forward_client_cert_details() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.forward_client_cert_details)
  return static_cast< ::envoy::api::v2::filter::HttpConnectionManager_ForwardClientCertDetails >(forward_client_cert_details_);
}
void HttpConnectionManager::set_forward_client_cert_details(::envoy::api::v2::filter::HttpConnectionManager_ForwardClientCertDetails value) {
  
  forward_client_cert_details_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.forward_client_cert_details)
}

// .envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
bool HttpConnectionManager::has_set_current_client_cert_details() const {
  return this != internal_default_instance() && set_current_client_cert_details_ != NULL;
}
void HttpConnectionManager::clear_set_current_client_cert_details() {
  if (GetArenaNoVirtual() == NULL && set_current_client_cert_details_ != NULL) delete set_current_client_cert_details_;
  set_current_client_cert_details_ = NULL;
}
const ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails& HttpConnectionManager::set_current_client_cert_details() const {
  const ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* p = set_current_client_cert_details_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.set_current_client_cert_details)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails*>(
      &::envoy::api::v2::filter::_HttpConnectionManager_SetCurrentClientCertDetails_default_instance_);
}
::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* HttpConnectionManager::mutable_set_current_client_cert_details() {
  
  if (set_current_client_cert_details_ == NULL) {
    set_current_client_cert_details_ = new ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.set_current_client_cert_details)
  return set_current_client_cert_details_;
}
::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* HttpConnectionManager::release_set_current_client_cert_details() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.set_current_client_cert_details)
  
  ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* temp = set_current_client_cert_details_;
  set_current_client_cert_details_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_set_current_client_cert_details(::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* set_current_client_cert_details) {
  delete set_current_client_cert_details_;
  set_current_client_cert_details_ = set_current_client_cert_details;
  if (set_current_client_cert_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.set_current_client_cert_details)
}

bool HttpConnectionManager::has_route_specifier() const {
  return route_specifier_case() != ROUTE_SPECIFIER_NOT_SET;
}
void HttpConnectionManager::clear_has_route_specifier() {
  _oneof_case_[0] = ROUTE_SPECIFIER_NOT_SET;
}
HttpConnectionManager::RouteSpecifierCase HttpConnectionManager::route_specifier_case() const {
  return HttpConnectionManager::RouteSpecifierCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
