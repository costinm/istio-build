// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/http_connection_manager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/filter/http_connection_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
namespace filter {
class RdsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Rds> {
} _Rds_default_instance_;
class StatusCodeFilterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StatusCodeFilter> {
} _StatusCodeFilter_default_instance_;
class DurationFilterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DurationFilter> {
} _DurationFilter_default_instance_;
class NotHealthCheckFilterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotHealthCheckFilter> {
} _NotHealthCheckFilter_default_instance_;
class TraceableFilterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TraceableFilter> {
} _TraceableFilter_default_instance_;
class RuntimeFilterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RuntimeFilter> {
} _RuntimeFilter_default_instance_;
class AndFilterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AndFilter> {
} _AndFilter_default_instance_;
class OrFilterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OrFilter> {
} _OrFilter_default_instance_;
class AccessLogFilterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccessLogFilter> {
  public:
  const ::envoy::api::v2::filter::StatusCodeFilter* status_code_;
  const ::envoy::api::v2::filter::DurationFilter* duration_;
  const ::envoy::api::v2::filter::NotHealthCheckFilter* not_health_check_;
  const ::envoy::api::v2::filter::TraceableFilter* traceable_;
  const ::envoy::api::v2::filter::RuntimeFilter* runtime_;
  const ::envoy::api::v2::filter::AndFilter* and__;
  const ::envoy::api::v2::filter::OrFilter* or__;
} _AccessLogFilter_default_instance_;
class HeaderSelectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeaderSelection> {
} _HeaderSelection_default_instance_;
class AccessLogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccessLog> {
  public:
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr cluster_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  const ::envoy::api::v2::filter::HeaderSelection* headers_;
} _AccessLog_default_instance_;
class HttpFilterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HttpFilter> {
} _HttpFilter_default_instance_;
class HttpConnectionManager_TracingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HttpConnectionManager_Tracing> {
} _HttpConnectionManager_Tracing_default_instance_;
class HttpConnectionManagerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HttpConnectionManager> {
  public:
  const ::envoy::api::v2::filter::Rds* rds_;
  const ::envoy::api::v2::RouteConfiguration* route_config_;
  const ::envoy::api::v2::Http1ProtocolOptions* http_protocol_options_;
  const ::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options_;
} _HttpConnectionManager_default_instance_;

namespace protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rds, cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rds, router_config_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rds, refresh_delay_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusCodeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusCodeFilter, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusCodeFilter, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationFilter, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationFilter, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotHealthCheckFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceableFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeFilter, runtime_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AndFilter, filters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrFilter, filters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogFilter, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AccessLogFilter_default_instance_), status_code_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AccessLogFilter_default_instance_), duration_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AccessLogFilter_default_instance_), not_health_check_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AccessLogFilter_default_instance_), traceable_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AccessLogFilter_default_instance_), runtime_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AccessLogFilter_default_instance_), and__),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AccessLogFilter_default_instance_), or__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLogFilter, filter_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderSelection, request_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeaderSelection, response_headers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLog, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLog, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AccessLog_default_instance_), path_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AccessLog_default_instance_), cluster_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AccessLog_default_instance_), format_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AccessLog_default_instance_), headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLog, filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLog, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessLog, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpFilter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpFilter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpFilter, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager_Tracing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager_Tracing, operation_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager_Tracing, request_headers_for_tags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, codec_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, stat_prefix_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HttpConnectionManager_default_instance_), rds_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HttpConnectionManager_default_instance_), route_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, http_filters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, add_user_agent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, tracing_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HttpConnectionManager_default_instance_), http_protocol_options_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HttpConnectionManager_default_instance_), http2_protocol_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, server_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, idle_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, drain_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, access_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, use_remote_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, generate_request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, route_specifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpConnectionManager, http_codec_options_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Rds)},
  { 7, -1, sizeof(StatusCodeFilter)},
  { 13, -1, sizeof(DurationFilter)},
  { 19, -1, sizeof(NotHealthCheckFilter)},
  { 23, -1, sizeof(TraceableFilter)},
  { 27, -1, sizeof(RuntimeFilter)},
  { 32, -1, sizeof(AndFilter)},
  { 37, -1, sizeof(OrFilter)},
  { 42, -1, sizeof(AccessLogFilter)},
  { 54, -1, sizeof(HeaderSelection)},
  { 60, -1, sizeof(AccessLog)},
  { 71, -1, sizeof(HttpFilter)},
  { 78, -1, sizeof(HttpConnectionManager_Tracing)},
  { 84, -1, sizeof(HttpConnectionManager)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Rds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatusCodeFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DurationFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotHealthCheckFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TraceableFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RuntimeFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AndFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OrFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccessLogFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeaderSelection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccessLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HttpFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HttpConnectionManager_Tracing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HttpConnectionManager_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/filter/http_connection_manager.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace

void TableStruct::Shutdown() {
  _Rds_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _StatusCodeFilter_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DurationFilter_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _NotHealthCheckFilter_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _TraceableFilter_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _RuntimeFilter_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _AndFilter_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _OrFilter_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _AccessLogFilter_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _HeaderSelection_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _AccessLog_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _HttpFilter_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _HttpConnectionManager_Tracing_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _HttpConnectionManager_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2fcds_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2frds_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  _Rds_default_instance_.DefaultConstruct();
  _StatusCodeFilter_default_instance_.DefaultConstruct();
  _DurationFilter_default_instance_.DefaultConstruct();
  _NotHealthCheckFilter_default_instance_.DefaultConstruct();
  _TraceableFilter_default_instance_.DefaultConstruct();
  _RuntimeFilter_default_instance_.DefaultConstruct();
  _AndFilter_default_instance_.DefaultConstruct();
  _OrFilter_default_instance_.DefaultConstruct();
  _AccessLogFilter_default_instance_.DefaultConstruct();
  _HeaderSelection_default_instance_.DefaultConstruct();
  _AccessLog_default_instance_.DefaultConstruct();
  _HttpFilter_default_instance_.DefaultConstruct();
  _HttpConnectionManager_Tracing_default_instance_.DefaultConstruct();
  _HttpConnectionManager_default_instance_.DefaultConstruct();
  _Rds_default_instance_.get_mutable()->refresh_delay_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _StatusCodeFilter_default_instance_.get_mutable()->value_ = const_cast< ::envoy::api::v2::RuntimeUInt32*>(
      ::envoy::api::v2::RuntimeUInt32::internal_default_instance());
  _DurationFilter_default_instance_.get_mutable()->value_ = const_cast< ::envoy::api::v2::RuntimeUInt32*>(
      ::envoy::api::v2::RuntimeUInt32::internal_default_instance());
  _AccessLogFilter_default_instance_.status_code_ = const_cast< ::envoy::api::v2::filter::StatusCodeFilter*>(
      ::envoy::api::v2::filter::StatusCodeFilter::internal_default_instance());
  _AccessLogFilter_default_instance_.duration_ = const_cast< ::envoy::api::v2::filter::DurationFilter*>(
      ::envoy::api::v2::filter::DurationFilter::internal_default_instance());
  _AccessLogFilter_default_instance_.not_health_check_ = const_cast< ::envoy::api::v2::filter::NotHealthCheckFilter*>(
      ::envoy::api::v2::filter::NotHealthCheckFilter::internal_default_instance());
  _AccessLogFilter_default_instance_.traceable_ = const_cast< ::envoy::api::v2::filter::TraceableFilter*>(
      ::envoy::api::v2::filter::TraceableFilter::internal_default_instance());
  _AccessLogFilter_default_instance_.runtime_ = const_cast< ::envoy::api::v2::filter::RuntimeFilter*>(
      ::envoy::api::v2::filter::RuntimeFilter::internal_default_instance());
  _AccessLogFilter_default_instance_.and__ = const_cast< ::envoy::api::v2::filter::AndFilter*>(
      ::envoy::api::v2::filter::AndFilter::internal_default_instance());
  _AccessLogFilter_default_instance_.or__ = const_cast< ::envoy::api::v2::filter::OrFilter*>(
      ::envoy::api::v2::filter::OrFilter::internal_default_instance());
  _AccessLog_default_instance_.path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _AccessLog_default_instance_.cluster_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _AccessLog_default_instance_.format_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _AccessLog_default_instance_.headers_ = const_cast< ::envoy::api::v2::filter::HeaderSelection*>(
      ::envoy::api::v2::filter::HeaderSelection::internal_default_instance());
  _AccessLog_default_instance_.get_mutable()->filter_ = const_cast< ::envoy::api::v2::filter::AccessLogFilter*>(
      ::envoy::api::v2::filter::AccessLogFilter::internal_default_instance());
  _HttpFilter_default_instance_.get_mutable()->config_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  _HttpConnectionManager_default_instance_.rds_ = const_cast< ::envoy::api::v2::filter::Rds*>(
      ::envoy::api::v2::filter::Rds::internal_default_instance());
  _HttpConnectionManager_default_instance_.route_config_ = const_cast< ::envoy::api::v2::RouteConfiguration*>(
      ::envoy::api::v2::RouteConfiguration::internal_default_instance());
  _HttpConnectionManager_default_instance_.get_mutable()->add_user_agent_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _HttpConnectionManager_default_instance_.get_mutable()->tracing_ = const_cast< ::envoy::api::v2::filter::HttpConnectionManager_Tracing*>(
      ::envoy::api::v2::filter::HttpConnectionManager_Tracing::internal_default_instance());
  _HttpConnectionManager_default_instance_.http_protocol_options_ = const_cast< ::envoy::api::v2::Http1ProtocolOptions*>(
      ::envoy::api::v2::Http1ProtocolOptions::internal_default_instance());
  _HttpConnectionManager_default_instance_.http2_protocol_options_ = const_cast< ::envoy::api::v2::Http2ProtocolOptions*>(
      ::envoy::api::v2::Http2ProtocolOptions::internal_default_instance());
  _HttpConnectionManager_default_instance_.get_mutable()->idle_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _HttpConnectionManager_default_instance_.get_mutable()->drain_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _HttpConnectionManager_default_instance_.get_mutable()->access_log_ = const_cast< ::envoy::api::v2::filter::AccessLog*>(
      ::envoy::api::v2::filter::AccessLog::internal_default_instance());
  _HttpConnectionManager_default_instance_.get_mutable()->use_remote_address_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _HttpConnectionManager_default_instance_.get_mutable()->generate_request_id_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n(api/filter/http_connection_manager.pro"
      "to\022\023envoy.api.v2.filter\032\016api/base.proto\032"
      "\rapi/cds.proto\032\rapi/rds.proto\032\036google/pr"
      "otobuf/duration.proto\032\034google/protobuf/s"
      "truct.proto\032\036google/protobuf/wrappers.pr"
      "oto\"d\n\003Rds\022\017\n\007cluster\030\001 \001(\t\022\032\n\022router_co"
      "nfig_name\030\002 \001(\t\0220\n\rrefresh_delay\030\003 \001(\0132\031"
      ".google.protobuf.Duration\"\212\001\n\020StatusCode"
      "Filter\0224\n\002op\030\001 \001(\0162(.envoy.api.v2.filter"
      ".StatusCodeFilter.Op\022*\n\005value\030\002 \001(\0132\033.en"
      "voy.api.v2.RuntimeUInt32\"\024\n\002Op\022\006\n\002EQ\020\000\022\006"
      "\n\002GE\020\001\"\206\001\n\016DurationFilter\0222\n\002op\030\001 \001(\0162&."
      "envoy.api.v2.filter.DurationFilter.Op\022*\n"
      "\005value\030\002 \001(\0132\033.envoy.api.v2.RuntimeUInt3"
      "2\"\024\n\002Op\022\006\n\002EQ\020\000\022\006\n\002GE\020\001\"\026\n\024NotHealthChec"
      "kFilter\"\021\n\017TraceableFilter\"$\n\rRuntimeFil"
      "ter\022\023\n\013runtime_key\030\001 \001(\t\"B\n\tAndFilter\0225\n"
      "\007filters\030\001 \003(\0132$.envoy.api.v2.filter.Acc"
      "essLogFilter\"A\n\010OrFilter\0225\n\007filters\030\002 \003("
      "\0132$.envoy.api.v2.filter.AccessLogFilter\""
      "\261\003\n\017AccessLogFilter\022<\n\013status_code\030\001 \001(\013"
      "2%.envoy.api.v2.filter.StatusCodeFilterH"
      "\000\0227\n\010duration\030\002 \001(\0132#.envoy.api.v2.filte"
      "r.DurationFilterH\000\022E\n\020not_health_check\030\003"
      " \001(\0132).envoy.api.v2.filter.NotHealthChec"
      "kFilterH\000\0229\n\ttraceable\030\004 \001(\0132$.envoy.api"
      ".v2.filter.TraceableFilterH\000\0225\n\007runtime\030"
      "\005 \001(\0132\".envoy.api.v2.filter.RuntimeFilte"
      "rH\000\022-\n\003and\030\006 \001(\0132\036.envoy.api.v2.filter.A"
      "ndFilterH\000\022+\n\002or\030\007 \001(\0132\035.envoy.api.v2.fi"
      "lter.OrFilterH\000B\022\n\020filter_specifier\"D\n\017H"
      "eaderSelection\022\027\n\017request_headers\030\001 \003(\t\022"
      "\030\n\020response_headers\030\002 \003(\t\"\311\001\n\tAccessLog\022"
      "\016\n\004path\030\001 \001(\tH\000\022\021\n\007cluster\030\005 \001(\tH\000\022\020\n\006fo"
      "rmat\030\002 \001(\tH\001\0227\n\007headers\030\004 \001(\0132$.envoy.ap"
      "i.v2.filter.HeaderSelectionH\001\0224\n\006filter\030"
      "\003 \001(\0132$.envoy.api.v2.filter.AccessLogFil"
      "terB\r\n\013destinationB\t\n\007content\"\243\001\n\nHttpFi"
      "lter\0222\n\004type\030\001 \001(\0162$.envoy.api.v2.filter"
      ".HttpFilter.Type\022\014\n\004name\030\002 \001(\t\022\'\n\006config"
      "\030\003 \001(\0132\027.google.protobuf.Struct\"*\n\004Type\022"
      "\010\n\004BOTH\020\000\022\013\n\007DECODER\020\001\022\013\n\007ENCODER\020\002\"\271\010\n\025"
      "HttpConnectionManager\022H\n\ncodec_type\030\001 \001("
      "\01624.envoy.api.v2.filter.HttpConnectionMa"
      "nager.CodecType\022\023\n\013stat_prefix\030\002 \001(\t\022\'\n\003"
      "rds\030\003 \001(\0132\030.envoy.api.v2.filter.RdsH\000\0228\n"
      "\014route_config\030\004 \001(\0132 .envoy.api.v2.Route"
      "ConfigurationH\000\0225\n\014http_filters\030\005 \003(\0132\037."
      "envoy.api.v2.filter.HttpFilter\0222\n\016add_us"
      "er_agent\030\006 \001(\0132\032.google.protobuf.BoolVal"
      "ue\022C\n\007tracing\030\007 \001(\01322.envoy.api.v2.filte"
      "r.HttpConnectionManager.Tracing\022C\n\025http_"
      "protocol_options\030\010 \001(\0132\".envoy.api.v2.Ht"
      "tp1ProtocolOptionsH\001\022D\n\026http2_protocol_o"
      "ptions\030\t \001(\0132\".envoy.api.v2.Http2Protoco"
      "lOptionsH\001\022\023\n\013server_name\030\n \001(\t\022/\n\014idle_"
      "timeout\030\013 \001(\0132\031.google.protobuf.Duration"
      "\0220\n\rdrain_timeout\030\014 \001(\0132\031.google.protobu"
      "f.Duration\0222\n\naccess_log\030\r \001(\0132\036.envoy.a"
      "pi.v2.filter.AccessLog\0226\n\022use_remote_add"
      "ress\030\016 \001(\0132\032.google.protobuf.BoolValue\0227"
      "\n\023generate_request_id\030\017 \001(\0132\032.google.pro"
      "tobuf.BoolValue\032\257\001\n\007Tracing\022X\n\016operation"
      "_name\030\001 \001(\0162@.envoy.api.v2.filter.HttpCo"
      "nnectionManager.Tracing.OperationName\022 \n"
      "\030request_headers_for_tags\030\002 \003(\t\"(\n\rOpera"
      "tionName\022\013\n\007INGRESS\020\000\022\n\n\006EGRESS\020\001\"+\n\tCod"
      "ecType\022\010\n\004AUTO\020\000\022\t\n\005HTTP1\020\001\022\t\n\005HTTP2\020\002B\021"
      "\n\017route_specifierB\024\n\022http_codec_optionsb"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2767);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/filter/http_connection_manager.proto", &protobuf_RegisterTypes);
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2fcds_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2frds_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto

const ::google::protobuf::EnumDescriptor* StatusCodeFilter_Op_descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_enum_descriptors[0];
}
bool StatusCodeFilter_Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StatusCodeFilter_Op StatusCodeFilter::EQ;
const StatusCodeFilter_Op StatusCodeFilter::GE;
const StatusCodeFilter_Op StatusCodeFilter::Op_MIN;
const StatusCodeFilter_Op StatusCodeFilter::Op_MAX;
const int StatusCodeFilter::Op_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DurationFilter_Op_descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_enum_descriptors[1];
}
bool DurationFilter_Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DurationFilter_Op DurationFilter::EQ;
const DurationFilter_Op DurationFilter::GE;
const DurationFilter_Op DurationFilter::Op_MIN;
const DurationFilter_Op DurationFilter::Op_MAX;
const int DurationFilter::Op_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HttpFilter_Type_descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_enum_descriptors[2];
}
bool HttpFilter_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HttpFilter_Type HttpFilter::BOTH;
const HttpFilter_Type HttpFilter::DECODER;
const HttpFilter_Type HttpFilter::ENCODER;
const HttpFilter_Type HttpFilter::Type_MIN;
const HttpFilter_Type HttpFilter::Type_MAX;
const int HttpFilter::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HttpConnectionManager_Tracing_OperationName_descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_enum_descriptors[3];
}
bool HttpConnectionManager_Tracing_OperationName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::INGRESS;
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::EGRESS;
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::OperationName_MIN;
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::OperationName_MAX;
const int HttpConnectionManager_Tracing::OperationName_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HttpConnectionManager_CodecType_descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_enum_descriptors[4];
}
bool HttpConnectionManager_CodecType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HttpConnectionManager_CodecType HttpConnectionManager::AUTO;
const HttpConnectionManager_CodecType HttpConnectionManager::HTTP1;
const HttpConnectionManager_CodecType HttpConnectionManager::HTTP2;
const HttpConnectionManager_CodecType HttpConnectionManager::CodecType_MIN;
const HttpConnectionManager_CodecType HttpConnectionManager::CodecType_MAX;
const int HttpConnectionManager::CodecType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rds::kClusterFieldNumber;
const int Rds::kRouterConfigNameFieldNumber;
const int Rds::kRefreshDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rds::Rds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.Rds)
}
Rds::Rds(const Rds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster().size() > 0) {
    cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_);
  }
  router_config_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.router_config_name().size() > 0) {
    router_config_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.router_config_name_);
  }
  if (from.has_refresh_delay()) {
    refresh_delay_ = new ::google::protobuf::Duration(*from.refresh_delay_);
  } else {
    refresh_delay_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.Rds)
}

void Rds::SharedCtor() {
  cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  router_config_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refresh_delay_ = NULL;
  _cached_size_ = 0;
}

Rds::~Rds() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.Rds)
  SharedDtor();
}

void Rds::SharedDtor() {
  cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  router_config_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete refresh_delay_;
  }
}

void Rds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rds::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[0].descriptor;
}

const Rds& Rds::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

Rds* Rds::New(::google::protobuf::Arena* arena) const {
  Rds* n = new Rds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rds::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.Rds)
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  router_config_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && refresh_delay_ != NULL) {
    delete refresh_delay_;
  }
  refresh_delay_ = NULL;
}

bool Rds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.Rds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster().data(), this->cluster().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.Rds.cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string router_config_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_router_config_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->router_config_name().data(), this->router_config_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.Rds.router_config_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration refresh_delay = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refresh_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.Rds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.Rds)
  return false;
#undef DO_
}

void Rds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.Rds)
  // string cluster = 1;
  if (this->cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), this->cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.Rds.cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster(), output);
  }

  // string router_config_name = 2;
  if (this->router_config_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->router_config_name().data(), this->router_config_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.Rds.router_config_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->router_config_name(), output);
  }

  // .google.protobuf.Duration refresh_delay = 3;
  if (this->has_refresh_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->refresh_delay_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.Rds)
}

::google::protobuf::uint8* Rds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.Rds)
  // string cluster = 1;
  if (this->cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), this->cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.Rds.cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster(), target);
  }

  // string router_config_name = 2;
  if (this->router_config_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->router_config_name().data(), this->router_config_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.Rds.router_config_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->router_config_name(), target);
  }

  // .google.protobuf.Duration refresh_delay = 3;
  if (this->has_refresh_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->refresh_delay_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.Rds)
  return target;
}

size_t Rds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.Rds)
  size_t total_size = 0;

  // string cluster = 1;
  if (this->cluster().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster());
  }

  // string router_config_name = 2;
  if (this->router_config_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->router_config_name());
  }

  // .google.protobuf.Duration refresh_delay = 3;
  if (this->has_refresh_delay()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->refresh_delay_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.Rds)
  GOOGLE_DCHECK_NE(&from, this);
  const Rds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.Rds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.Rds)
    MergeFrom(*source);
  }
}

void Rds::MergeFrom(const Rds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.Rds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cluster().size() > 0) {

    cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_);
  }
  if (from.router_config_name().size() > 0) {

    router_config_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.router_config_name_);
  }
  if (from.has_refresh_delay()) {
    mutable_refresh_delay()->::google::protobuf::Duration::MergeFrom(from.refresh_delay());
  }
}

void Rds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.Rds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rds::CopyFrom(const Rds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.Rds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rds::IsInitialized() const {
  return true;
}

void Rds::Swap(Rds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rds::InternalSwap(Rds* other) {
  cluster_.Swap(&other->cluster_);
  router_config_name_.Swap(&other->router_config_name_);
  std::swap(refresh_delay_, other->refresh_delay_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rds::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rds

// string cluster = 1;
void Rds::clear_cluster() {
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Rds::cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.Rds.cluster)
  return cluster_.GetNoArena();
}
void Rds::set_cluster(const ::std::string& value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.Rds.cluster)
}
#if LANG_CXX11
void Rds::set_cluster(::std::string&& value) {
  
  cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.Rds.cluster)
}
#endif
void Rds::set_cluster(const char* value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.Rds.cluster)
}
void Rds::set_cluster(const char* value, size_t size) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.Rds.cluster)
}
::std::string* Rds::mutable_cluster() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.Rds.cluster)
  return cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Rds::release_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.Rds.cluster)
  
  return cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rds::set_allocated_cluster(::std::string* cluster) {
  if (cluster != NULL) {
    
  } else {
    
  }
  cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.Rds.cluster)
}

// string router_config_name = 2;
void Rds::clear_router_config_name() {
  router_config_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Rds::router_config_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.Rds.router_config_name)
  return router_config_name_.GetNoArena();
}
void Rds::set_router_config_name(const ::std::string& value) {
  
  router_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.Rds.router_config_name)
}
#if LANG_CXX11
void Rds::set_router_config_name(::std::string&& value) {
  
  router_config_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.Rds.router_config_name)
}
#endif
void Rds::set_router_config_name(const char* value) {
  
  router_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.Rds.router_config_name)
}
void Rds::set_router_config_name(const char* value, size_t size) {
  
  router_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.Rds.router_config_name)
}
::std::string* Rds::mutable_router_config_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.Rds.router_config_name)
  return router_config_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Rds::release_router_config_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.Rds.router_config_name)
  
  return router_config_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rds::set_allocated_router_config_name(::std::string* router_config_name) {
  if (router_config_name != NULL) {
    
  } else {
    
  }
  router_config_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), router_config_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.Rds.router_config_name)
}

// .google.protobuf.Duration refresh_delay = 3;
bool Rds::has_refresh_delay() const {
  return this != internal_default_instance() && refresh_delay_ != NULL;
}
void Rds::clear_refresh_delay() {
  if (GetArenaNoVirtual() == NULL && refresh_delay_ != NULL) delete refresh_delay_;
  refresh_delay_ = NULL;
}
const ::google::protobuf::Duration& Rds::refresh_delay() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.Rds.refresh_delay)
  return refresh_delay_ != NULL ? *refresh_delay_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* Rds::mutable_refresh_delay() {
  
  if (refresh_delay_ == NULL) {
    refresh_delay_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.Rds.refresh_delay)
  return refresh_delay_;
}
::google::protobuf::Duration* Rds::release_refresh_delay() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.Rds.refresh_delay)
  
  ::google::protobuf::Duration* temp = refresh_delay_;
  refresh_delay_ = NULL;
  return temp;
}
void Rds::set_allocated_refresh_delay(::google::protobuf::Duration* refresh_delay) {
  delete refresh_delay_;
  if (refresh_delay != NULL && refresh_delay->GetArena() != NULL) {
    ::google::protobuf::Duration* new_refresh_delay = new ::google::protobuf::Duration;
    new_refresh_delay->CopyFrom(*refresh_delay);
    refresh_delay = new_refresh_delay;
  }
  refresh_delay_ = refresh_delay;
  if (refresh_delay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.Rds.refresh_delay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusCodeFilter::kOpFieldNumber;
const int StatusCodeFilter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusCodeFilter::StatusCodeFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.StatusCodeFilter)
}
StatusCodeFilter::StatusCodeFilter(const StatusCodeFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::envoy::api::v2::RuntimeUInt32(*from.value_);
  } else {
    value_ = NULL;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.StatusCodeFilter)
}

void StatusCodeFilter::SharedCtor() {
  ::memset(&value_, 0, reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&value_) + sizeof(op_));
  _cached_size_ = 0;
}

StatusCodeFilter::~StatusCodeFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.StatusCodeFilter)
  SharedDtor();
}

void StatusCodeFilter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void StatusCodeFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusCodeFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[1].descriptor;
}

const StatusCodeFilter& StatusCodeFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatusCodeFilter* StatusCodeFilter::New(::google::protobuf::Arena* arena) const {
  StatusCodeFilter* n = new StatusCodeFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusCodeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.StatusCodeFilter)
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  op_ = 0;
}

bool StatusCodeFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.StatusCodeFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.StatusCodeFilter.Op op = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::envoy::api::v2::filter::StatusCodeFilter_Op >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RuntimeUInt32 value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.StatusCodeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.StatusCodeFilter)
  return false;
#undef DO_
}

void StatusCodeFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.StatusCodeFilter)
  // .envoy.api.v2.filter.StatusCodeFilter.Op op = 1;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.StatusCodeFilter)
}

::google::protobuf::uint8* StatusCodeFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.StatusCodeFilter)
  // .envoy.api.v2.filter.StatusCodeFilter.Op op = 1;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.StatusCodeFilter)
  return target;
}

size_t StatusCodeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.StatusCodeFilter)
  size_t total_size = 0;

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // .envoy.api.v2.filter.StatusCodeFilter.Op op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusCodeFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.StatusCodeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusCodeFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusCodeFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.StatusCodeFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.StatusCodeFilter)
    MergeFrom(*source);
  }
}

void StatusCodeFilter::MergeFrom(const StatusCodeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.StatusCodeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    mutable_value()->::envoy::api::v2::RuntimeUInt32::MergeFrom(from.value());
  }
  if (from.op() != 0) {
    set_op(from.op());
  }
}

void StatusCodeFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.StatusCodeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusCodeFilter::CopyFrom(const StatusCodeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.StatusCodeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusCodeFilter::IsInitialized() const {
  return true;
}

void StatusCodeFilter::Swap(StatusCodeFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusCodeFilter::InternalSwap(StatusCodeFilter* other) {
  std::swap(value_, other->value_);
  std::swap(op_, other->op_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusCodeFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusCodeFilter

// .envoy.api.v2.filter.StatusCodeFilter.Op op = 1;
void StatusCodeFilter::clear_op() {
  op_ = 0;
}
::envoy::api::v2::filter::StatusCodeFilter_Op StatusCodeFilter::op() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.StatusCodeFilter.op)
  return static_cast< ::envoy::api::v2::filter::StatusCodeFilter_Op >(op_);
}
void StatusCodeFilter::set_op(::envoy::api::v2::filter::StatusCodeFilter_Op value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.StatusCodeFilter.op)
}

// .envoy.api.v2.RuntimeUInt32 value = 2;
bool StatusCodeFilter::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void StatusCodeFilter::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::envoy::api::v2::RuntimeUInt32& StatusCodeFilter::value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.StatusCodeFilter.value)
  return value_ != NULL ? *value_
                         : *::envoy::api::v2::RuntimeUInt32::internal_default_instance();
}
::envoy::api::v2::RuntimeUInt32* StatusCodeFilter::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::envoy::api::v2::RuntimeUInt32;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.StatusCodeFilter.value)
  return value_;
}
::envoy::api::v2::RuntimeUInt32* StatusCodeFilter::release_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.StatusCodeFilter.value)
  
  ::envoy::api::v2::RuntimeUInt32* temp = value_;
  value_ = NULL;
  return temp;
}
void StatusCodeFilter::set_allocated_value(::envoy::api::v2::RuntimeUInt32* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.StatusCodeFilter.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DurationFilter::kOpFieldNumber;
const int DurationFilter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DurationFilter::DurationFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.DurationFilter)
}
DurationFilter::DurationFilter(const DurationFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::envoy::api::v2::RuntimeUInt32(*from.value_);
  } else {
    value_ = NULL;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.DurationFilter)
}

void DurationFilter::SharedCtor() {
  ::memset(&value_, 0, reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&value_) + sizeof(op_));
  _cached_size_ = 0;
}

DurationFilter::~DurationFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.DurationFilter)
  SharedDtor();
}

void DurationFilter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void DurationFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DurationFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[2].descriptor;
}

const DurationFilter& DurationFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

DurationFilter* DurationFilter::New(::google::protobuf::Arena* arena) const {
  DurationFilter* n = new DurationFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DurationFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.DurationFilter)
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  op_ = 0;
}

bool DurationFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.DurationFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.DurationFilter.Op op = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::envoy::api::v2::filter::DurationFilter_Op >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RuntimeUInt32 value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.DurationFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.DurationFilter)
  return false;
#undef DO_
}

void DurationFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.DurationFilter)
  // .envoy.api.v2.filter.DurationFilter.Op op = 1;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.DurationFilter)
}

::google::protobuf::uint8* DurationFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.DurationFilter)
  // .envoy.api.v2.filter.DurationFilter.Op op = 1;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.DurationFilter)
  return target;
}

size_t DurationFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.DurationFilter)
  size_t total_size = 0;

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // .envoy.api.v2.filter.DurationFilter.Op op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DurationFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.DurationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const DurationFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DurationFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.DurationFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.DurationFilter)
    MergeFrom(*source);
  }
}

void DurationFilter::MergeFrom(const DurationFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.DurationFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    mutable_value()->::envoy::api::v2::RuntimeUInt32::MergeFrom(from.value());
  }
  if (from.op() != 0) {
    set_op(from.op());
  }
}

void DurationFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.DurationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DurationFilter::CopyFrom(const DurationFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.DurationFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurationFilter::IsInitialized() const {
  return true;
}

void DurationFilter::Swap(DurationFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DurationFilter::InternalSwap(DurationFilter* other) {
  std::swap(value_, other->value_);
  std::swap(op_, other->op_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DurationFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DurationFilter

// .envoy.api.v2.filter.DurationFilter.Op op = 1;
void DurationFilter::clear_op() {
  op_ = 0;
}
::envoy::api::v2::filter::DurationFilter_Op DurationFilter::op() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.DurationFilter.op)
  return static_cast< ::envoy::api::v2::filter::DurationFilter_Op >(op_);
}
void DurationFilter::set_op(::envoy::api::v2::filter::DurationFilter_Op value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.DurationFilter.op)
}

// .envoy.api.v2.RuntimeUInt32 value = 2;
bool DurationFilter::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void DurationFilter::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::envoy::api::v2::RuntimeUInt32& DurationFilter::value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.DurationFilter.value)
  return value_ != NULL ? *value_
                         : *::envoy::api::v2::RuntimeUInt32::internal_default_instance();
}
::envoy::api::v2::RuntimeUInt32* DurationFilter::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::envoy::api::v2::RuntimeUInt32;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.DurationFilter.value)
  return value_;
}
::envoy::api::v2::RuntimeUInt32* DurationFilter::release_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.DurationFilter.value)
  
  ::envoy::api::v2::RuntimeUInt32* temp = value_;
  value_ = NULL;
  return temp;
}
void DurationFilter::set_allocated_value(::envoy::api::v2::RuntimeUInt32* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.DurationFilter.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotHealthCheckFilter::NotHealthCheckFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.NotHealthCheckFilter)
}
NotHealthCheckFilter::NotHealthCheckFilter(const NotHealthCheckFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.NotHealthCheckFilter)
}

void NotHealthCheckFilter::SharedCtor() {
  _cached_size_ = 0;
}

NotHealthCheckFilter::~NotHealthCheckFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.NotHealthCheckFilter)
  SharedDtor();
}

void NotHealthCheckFilter::SharedDtor() {
}

void NotHealthCheckFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotHealthCheckFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[3].descriptor;
}

const NotHealthCheckFilter& NotHealthCheckFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotHealthCheckFilter* NotHealthCheckFilter::New(::google::protobuf::Arena* arena) const {
  NotHealthCheckFilter* n = new NotHealthCheckFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotHealthCheckFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.NotHealthCheckFilter)
}

bool NotHealthCheckFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.NotHealthCheckFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.NotHealthCheckFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.NotHealthCheckFilter)
  return false;
#undef DO_
}

void NotHealthCheckFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.NotHealthCheckFilter)
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.NotHealthCheckFilter)
}

::google::protobuf::uint8* NotHealthCheckFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.NotHealthCheckFilter)
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.NotHealthCheckFilter)
  return target;
}

size_t NotHealthCheckFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.NotHealthCheckFilter)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotHealthCheckFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.NotHealthCheckFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const NotHealthCheckFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotHealthCheckFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.NotHealthCheckFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.NotHealthCheckFilter)
    MergeFrom(*source);
  }
}

void NotHealthCheckFilter::MergeFrom(const NotHealthCheckFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.NotHealthCheckFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void NotHealthCheckFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.NotHealthCheckFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotHealthCheckFilter::CopyFrom(const NotHealthCheckFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.NotHealthCheckFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotHealthCheckFilter::IsInitialized() const {
  return true;
}

void NotHealthCheckFilter::Swap(NotHealthCheckFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotHealthCheckFilter::InternalSwap(NotHealthCheckFilter* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotHealthCheckFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotHealthCheckFilter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceableFilter::TraceableFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.TraceableFilter)
}
TraceableFilter::TraceableFilter(const TraceableFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.TraceableFilter)
}

void TraceableFilter::SharedCtor() {
  _cached_size_ = 0;
}

TraceableFilter::~TraceableFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.TraceableFilter)
  SharedDtor();
}

void TraceableFilter::SharedDtor() {
}

void TraceableFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceableFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[4].descriptor;
}

const TraceableFilter& TraceableFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

TraceableFilter* TraceableFilter::New(::google::protobuf::Arena* arena) const {
  TraceableFilter* n = new TraceableFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TraceableFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.TraceableFilter)
}

bool TraceableFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.TraceableFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.TraceableFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.TraceableFilter)
  return false;
#undef DO_
}

void TraceableFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.TraceableFilter)
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.TraceableFilter)
}

::google::protobuf::uint8* TraceableFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.TraceableFilter)
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.TraceableFilter)
  return target;
}

size_t TraceableFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.TraceableFilter)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceableFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.TraceableFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceableFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceableFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.TraceableFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.TraceableFilter)
    MergeFrom(*source);
  }
}

void TraceableFilter::MergeFrom(const TraceableFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.TraceableFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void TraceableFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.TraceableFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceableFilter::CopyFrom(const TraceableFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.TraceableFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceableFilter::IsInitialized() const {
  return true;
}

void TraceableFilter::Swap(TraceableFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceableFilter::InternalSwap(TraceableFilter* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TraceableFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TraceableFilter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuntimeFilter::kRuntimeKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuntimeFilter::RuntimeFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.RuntimeFilter)
}
RuntimeFilter::RuntimeFilter(const RuntimeFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  runtime_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.runtime_key().size() > 0) {
    runtime_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.RuntimeFilter)
}

void RuntimeFilter::SharedCtor() {
  runtime_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RuntimeFilter::~RuntimeFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.RuntimeFilter)
  SharedDtor();
}

void RuntimeFilter::SharedDtor() {
  runtime_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RuntimeFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuntimeFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[5].descriptor;
}

const RuntimeFilter& RuntimeFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

RuntimeFilter* RuntimeFilter::New(::google::protobuf::Arena* arena) const {
  RuntimeFilter* n = new RuntimeFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RuntimeFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.RuntimeFilter)
  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RuntimeFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.RuntimeFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string runtime_key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_runtime_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->runtime_key().data(), this->runtime_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.RuntimeFilter.runtime_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.RuntimeFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.RuntimeFilter)
  return false;
#undef DO_
}

void RuntimeFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.RuntimeFilter)
  // string runtime_key = 1;
  if (this->runtime_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), this->runtime_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RuntimeFilter.runtime_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->runtime_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.RuntimeFilter)
}

::google::protobuf::uint8* RuntimeFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.RuntimeFilter)
  // string runtime_key = 1;
  if (this->runtime_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_key().data(), this->runtime_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RuntimeFilter.runtime_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->runtime_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.RuntimeFilter)
  return target;
}

size_t RuntimeFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.RuntimeFilter)
  size_t total_size = 0;

  // string runtime_key = 1;
  if (this->runtime_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->runtime_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuntimeFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.RuntimeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const RuntimeFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuntimeFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.RuntimeFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.RuntimeFilter)
    MergeFrom(*source);
  }
}

void RuntimeFilter::MergeFrom(const RuntimeFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.RuntimeFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.runtime_key().size() > 0) {

    runtime_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.runtime_key_);
  }
}

void RuntimeFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.RuntimeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeFilter::CopyFrom(const RuntimeFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.RuntimeFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeFilter::IsInitialized() const {
  return true;
}

void RuntimeFilter::Swap(RuntimeFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RuntimeFilter::InternalSwap(RuntimeFilter* other) {
  runtime_key_.Swap(&other->runtime_key_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RuntimeFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RuntimeFilter

// string runtime_key = 1;
void RuntimeFilter::clear_runtime_key() {
  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RuntimeFilter::runtime_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.RuntimeFilter.runtime_key)
  return runtime_key_.GetNoArena();
}
void RuntimeFilter::set_runtime_key(const ::std::string& value) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
#if LANG_CXX11
void RuntimeFilter::set_runtime_key(::std::string&& value) {
  
  runtime_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
#endif
void RuntimeFilter::set_runtime_key(const char* value) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
void RuntimeFilter::set_runtime_key(const char* value, size_t size) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
::std::string* RuntimeFilter::mutable_runtime_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.RuntimeFilter.runtime_key)
  return runtime_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RuntimeFilter::release_runtime_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.RuntimeFilter.runtime_key)
  
  return runtime_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RuntimeFilter::set_allocated_runtime_key(::std::string* runtime_key) {
  if (runtime_key != NULL) {
    
  } else {
    
  }
  runtime_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AndFilter::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AndFilter::AndFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.AndFilter)
}
AndFilter::AndFilter(const AndFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filters_(from.filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.AndFilter)
}

void AndFilter::SharedCtor() {
  _cached_size_ = 0;
}

AndFilter::~AndFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.AndFilter)
  SharedDtor();
}

void AndFilter::SharedDtor() {
}

void AndFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AndFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[6].descriptor;
}

const AndFilter& AndFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

AndFilter* AndFilter::New(::google::protobuf::Arena* arena) const {
  AndFilter* n = new AndFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AndFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.AndFilter)
  filters_.Clear();
}

bool AndFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.AndFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.AndFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.AndFilter)
  return false;
#undef DO_
}

void AndFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.AndFilter)
  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filters(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.AndFilter)
}

::google::protobuf::uint8* AndFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.AndFilter)
  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->filters(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.AndFilter)
  return target;
}

size_t AndFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.AndFilter)
  size_t total_size = 0;

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
  {
    unsigned int count = this->filters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filters(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AndFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.AndFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const AndFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AndFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.AndFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.AndFilter)
    MergeFrom(*source);
  }
}

void AndFilter::MergeFrom(const AndFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.AndFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filters_.MergeFrom(from.filters_);
}

void AndFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.AndFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AndFilter::CopyFrom(const AndFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.AndFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndFilter::IsInitialized() const {
  return true;
}

void AndFilter::Swap(AndFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AndFilter::InternalSwap(AndFilter* other) {
  filters_.UnsafeArenaSwap(&other->filters_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AndFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AndFilter

// repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
int AndFilter::filters_size() const {
  return filters_.size();
}
void AndFilter::clear_filters() {
  filters_.Clear();
}
const ::envoy::api::v2::filter::AccessLogFilter& AndFilter::filters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AndFilter.filters)
  return filters_.Get(index);
}
::envoy::api::v2::filter::AccessLogFilter* AndFilter::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AndFilter.filters)
  return filters_.Mutable(index);
}
::envoy::api::v2::filter::AccessLogFilter* AndFilter::add_filters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.AndFilter.filters)
  return filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >*
AndFilter::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.AndFilter.filters)
  return &filters_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >&
AndFilter::filters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.AndFilter.filters)
  return filters_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrFilter::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrFilter::OrFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.OrFilter)
}
OrFilter::OrFilter(const OrFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filters_(from.filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.OrFilter)
}

void OrFilter::SharedCtor() {
  _cached_size_ = 0;
}

OrFilter::~OrFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.OrFilter)
  SharedDtor();
}

void OrFilter::SharedDtor() {
}

void OrFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[7].descriptor;
}

const OrFilter& OrFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

OrFilter* OrFilter::New(::google::protobuf::Arena* arena) const {
  OrFilter* n = new OrFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.OrFilter)
  filters_.Clear();
}

bool OrFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.OrFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_filters()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.OrFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.OrFilter)
  return false;
#undef DO_
}

void OrFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.OrFilter)
  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filters(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.OrFilter)
}

::google::protobuf::uint8* OrFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.OrFilter)
  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
  for (unsigned int i = 0, n = this->filters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->filters(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.OrFilter)
  return target;
}

size_t OrFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.OrFilter)
  size_t total_size = 0;

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
  {
    unsigned int count = this->filters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filters(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.OrFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const OrFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.OrFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.OrFilter)
    MergeFrom(*source);
  }
}

void OrFilter::MergeFrom(const OrFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.OrFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filters_.MergeFrom(from.filters_);
}

void OrFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.OrFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrFilter::CopyFrom(const OrFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.OrFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrFilter::IsInitialized() const {
  return true;
}

void OrFilter::Swap(OrFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrFilter::InternalSwap(OrFilter* other) {
  filters_.UnsafeArenaSwap(&other->filters_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrFilter

// repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
int OrFilter::filters_size() const {
  return filters_.size();
}
void OrFilter::clear_filters() {
  filters_.Clear();
}
const ::envoy::api::v2::filter::AccessLogFilter& OrFilter::filters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.OrFilter.filters)
  return filters_.Get(index);
}
::envoy::api::v2::filter::AccessLogFilter* OrFilter::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.OrFilter.filters)
  return filters_.Mutable(index);
}
::envoy::api::v2::filter::AccessLogFilter* OrFilter::add_filters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.OrFilter.filters)
  return filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >*
OrFilter::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.OrFilter.filters)
  return &filters_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >&
OrFilter::filters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.OrFilter.filters)
  return filters_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLogFilter::kStatusCodeFieldNumber;
const int AccessLogFilter::kDurationFieldNumber;
const int AccessLogFilter::kNotHealthCheckFieldNumber;
const int AccessLogFilter::kTraceableFieldNumber;
const int AccessLogFilter::kRuntimeFieldNumber;
const int AccessLogFilter::kAndFieldNumber;
const int AccessLogFilter::kOrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLogFilter::AccessLogFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.AccessLogFilter)
}
AccessLogFilter::AccessLogFilter(const AccessLogFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_filter_specifier();
  switch (from.filter_specifier_case()) {
    case kStatusCode: {
      mutable_status_code()->::envoy::api::v2::filter::StatusCodeFilter::MergeFrom(from.status_code());
      break;
    }
    case kDuration: {
      mutable_duration()->::envoy::api::v2::filter::DurationFilter::MergeFrom(from.duration());
      break;
    }
    case kNotHealthCheck: {
      mutable_not_health_check()->::envoy::api::v2::filter::NotHealthCheckFilter::MergeFrom(from.not_health_check());
      break;
    }
    case kTraceable: {
      mutable_traceable()->::envoy::api::v2::filter::TraceableFilter::MergeFrom(from.traceable());
      break;
    }
    case kRuntime: {
      mutable_runtime()->::envoy::api::v2::filter::RuntimeFilter::MergeFrom(from.runtime());
      break;
    }
    case kAnd: {
      mutable_and_()->::envoy::api::v2::filter::AndFilter::MergeFrom(from.and_());
      break;
    }
    case kOr: {
      mutable_or_()->::envoy::api::v2::filter::OrFilter::MergeFrom(from.or_());
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.AccessLogFilter)
}

void AccessLogFilter::SharedCtor() {
  clear_has_filter_specifier();
  _cached_size_ = 0;
}

AccessLogFilter::~AccessLogFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.AccessLogFilter)
  SharedDtor();
}

void AccessLogFilter::SharedDtor() {
  if (has_filter_specifier()) {
    clear_filter_specifier();
  }
}

void AccessLogFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessLogFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[8].descriptor;
}

const AccessLogFilter& AccessLogFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccessLogFilter* AccessLogFilter::New(::google::protobuf::Arena* arena) const {
  AccessLogFilter* n = new AccessLogFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessLogFilter::clear_filter_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.filter.AccessLogFilter)
  switch (filter_specifier_case()) {
    case kStatusCode: {
      delete filter_specifier_.status_code_;
      break;
    }
    case kDuration: {
      delete filter_specifier_.duration_;
      break;
    }
    case kNotHealthCheck: {
      delete filter_specifier_.not_health_check_;
      break;
    }
    case kTraceable: {
      delete filter_specifier_.traceable_;
      break;
    }
    case kRuntime: {
      delete filter_specifier_.runtime_;
      break;
    }
    case kAnd: {
      delete filter_specifier_.and__;
      break;
    }
    case kOr: {
      delete filter_specifier_.or__;
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILTER_SPECIFIER_NOT_SET;
}


void AccessLogFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.AccessLogFilter)
  clear_filter_specifier();
}

bool AccessLogFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.AccessLogFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.StatusCodeFilter status_code = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.DurationFilter duration = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_health_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.TraceableFilter traceable = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traceable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.RuntimeFilter runtime = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_runtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.AndFilter and = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_and_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.OrFilter or = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_or_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.AccessLogFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.AccessLogFilter)
  return false;
#undef DO_
}

void AccessLogFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.AccessLogFilter)
  // .envoy.api.v2.filter.StatusCodeFilter status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *filter_specifier_.status_code_, output);
  }

  // .envoy.api.v2.filter.DurationFilter duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *filter_specifier_.duration_, output);
  }

  // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check = 3;
  if (has_not_health_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *filter_specifier_.not_health_check_, output);
  }

  // .envoy.api.v2.filter.TraceableFilter traceable = 4;
  if (has_traceable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *filter_specifier_.traceable_, output);
  }

  // .envoy.api.v2.filter.RuntimeFilter runtime = 5;
  if (has_runtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *filter_specifier_.runtime_, output);
  }

  // .envoy.api.v2.filter.AndFilter and = 6;
  if (has_and_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *filter_specifier_.and__, output);
  }

  // .envoy.api.v2.filter.OrFilter or = 7;
  if (has_or_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *filter_specifier_.or__, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.AccessLogFilter)
}

::google::protobuf::uint8* AccessLogFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.AccessLogFilter)
  // .envoy.api.v2.filter.StatusCodeFilter status_code = 1;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *filter_specifier_.status_code_, false, target);
  }

  // .envoy.api.v2.filter.DurationFilter duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *filter_specifier_.duration_, false, target);
  }

  // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check = 3;
  if (has_not_health_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *filter_specifier_.not_health_check_, false, target);
  }

  // .envoy.api.v2.filter.TraceableFilter traceable = 4;
  if (has_traceable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *filter_specifier_.traceable_, false, target);
  }

  // .envoy.api.v2.filter.RuntimeFilter runtime = 5;
  if (has_runtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *filter_specifier_.runtime_, false, target);
  }

  // .envoy.api.v2.filter.AndFilter and = 6;
  if (has_and_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *filter_specifier_.and__, false, target);
  }

  // .envoy.api.v2.filter.OrFilter or = 7;
  if (has_or_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *filter_specifier_.or__, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.AccessLogFilter)
  return target;
}

size_t AccessLogFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.AccessLogFilter)
  size_t total_size = 0;

  switch (filter_specifier_case()) {
    // .envoy.api.v2.filter.StatusCodeFilter status_code = 1;
    case kStatusCode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.status_code_);
      break;
    }
    // .envoy.api.v2.filter.DurationFilter duration = 2;
    case kDuration: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.duration_);
      break;
    }
    // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check = 3;
    case kNotHealthCheck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.not_health_check_);
      break;
    }
    // .envoy.api.v2.filter.TraceableFilter traceable = 4;
    case kTraceable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.traceable_);
      break;
    }
    // .envoy.api.v2.filter.RuntimeFilter runtime = 5;
    case kRuntime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.runtime_);
      break;
    }
    // .envoy.api.v2.filter.AndFilter and = 6;
    case kAnd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.and__);
      break;
    }
    // .envoy.api.v2.filter.OrFilter or = 7;
    case kOr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *filter_specifier_.or__);
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessLogFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.AccessLogFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLogFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLogFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.AccessLogFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.AccessLogFilter)
    MergeFrom(*source);
  }
}

void AccessLogFilter::MergeFrom(const AccessLogFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.AccessLogFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.filter_specifier_case()) {
    case kStatusCode: {
      mutable_status_code()->::envoy::api::v2::filter::StatusCodeFilter::MergeFrom(from.status_code());
      break;
    }
    case kDuration: {
      mutable_duration()->::envoy::api::v2::filter::DurationFilter::MergeFrom(from.duration());
      break;
    }
    case kNotHealthCheck: {
      mutable_not_health_check()->::envoy::api::v2::filter::NotHealthCheckFilter::MergeFrom(from.not_health_check());
      break;
    }
    case kTraceable: {
      mutable_traceable()->::envoy::api::v2::filter::TraceableFilter::MergeFrom(from.traceable());
      break;
    }
    case kRuntime: {
      mutable_runtime()->::envoy::api::v2::filter::RuntimeFilter::MergeFrom(from.runtime());
      break;
    }
    case kAnd: {
      mutable_and_()->::envoy::api::v2::filter::AndFilter::MergeFrom(from.and_());
      break;
    }
    case kOr: {
      mutable_or_()->::envoy::api::v2::filter::OrFilter::MergeFrom(from.or_());
      break;
    }
    case FILTER_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void AccessLogFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.AccessLogFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLogFilter::CopyFrom(const AccessLogFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.AccessLogFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLogFilter::IsInitialized() const {
  return true;
}

void AccessLogFilter::Swap(AccessLogFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLogFilter::InternalSwap(AccessLogFilter* other) {
  std::swap(filter_specifier_, other->filter_specifier_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessLogFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessLogFilter

// .envoy.api.v2.filter.StatusCodeFilter status_code = 1;
bool AccessLogFilter::has_status_code() const {
  return filter_specifier_case() == kStatusCode;
}
void AccessLogFilter::set_has_status_code() {
  _oneof_case_[0] = kStatusCode;
}
void AccessLogFilter::clear_status_code() {
  if (has_status_code()) {
    delete filter_specifier_.status_code_;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::StatusCodeFilter& AccessLogFilter::status_code() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.status_code)
  return has_status_code()
      ? *filter_specifier_.status_code_
      : ::envoy::api::v2::filter::StatusCodeFilter::default_instance();
}
::envoy::api::v2::filter::StatusCodeFilter* AccessLogFilter::mutable_status_code() {
  if (!has_status_code()) {
    clear_filter_specifier();
    set_has_status_code();
    filter_specifier_.status_code_ = new ::envoy::api::v2::filter::StatusCodeFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.status_code)
  return filter_specifier_.status_code_;
}
::envoy::api::v2::filter::StatusCodeFilter* AccessLogFilter::release_status_code() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.status_code)
  if (has_status_code()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::StatusCodeFilter* temp = filter_specifier_.status_code_;
    filter_specifier_.status_code_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_status_code(::envoy::api::v2::filter::StatusCodeFilter* status_code) {
  clear_filter_specifier();
  if (status_code) {
    set_has_status_code();
    filter_specifier_.status_code_ = status_code;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.status_code)
}

// .envoy.api.v2.filter.DurationFilter duration = 2;
bool AccessLogFilter::has_duration() const {
  return filter_specifier_case() == kDuration;
}
void AccessLogFilter::set_has_duration() {
  _oneof_case_[0] = kDuration;
}
void AccessLogFilter::clear_duration() {
  if (has_duration()) {
    delete filter_specifier_.duration_;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::DurationFilter& AccessLogFilter::duration() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.duration)
  return has_duration()
      ? *filter_specifier_.duration_
      : ::envoy::api::v2::filter::DurationFilter::default_instance();
}
::envoy::api::v2::filter::DurationFilter* AccessLogFilter::mutable_duration() {
  if (!has_duration()) {
    clear_filter_specifier();
    set_has_duration();
    filter_specifier_.duration_ = new ::envoy::api::v2::filter::DurationFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.duration)
  return filter_specifier_.duration_;
}
::envoy::api::v2::filter::DurationFilter* AccessLogFilter::release_duration() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.duration)
  if (has_duration()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::DurationFilter* temp = filter_specifier_.duration_;
    filter_specifier_.duration_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_duration(::envoy::api::v2::filter::DurationFilter* duration) {
  clear_filter_specifier();
  if (duration) {
    set_has_duration();
    filter_specifier_.duration_ = duration;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.duration)
}

// .envoy.api.v2.filter.NotHealthCheckFilter not_health_check = 3;
bool AccessLogFilter::has_not_health_check() const {
  return filter_specifier_case() == kNotHealthCheck;
}
void AccessLogFilter::set_has_not_health_check() {
  _oneof_case_[0] = kNotHealthCheck;
}
void AccessLogFilter::clear_not_health_check() {
  if (has_not_health_check()) {
    delete filter_specifier_.not_health_check_;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::NotHealthCheckFilter& AccessLogFilter::not_health_check() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.not_health_check)
  return has_not_health_check()
      ? *filter_specifier_.not_health_check_
      : ::envoy::api::v2::filter::NotHealthCheckFilter::default_instance();
}
::envoy::api::v2::filter::NotHealthCheckFilter* AccessLogFilter::mutable_not_health_check() {
  if (!has_not_health_check()) {
    clear_filter_specifier();
    set_has_not_health_check();
    filter_specifier_.not_health_check_ = new ::envoy::api::v2::filter::NotHealthCheckFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.not_health_check)
  return filter_specifier_.not_health_check_;
}
::envoy::api::v2::filter::NotHealthCheckFilter* AccessLogFilter::release_not_health_check() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.not_health_check)
  if (has_not_health_check()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::NotHealthCheckFilter* temp = filter_specifier_.not_health_check_;
    filter_specifier_.not_health_check_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_not_health_check(::envoy::api::v2::filter::NotHealthCheckFilter* not_health_check) {
  clear_filter_specifier();
  if (not_health_check) {
    set_has_not_health_check();
    filter_specifier_.not_health_check_ = not_health_check;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.not_health_check)
}

// .envoy.api.v2.filter.TraceableFilter traceable = 4;
bool AccessLogFilter::has_traceable() const {
  return filter_specifier_case() == kTraceable;
}
void AccessLogFilter::set_has_traceable() {
  _oneof_case_[0] = kTraceable;
}
void AccessLogFilter::clear_traceable() {
  if (has_traceable()) {
    delete filter_specifier_.traceable_;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::TraceableFilter& AccessLogFilter::traceable() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.traceable)
  return has_traceable()
      ? *filter_specifier_.traceable_
      : ::envoy::api::v2::filter::TraceableFilter::default_instance();
}
::envoy::api::v2::filter::TraceableFilter* AccessLogFilter::mutable_traceable() {
  if (!has_traceable()) {
    clear_filter_specifier();
    set_has_traceable();
    filter_specifier_.traceable_ = new ::envoy::api::v2::filter::TraceableFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.traceable)
  return filter_specifier_.traceable_;
}
::envoy::api::v2::filter::TraceableFilter* AccessLogFilter::release_traceable() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.traceable)
  if (has_traceable()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::TraceableFilter* temp = filter_specifier_.traceable_;
    filter_specifier_.traceable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_traceable(::envoy::api::v2::filter::TraceableFilter* traceable) {
  clear_filter_specifier();
  if (traceable) {
    set_has_traceable();
    filter_specifier_.traceable_ = traceable;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.traceable)
}

// .envoy.api.v2.filter.RuntimeFilter runtime = 5;
bool AccessLogFilter::has_runtime() const {
  return filter_specifier_case() == kRuntime;
}
void AccessLogFilter::set_has_runtime() {
  _oneof_case_[0] = kRuntime;
}
void AccessLogFilter::clear_runtime() {
  if (has_runtime()) {
    delete filter_specifier_.runtime_;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::RuntimeFilter& AccessLogFilter::runtime() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.runtime)
  return has_runtime()
      ? *filter_specifier_.runtime_
      : ::envoy::api::v2::filter::RuntimeFilter::default_instance();
}
::envoy::api::v2::filter::RuntimeFilter* AccessLogFilter::mutable_runtime() {
  if (!has_runtime()) {
    clear_filter_specifier();
    set_has_runtime();
    filter_specifier_.runtime_ = new ::envoy::api::v2::filter::RuntimeFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.runtime)
  return filter_specifier_.runtime_;
}
::envoy::api::v2::filter::RuntimeFilter* AccessLogFilter::release_runtime() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.runtime)
  if (has_runtime()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::RuntimeFilter* temp = filter_specifier_.runtime_;
    filter_specifier_.runtime_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_runtime(::envoy::api::v2::filter::RuntimeFilter* runtime) {
  clear_filter_specifier();
  if (runtime) {
    set_has_runtime();
    filter_specifier_.runtime_ = runtime;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.runtime)
}

// .envoy.api.v2.filter.AndFilter and = 6;
bool AccessLogFilter::has_and_() const {
  return filter_specifier_case() == kAnd;
}
void AccessLogFilter::set_has_and_() {
  _oneof_case_[0] = kAnd;
}
void AccessLogFilter::clear_and_() {
  if (has_and_()) {
    delete filter_specifier_.and__;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::AndFilter& AccessLogFilter::and_() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.and)
  return has_and_()
      ? *filter_specifier_.and__
      : ::envoy::api::v2::filter::AndFilter::default_instance();
}
::envoy::api::v2::filter::AndFilter* AccessLogFilter::mutable_and_() {
  if (!has_and_()) {
    clear_filter_specifier();
    set_has_and_();
    filter_specifier_.and__ = new ::envoy::api::v2::filter::AndFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.and)
  return filter_specifier_.and__;
}
::envoy::api::v2::filter::AndFilter* AccessLogFilter::release_and_() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.and)
  if (has_and_()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::AndFilter* temp = filter_specifier_.and__;
    filter_specifier_.and__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_and_(::envoy::api::v2::filter::AndFilter* and_) {
  clear_filter_specifier();
  if (and_) {
    set_has_and_();
    filter_specifier_.and__ = and_;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.and)
}

// .envoy.api.v2.filter.OrFilter or = 7;
bool AccessLogFilter::has_or_() const {
  return filter_specifier_case() == kOr;
}
void AccessLogFilter::set_has_or_() {
  _oneof_case_[0] = kOr;
}
void AccessLogFilter::clear_or_() {
  if (has_or_()) {
    delete filter_specifier_.or__;
    clear_has_filter_specifier();
  }
}
 const ::envoy::api::v2::filter::OrFilter& AccessLogFilter::or_() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.or)
  return has_or_()
      ? *filter_specifier_.or__
      : ::envoy::api::v2::filter::OrFilter::default_instance();
}
::envoy::api::v2::filter::OrFilter* AccessLogFilter::mutable_or_() {
  if (!has_or_()) {
    clear_filter_specifier();
    set_has_or_();
    filter_specifier_.or__ = new ::envoy::api::v2::filter::OrFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.or)
  return filter_specifier_.or__;
}
::envoy::api::v2::filter::OrFilter* AccessLogFilter::release_or_() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.or)
  if (has_or_()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::OrFilter* temp = filter_specifier_.or__;
    filter_specifier_.or__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLogFilter::set_allocated_or_(::envoy::api::v2::filter::OrFilter* or_) {
  clear_filter_specifier();
  if (or_) {
    set_has_or_();
    filter_specifier_.or__ = or_;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.or)
}

bool AccessLogFilter::has_filter_specifier() const {
  return filter_specifier_case() != FILTER_SPECIFIER_NOT_SET;
}
void AccessLogFilter::clear_has_filter_specifier() {
  _oneof_case_[0] = FILTER_SPECIFIER_NOT_SET;
}
AccessLogFilter::FilterSpecifierCase AccessLogFilter::filter_specifier_case() const {
  return AccessLogFilter::FilterSpecifierCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeaderSelection::kRequestHeadersFieldNumber;
const int HeaderSelection::kResponseHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeaderSelection::HeaderSelection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.HeaderSelection)
}
HeaderSelection::HeaderSelection(const HeaderSelection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      request_headers_(from.request_headers_),
      response_headers_(from.response_headers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.HeaderSelection)
}

void HeaderSelection::SharedCtor() {
  _cached_size_ = 0;
}

HeaderSelection::~HeaderSelection() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.HeaderSelection)
  SharedDtor();
}

void HeaderSelection::SharedDtor() {
}

void HeaderSelection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderSelection::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[9].descriptor;
}

const HeaderSelection& HeaderSelection::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeaderSelection* HeaderSelection::New(::google::protobuf::Arena* arena) const {
  HeaderSelection* n = new HeaderSelection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeaderSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.HeaderSelection)
  request_headers_.Clear();
  response_headers_.Clear();
}

bool HeaderSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.HeaderSelection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string request_headers = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_request_headers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_headers(this->request_headers_size() - 1).data(),
            this->request_headers(this->request_headers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.HeaderSelection.request_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string response_headers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_response_headers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response_headers(this->response_headers_size() - 1).data(),
            this->response_headers(this->response_headers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.HeaderSelection.response_headers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.HeaderSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.HeaderSelection)
  return false;
#undef DO_
}

void HeaderSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.HeaderSelection)
  // repeated string request_headers = 1;
  for (int i = 0; i < this->request_headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_headers(i).data(), this->request_headers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HeaderSelection.request_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_headers(i), output);
  }

  // repeated string response_headers = 2;
  for (int i = 0; i < this->response_headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_headers(i).data(), this->response_headers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HeaderSelection.response_headers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->response_headers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.HeaderSelection)
}

::google::protobuf::uint8* HeaderSelection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.HeaderSelection)
  // repeated string request_headers = 1;
  for (int i = 0; i < this->request_headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_headers(i).data(), this->request_headers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HeaderSelection.request_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->request_headers(i), target);
  }

  // repeated string response_headers = 2;
  for (int i = 0; i < this->response_headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_headers(i).data(), this->response_headers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HeaderSelection.response_headers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->response_headers(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.HeaderSelection)
  return target;
}

size_t HeaderSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.HeaderSelection)
  size_t total_size = 0;

  // repeated string request_headers = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->request_headers_size());
  for (int i = 0; i < this->request_headers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->request_headers(i));
  }

  // repeated string response_headers = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->response_headers_size());
  for (int i = 0; i < this->response_headers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->response_headers(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderSelection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.HeaderSelection)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderSelection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeaderSelection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.HeaderSelection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.HeaderSelection)
    MergeFrom(*source);
  }
}

void HeaderSelection::MergeFrom(const HeaderSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.HeaderSelection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_headers_.MergeFrom(from.request_headers_);
  response_headers_.MergeFrom(from.response_headers_);
}

void HeaderSelection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.HeaderSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderSelection::CopyFrom(const HeaderSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.HeaderSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderSelection::IsInitialized() const {
  return true;
}

void HeaderSelection::Swap(HeaderSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeaderSelection::InternalSwap(HeaderSelection* other) {
  request_headers_.UnsafeArenaSwap(&other->request_headers_);
  response_headers_.UnsafeArenaSwap(&other->response_headers_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeaderSelection::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeaderSelection

// repeated string request_headers = 1;
int HeaderSelection::request_headers_size() const {
  return request_headers_.size();
}
void HeaderSelection::clear_request_headers() {
  request_headers_.Clear();
}
const ::std::string& HeaderSelection::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HeaderSelection.request_headers)
  return request_headers_.Get(index);
}
::std::string* HeaderSelection::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HeaderSelection.request_headers)
  return request_headers_.Mutable(index);
}
void HeaderSelection::set_request_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HeaderSelection.request_headers)
  request_headers_.Mutable(index)->assign(value);
}
void HeaderSelection::set_request_headers(int index, const char* value) {
  request_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HeaderSelection.request_headers)
}
void HeaderSelection::set_request_headers(int index, const char* value, size_t size) {
  request_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HeaderSelection.request_headers)
}
::std::string* HeaderSelection::add_request_headers() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.filter.HeaderSelection.request_headers)
  return request_headers_.Add();
}
void HeaderSelection::add_request_headers(const ::std::string& value) {
  request_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HeaderSelection.request_headers)
}
void HeaderSelection::add_request_headers(const char* value) {
  request_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.filter.HeaderSelection.request_headers)
}
void HeaderSelection::add_request_headers(const char* value, size_t size) {
  request_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.filter.HeaderSelection.request_headers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeaderSelection::request_headers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HeaderSelection.request_headers)
  return request_headers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
HeaderSelection::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HeaderSelection.request_headers)
  return &request_headers_;
}

// repeated string response_headers = 2;
int HeaderSelection::response_headers_size() const {
  return response_headers_.size();
}
void HeaderSelection::clear_response_headers() {
  response_headers_.Clear();
}
const ::std::string& HeaderSelection::response_headers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HeaderSelection.response_headers)
  return response_headers_.Get(index);
}
::std::string* HeaderSelection::mutable_response_headers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HeaderSelection.response_headers)
  return response_headers_.Mutable(index);
}
void HeaderSelection::set_response_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HeaderSelection.response_headers)
  response_headers_.Mutable(index)->assign(value);
}
void HeaderSelection::set_response_headers(int index, const char* value) {
  response_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HeaderSelection.response_headers)
}
void HeaderSelection::set_response_headers(int index, const char* value, size_t size) {
  response_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HeaderSelection.response_headers)
}
::std::string* HeaderSelection::add_response_headers() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.filter.HeaderSelection.response_headers)
  return response_headers_.Add();
}
void HeaderSelection::add_response_headers(const ::std::string& value) {
  response_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HeaderSelection.response_headers)
}
void HeaderSelection::add_response_headers(const char* value) {
  response_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.filter.HeaderSelection.response_headers)
}
void HeaderSelection::add_response_headers(const char* value, size_t size) {
  response_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.filter.HeaderSelection.response_headers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeaderSelection::response_headers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HeaderSelection.response_headers)
  return response_headers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
HeaderSelection::mutable_response_headers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HeaderSelection.response_headers)
  return &response_headers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLog::kPathFieldNumber;
const int AccessLog::kClusterFieldNumber;
const int AccessLog::kFormatFieldNumber;
const int AccessLog::kHeadersFieldNumber;
const int AccessLog::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLog::AccessLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.AccessLog)
}
AccessLog::AccessLog(const AccessLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filter()) {
    filter_ = new ::envoy::api::v2::filter::AccessLogFilter(*from.filter_);
  } else {
    filter_ = NULL;
  }
  clear_has_destination();
  switch (from.destination_case()) {
    case kPath: {
      set_path(from.path());
      break;
    }
    case kCluster: {
      set_cluster(from.cluster());
      break;
    }
    case DESTINATION_NOT_SET: {
      break;
    }
  }
  clear_has_content();
  switch (from.content_case()) {
    case kFormat: {
      set_format(from.format());
      break;
    }
    case kHeaders: {
      mutable_headers()->::envoy::api::v2::filter::HeaderSelection::MergeFrom(from.headers());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.AccessLog)
}

void AccessLog::SharedCtor() {
  filter_ = NULL;
  clear_has_destination();
  clear_has_content();
  _cached_size_ = 0;
}

AccessLog::~AccessLog() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.AccessLog)
  SharedDtor();
}

void AccessLog::SharedDtor() {
  if (this != internal_default_instance()) {
    delete filter_;
  }
  if (has_destination()) {
    clear_destination();
  }
  if (has_content()) {
    clear_content();
  }
}

void AccessLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessLog::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[10].descriptor;
}

const AccessLog& AccessLog::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccessLog* AccessLog::New(::google::protobuf::Arena* arena) const {
  AccessLog* n = new AccessLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessLog::clear_destination() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.filter.AccessLog)
  switch (destination_case()) {
    case kPath: {
      destination_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCluster: {
      destination_.cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case DESTINATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DESTINATION_NOT_SET;
}

void AccessLog::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.filter.AccessLog)
  switch (content_case()) {
    case kFormat: {
      content_.format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kHeaders: {
      delete content_.headers_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = CONTENT_NOT_SET;
}


void AccessLog::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.AccessLog)
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) {
    delete filter_;
  }
  filter_ = NULL;
  clear_destination();
  clear_content();
}

bool AccessLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.AccessLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.AccessLog.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string format = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.AccessLog.format"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.AccessLogFilter filter = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.HeaderSelection headers = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster().data(), this->cluster().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.AccessLog.cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.AccessLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.AccessLog)
  return false;
#undef DO_
}

void AccessLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.AccessLog)
  // string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.AccessLog.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // string format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.AccessLog.format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->format(), output);
  }

  // .envoy.api.v2.filter.AccessLogFilter filter = 3;
  if (this->has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filter_, output);
  }

  // .envoy.api.v2.filter.HeaderSelection headers = 4;
  if (has_headers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *content_.headers_, output);
  }

  // string cluster = 5;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), this->cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.AccessLog.cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cluster(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.AccessLog)
}

::google::protobuf::uint8* AccessLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.AccessLog)
  // string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.AccessLog.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // string format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.AccessLog.format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->format(), target);
  }

  // .envoy.api.v2.filter.AccessLogFilter filter = 3;
  if (this->has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->filter_, false, target);
  }

  // .envoy.api.v2.filter.HeaderSelection headers = 4;
  if (has_headers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *content_.headers_, false, target);
  }

  // string cluster = 5;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), this->cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.AccessLog.cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cluster(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.AccessLog)
  return target;
}

size_t AccessLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.AccessLog)
  size_t total_size = 0;

  // .envoy.api.v2.filter.AccessLogFilter filter = 3;
  if (this->has_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->filter_);
  }

  switch (destination_case()) {
    // string path = 1;
    case kPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
      break;
    }
    // string cluster = 5;
    case kCluster: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster());
      break;
    }
    case DESTINATION_NOT_SET: {
      break;
    }
  }
  switch (content_case()) {
    // string format = 2;
    case kFormat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
      break;
    }
    // .envoy.api.v2.filter.HeaderSelection headers = 4;
    case kHeaders: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.headers_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.AccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.AccessLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.AccessLog)
    MergeFrom(*source);
  }
}

void AccessLog::MergeFrom(const AccessLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.AccessLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filter()) {
    mutable_filter()->::envoy::api::v2::filter::AccessLogFilter::MergeFrom(from.filter());
  }
  switch (from.destination_case()) {
    case kPath: {
      set_path(from.path());
      break;
    }
    case kCluster: {
      set_cluster(from.cluster());
      break;
    }
    case DESTINATION_NOT_SET: {
      break;
    }
  }
  switch (from.content_case()) {
    case kFormat: {
      set_format(from.format());
      break;
    }
    case kHeaders: {
      mutable_headers()->::envoy::api::v2::filter::HeaderSelection::MergeFrom(from.headers());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void AccessLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.AccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLog::CopyFrom(const AccessLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.AccessLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLog::IsInitialized() const {
  return true;
}

void AccessLog::Swap(AccessLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLog::InternalSwap(AccessLog* other) {
  std::swap(filter_, other->filter_);
  std::swap(destination_, other->destination_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(content_, other->content_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessLog::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessLog

// string path = 1;
bool AccessLog::has_path() const {
  return destination_case() == kPath;
}
void AccessLog::set_has_path() {
  _oneof_case_[0] = kPath;
}
void AccessLog::clear_path() {
  if (has_path()) {
    destination_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_destination();
  }
}
const ::std::string& AccessLog::path() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.path)
  if (has_path()) {
    return destination_.path_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AccessLog::set_path(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.path)
  if (!has_path()) {
    clear_destination();
    set_has_path();
    destination_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.path)
}
#if LANG_CXX11
void AccessLog::set_path(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.path)
  if (!has_path()) {
    clear_destination();
    set_has_path();
    destination_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.AccessLog.path)
}
#endif
void AccessLog::set_path(const char* value) {
  if (!has_path()) {
    clear_destination();
    set_has_path();
    destination_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.AccessLog.path)
}
void AccessLog::set_path(const char* value, size_t size) {
  if (!has_path()) {
    clear_destination();
    set_has_path();
    destination_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.AccessLog.path)
}
::std::string* AccessLog::mutable_path() {
  if (!has_path()) {
    clear_destination();
    set_has_path();
    destination_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.path)
  return destination_.path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccessLog::release_path() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.path)
  if (has_path()) {
    clear_has_destination();
    return destination_.path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AccessLog::set_allocated_path(::std::string* path) {
  if (!has_path()) {
    destination_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_destination();
  if (path != NULL) {
    set_has_path();
    destination_.path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        path);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.path)
}

// string cluster = 5;
bool AccessLog::has_cluster() const {
  return destination_case() == kCluster;
}
void AccessLog::set_has_cluster() {
  _oneof_case_[0] = kCluster;
}
void AccessLog::clear_cluster() {
  if (has_cluster()) {
    destination_.cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_destination();
  }
}
const ::std::string& AccessLog::cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.cluster)
  if (has_cluster()) {
    return destination_.cluster_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AccessLog::set_cluster(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.cluster)
  if (!has_cluster()) {
    clear_destination();
    set_has_cluster();
    destination_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.cluster)
}
#if LANG_CXX11
void AccessLog::set_cluster(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.cluster)
  if (!has_cluster()) {
    clear_destination();
    set_has_cluster();
    destination_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.AccessLog.cluster)
}
#endif
void AccessLog::set_cluster(const char* value) {
  if (!has_cluster()) {
    clear_destination();
    set_has_cluster();
    destination_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.AccessLog.cluster)
}
void AccessLog::set_cluster(const char* value, size_t size) {
  if (!has_cluster()) {
    clear_destination();
    set_has_cluster();
    destination_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.AccessLog.cluster)
}
::std::string* AccessLog::mutable_cluster() {
  if (!has_cluster()) {
    clear_destination();
    set_has_cluster();
    destination_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.cluster)
  return destination_.cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccessLog::release_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.cluster)
  if (has_cluster()) {
    clear_has_destination();
    return destination_.cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AccessLog::set_allocated_cluster(::std::string* cluster) {
  if (!has_cluster()) {
    destination_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_destination();
  if (cluster != NULL) {
    set_has_cluster();
    destination_.cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        cluster);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.cluster)
}

// string format = 2;
bool AccessLog::has_format() const {
  return content_case() == kFormat;
}
void AccessLog::set_has_format() {
  _oneof_case_[1] = kFormat;
}
void AccessLog::clear_format() {
  if (has_format()) {
    content_.format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
const ::std::string& AccessLog::format() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.format)
  if (has_format()) {
    return content_.format_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AccessLog::set_format(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.format)
  if (!has_format()) {
    clear_content();
    set_has_format();
    content_.format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.format)
}
#if LANG_CXX11
void AccessLog::set_format(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.format)
  if (!has_format()) {
    clear_content();
    set_has_format();
    content_.format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.AccessLog.format)
}
#endif
void AccessLog::set_format(const char* value) {
  if (!has_format()) {
    clear_content();
    set_has_format();
    content_.format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.AccessLog.format)
}
void AccessLog::set_format(const char* value, size_t size) {
  if (!has_format()) {
    clear_content();
    set_has_format();
    content_.format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.AccessLog.format)
}
::std::string* AccessLog::mutable_format() {
  if (!has_format()) {
    clear_content();
    set_has_format();
    content_.format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.format)
  return content_.format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AccessLog::release_format() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.format)
  if (has_format()) {
    clear_has_content();
    return content_.format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AccessLog::set_allocated_format(::std::string* format) {
  if (!has_format()) {
    content_.format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_content();
  if (format != NULL) {
    set_has_format();
    content_.format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        format);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.format)
}

// .envoy.api.v2.filter.HeaderSelection headers = 4;
bool AccessLog::has_headers() const {
  return content_case() == kHeaders;
}
void AccessLog::set_has_headers() {
  _oneof_case_[1] = kHeaders;
}
void AccessLog::clear_headers() {
  if (has_headers()) {
    delete content_.headers_;
    clear_has_content();
  }
}
 const ::envoy::api::v2::filter::HeaderSelection& AccessLog::headers() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.headers)
  return has_headers()
      ? *content_.headers_
      : ::envoy::api::v2::filter::HeaderSelection::default_instance();
}
::envoy::api::v2::filter::HeaderSelection* AccessLog::mutable_headers() {
  if (!has_headers()) {
    clear_content();
    set_has_headers();
    content_.headers_ = new ::envoy::api::v2::filter::HeaderSelection;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.headers)
  return content_.headers_;
}
::envoy::api::v2::filter::HeaderSelection* AccessLog::release_headers() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.headers)
  if (has_headers()) {
    clear_has_content();
    ::envoy::api::v2::filter::HeaderSelection* temp = content_.headers_;
    content_.headers_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AccessLog::set_allocated_headers(::envoy::api::v2::filter::HeaderSelection* headers) {
  clear_content();
  if (headers) {
    set_has_headers();
    content_.headers_ = headers;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.headers)
}

// .envoy.api.v2.filter.AccessLogFilter filter = 3;
bool AccessLog::has_filter() const {
  return this != internal_default_instance() && filter_ != NULL;
}
void AccessLog::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
}
const ::envoy::api::v2::filter::AccessLogFilter& AccessLog::filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.filter)
  return filter_ != NULL ? *filter_
                         : *::envoy::api::v2::filter::AccessLogFilter::internal_default_instance();
}
::envoy::api::v2::filter::AccessLogFilter* AccessLog::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::envoy::api::v2::filter::AccessLogFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.filter)
  return filter_;
}
::envoy::api::v2::filter::AccessLogFilter* AccessLog::release_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.filter)
  
  ::envoy::api::v2::filter::AccessLogFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
void AccessLog::set_allocated_filter(::envoy::api::v2::filter::AccessLogFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.filter)
}

bool AccessLog::has_destination() const {
  return destination_case() != DESTINATION_NOT_SET;
}
void AccessLog::clear_has_destination() {
  _oneof_case_[0] = DESTINATION_NOT_SET;
}
bool AccessLog::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
void AccessLog::clear_has_content() {
  _oneof_case_[1] = CONTENT_NOT_SET;
}
AccessLog::DestinationCase AccessLog::destination_case() const {
  return AccessLog::DestinationCase(_oneof_case_[0]);
}
AccessLog::ContentCase AccessLog::content_case() const {
  return AccessLog::ContentCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpFilter::kTypeFieldNumber;
const int HttpFilter::kNameFieldNumber;
const int HttpFilter::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpFilter::HttpFilter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.HttpFilter)
}
HttpFilter::HttpFilter(const HttpFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_config()) {
    config_ = new ::google::protobuf::Struct(*from.config_);
  } else {
    config_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.HttpFilter)
}

void HttpFilter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&config_) + sizeof(type_));
  _cached_size_ = 0;
}

HttpFilter::~HttpFilter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.HttpFilter)
  SharedDtor();
}

void HttpFilter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void HttpFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpFilter::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[11].descriptor;
}

const HttpFilter& HttpFilter::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

HttpFilter* HttpFilter::New(::google::protobuf::Arena* arena) const {
  HttpFilter* n = new HttpFilter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.HttpFilter)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  type_ = 0;
}

bool HttpFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.HttpFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.HttpFilter.Type type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::envoy::api::v2::filter::HttpFilter_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.HttpFilter.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct config = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.HttpFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.HttpFilter)
  return false;
#undef DO_
}

void HttpFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.HttpFilter)
  // .envoy.api.v2.filter.HttpFilter.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpFilter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.HttpFilter)
}

::google::protobuf::uint8* HttpFilter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.HttpFilter)
  // .envoy.api.v2.filter.HttpFilter.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpFilter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.HttpFilter)
  return target;
}

size_t HttpFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.HttpFilter)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // .envoy.api.v2.filter.HttpFilter.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.HttpFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpFilter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpFilter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.HttpFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.HttpFilter)
    MergeFrom(*source);
  }
}

void HttpFilter::MergeFrom(const HttpFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.HttpFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_config()) {
    mutable_config()->::google::protobuf::Struct::MergeFrom(from.config());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void HttpFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.HttpFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpFilter::CopyFrom(const HttpFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.HttpFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpFilter::IsInitialized() const {
  return true;
}

void HttpFilter::Swap(HttpFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpFilter::InternalSwap(HttpFilter* other) {
  name_.Swap(&other->name_);
  std::swap(config_, other->config_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpFilter::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpFilter

// .envoy.api.v2.filter.HttpFilter.Type type = 1;
void HttpFilter::clear_type() {
  type_ = 0;
}
::envoy::api::v2::filter::HttpFilter_Type HttpFilter::type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.type)
  return static_cast< ::envoy::api::v2::filter::HttpFilter_Type >(type_);
}
void HttpFilter::set_type(::envoy::api::v2::filter::HttpFilter_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpFilter.type)
}

// string name = 2;
void HttpFilter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpFilter::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.name)
  return name_.GetNoArena();
}
void HttpFilter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpFilter.name)
}
#if LANG_CXX11
void HttpFilter::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpFilter.name)
}
#endif
void HttpFilter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpFilter.name)
}
void HttpFilter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpFilter.name)
}
::std::string* HttpFilter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpFilter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpFilter::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpFilter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpFilter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpFilter.name)
}

// .google.protobuf.Struct config = 3;
bool HttpFilter::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void HttpFilter::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::google::protobuf::Struct& HttpFilter::config() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.config)
  return config_ != NULL ? *config_
                         : *::google::protobuf::Struct::internal_default_instance();
}
::google::protobuf::Struct* HttpFilter::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpFilter.config)
  return config_;
}
::google::protobuf::Struct* HttpFilter::release_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpFilter.config)
  
  ::google::protobuf::Struct* temp = config_;
  config_ = NULL;
  return temp;
}
void HttpFilter::set_allocated_config(::google::protobuf::Struct* config) {
  delete config_;
  if (config != NULL && config->GetArena() != NULL) {
    ::google::protobuf::Struct* new_config = new ::google::protobuf::Struct;
    new_config->CopyFrom(*config);
    config = new_config;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpFilter.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpConnectionManager_Tracing::kOperationNameFieldNumber;
const int HttpConnectionManager_Tracing::kRequestHeadersForTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpConnectionManager_Tracing::HttpConnectionManager_Tracing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.HttpConnectionManager.Tracing)
}
HttpConnectionManager_Tracing::HttpConnectionManager_Tracing(const HttpConnectionManager_Tracing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      request_headers_for_tags_(from.request_headers_for_tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_name_ = from.operation_name_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.HttpConnectionManager.Tracing)
}

void HttpConnectionManager_Tracing::SharedCtor() {
  operation_name_ = 0;
  _cached_size_ = 0;
}

HttpConnectionManager_Tracing::~HttpConnectionManager_Tracing() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  SharedDtor();
}

void HttpConnectionManager_Tracing::SharedDtor() {
}

void HttpConnectionManager_Tracing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpConnectionManager_Tracing::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[12].descriptor;
}

const HttpConnectionManager_Tracing& HttpConnectionManager_Tracing::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

HttpConnectionManager_Tracing* HttpConnectionManager_Tracing::New(::google::protobuf::Arena* arena) const {
  HttpConnectionManager_Tracing* n = new HttpConnectionManager_Tracing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpConnectionManager_Tracing::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  request_headers_for_tags_.Clear();
  operation_name_ = 0;
}

bool HttpConnectionManager_Tracing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation_name(static_cast< ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string request_headers_for_tags = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_request_headers_for_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_headers_for_tags(this->request_headers_for_tags_size() - 1).data(),
            this->request_headers_for_tags(this->request_headers_for_tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  return false;
#undef DO_
}

void HttpConnectionManager_Tracing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  // .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
  if (this->operation_name() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation_name(), output);
  }

  // repeated string request_headers_for_tags = 2;
  for (int i = 0; i < this->request_headers_for_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_headers_for_tags(i).data(), this->request_headers_for_tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->request_headers_for_tags(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.HttpConnectionManager.Tracing)
}

::google::protobuf::uint8* HttpConnectionManager_Tracing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  // .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
  if (this->operation_name() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation_name(), target);
  }

  // repeated string request_headers_for_tags = 2;
  for (int i = 0; i < this->request_headers_for_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_headers_for_tags(i).data(), this->request_headers_for_tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->request_headers_for_tags(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  return target;
}

size_t HttpConnectionManager_Tracing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  size_t total_size = 0;

  // repeated string request_headers_for_tags = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->request_headers_for_tags_size());
  for (int i = 0; i < this->request_headers_for_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->request_headers_for_tags(i));
  }

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
  if (this->operation_name() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpConnectionManager_Tracing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpConnectionManager_Tracing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpConnectionManager_Tracing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.HttpConnectionManager.Tracing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.HttpConnectionManager.Tracing)
    MergeFrom(*source);
  }
}

void HttpConnectionManager_Tracing::MergeFrom(const HttpConnectionManager_Tracing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_headers_for_tags_.MergeFrom(from.request_headers_for_tags_);
  if (from.operation_name() != 0) {
    set_operation_name(from.operation_name());
  }
}

void HttpConnectionManager_Tracing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpConnectionManager_Tracing::CopyFrom(const HttpConnectionManager_Tracing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.HttpConnectionManager.Tracing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpConnectionManager_Tracing::IsInitialized() const {
  return true;
}

void HttpConnectionManager_Tracing::Swap(HttpConnectionManager_Tracing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpConnectionManager_Tracing::InternalSwap(HttpConnectionManager_Tracing* other) {
  request_headers_for_tags_.UnsafeArenaSwap(&other->request_headers_for_tags_);
  std::swap(operation_name_, other->operation_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpConnectionManager_Tracing::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpConnectionManager_Tracing

// .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
void HttpConnectionManager_Tracing::clear_operation_name() {
  operation_name_ = 0;
}
::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::operation_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.Tracing.operation_name)
  return static_cast< ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName >(operation_name_);
}
void HttpConnectionManager_Tracing::set_operation_name(::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName value) {
  
  operation_name_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.Tracing.operation_name)
}

// repeated string request_headers_for_tags = 2;
int HttpConnectionManager_Tracing::request_headers_for_tags_size() const {
  return request_headers_for_tags_.size();
}
void HttpConnectionManager_Tracing::clear_request_headers_for_tags() {
  request_headers_for_tags_.Clear();
}
const ::std::string& HttpConnectionManager_Tracing::request_headers_for_tags(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Get(index);
}
::std::string* HttpConnectionManager_Tracing::mutable_request_headers_for_tags(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Mutable(index);
}
void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  request_headers_for_tags_.Mutable(index)->assign(value);
}
void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const char* value) {
  request_headers_for_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const char* value, size_t size) {
  request_headers_for_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
::std::string* HttpConnectionManager_Tracing::add_request_headers_for_tags() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Add();
}
void HttpConnectionManager_Tracing::add_request_headers_for_tags(const ::std::string& value) {
  request_headers_for_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
void HttpConnectionManager_Tracing::add_request_headers_for_tags(const char* value) {
  request_headers_for_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
void HttpConnectionManager_Tracing::add_request_headers_for_tags(const char* value, size_t size) {
  request_headers_for_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
HttpConnectionManager_Tracing::request_headers_for_tags() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
HttpConnectionManager_Tracing::mutable_request_headers_for_tags() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return &request_headers_for_tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpConnectionManager::kCodecTypeFieldNumber;
const int HttpConnectionManager::kStatPrefixFieldNumber;
const int HttpConnectionManager::kRdsFieldNumber;
const int HttpConnectionManager::kRouteConfigFieldNumber;
const int HttpConnectionManager::kHttpFiltersFieldNumber;
const int HttpConnectionManager::kAddUserAgentFieldNumber;
const int HttpConnectionManager::kTracingFieldNumber;
const int HttpConnectionManager::kHttpProtocolOptionsFieldNumber;
const int HttpConnectionManager::kHttp2ProtocolOptionsFieldNumber;
const int HttpConnectionManager::kServerNameFieldNumber;
const int HttpConnectionManager::kIdleTimeoutFieldNumber;
const int HttpConnectionManager::kDrainTimeoutFieldNumber;
const int HttpConnectionManager::kAccessLogFieldNumber;
const int HttpConnectionManager::kUseRemoteAddressFieldNumber;
const int HttpConnectionManager::kGenerateRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpConnectionManager::HttpConnectionManager()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.HttpConnectionManager)
}
HttpConnectionManager::HttpConnectionManager(const HttpConnectionManager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      http_filters_(from.http_filters_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stat_prefix().size() > 0) {
    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.has_add_user_agent()) {
    add_user_agent_ = new ::google::protobuf::BoolValue(*from.add_user_agent_);
  } else {
    add_user_agent_ = NULL;
  }
  if (from.has_tracing()) {
    tracing_ = new ::envoy::api::v2::filter::HttpConnectionManager_Tracing(*from.tracing_);
  } else {
    tracing_ = NULL;
  }
  if (from.has_idle_timeout()) {
    idle_timeout_ = new ::google::protobuf::Duration(*from.idle_timeout_);
  } else {
    idle_timeout_ = NULL;
  }
  if (from.has_drain_timeout()) {
    drain_timeout_ = new ::google::protobuf::Duration(*from.drain_timeout_);
  } else {
    drain_timeout_ = NULL;
  }
  if (from.has_access_log()) {
    access_log_ = new ::envoy::api::v2::filter::AccessLog(*from.access_log_);
  } else {
    access_log_ = NULL;
  }
  if (from.has_use_remote_address()) {
    use_remote_address_ = new ::google::protobuf::BoolValue(*from.use_remote_address_);
  } else {
    use_remote_address_ = NULL;
  }
  if (from.has_generate_request_id()) {
    generate_request_id_ = new ::google::protobuf::BoolValue(*from.generate_request_id_);
  } else {
    generate_request_id_ = NULL;
  }
  codec_type_ = from.codec_type_;
  clear_has_route_specifier();
  switch (from.route_specifier_case()) {
    case kRds: {
      mutable_rds()->::envoy::api::v2::filter::Rds::MergeFrom(from.rds());
      break;
    }
    case kRouteConfig: {
      mutable_route_config()->::envoy::api::v2::RouteConfiguration::MergeFrom(from.route_config());
      break;
    }
    case ROUTE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  clear_has_http_codec_options();
  switch (from.http_codec_options_case()) {
    case kHttpProtocolOptions: {
      mutable_http_protocol_options()->::envoy::api::v2::Http1ProtocolOptions::MergeFrom(from.http_protocol_options());
      break;
    }
    case kHttp2ProtocolOptions: {
      mutable_http2_protocol_options()->::envoy::api::v2::Http2ProtocolOptions::MergeFrom(from.http2_protocol_options());
      break;
    }
    case HTTP_CODEC_OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.HttpConnectionManager)
}

void HttpConnectionManager::SharedCtor() {
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&add_user_agent_, 0, reinterpret_cast<char*>(&codec_type_) -
    reinterpret_cast<char*>(&add_user_agent_) + sizeof(codec_type_));
  clear_has_route_specifier();
  clear_has_http_codec_options();
  _cached_size_ = 0;
}

HttpConnectionManager::~HttpConnectionManager() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.HttpConnectionManager)
  SharedDtor();
}

void HttpConnectionManager::SharedDtor() {
  stat_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete add_user_agent_;
  }
  if (this != internal_default_instance()) {
    delete tracing_;
  }
  if (this != internal_default_instance()) {
    delete idle_timeout_;
  }
  if (this != internal_default_instance()) {
    delete drain_timeout_;
  }
  if (this != internal_default_instance()) {
    delete access_log_;
  }
  if (this != internal_default_instance()) {
    delete use_remote_address_;
  }
  if (this != internal_default_instance()) {
    delete generate_request_id_;
  }
  if (has_route_specifier()) {
    clear_route_specifier();
  }
  if (has_http_codec_options()) {
    clear_http_codec_options();
  }
}

void HttpConnectionManager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpConnectionManager::descriptor() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[13].descriptor;
}

const HttpConnectionManager& HttpConnectionManager::default_instance() {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::InitDefaults();
  return *internal_default_instance();
}

HttpConnectionManager* HttpConnectionManager::New(::google::protobuf::Arena* arena) const {
  HttpConnectionManager* n = new HttpConnectionManager;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpConnectionManager::clear_route_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.filter.HttpConnectionManager)
  switch (route_specifier_case()) {
    case kRds: {
      delete route_specifier_.rds_;
      break;
    }
    case kRouteConfig: {
      delete route_specifier_.route_config_;
      break;
    }
    case ROUTE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ROUTE_SPECIFIER_NOT_SET;
}

void HttpConnectionManager::clear_http_codec_options() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.filter.HttpConnectionManager)
  switch (http_codec_options_case()) {
    case kHttpProtocolOptions: {
      delete http_codec_options_.http_protocol_options_;
      break;
    }
    case kHttp2ProtocolOptions: {
      delete http_codec_options_.http2_protocol_options_;
      break;
    }
    case HTTP_CODEC_OPTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = HTTP_CODEC_OPTIONS_NOT_SET;
}


void HttpConnectionManager::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.HttpConnectionManager)
  http_filters_.Clear();
  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && add_user_agent_ != NULL) {
    delete add_user_agent_;
  }
  add_user_agent_ = NULL;
  if (GetArenaNoVirtual() == NULL && tracing_ != NULL) {
    delete tracing_;
  }
  tracing_ = NULL;
  if (GetArenaNoVirtual() == NULL && idle_timeout_ != NULL) {
    delete idle_timeout_;
  }
  idle_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && drain_timeout_ != NULL) {
    delete drain_timeout_;
  }
  drain_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && access_log_ != NULL) {
    delete access_log_;
  }
  access_log_ = NULL;
  if (GetArenaNoVirtual() == NULL && use_remote_address_ != NULL) {
    delete use_remote_address_;
  }
  use_remote_address_ = NULL;
  if (GetArenaNoVirtual() == NULL && generate_request_id_ != NULL) {
    delete generate_request_id_;
  }
  generate_request_id_ = NULL;
  codec_type_ = 0;
  clear_route_specifier();
  clear_http_codec_options();
}

bool HttpConnectionManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.HttpConnectionManager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_codec_type(static_cast< ::envoy::api::v2::filter::HttpConnectionManager_CodecType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stat_prefix = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stat_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stat_prefix().data(), this->stat_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.HttpConnectionManager.stat_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.Rds rds = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.RouteConfiguration route_config = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_http_filters()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .google.protobuf.BoolValue add_user_agent = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_user_agent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tracing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http2_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_name = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.HttpConnectionManager.server_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration idle_timeout = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_idle_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration drain_timeout = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drain_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.filter.AccessLog access_log = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_access_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue use_remote_address = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_use_remote_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue generate_request_id = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generate_request_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.HttpConnectionManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.HttpConnectionManager)
  return false;
#undef DO_
}

void HttpConnectionManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.HttpConnectionManager)
  // .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
  if (this->codec_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->codec_type(), output);
  }

  // string stat_prefix = 2;
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), this->stat_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpConnectionManager.stat_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stat_prefix(), output);
  }

  // .envoy.api.v2.filter.Rds rds = 3;
  if (has_rds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *route_specifier_.rds_, output);
  }

  // .envoy.api.v2.RouteConfiguration route_config = 4;
  if (has_route_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *route_specifier_.route_config_, output);
  }

  // repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
  for (unsigned int i = 0, n = this->http_filters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->http_filters(i), output);
  }

  // .google.protobuf.BoolValue add_user_agent = 6;
  if (this->has_add_user_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->add_user_agent_, output);
  }

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
  if (this->has_tracing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->tracing_, output);
  }

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
  if (has_http_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *http_codec_options_.http_protocol_options_, output);
  }

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
  if (has_http2_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *http_codec_options_.http2_protocol_options_, output);
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpConnectionManager.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->server_name(), output);
  }

  // .google.protobuf.Duration idle_timeout = 11;
  if (this->has_idle_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->idle_timeout_, output);
  }

  // .google.protobuf.Duration drain_timeout = 12;
  if (this->has_drain_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->drain_timeout_, output);
  }

  // .envoy.api.v2.filter.AccessLog access_log = 13;
  if (this->has_access_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->access_log_, output);
  }

  // .google.protobuf.BoolValue use_remote_address = 14;
  if (this->has_use_remote_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->use_remote_address_, output);
  }

  // .google.protobuf.BoolValue generate_request_id = 15;
  if (this->has_generate_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->generate_request_id_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.HttpConnectionManager)
}

::google::protobuf::uint8* HttpConnectionManager::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.HttpConnectionManager)
  // .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
  if (this->codec_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->codec_type(), target);
  }

  // string stat_prefix = 2;
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), this->stat_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpConnectionManager.stat_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stat_prefix(), target);
  }

  // .envoy.api.v2.filter.Rds rds = 3;
  if (has_rds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *route_specifier_.rds_, false, target);
  }

  // .envoy.api.v2.RouteConfiguration route_config = 4;
  if (has_route_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *route_specifier_.route_config_, false, target);
  }

  // repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
  for (unsigned int i = 0, n = this->http_filters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->http_filters(i), false, target);
  }

  // .google.protobuf.BoolValue add_user_agent = 6;
  if (this->has_add_user_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->add_user_agent_, false, target);
  }

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
  if (this->has_tracing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->tracing_, false, target);
  }

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
  if (has_http_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *http_codec_options_.http_protocol_options_, false, target);
  }

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
  if (has_http2_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *http_codec_options_.http2_protocol_options_, false, target);
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.HttpConnectionManager.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->server_name(), target);
  }

  // .google.protobuf.Duration idle_timeout = 11;
  if (this->has_idle_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->idle_timeout_, false, target);
  }

  // .google.protobuf.Duration drain_timeout = 12;
  if (this->has_drain_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->drain_timeout_, false, target);
  }

  // .envoy.api.v2.filter.AccessLog access_log = 13;
  if (this->has_access_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->access_log_, false, target);
  }

  // .google.protobuf.BoolValue use_remote_address = 14;
  if (this->has_use_remote_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->use_remote_address_, false, target);
  }

  // .google.protobuf.BoolValue generate_request_id = 15;
  if (this->has_generate_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->generate_request_id_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.HttpConnectionManager)
  return target;
}

size_t HttpConnectionManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.HttpConnectionManager)
  size_t total_size = 0;

  // repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
  {
    unsigned int count = this->http_filters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->http_filters(i));
    }
  }

  // string stat_prefix = 2;
  if (this->stat_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stat_prefix());
  }

  // string server_name = 10;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  // .google.protobuf.BoolValue add_user_agent = 6;
  if (this->has_add_user_agent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->add_user_agent_);
  }

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
  if (this->has_tracing()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tracing_);
  }

  // .google.protobuf.Duration idle_timeout = 11;
  if (this->has_idle_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->idle_timeout_);
  }

  // .google.protobuf.Duration drain_timeout = 12;
  if (this->has_drain_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->drain_timeout_);
  }

  // .envoy.api.v2.filter.AccessLog access_log = 13;
  if (this->has_access_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->access_log_);
  }

  // .google.protobuf.BoolValue use_remote_address = 14;
  if (this->has_use_remote_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->use_remote_address_);
  }

  // .google.protobuf.BoolValue generate_request_id = 15;
  if (this->has_generate_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->generate_request_id_);
  }

  // .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
  if (this->codec_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->codec_type());
  }

  switch (route_specifier_case()) {
    // .envoy.api.v2.filter.Rds rds = 3;
    case kRds: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *route_specifier_.rds_);
      break;
    }
    // .envoy.api.v2.RouteConfiguration route_config = 4;
    case kRouteConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *route_specifier_.route_config_);
      break;
    }
    case ROUTE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  switch (http_codec_options_case()) {
    // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
    case kHttpProtocolOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *http_codec_options_.http_protocol_options_);
      break;
    }
    // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
    case kHttp2ProtocolOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *http_codec_options_.http2_protocol_options_);
      break;
    }
    case HTTP_CODEC_OPTIONS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpConnectionManager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.HttpConnectionManager)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpConnectionManager* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpConnectionManager>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.HttpConnectionManager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.HttpConnectionManager)
    MergeFrom(*source);
  }
}

void HttpConnectionManager::MergeFrom(const HttpConnectionManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.HttpConnectionManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  http_filters_.MergeFrom(from.http_filters_);
  if (from.stat_prefix().size() > 0) {

    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.has_add_user_agent()) {
    mutable_add_user_agent()->::google::protobuf::BoolValue::MergeFrom(from.add_user_agent());
  }
  if (from.has_tracing()) {
    mutable_tracing()->::envoy::api::v2::filter::HttpConnectionManager_Tracing::MergeFrom(from.tracing());
  }
  if (from.has_idle_timeout()) {
    mutable_idle_timeout()->::google::protobuf::Duration::MergeFrom(from.idle_timeout());
  }
  if (from.has_drain_timeout()) {
    mutable_drain_timeout()->::google::protobuf::Duration::MergeFrom(from.drain_timeout());
  }
  if (from.has_access_log()) {
    mutable_access_log()->::envoy::api::v2::filter::AccessLog::MergeFrom(from.access_log());
  }
  if (from.has_use_remote_address()) {
    mutable_use_remote_address()->::google::protobuf::BoolValue::MergeFrom(from.use_remote_address());
  }
  if (from.has_generate_request_id()) {
    mutable_generate_request_id()->::google::protobuf::BoolValue::MergeFrom(from.generate_request_id());
  }
  if (from.codec_type() != 0) {
    set_codec_type(from.codec_type());
  }
  switch (from.route_specifier_case()) {
    case kRds: {
      mutable_rds()->::envoy::api::v2::filter::Rds::MergeFrom(from.rds());
      break;
    }
    case kRouteConfig: {
      mutable_route_config()->::envoy::api::v2::RouteConfiguration::MergeFrom(from.route_config());
      break;
    }
    case ROUTE_SPECIFIER_NOT_SET: {
      break;
    }
  }
  switch (from.http_codec_options_case()) {
    case kHttpProtocolOptions: {
      mutable_http_protocol_options()->::envoy::api::v2::Http1ProtocolOptions::MergeFrom(from.http_protocol_options());
      break;
    }
    case kHttp2ProtocolOptions: {
      mutable_http2_protocol_options()->::envoy::api::v2::Http2ProtocolOptions::MergeFrom(from.http2_protocol_options());
      break;
    }
    case HTTP_CODEC_OPTIONS_NOT_SET: {
      break;
    }
  }
}

void HttpConnectionManager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.HttpConnectionManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpConnectionManager::CopyFrom(const HttpConnectionManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.HttpConnectionManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpConnectionManager::IsInitialized() const {
  return true;
}

void HttpConnectionManager::Swap(HttpConnectionManager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpConnectionManager::InternalSwap(HttpConnectionManager* other) {
  http_filters_.UnsafeArenaSwap(&other->http_filters_);
  stat_prefix_.Swap(&other->stat_prefix_);
  server_name_.Swap(&other->server_name_);
  std::swap(add_user_agent_, other->add_user_agent_);
  std::swap(tracing_, other->tracing_);
  std::swap(idle_timeout_, other->idle_timeout_);
  std::swap(drain_timeout_, other->drain_timeout_);
  std::swap(access_log_, other->access_log_);
  std::swap(use_remote_address_, other->use_remote_address_);
  std::swap(generate_request_id_, other->generate_request_id_);
  std::swap(codec_type_, other->codec_type_);
  std::swap(route_specifier_, other->route_specifier_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(http_codec_options_, other->http_codec_options_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpConnectionManager::GetMetadata() const {
  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpConnectionManager

// .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
void HttpConnectionManager::clear_codec_type() {
  codec_type_ = 0;
}
::envoy::api::v2::filter::HttpConnectionManager_CodecType HttpConnectionManager::codec_type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.codec_type)
  return static_cast< ::envoy::api::v2::filter::HttpConnectionManager_CodecType >(codec_type_);
}
void HttpConnectionManager::set_codec_type(::envoy::api::v2::filter::HttpConnectionManager_CodecType value) {
  
  codec_type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.codec_type)
}

// string stat_prefix = 2;
void HttpConnectionManager::clear_stat_prefix() {
  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpConnectionManager::stat_prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
  return stat_prefix_.GetNoArena();
}
void HttpConnectionManager::set_stat_prefix(const ::std::string& value) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
#if LANG_CXX11
void HttpConnectionManager::set_stat_prefix(::std::string&& value) {
  
  stat_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
#endif
void HttpConnectionManager::set_stat_prefix(const char* value) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
void HttpConnectionManager::set_stat_prefix(const char* value, size_t size) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
::std::string* HttpConnectionManager::mutable_stat_prefix() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
  return stat_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpConnectionManager::release_stat_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
  
  return stat_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpConnectionManager::set_allocated_stat_prefix(::std::string* stat_prefix) {
  if (stat_prefix != NULL) {
    
  } else {
    
  }
  stat_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stat_prefix);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}

// .envoy.api.v2.filter.Rds rds = 3;
bool HttpConnectionManager::has_rds() const {
  return route_specifier_case() == kRds;
}
void HttpConnectionManager::set_has_rds() {
  _oneof_case_[0] = kRds;
}
void HttpConnectionManager::clear_rds() {
  if (has_rds()) {
    delete route_specifier_.rds_;
    clear_has_route_specifier();
  }
}
 const ::envoy::api::v2::filter::Rds& HttpConnectionManager::rds() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.rds)
  return has_rds()
      ? *route_specifier_.rds_
      : ::envoy::api::v2::filter::Rds::default_instance();
}
::envoy::api::v2::filter::Rds* HttpConnectionManager::mutable_rds() {
  if (!has_rds()) {
    clear_route_specifier();
    set_has_rds();
    route_specifier_.rds_ = new ::envoy::api::v2::filter::Rds;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.rds)
  return route_specifier_.rds_;
}
::envoy::api::v2::filter::Rds* HttpConnectionManager::release_rds() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.rds)
  if (has_rds()) {
    clear_has_route_specifier();
    ::envoy::api::v2::filter::Rds* temp = route_specifier_.rds_;
    route_specifier_.rds_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HttpConnectionManager::set_allocated_rds(::envoy::api::v2::filter::Rds* rds) {
  clear_route_specifier();
  if (rds) {
    set_has_rds();
    route_specifier_.rds_ = rds;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.rds)
}

// .envoy.api.v2.RouteConfiguration route_config = 4;
bool HttpConnectionManager::has_route_config() const {
  return route_specifier_case() == kRouteConfig;
}
void HttpConnectionManager::set_has_route_config() {
  _oneof_case_[0] = kRouteConfig;
}
void HttpConnectionManager::clear_route_config() {
  if (has_route_config()) {
    delete route_specifier_.route_config_;
    clear_has_route_specifier();
  }
}
 const ::envoy::api::v2::RouteConfiguration& HttpConnectionManager::route_config() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.route_config)
  return has_route_config()
      ? *route_specifier_.route_config_
      : ::envoy::api::v2::RouteConfiguration::default_instance();
}
::envoy::api::v2::RouteConfiguration* HttpConnectionManager::mutable_route_config() {
  if (!has_route_config()) {
    clear_route_specifier();
    set_has_route_config();
    route_specifier_.route_config_ = new ::envoy::api::v2::RouteConfiguration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.route_config)
  return route_specifier_.route_config_;
}
::envoy::api::v2::RouteConfiguration* HttpConnectionManager::release_route_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.route_config)
  if (has_route_config()) {
    clear_has_route_specifier();
    ::envoy::api::v2::RouteConfiguration* temp = route_specifier_.route_config_;
    route_specifier_.route_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HttpConnectionManager::set_allocated_route_config(::envoy::api::v2::RouteConfiguration* route_config) {
  clear_route_specifier();
  if (route_config) {
    set_has_route_config();
    route_specifier_.route_config_ = route_config;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.route_config)
}

// repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
int HttpConnectionManager::http_filters_size() const {
  return http_filters_.size();
}
void HttpConnectionManager::clear_http_filters() {
  http_filters_.Clear();
}
const ::envoy::api::v2::filter::HttpFilter& HttpConnectionManager::http_filters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_.Get(index);
}
::envoy::api::v2::filter::HttpFilter* HttpConnectionManager::mutable_http_filters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_.Mutable(index);
}
::envoy::api::v2::filter::HttpFilter* HttpConnectionManager::add_http_filters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter >*
HttpConnectionManager::mutable_http_filters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return &http_filters_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter >&
HttpConnectionManager::http_filters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_;
}

// .google.protobuf.BoolValue add_user_agent = 6;
bool HttpConnectionManager::has_add_user_agent() const {
  return this != internal_default_instance() && add_user_agent_ != NULL;
}
void HttpConnectionManager::clear_add_user_agent() {
  if (GetArenaNoVirtual() == NULL && add_user_agent_ != NULL) delete add_user_agent_;
  add_user_agent_ = NULL;
}
const ::google::protobuf::BoolValue& HttpConnectionManager::add_user_agent() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
  return add_user_agent_ != NULL ? *add_user_agent_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
::google::protobuf::BoolValue* HttpConnectionManager::mutable_add_user_agent() {
  
  if (add_user_agent_ == NULL) {
    add_user_agent_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
  return add_user_agent_;
}
::google::protobuf::BoolValue* HttpConnectionManager::release_add_user_agent() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
  
  ::google::protobuf::BoolValue* temp = add_user_agent_;
  add_user_agent_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_add_user_agent(::google::protobuf::BoolValue* add_user_agent) {
  delete add_user_agent_;
  if (add_user_agent != NULL && add_user_agent->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_add_user_agent = new ::google::protobuf::BoolValue;
    new_add_user_agent->CopyFrom(*add_user_agent);
    add_user_agent = new_add_user_agent;
  }
  add_user_agent_ = add_user_agent;
  if (add_user_agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
}

// .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
bool HttpConnectionManager::has_tracing() const {
  return this != internal_default_instance() && tracing_ != NULL;
}
void HttpConnectionManager::clear_tracing() {
  if (GetArenaNoVirtual() == NULL && tracing_ != NULL) delete tracing_;
  tracing_ = NULL;
}
const ::envoy::api::v2::filter::HttpConnectionManager_Tracing& HttpConnectionManager::tracing() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.tracing)
  return tracing_ != NULL ? *tracing_
                         : *::envoy::api::v2::filter::HttpConnectionManager_Tracing::internal_default_instance();
}
::envoy::api::v2::filter::HttpConnectionManager_Tracing* HttpConnectionManager::mutable_tracing() {
  
  if (tracing_ == NULL) {
    tracing_ = new ::envoy::api::v2::filter::HttpConnectionManager_Tracing;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.tracing)
  return tracing_;
}
::envoy::api::v2::filter::HttpConnectionManager_Tracing* HttpConnectionManager::release_tracing() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.tracing)
  
  ::envoy::api::v2::filter::HttpConnectionManager_Tracing* temp = tracing_;
  tracing_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_tracing(::envoy::api::v2::filter::HttpConnectionManager_Tracing* tracing) {
  delete tracing_;
  tracing_ = tracing;
  if (tracing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.tracing)
}

// .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
bool HttpConnectionManager::has_http_protocol_options() const {
  return http_codec_options_case() == kHttpProtocolOptions;
}
void HttpConnectionManager::set_has_http_protocol_options() {
  _oneof_case_[1] = kHttpProtocolOptions;
}
void HttpConnectionManager::clear_http_protocol_options() {
  if (has_http_protocol_options()) {
    delete http_codec_options_.http_protocol_options_;
    clear_has_http_codec_options();
  }
}
 const ::envoy::api::v2::Http1ProtocolOptions& HttpConnectionManager::http_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
  return has_http_protocol_options()
      ? *http_codec_options_.http_protocol_options_
      : ::envoy::api::v2::Http1ProtocolOptions::default_instance();
}
::envoy::api::v2::Http1ProtocolOptions* HttpConnectionManager::mutable_http_protocol_options() {
  if (!has_http_protocol_options()) {
    clear_http_codec_options();
    set_has_http_protocol_options();
    http_codec_options_.http_protocol_options_ = new ::envoy::api::v2::Http1ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
  return http_codec_options_.http_protocol_options_;
}
::envoy::api::v2::Http1ProtocolOptions* HttpConnectionManager::release_http_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
  if (has_http_protocol_options()) {
    clear_has_http_codec_options();
    ::envoy::api::v2::Http1ProtocolOptions* temp = http_codec_options_.http_protocol_options_;
    http_codec_options_.http_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HttpConnectionManager::set_allocated_http_protocol_options(::envoy::api::v2::Http1ProtocolOptions* http_protocol_options) {
  clear_http_codec_options();
  if (http_protocol_options) {
    set_has_http_protocol_options();
    http_codec_options_.http_protocol_options_ = http_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
}

// .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
bool HttpConnectionManager::has_http2_protocol_options() const {
  return http_codec_options_case() == kHttp2ProtocolOptions;
}
void HttpConnectionManager::set_has_http2_protocol_options() {
  _oneof_case_[1] = kHttp2ProtocolOptions;
}
void HttpConnectionManager::clear_http2_protocol_options() {
  if (has_http2_protocol_options()) {
    delete http_codec_options_.http2_protocol_options_;
    clear_has_http_codec_options();
  }
}
 const ::envoy::api::v2::Http2ProtocolOptions& HttpConnectionManager::http2_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
  return has_http2_protocol_options()
      ? *http_codec_options_.http2_protocol_options_
      : ::envoy::api::v2::Http2ProtocolOptions::default_instance();
}
::envoy::api::v2::Http2ProtocolOptions* HttpConnectionManager::mutable_http2_protocol_options() {
  if (!has_http2_protocol_options()) {
    clear_http_codec_options();
    set_has_http2_protocol_options();
    http_codec_options_.http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
  return http_codec_options_.http2_protocol_options_;
}
::envoy::api::v2::Http2ProtocolOptions* HttpConnectionManager::release_http2_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
  if (has_http2_protocol_options()) {
    clear_has_http_codec_options();
    ::envoy::api::v2::Http2ProtocolOptions* temp = http_codec_options_.http2_protocol_options_;
    http_codec_options_.http2_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HttpConnectionManager::set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options) {
  clear_http_codec_options();
  if (http2_protocol_options) {
    set_has_http2_protocol_options();
    http_codec_options_.http2_protocol_options_ = http2_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
}

// string server_name = 10;
void HttpConnectionManager::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HttpConnectionManager::server_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.server_name)
  return server_name_.GetNoArena();
}
void HttpConnectionManager::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
#if LANG_CXX11
void HttpConnectionManager::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
#endif
void HttpConnectionManager::set_server_name(const char* value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
void HttpConnectionManager::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
::std::string* HttpConnectionManager::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HttpConnectionManager::release_server_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HttpConnectionManager::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.server_name)
}

// .google.protobuf.Duration idle_timeout = 11;
bool HttpConnectionManager::has_idle_timeout() const {
  return this != internal_default_instance() && idle_timeout_ != NULL;
}
void HttpConnectionManager::clear_idle_timeout() {
  if (GetArenaNoVirtual() == NULL && idle_timeout_ != NULL) delete idle_timeout_;
  idle_timeout_ = NULL;
}
const ::google::protobuf::Duration& HttpConnectionManager::idle_timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
  return idle_timeout_ != NULL ? *idle_timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* HttpConnectionManager::mutable_idle_timeout() {
  
  if (idle_timeout_ == NULL) {
    idle_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
  return idle_timeout_;
}
::google::protobuf::Duration* HttpConnectionManager::release_idle_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
  
  ::google::protobuf::Duration* temp = idle_timeout_;
  idle_timeout_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_idle_timeout(::google::protobuf::Duration* idle_timeout) {
  delete idle_timeout_;
  if (idle_timeout != NULL && idle_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_idle_timeout = new ::google::protobuf::Duration;
    new_idle_timeout->CopyFrom(*idle_timeout);
    idle_timeout = new_idle_timeout;
  }
  idle_timeout_ = idle_timeout;
  if (idle_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
}

// .google.protobuf.Duration drain_timeout = 12;
bool HttpConnectionManager::has_drain_timeout() const {
  return this != internal_default_instance() && drain_timeout_ != NULL;
}
void HttpConnectionManager::clear_drain_timeout() {
  if (GetArenaNoVirtual() == NULL && drain_timeout_ != NULL) delete drain_timeout_;
  drain_timeout_ = NULL;
}
const ::google::protobuf::Duration& HttpConnectionManager::drain_timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
  return drain_timeout_ != NULL ? *drain_timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* HttpConnectionManager::mutable_drain_timeout() {
  
  if (drain_timeout_ == NULL) {
    drain_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
  return drain_timeout_;
}
::google::protobuf::Duration* HttpConnectionManager::release_drain_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
  
  ::google::protobuf::Duration* temp = drain_timeout_;
  drain_timeout_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_drain_timeout(::google::protobuf::Duration* drain_timeout) {
  delete drain_timeout_;
  if (drain_timeout != NULL && drain_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_drain_timeout = new ::google::protobuf::Duration;
    new_drain_timeout->CopyFrom(*drain_timeout);
    drain_timeout = new_drain_timeout;
  }
  drain_timeout_ = drain_timeout;
  if (drain_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
}

// .envoy.api.v2.filter.AccessLog access_log = 13;
bool HttpConnectionManager::has_access_log() const {
  return this != internal_default_instance() && access_log_ != NULL;
}
void HttpConnectionManager::clear_access_log() {
  if (GetArenaNoVirtual() == NULL && access_log_ != NULL) delete access_log_;
  access_log_ = NULL;
}
const ::envoy::api::v2::filter::AccessLog& HttpConnectionManager::access_log() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return access_log_ != NULL ? *access_log_
                         : *::envoy::api::v2::filter::AccessLog::internal_default_instance();
}
::envoy::api::v2::filter::AccessLog* HttpConnectionManager::mutable_access_log() {
  
  if (access_log_ == NULL) {
    access_log_ = new ::envoy::api::v2::filter::AccessLog;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return access_log_;
}
::envoy::api::v2::filter::AccessLog* HttpConnectionManager::release_access_log() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.access_log)
  
  ::envoy::api::v2::filter::AccessLog* temp = access_log_;
  access_log_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_access_log(::envoy::api::v2::filter::AccessLog* access_log) {
  delete access_log_;
  access_log_ = access_log;
  if (access_log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.access_log)
}

// .google.protobuf.BoolValue use_remote_address = 14;
bool HttpConnectionManager::has_use_remote_address() const {
  return this != internal_default_instance() && use_remote_address_ != NULL;
}
void HttpConnectionManager::clear_use_remote_address() {
  if (GetArenaNoVirtual() == NULL && use_remote_address_ != NULL) delete use_remote_address_;
  use_remote_address_ = NULL;
}
const ::google::protobuf::BoolValue& HttpConnectionManager::use_remote_address() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
  return use_remote_address_ != NULL ? *use_remote_address_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
::google::protobuf::BoolValue* HttpConnectionManager::mutable_use_remote_address() {
  
  if (use_remote_address_ == NULL) {
    use_remote_address_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
  return use_remote_address_;
}
::google::protobuf::BoolValue* HttpConnectionManager::release_use_remote_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
  
  ::google::protobuf::BoolValue* temp = use_remote_address_;
  use_remote_address_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_use_remote_address(::google::protobuf::BoolValue* use_remote_address) {
  delete use_remote_address_;
  if (use_remote_address != NULL && use_remote_address->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_use_remote_address = new ::google::protobuf::BoolValue;
    new_use_remote_address->CopyFrom(*use_remote_address);
    use_remote_address = new_use_remote_address;
  }
  use_remote_address_ = use_remote_address;
  if (use_remote_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
}

// .google.protobuf.BoolValue generate_request_id = 15;
bool HttpConnectionManager::has_generate_request_id() const {
  return this != internal_default_instance() && generate_request_id_ != NULL;
}
void HttpConnectionManager::clear_generate_request_id() {
  if (GetArenaNoVirtual() == NULL && generate_request_id_ != NULL) delete generate_request_id_;
  generate_request_id_ = NULL;
}
const ::google::protobuf::BoolValue& HttpConnectionManager::generate_request_id() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
  return generate_request_id_ != NULL ? *generate_request_id_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
::google::protobuf::BoolValue* HttpConnectionManager::mutable_generate_request_id() {
  
  if (generate_request_id_ == NULL) {
    generate_request_id_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
  return generate_request_id_;
}
::google::protobuf::BoolValue* HttpConnectionManager::release_generate_request_id() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
  
  ::google::protobuf::BoolValue* temp = generate_request_id_;
  generate_request_id_ = NULL;
  return temp;
}
void HttpConnectionManager::set_allocated_generate_request_id(::google::protobuf::BoolValue* generate_request_id) {
  delete generate_request_id_;
  if (generate_request_id != NULL && generate_request_id->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_generate_request_id = new ::google::protobuf::BoolValue;
    new_generate_request_id->CopyFrom(*generate_request_id);
    generate_request_id = new_generate_request_id;
  }
  generate_request_id_ = generate_request_id;
  if (generate_request_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
}

bool HttpConnectionManager::has_route_specifier() const {
  return route_specifier_case() != ROUTE_SPECIFIER_NOT_SET;
}
void HttpConnectionManager::clear_has_route_specifier() {
  _oneof_case_[0] = ROUTE_SPECIFIER_NOT_SET;
}
bool HttpConnectionManager::has_http_codec_options() const {
  return http_codec_options_case() != HTTP_CODEC_OPTIONS_NOT_SET;
}
void HttpConnectionManager::clear_has_http_codec_options() {
  _oneof_case_[1] = HTTP_CODEC_OPTIONS_NOT_SET;
}
HttpConnectionManager::RouteSpecifierCase HttpConnectionManager::route_specifier_case() const {
  return HttpConnectionManager::RouteSpecifierCase(_oneof_case_[0]);
}
HttpConnectionManager::HttpCodecOptionsCase HttpConnectionManager::http_codec_options_case() const {
  return HttpConnectionManager::HttpCodecOptionsCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
