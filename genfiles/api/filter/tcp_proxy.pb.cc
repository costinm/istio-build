// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/tcp_proxy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/filter/tcp_proxy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
namespace filter {
class TcpProxyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TcpProxy> {
} _TcpProxy_default_instance_;

namespace protobuf_api_2ffilter_2ftcp_5fproxy_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpProxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpProxy, stat_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpProxy, cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpProxy, downstream_idle_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpProxy, upstream_idle_timeout_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TcpProxy)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TcpProxy_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/filter/tcp_proxy.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _TcpProxy_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  _TcpProxy_default_instance_.DefaultConstruct();
  _TcpProxy_default_instance_.get_mutable()->downstream_idle_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _TcpProxy_default_instance_.get_mutable()->upstream_idle_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\032api/filter/tcp_proxy.proto\022\023envoy.api."
      "v2.filter\032\036google/protobuf/duration.prot"
      "o\"\246\001\n\010TcpProxy\022\023\n\013stat_prefix\030\001 \001(\t\022\017\n\007c"
      "luster\030\002 \001(\t\022:\n\027downstream_idle_timeout\030"
      "\003 \001(\0132\031.google.protobuf.Duration\0228\n\025upst"
      "ream_idle_timeout\030\004 \001(\0132\031.google.protobu"
      "f.Durationb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/filter/tcp_proxy.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2ffilter_2ftcp_5fproxy_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TcpProxy::kStatPrefixFieldNumber;
const int TcpProxy::kClusterFieldNumber;
const int TcpProxy::kDownstreamIdleTimeoutFieldNumber;
const int TcpProxy::kUpstreamIdleTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TcpProxy::TcpProxy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2ftcp_5fproxy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.TcpProxy)
}
TcpProxy::TcpProxy(const TcpProxy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stat_prefix().size() > 0) {
    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster().size() > 0) {
    cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_);
  }
  if (from.has_downstream_idle_timeout()) {
    downstream_idle_timeout_ = new ::google::protobuf::Duration(*from.downstream_idle_timeout_);
  } else {
    downstream_idle_timeout_ = NULL;
  }
  if (from.has_upstream_idle_timeout()) {
    upstream_idle_timeout_ = new ::google::protobuf::Duration(*from.upstream_idle_timeout_);
  } else {
    upstream_idle_timeout_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.TcpProxy)
}

void TcpProxy::SharedCtor() {
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&downstream_idle_timeout_, 0, reinterpret_cast<char*>(&upstream_idle_timeout_) -
    reinterpret_cast<char*>(&downstream_idle_timeout_) + sizeof(upstream_idle_timeout_));
  _cached_size_ = 0;
}

TcpProxy::~TcpProxy() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.TcpProxy)
  SharedDtor();
}

void TcpProxy::SharedDtor() {
  stat_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete downstream_idle_timeout_;
  }
  if (this != internal_default_instance()) {
    delete upstream_idle_timeout_;
  }
}

void TcpProxy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TcpProxy::descriptor() {
  protobuf_api_2ffilter_2ftcp_5fproxy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2ftcp_5fproxy_2eproto::file_level_metadata[0].descriptor;
}

const TcpProxy& TcpProxy::default_instance() {
  protobuf_api_2ffilter_2ftcp_5fproxy_2eproto::InitDefaults();
  return *internal_default_instance();
}

TcpProxy* TcpProxy::New(::google::protobuf::Arena* arena) const {
  TcpProxy* n = new TcpProxy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TcpProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.TcpProxy)
  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && downstream_idle_timeout_ != NULL) {
    delete downstream_idle_timeout_;
  }
  downstream_idle_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && upstream_idle_timeout_ != NULL) {
    delete upstream_idle_timeout_;
  }
  upstream_idle_timeout_ = NULL;
}

bool TcpProxy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.TcpProxy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stat_prefix = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stat_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stat_prefix().data(), this->stat_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.TcpProxy.stat_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster().data(), this->cluster().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.TcpProxy.cluster"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration downstream_idle_timeout = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_downstream_idle_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration upstream_idle_timeout = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upstream_idle_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.TcpProxy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.TcpProxy)
  return false;
#undef DO_
}

void TcpProxy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.TcpProxy)
  // string stat_prefix = 1;
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), this->stat_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.TcpProxy.stat_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stat_prefix(), output);
  }

  // string cluster = 2;
  if (this->cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), this->cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.TcpProxy.cluster");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster(), output);
  }

  // .google.protobuf.Duration downstream_idle_timeout = 3;
  if (this->has_downstream_idle_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->downstream_idle_timeout_, output);
  }

  // .google.protobuf.Duration upstream_idle_timeout = 4;
  if (this->has_upstream_idle_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->upstream_idle_timeout_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.TcpProxy)
}

::google::protobuf::uint8* TcpProxy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.TcpProxy)
  // string stat_prefix = 1;
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), this->stat_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.TcpProxy.stat_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stat_prefix(), target);
  }

  // string cluster = 2;
  if (this->cluster().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster().data(), this->cluster().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.TcpProxy.cluster");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster(), target);
  }

  // .google.protobuf.Duration downstream_idle_timeout = 3;
  if (this->has_downstream_idle_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->downstream_idle_timeout_, false, target);
  }

  // .google.protobuf.Duration upstream_idle_timeout = 4;
  if (this->has_upstream_idle_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->upstream_idle_timeout_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.TcpProxy)
  return target;
}

size_t TcpProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.TcpProxy)
  size_t total_size = 0;

  // string stat_prefix = 1;
  if (this->stat_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stat_prefix());
  }

  // string cluster = 2;
  if (this->cluster().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster());
  }

  // .google.protobuf.Duration downstream_idle_timeout = 3;
  if (this->has_downstream_idle_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->downstream_idle_timeout_);
  }

  // .google.protobuf.Duration upstream_idle_timeout = 4;
  if (this->has_upstream_idle_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->upstream_idle_timeout_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpProxy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.TcpProxy)
  GOOGLE_DCHECK_NE(&from, this);
  const TcpProxy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TcpProxy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.TcpProxy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.TcpProxy)
    MergeFrom(*source);
  }
}

void TcpProxy::MergeFrom(const TcpProxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.TcpProxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stat_prefix().size() > 0) {

    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  if (from.cluster().size() > 0) {

    cluster_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_);
  }
  if (from.has_downstream_idle_timeout()) {
    mutable_downstream_idle_timeout()->::google::protobuf::Duration::MergeFrom(from.downstream_idle_timeout());
  }
  if (from.has_upstream_idle_timeout()) {
    mutable_upstream_idle_timeout()->::google::protobuf::Duration::MergeFrom(from.upstream_idle_timeout());
  }
}

void TcpProxy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.TcpProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TcpProxy::CopyFrom(const TcpProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.TcpProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpProxy::IsInitialized() const {
  return true;
}

void TcpProxy::Swap(TcpProxy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TcpProxy::InternalSwap(TcpProxy* other) {
  stat_prefix_.Swap(&other->stat_prefix_);
  cluster_.Swap(&other->cluster_);
  std::swap(downstream_idle_timeout_, other->downstream_idle_timeout_);
  std::swap(upstream_idle_timeout_, other->upstream_idle_timeout_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TcpProxy::GetMetadata() const {
  protobuf_api_2ffilter_2ftcp_5fproxy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2ftcp_5fproxy_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TcpProxy

// string stat_prefix = 1;
void TcpProxy::clear_stat_prefix() {
  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TcpProxy::stat_prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.TcpProxy.stat_prefix)
  return stat_prefix_.GetNoArena();
}
void TcpProxy::set_stat_prefix(const ::std::string& value) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.TcpProxy.stat_prefix)
}
#if LANG_CXX11
void TcpProxy::set_stat_prefix(::std::string&& value) {
  
  stat_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.TcpProxy.stat_prefix)
}
#endif
void TcpProxy::set_stat_prefix(const char* value) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.TcpProxy.stat_prefix)
}
void TcpProxy::set_stat_prefix(const char* value, size_t size) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.TcpProxy.stat_prefix)
}
::std::string* TcpProxy::mutable_stat_prefix() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.TcpProxy.stat_prefix)
  return stat_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TcpProxy::release_stat_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.TcpProxy.stat_prefix)
  
  return stat_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TcpProxy::set_allocated_stat_prefix(::std::string* stat_prefix) {
  if (stat_prefix != NULL) {
    
  } else {
    
  }
  stat_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stat_prefix);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.TcpProxy.stat_prefix)
}

// string cluster = 2;
void TcpProxy::clear_cluster() {
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TcpProxy::cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.TcpProxy.cluster)
  return cluster_.GetNoArena();
}
void TcpProxy::set_cluster(const ::std::string& value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.TcpProxy.cluster)
}
#if LANG_CXX11
void TcpProxy::set_cluster(::std::string&& value) {
  
  cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.TcpProxy.cluster)
}
#endif
void TcpProxy::set_cluster(const char* value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.TcpProxy.cluster)
}
void TcpProxy::set_cluster(const char* value, size_t size) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.TcpProxy.cluster)
}
::std::string* TcpProxy::mutable_cluster() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.TcpProxy.cluster)
  return cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TcpProxy::release_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.TcpProxy.cluster)
  
  return cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TcpProxy::set_allocated_cluster(::std::string* cluster) {
  if (cluster != NULL) {
    
  } else {
    
  }
  cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.TcpProxy.cluster)
}

// .google.protobuf.Duration downstream_idle_timeout = 3;
bool TcpProxy::has_downstream_idle_timeout() const {
  return this != internal_default_instance() && downstream_idle_timeout_ != NULL;
}
void TcpProxy::clear_downstream_idle_timeout() {
  if (GetArenaNoVirtual() == NULL && downstream_idle_timeout_ != NULL) delete downstream_idle_timeout_;
  downstream_idle_timeout_ = NULL;
}
const ::google::protobuf::Duration& TcpProxy::downstream_idle_timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.TcpProxy.downstream_idle_timeout)
  return downstream_idle_timeout_ != NULL ? *downstream_idle_timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* TcpProxy::mutable_downstream_idle_timeout() {
  
  if (downstream_idle_timeout_ == NULL) {
    downstream_idle_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.TcpProxy.downstream_idle_timeout)
  return downstream_idle_timeout_;
}
::google::protobuf::Duration* TcpProxy::release_downstream_idle_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.TcpProxy.downstream_idle_timeout)
  
  ::google::protobuf::Duration* temp = downstream_idle_timeout_;
  downstream_idle_timeout_ = NULL;
  return temp;
}
void TcpProxy::set_allocated_downstream_idle_timeout(::google::protobuf::Duration* downstream_idle_timeout) {
  delete downstream_idle_timeout_;
  if (downstream_idle_timeout != NULL && downstream_idle_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_downstream_idle_timeout = new ::google::protobuf::Duration;
    new_downstream_idle_timeout->CopyFrom(*downstream_idle_timeout);
    downstream_idle_timeout = new_downstream_idle_timeout;
  }
  downstream_idle_timeout_ = downstream_idle_timeout;
  if (downstream_idle_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.TcpProxy.downstream_idle_timeout)
}

// .google.protobuf.Duration upstream_idle_timeout = 4;
bool TcpProxy::has_upstream_idle_timeout() const {
  return this != internal_default_instance() && upstream_idle_timeout_ != NULL;
}
void TcpProxy::clear_upstream_idle_timeout() {
  if (GetArenaNoVirtual() == NULL && upstream_idle_timeout_ != NULL) delete upstream_idle_timeout_;
  upstream_idle_timeout_ = NULL;
}
const ::google::protobuf::Duration& TcpProxy::upstream_idle_timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.TcpProxy.upstream_idle_timeout)
  return upstream_idle_timeout_ != NULL ? *upstream_idle_timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* TcpProxy::mutable_upstream_idle_timeout() {
  
  if (upstream_idle_timeout_ == NULL) {
    upstream_idle_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.TcpProxy.upstream_idle_timeout)
  return upstream_idle_timeout_;
}
::google::protobuf::Duration* TcpProxy::release_upstream_idle_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.TcpProxy.upstream_idle_timeout)
  
  ::google::protobuf::Duration* temp = upstream_idle_timeout_;
  upstream_idle_timeout_ = NULL;
  return temp;
}
void TcpProxy::set_allocated_upstream_idle_timeout(::google::protobuf::Duration* upstream_idle_timeout) {
  delete upstream_idle_timeout_;
  if (upstream_idle_timeout != NULL && upstream_idle_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_upstream_idle_timeout = new ::google::protobuf::Duration;
    new_upstream_idle_timeout->CopyFrom(*upstream_idle_timeout);
    upstream_idle_timeout = new_upstream_idle_timeout;
  }
  upstream_idle_timeout_ = upstream_idle_timeout;
  if (upstream_idle_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.TcpProxy.upstream_idle_timeout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
