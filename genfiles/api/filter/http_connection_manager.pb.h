// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/http_connection_manager.proto

#ifndef PROTOBUF_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto__INCLUDED
#define PROTOBUF_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "api/base.pb.h"
#include "api/cds.pb.h"
#include "api/rds.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
class CircuitBreakers;
class CircuitBreakersDefaultTypeInternal;
extern CircuitBreakersDefaultTypeInternal _CircuitBreakers_default_instance_;
class CircuitBreakers_Thresholds;
class CircuitBreakers_ThresholdsDefaultTypeInternal;
extern CircuitBreakers_ThresholdsDefaultTypeInternal _CircuitBreakers_Thresholds_default_instance_;
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class Cluster_OutlierDetection;
class Cluster_OutlierDetectionDefaultTypeInternal;
extern Cluster_OutlierDetectionDefaultTypeInternal _Cluster_OutlierDetection_default_instance_;
class DiscoveryRequest;
class DiscoveryRequestDefaultTypeInternal;
extern DiscoveryRequestDefaultTypeInternal _DiscoveryRequest_default_instance_;
class DiscoveryResponse;
class DiscoveryResponseDefaultTypeInternal;
extern DiscoveryResponseDefaultTypeInternal _DiscoveryResponse_default_instance_;
class Endpoint;
class EndpointDefaultTypeInternal;
extern EndpointDefaultTypeInternal _Endpoint_default_instance_;
class ForwardAction;
class ForwardActionDefaultTypeInternal;
extern ForwardActionDefaultTypeInternal _ForwardAction_default_instance_;
class ForwardAction_HashPolicy;
class ForwardAction_HashPolicyDefaultTypeInternal;
extern ForwardAction_HashPolicyDefaultTypeInternal _ForwardAction_HashPolicy_default_instance_;
class ForwardAction_HashPolicy_Header;
class ForwardAction_HashPolicy_HeaderDefaultTypeInternal;
extern ForwardAction_HashPolicy_HeaderDefaultTypeInternal _ForwardAction_HashPolicy_Header_default_instance_;
class ForwardAction_RequestMirrorPolicy;
class ForwardAction_RequestMirrorPolicyDefaultTypeInternal;
extern ForwardAction_RequestMirrorPolicyDefaultTypeInternal _ForwardAction_RequestMirrorPolicy_default_instance_;
class ForwardAction_RetryPolicy;
class ForwardAction_RetryPolicyDefaultTypeInternal;
extern ForwardAction_RetryPolicyDefaultTypeInternal _ForwardAction_RetryPolicy_default_instance_;
class GrpcProtocolOptions;
class GrpcProtocolOptionsDefaultTypeInternal;
extern GrpcProtocolOptionsDefaultTypeInternal _GrpcProtocolOptions_default_instance_;
class HeaderMatcher;
class HeaderMatcherDefaultTypeInternal;
extern HeaderMatcherDefaultTypeInternal _HeaderMatcher_default_instance_;
class HeaderValue;
class HeaderValueDefaultTypeInternal;
extern HeaderValueDefaultTypeInternal _HeaderValue_default_instance_;
class HeaderValueOption;
class HeaderValueOptionDefaultTypeInternal;
extern HeaderValueOptionDefaultTypeInternal _HeaderValueOption_default_instance_;
class Http1ProtocolOptions;
class Http1ProtocolOptionsDefaultTypeInternal;
extern Http1ProtocolOptionsDefaultTypeInternal _Http1ProtocolOptions_default_instance_;
class Http2ProtocolOptions;
class Http2ProtocolOptionsDefaultTypeInternal;
extern Http2ProtocolOptionsDefaultTypeInternal _Http2ProtocolOptions_default_instance_;
class Locality;
class LocalityDefaultTypeInternal;
extern LocalityDefaultTypeInternal _Locality_default_instance_;
class Metadata;
class MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class RateLimit;
class RateLimitDefaultTypeInternal;
extern RateLimitDefaultTypeInternal _RateLimit_default_instance_;
class RateLimit_RateLimitAction;
class RateLimit_RateLimitActionDefaultTypeInternal;
extern RateLimit_RateLimitActionDefaultTypeInternal _RateLimit_RateLimitAction_default_instance_;
class RateLimit_RateLimitAction_HeaderValueMatch;
class RateLimit_RateLimitAction_HeaderValueMatchDefaultTypeInternal;
extern RateLimit_RateLimitAction_HeaderValueMatchDefaultTypeInternal _RateLimit_RateLimitAction_HeaderValueMatch_default_instance_;
class RateLimit_RateLimitAction_RequestHeaders;
class RateLimit_RateLimitAction_RequestHeadersDefaultTypeInternal;
extern RateLimit_RateLimitAction_RequestHeadersDefaultTypeInternal _RateLimit_RateLimitAction_RequestHeaders_default_instance_;
class RedirectAction;
class RedirectActionDefaultTypeInternal;
extern RedirectActionDefaultTypeInternal _RedirectAction_default_instance_;
class Route;
class RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
class RouteConfiguration;
class RouteConfigurationDefaultTypeInternal;
extern RouteConfigurationDefaultTypeInternal _RouteConfiguration_default_instance_;
class RouteMatch;
class RouteMatchDefaultTypeInternal;
extern RouteMatchDefaultTypeInternal _RouteMatch_default_instance_;
class RuntimeUInt32;
class RuntimeUInt32DefaultTypeInternal;
extern RuntimeUInt32DefaultTypeInternal _RuntimeUInt32_default_instance_;
class TcpProtocolOptions;
class TcpProtocolOptionsDefaultTypeInternal;
extern TcpProtocolOptionsDefaultTypeInternal _TcpProtocolOptions_default_instance_;
class VirtualCluster;
class VirtualClusterDefaultTypeInternal;
extern VirtualClusterDefaultTypeInternal _VirtualCluster_default_instance_;
class VirtualHost;
class VirtualHostDefaultTypeInternal;
extern VirtualHostDefaultTypeInternal _VirtualHost_default_instance_;
class WeightedCluster;
class WeightedClusterDefaultTypeInternal;
extern WeightedClusterDefaultTypeInternal _WeightedCluster_default_instance_;
class WeightedCluster_ClusterWeight;
class WeightedCluster_ClusterWeightDefaultTypeInternal;
extern WeightedCluster_ClusterWeightDefaultTypeInternal _WeightedCluster_ClusterWeight_default_instance_;
namespace filter {
class AccessLog;
class AccessLogDefaultTypeInternal;
extern AccessLogDefaultTypeInternal _AccessLog_default_instance_;
class AccessLogFilter;
class AccessLogFilterDefaultTypeInternal;
extern AccessLogFilterDefaultTypeInternal _AccessLogFilter_default_instance_;
class AndFilter;
class AndFilterDefaultTypeInternal;
extern AndFilterDefaultTypeInternal _AndFilter_default_instance_;
class DurationFilter;
class DurationFilterDefaultTypeInternal;
extern DurationFilterDefaultTypeInternal _DurationFilter_default_instance_;
class HeaderSelection;
class HeaderSelectionDefaultTypeInternal;
extern HeaderSelectionDefaultTypeInternal _HeaderSelection_default_instance_;
class HttpConnectionManager;
class HttpConnectionManagerDefaultTypeInternal;
extern HttpConnectionManagerDefaultTypeInternal _HttpConnectionManager_default_instance_;
class HttpConnectionManager_Tracing;
class HttpConnectionManager_TracingDefaultTypeInternal;
extern HttpConnectionManager_TracingDefaultTypeInternal _HttpConnectionManager_Tracing_default_instance_;
class HttpFilter;
class HttpFilterDefaultTypeInternal;
extern HttpFilterDefaultTypeInternal _HttpFilter_default_instance_;
class NotHealthCheckFilter;
class NotHealthCheckFilterDefaultTypeInternal;
extern NotHealthCheckFilterDefaultTypeInternal _NotHealthCheckFilter_default_instance_;
class OrFilter;
class OrFilterDefaultTypeInternal;
extern OrFilterDefaultTypeInternal _OrFilter_default_instance_;
class Rds;
class RdsDefaultTypeInternal;
extern RdsDefaultTypeInternal _Rds_default_instance_;
class RuntimeFilter;
class RuntimeFilterDefaultTypeInternal;
extern RuntimeFilterDefaultTypeInternal _RuntimeFilter_default_instance_;
class StatusCodeFilter;
class StatusCodeFilterDefaultTypeInternal;
extern StatusCodeFilterDefaultTypeInternal _StatusCodeFilter_default_instance_;
class TraceableFilter;
class TraceableFilterDefaultTypeInternal;
extern TraceableFilterDefaultTypeInternal _TraceableFilter_default_instance_;
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace google {
namespace protobuf {
class BoolValue;
class BoolValueDefaultTypeInternal;
extern BoolValueDefaultTypeInternal _BoolValue_default_instance_;
class BytesValue;
class BytesValueDefaultTypeInternal;
extern BytesValueDefaultTypeInternal _BytesValue_default_instance_;
class DoubleValue;
class DoubleValueDefaultTypeInternal;
extern DoubleValueDefaultTypeInternal _DoubleValue_default_instance_;
class Duration;
class DurationDefaultTypeInternal;
extern DurationDefaultTypeInternal _Duration_default_instance_;
class FloatValue;
class FloatValueDefaultTypeInternal;
extern FloatValueDefaultTypeInternal _FloatValue_default_instance_;
class Int32Value;
class Int32ValueDefaultTypeInternal;
extern Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
class Int64Value;
class Int64ValueDefaultTypeInternal;
extern Int64ValueDefaultTypeInternal _Int64Value_default_instance_;
class ListValue;
class ListValueDefaultTypeInternal;
extern ListValueDefaultTypeInternal _ListValue_default_instance_;
class StringValue;
class StringValueDefaultTypeInternal;
extern StringValueDefaultTypeInternal _StringValue_default_instance_;
class Struct;
class StructDefaultTypeInternal;
extern StructDefaultTypeInternal _Struct_default_instance_;
class UInt32Value;
class UInt32ValueDefaultTypeInternal;
extern UInt32ValueDefaultTypeInternal _UInt32Value_default_instance_;
class UInt64Value;
class UInt64ValueDefaultTypeInternal;
extern UInt64ValueDefaultTypeInternal _UInt64Value_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace envoy {
namespace api {
namespace v2 {
namespace filter {

namespace protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto

enum StatusCodeFilter_Op {
  StatusCodeFilter_Op_EQ = 0,
  StatusCodeFilter_Op_GE = 1,
  StatusCodeFilter_Op_StatusCodeFilter_Op_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatusCodeFilter_Op_StatusCodeFilter_Op_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatusCodeFilter_Op_IsValid(int value);
const StatusCodeFilter_Op StatusCodeFilter_Op_Op_MIN = StatusCodeFilter_Op_EQ;
const StatusCodeFilter_Op StatusCodeFilter_Op_Op_MAX = StatusCodeFilter_Op_GE;
const int StatusCodeFilter_Op_Op_ARRAYSIZE = StatusCodeFilter_Op_Op_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCodeFilter_Op_descriptor();
inline const ::std::string& StatusCodeFilter_Op_Name(StatusCodeFilter_Op value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCodeFilter_Op_descriptor(), value);
}
inline bool StatusCodeFilter_Op_Parse(
    const ::std::string& name, StatusCodeFilter_Op* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCodeFilter_Op>(
    StatusCodeFilter_Op_descriptor(), name, value);
}
enum DurationFilter_Op {
  DurationFilter_Op_EQ = 0,
  DurationFilter_Op_GE = 1,
  DurationFilter_Op_DurationFilter_Op_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DurationFilter_Op_DurationFilter_Op_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DurationFilter_Op_IsValid(int value);
const DurationFilter_Op DurationFilter_Op_Op_MIN = DurationFilter_Op_EQ;
const DurationFilter_Op DurationFilter_Op_Op_MAX = DurationFilter_Op_GE;
const int DurationFilter_Op_Op_ARRAYSIZE = DurationFilter_Op_Op_MAX + 1;

const ::google::protobuf::EnumDescriptor* DurationFilter_Op_descriptor();
inline const ::std::string& DurationFilter_Op_Name(DurationFilter_Op value) {
  return ::google::protobuf::internal::NameOfEnum(
    DurationFilter_Op_descriptor(), value);
}
inline bool DurationFilter_Op_Parse(
    const ::std::string& name, DurationFilter_Op* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DurationFilter_Op>(
    DurationFilter_Op_descriptor(), name, value);
}
enum HttpFilter_Type {
  HttpFilter_Type_BOTH = 0,
  HttpFilter_Type_DECODER = 1,
  HttpFilter_Type_ENCODER = 2,
  HttpFilter_Type_HttpFilter_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HttpFilter_Type_HttpFilter_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HttpFilter_Type_IsValid(int value);
const HttpFilter_Type HttpFilter_Type_Type_MIN = HttpFilter_Type_BOTH;
const HttpFilter_Type HttpFilter_Type_Type_MAX = HttpFilter_Type_ENCODER;
const int HttpFilter_Type_Type_ARRAYSIZE = HttpFilter_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpFilter_Type_descriptor();
inline const ::std::string& HttpFilter_Type_Name(HttpFilter_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpFilter_Type_descriptor(), value);
}
inline bool HttpFilter_Type_Parse(
    const ::std::string& name, HttpFilter_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpFilter_Type>(
    HttpFilter_Type_descriptor(), name, value);
}
enum HttpConnectionManager_Tracing_OperationName {
  HttpConnectionManager_Tracing_OperationName_INGRESS = 0,
  HttpConnectionManager_Tracing_OperationName_EGRESS = 1,
  HttpConnectionManager_Tracing_OperationName_HttpConnectionManager_Tracing_OperationName_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HttpConnectionManager_Tracing_OperationName_HttpConnectionManager_Tracing_OperationName_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HttpConnectionManager_Tracing_OperationName_IsValid(int value);
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing_OperationName_OperationName_MIN = HttpConnectionManager_Tracing_OperationName_INGRESS;
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing_OperationName_OperationName_MAX = HttpConnectionManager_Tracing_OperationName_EGRESS;
const int HttpConnectionManager_Tracing_OperationName_OperationName_ARRAYSIZE = HttpConnectionManager_Tracing_OperationName_OperationName_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpConnectionManager_Tracing_OperationName_descriptor();
inline const ::std::string& HttpConnectionManager_Tracing_OperationName_Name(HttpConnectionManager_Tracing_OperationName value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpConnectionManager_Tracing_OperationName_descriptor(), value);
}
inline bool HttpConnectionManager_Tracing_OperationName_Parse(
    const ::std::string& name, HttpConnectionManager_Tracing_OperationName* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpConnectionManager_Tracing_OperationName>(
    HttpConnectionManager_Tracing_OperationName_descriptor(), name, value);
}
enum HttpConnectionManager_CodecType {
  HttpConnectionManager_CodecType_AUTO = 0,
  HttpConnectionManager_CodecType_HTTP1 = 1,
  HttpConnectionManager_CodecType_HTTP2 = 2,
  HttpConnectionManager_CodecType_HttpConnectionManager_CodecType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HttpConnectionManager_CodecType_HttpConnectionManager_CodecType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HttpConnectionManager_CodecType_IsValid(int value);
const HttpConnectionManager_CodecType HttpConnectionManager_CodecType_CodecType_MIN = HttpConnectionManager_CodecType_AUTO;
const HttpConnectionManager_CodecType HttpConnectionManager_CodecType_CodecType_MAX = HttpConnectionManager_CodecType_HTTP2;
const int HttpConnectionManager_CodecType_CodecType_ARRAYSIZE = HttpConnectionManager_CodecType_CodecType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpConnectionManager_CodecType_descriptor();
inline const ::std::string& HttpConnectionManager_CodecType_Name(HttpConnectionManager_CodecType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpConnectionManager_CodecType_descriptor(), value);
}
inline bool HttpConnectionManager_CodecType_Parse(
    const ::std::string& name, HttpConnectionManager_CodecType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpConnectionManager_CodecType>(
    HttpConnectionManager_CodecType_descriptor(), name, value);
}
// ===================================================================

class Rds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.Rds) */ {
 public:
  Rds();
  virtual ~Rds();

  Rds(const Rds& from);

  inline Rds& operator=(const Rds& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rds& default_instance();

  static inline const Rds* internal_default_instance() {
    return reinterpret_cast<const Rds*>(
               &_Rds_default_instance_);
  }

  void Swap(Rds* other);

  // implements Message ----------------------------------------------

  inline Rds* New() const PROTOBUF_FINAL { return New(NULL); }

  Rds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rds& from);
  void MergeFrom(const Rds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cluster = 1;
  void clear_cluster();
  static const int kClusterFieldNumber = 1;
  const ::std::string& cluster() const;
  void set_cluster(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster(::std::string&& value);
  #endif
  void set_cluster(const char* value);
  void set_cluster(const char* value, size_t size);
  ::std::string* mutable_cluster();
  ::std::string* release_cluster();
  void set_allocated_cluster(::std::string* cluster);

  // string router_config_name = 2;
  void clear_router_config_name();
  static const int kRouterConfigNameFieldNumber = 2;
  const ::std::string& router_config_name() const;
  void set_router_config_name(const ::std::string& value);
  #if LANG_CXX11
  void set_router_config_name(::std::string&& value);
  #endif
  void set_router_config_name(const char* value);
  void set_router_config_name(const char* value, size_t size);
  ::std::string* mutable_router_config_name();
  ::std::string* release_router_config_name();
  void set_allocated_router_config_name(::std::string* router_config_name);

  // .google.protobuf.Duration refresh_delay = 3;
  bool has_refresh_delay() const;
  void clear_refresh_delay();
  static const int kRefreshDelayFieldNumber = 3;
  const ::google::protobuf::Duration& refresh_delay() const;
  ::google::protobuf::Duration* mutable_refresh_delay();
  ::google::protobuf::Duration* release_refresh_delay();
  void set_allocated_refresh_delay(::google::protobuf::Duration* refresh_delay);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.Rds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cluster_;
  ::google::protobuf::internal::ArenaStringPtr router_config_name_;
  ::google::protobuf::Duration* refresh_delay_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatusCodeFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.StatusCodeFilter) */ {
 public:
  StatusCodeFilter();
  virtual ~StatusCodeFilter();

  StatusCodeFilter(const StatusCodeFilter& from);

  inline StatusCodeFilter& operator=(const StatusCodeFilter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusCodeFilter& default_instance();

  static inline const StatusCodeFilter* internal_default_instance() {
    return reinterpret_cast<const StatusCodeFilter*>(
               &_StatusCodeFilter_default_instance_);
  }

  void Swap(StatusCodeFilter* other);

  // implements Message ----------------------------------------------

  inline StatusCodeFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  StatusCodeFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatusCodeFilter& from);
  void MergeFrom(const StatusCodeFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatusCodeFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StatusCodeFilter_Op Op;
  static const Op EQ =
    StatusCodeFilter_Op_EQ;
  static const Op GE =
    StatusCodeFilter_Op_GE;
  static inline bool Op_IsValid(int value) {
    return StatusCodeFilter_Op_IsValid(value);
  }
  static const Op Op_MIN =
    StatusCodeFilter_Op_Op_MIN;
  static const Op Op_MAX =
    StatusCodeFilter_Op_Op_MAX;
  static const int Op_ARRAYSIZE =
    StatusCodeFilter_Op_Op_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Op_descriptor() {
    return StatusCodeFilter_Op_descriptor();
  }
  static inline const ::std::string& Op_Name(Op value) {
    return StatusCodeFilter_Op_Name(value);
  }
  static inline bool Op_Parse(const ::std::string& name,
      Op* value) {
    return StatusCodeFilter_Op_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::envoy::api::v2::RuntimeUInt32& value() const;
  ::envoy::api::v2::RuntimeUInt32* mutable_value();
  ::envoy::api::v2::RuntimeUInt32* release_value();
  void set_allocated_value(::envoy::api::v2::RuntimeUInt32* value);

  // .envoy.api.v2.filter.StatusCodeFilter.Op op = 1;
  void clear_op();
  static const int kOpFieldNumber = 1;
  ::envoy::api::v2::filter::StatusCodeFilter_Op op() const;
  void set_op(::envoy::api::v2::filter::StatusCodeFilter_Op value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.StatusCodeFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::envoy::api::v2::RuntimeUInt32* value_;
  int op_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DurationFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.DurationFilter) */ {
 public:
  DurationFilter();
  virtual ~DurationFilter();

  DurationFilter(const DurationFilter& from);

  inline DurationFilter& operator=(const DurationFilter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DurationFilter& default_instance();

  static inline const DurationFilter* internal_default_instance() {
    return reinterpret_cast<const DurationFilter*>(
               &_DurationFilter_default_instance_);
  }

  void Swap(DurationFilter* other);

  // implements Message ----------------------------------------------

  inline DurationFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  DurationFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DurationFilter& from);
  void MergeFrom(const DurationFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DurationFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DurationFilter_Op Op;
  static const Op EQ =
    DurationFilter_Op_EQ;
  static const Op GE =
    DurationFilter_Op_GE;
  static inline bool Op_IsValid(int value) {
    return DurationFilter_Op_IsValid(value);
  }
  static const Op Op_MIN =
    DurationFilter_Op_Op_MIN;
  static const Op Op_MAX =
    DurationFilter_Op_Op_MAX;
  static const int Op_ARRAYSIZE =
    DurationFilter_Op_Op_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Op_descriptor() {
    return DurationFilter_Op_descriptor();
  }
  static inline const ::std::string& Op_Name(Op value) {
    return DurationFilter_Op_Name(value);
  }
  static inline bool Op_Parse(const ::std::string& name,
      Op* value) {
    return DurationFilter_Op_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::envoy::api::v2::RuntimeUInt32& value() const;
  ::envoy::api::v2::RuntimeUInt32* mutable_value();
  ::envoy::api::v2::RuntimeUInt32* release_value();
  void set_allocated_value(::envoy::api::v2::RuntimeUInt32* value);

  // .envoy.api.v2.filter.DurationFilter.Op op = 1;
  void clear_op();
  static const int kOpFieldNumber = 1;
  ::envoy::api::v2::filter::DurationFilter_Op op() const;
  void set_op(::envoy::api::v2::filter::DurationFilter_Op value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.DurationFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::envoy::api::v2::RuntimeUInt32* value_;
  int op_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotHealthCheckFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.NotHealthCheckFilter) */ {
 public:
  NotHealthCheckFilter();
  virtual ~NotHealthCheckFilter();

  NotHealthCheckFilter(const NotHealthCheckFilter& from);

  inline NotHealthCheckFilter& operator=(const NotHealthCheckFilter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotHealthCheckFilter& default_instance();

  static inline const NotHealthCheckFilter* internal_default_instance() {
    return reinterpret_cast<const NotHealthCheckFilter*>(
               &_NotHealthCheckFilter_default_instance_);
  }

  void Swap(NotHealthCheckFilter* other);

  // implements Message ----------------------------------------------

  inline NotHealthCheckFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  NotHealthCheckFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotHealthCheckFilter& from);
  void MergeFrom(const NotHealthCheckFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotHealthCheckFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.NotHealthCheckFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TraceableFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.TraceableFilter) */ {
 public:
  TraceableFilter();
  virtual ~TraceableFilter();

  TraceableFilter(const TraceableFilter& from);

  inline TraceableFilter& operator=(const TraceableFilter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TraceableFilter& default_instance();

  static inline const TraceableFilter* internal_default_instance() {
    return reinterpret_cast<const TraceableFilter*>(
               &_TraceableFilter_default_instance_);
  }

  void Swap(TraceableFilter* other);

  // implements Message ----------------------------------------------

  inline TraceableFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  TraceableFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TraceableFilter& from);
  void MergeFrom(const TraceableFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TraceableFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.TraceableFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RuntimeFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.RuntimeFilter) */ {
 public:
  RuntimeFilter();
  virtual ~RuntimeFilter();

  RuntimeFilter(const RuntimeFilter& from);

  inline RuntimeFilter& operator=(const RuntimeFilter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RuntimeFilter& default_instance();

  static inline const RuntimeFilter* internal_default_instance() {
    return reinterpret_cast<const RuntimeFilter*>(
               &_RuntimeFilter_default_instance_);
  }

  void Swap(RuntimeFilter* other);

  // implements Message ----------------------------------------------

  inline RuntimeFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  RuntimeFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RuntimeFilter& from);
  void MergeFrom(const RuntimeFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RuntimeFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string runtime_key = 1;
  void clear_runtime_key();
  static const int kRuntimeKeyFieldNumber = 1;
  const ::std::string& runtime_key() const;
  void set_runtime_key(const ::std::string& value);
  #if LANG_CXX11
  void set_runtime_key(::std::string&& value);
  #endif
  void set_runtime_key(const char* value);
  void set_runtime_key(const char* value, size_t size);
  ::std::string* mutable_runtime_key();
  ::std::string* release_runtime_key();
  void set_allocated_runtime_key(::std::string* runtime_key);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.RuntimeFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr runtime_key_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AndFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.AndFilter) */ {
 public:
  AndFilter();
  virtual ~AndFilter();

  AndFilter(const AndFilter& from);

  inline AndFilter& operator=(const AndFilter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AndFilter& default_instance();

  static inline const AndFilter* internal_default_instance() {
    return reinterpret_cast<const AndFilter*>(
               &_AndFilter_default_instance_);
  }

  void Swap(AndFilter* other);

  // implements Message ----------------------------------------------

  inline AndFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  AndFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AndFilter& from);
  void MergeFrom(const AndFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AndFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
  int filters_size() const;
  void clear_filters();
  static const int kFiltersFieldNumber = 1;
  const ::envoy::api::v2::filter::AccessLogFilter& filters(int index) const;
  ::envoy::api::v2::filter::AccessLogFilter* mutable_filters(int index);
  ::envoy::api::v2::filter::AccessLogFilter* add_filters();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >*
      mutable_filters();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >&
      filters() const;

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.AndFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter > filters_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OrFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.OrFilter) */ {
 public:
  OrFilter();
  virtual ~OrFilter();

  OrFilter(const OrFilter& from);

  inline OrFilter& operator=(const OrFilter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrFilter& default_instance();

  static inline const OrFilter* internal_default_instance() {
    return reinterpret_cast<const OrFilter*>(
               &_OrFilter_default_instance_);
  }

  void Swap(OrFilter* other);

  // implements Message ----------------------------------------------

  inline OrFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  OrFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OrFilter& from);
  void MergeFrom(const OrFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OrFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
  int filters_size() const;
  void clear_filters();
  static const int kFiltersFieldNumber = 2;
  const ::envoy::api::v2::filter::AccessLogFilter& filters(int index) const;
  ::envoy::api::v2::filter::AccessLogFilter* mutable_filters(int index);
  ::envoy::api::v2::filter::AccessLogFilter* add_filters();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >*
      mutable_filters();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >&
      filters() const;

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.OrFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter > filters_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccessLogFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.AccessLogFilter) */ {
 public:
  AccessLogFilter();
  virtual ~AccessLogFilter();

  AccessLogFilter(const AccessLogFilter& from);

  inline AccessLogFilter& operator=(const AccessLogFilter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessLogFilter& default_instance();

  enum FilterSpecifierCase {
    kStatusCode = 1,
    kDuration = 2,
    kNotHealthCheck = 3,
    kTraceable = 4,
    kRuntime = 5,
    kAnd = 6,
    kOr = 7,
    FILTER_SPECIFIER_NOT_SET = 0,
  };

  static inline const AccessLogFilter* internal_default_instance() {
    return reinterpret_cast<const AccessLogFilter*>(
               &_AccessLogFilter_default_instance_);
  }

  void Swap(AccessLogFilter* other);

  // implements Message ----------------------------------------------

  inline AccessLogFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  AccessLogFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccessLogFilter& from);
  void MergeFrom(const AccessLogFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccessLogFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .envoy.api.v2.filter.StatusCodeFilter status_code = 1;
  bool has_status_code() const;
  void clear_status_code();
  static const int kStatusCodeFieldNumber = 1;
  const ::envoy::api::v2::filter::StatusCodeFilter& status_code() const;
  ::envoy::api::v2::filter::StatusCodeFilter* mutable_status_code();
  ::envoy::api::v2::filter::StatusCodeFilter* release_status_code();
  void set_allocated_status_code(::envoy::api::v2::filter::StatusCodeFilter* status_code);

  // .envoy.api.v2.filter.DurationFilter duration = 2;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  const ::envoy::api::v2::filter::DurationFilter& duration() const;
  ::envoy::api::v2::filter::DurationFilter* mutable_duration();
  ::envoy::api::v2::filter::DurationFilter* release_duration();
  void set_allocated_duration(::envoy::api::v2::filter::DurationFilter* duration);

  // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check = 3;
  bool has_not_health_check() const;
  void clear_not_health_check();
  static const int kNotHealthCheckFieldNumber = 3;
  const ::envoy::api::v2::filter::NotHealthCheckFilter& not_health_check() const;
  ::envoy::api::v2::filter::NotHealthCheckFilter* mutable_not_health_check();
  ::envoy::api::v2::filter::NotHealthCheckFilter* release_not_health_check();
  void set_allocated_not_health_check(::envoy::api::v2::filter::NotHealthCheckFilter* not_health_check);

  // .envoy.api.v2.filter.TraceableFilter traceable = 4;
  bool has_traceable() const;
  void clear_traceable();
  static const int kTraceableFieldNumber = 4;
  const ::envoy::api::v2::filter::TraceableFilter& traceable() const;
  ::envoy::api::v2::filter::TraceableFilter* mutable_traceable();
  ::envoy::api::v2::filter::TraceableFilter* release_traceable();
  void set_allocated_traceable(::envoy::api::v2::filter::TraceableFilter* traceable);

  // .envoy.api.v2.filter.RuntimeFilter runtime = 5;
  bool has_runtime() const;
  void clear_runtime();
  static const int kRuntimeFieldNumber = 5;
  const ::envoy::api::v2::filter::RuntimeFilter& runtime() const;
  ::envoy::api::v2::filter::RuntimeFilter* mutable_runtime();
  ::envoy::api::v2::filter::RuntimeFilter* release_runtime();
  void set_allocated_runtime(::envoy::api::v2::filter::RuntimeFilter* runtime);

  // .envoy.api.v2.filter.AndFilter and = 6;
  bool has_and_() const;
  void clear_and_();
  static const int kAndFieldNumber = 6;
  const ::envoy::api::v2::filter::AndFilter& and_() const;
  ::envoy::api::v2::filter::AndFilter* mutable_and_();
  ::envoy::api::v2::filter::AndFilter* release_and_();
  void set_allocated_and_(::envoy::api::v2::filter::AndFilter* and_);

  // .envoy.api.v2.filter.OrFilter or = 7;
  bool has_or_() const;
  void clear_or_();
  static const int kOrFieldNumber = 7;
  const ::envoy::api::v2::filter::OrFilter& or_() const;
  ::envoy::api::v2::filter::OrFilter* mutable_or_();
  ::envoy::api::v2::filter::OrFilter* release_or_();
  void set_allocated_or_(::envoy::api::v2::filter::OrFilter* or_);

  FilterSpecifierCase filter_specifier_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.AccessLogFilter)
 private:
  void set_has_status_code();
  void set_has_duration();
  void set_has_not_health_check();
  void set_has_traceable();
  void set_has_runtime();
  void set_has_and_();
  void set_has_or_();

  inline bool has_filter_specifier() const;
  void clear_filter_specifier();
  inline void clear_has_filter_specifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union FilterSpecifierUnion {
    FilterSpecifierUnion() {}
    ::envoy::api::v2::filter::StatusCodeFilter* status_code_;
    ::envoy::api::v2::filter::DurationFilter* duration_;
    ::envoy::api::v2::filter::NotHealthCheckFilter* not_health_check_;
    ::envoy::api::v2::filter::TraceableFilter* traceable_;
    ::envoy::api::v2::filter::RuntimeFilter* runtime_;
    ::envoy::api::v2::filter::AndFilter* and__;
    ::envoy::api::v2::filter::OrFilter* or__;
  } filter_specifier_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeaderSelection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.HeaderSelection) */ {
 public:
  HeaderSelection();
  virtual ~HeaderSelection();

  HeaderSelection(const HeaderSelection& from);

  inline HeaderSelection& operator=(const HeaderSelection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeaderSelection& default_instance();

  static inline const HeaderSelection* internal_default_instance() {
    return reinterpret_cast<const HeaderSelection*>(
               &_HeaderSelection_default_instance_);
  }

  void Swap(HeaderSelection* other);

  // implements Message ----------------------------------------------

  inline HeaderSelection* New() const PROTOBUF_FINAL { return New(NULL); }

  HeaderSelection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeaderSelection& from);
  void MergeFrom(const HeaderSelection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeaderSelection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string request_headers = 1;
  int request_headers_size() const;
  void clear_request_headers();
  static const int kRequestHeadersFieldNumber = 1;
  const ::std::string& request_headers(int index) const;
  ::std::string* mutable_request_headers(int index);
  void set_request_headers(int index, const ::std::string& value);
  void set_request_headers(int index, const char* value);
  void set_request_headers(int index, const char* value, size_t size);
  ::std::string* add_request_headers();
  void add_request_headers(const ::std::string& value);
  void add_request_headers(const char* value);
  void add_request_headers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& request_headers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_request_headers();

  // repeated string response_headers = 2;
  int response_headers_size() const;
  void clear_response_headers();
  static const int kResponseHeadersFieldNumber = 2;
  const ::std::string& response_headers(int index) const;
  ::std::string* mutable_response_headers(int index);
  void set_response_headers(int index, const ::std::string& value);
  void set_response_headers(int index, const char* value);
  void set_response_headers(int index, const char* value, size_t size);
  ::std::string* add_response_headers();
  void add_response_headers(const ::std::string& value);
  void add_response_headers(const char* value);
  void add_response_headers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& response_headers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_response_headers();

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.HeaderSelection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> request_headers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> response_headers_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccessLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.AccessLog) */ {
 public:
  AccessLog();
  virtual ~AccessLog();

  AccessLog(const AccessLog& from);

  inline AccessLog& operator=(const AccessLog& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessLog& default_instance();

  enum DestinationCase {
    kPath = 1,
    kCluster = 5,
    DESTINATION_NOT_SET = 0,
  };

  enum ContentCase {
    kFormat = 2,
    kHeaders = 4,
    CONTENT_NOT_SET = 0,
  };

  static inline const AccessLog* internal_default_instance() {
    return reinterpret_cast<const AccessLog*>(
               &_AccessLog_default_instance_);
  }

  void Swap(AccessLog* other);

  // implements Message ----------------------------------------------

  inline AccessLog* New() const PROTOBUF_FINAL { return New(NULL); }

  AccessLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccessLog& from);
  void MergeFrom(const AccessLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccessLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .envoy.api.v2.filter.AccessLogFilter filter = 3;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 3;
  const ::envoy::api::v2::filter::AccessLogFilter& filter() const;
  ::envoy::api::v2::filter::AccessLogFilter* mutable_filter();
  ::envoy::api::v2::filter::AccessLogFilter* release_filter();
  void set_allocated_filter(::envoy::api::v2::filter::AccessLogFilter* filter);

  // string path = 1;
  private:
  bool has_path() const;
  public:
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string cluster = 5;
  private:
  bool has_cluster() const;
  public:
  void clear_cluster();
  static const int kClusterFieldNumber = 5;
  const ::std::string& cluster() const;
  void set_cluster(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster(::std::string&& value);
  #endif
  void set_cluster(const char* value);
  void set_cluster(const char* value, size_t size);
  ::std::string* mutable_cluster();
  ::std::string* release_cluster();
  void set_allocated_cluster(::std::string* cluster);

  // string format = 2;
  private:
  bool has_format() const;
  public:
  void clear_format();
  static const int kFormatFieldNumber = 2;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  #if LANG_CXX11
  void set_format(::std::string&& value);
  #endif
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // .envoy.api.v2.filter.HeaderSelection headers = 4;
  bool has_headers() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 4;
  const ::envoy::api::v2::filter::HeaderSelection& headers() const;
  ::envoy::api::v2::filter::HeaderSelection* mutable_headers();
  ::envoy::api::v2::filter::HeaderSelection* release_headers();
  void set_allocated_headers(::envoy::api::v2::filter::HeaderSelection* headers);

  DestinationCase destination_case() const;
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.AccessLog)
 private:
  void set_has_path();
  void set_has_cluster();
  void set_has_format();
  void set_has_headers();

  inline bool has_destination() const;
  void clear_destination();
  inline void clear_has_destination();

  inline bool has_content() const;
  void clear_content();
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::envoy::api::v2::filter::AccessLogFilter* filter_;
  union DestinationUnion {
    DestinationUnion() {}
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr cluster_;
  } destination_;
  union ContentUnion {
    ContentUnion() {}
    ::google::protobuf::internal::ArenaStringPtr format_;
    ::envoy::api::v2::filter::HeaderSelection* headers_;
  } content_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HttpFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.HttpFilter) */ {
 public:
  HttpFilter();
  virtual ~HttpFilter();

  HttpFilter(const HttpFilter& from);

  inline HttpFilter& operator=(const HttpFilter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpFilter& default_instance();

  static inline const HttpFilter* internal_default_instance() {
    return reinterpret_cast<const HttpFilter*>(
               &_HttpFilter_default_instance_);
  }

  void Swap(HttpFilter* other);

  // implements Message ----------------------------------------------

  inline HttpFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpFilter& from);
  void MergeFrom(const HttpFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HttpFilter_Type Type;
  static const Type BOTH =
    HttpFilter_Type_BOTH;
  static const Type DECODER =
    HttpFilter_Type_DECODER;
  static const Type ENCODER =
    HttpFilter_Type_ENCODER;
  static inline bool Type_IsValid(int value) {
    return HttpFilter_Type_IsValid(value);
  }
  static const Type Type_MIN =
    HttpFilter_Type_Type_MIN;
  static const Type Type_MAX =
    HttpFilter_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    HttpFilter_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return HttpFilter_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return HttpFilter_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return HttpFilter_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Struct config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::google::protobuf::Struct& config() const;
  ::google::protobuf::Struct* mutable_config();
  ::google::protobuf::Struct* release_config();
  void set_allocated_config(::google::protobuf::Struct* config);

  // .envoy.api.v2.filter.HttpFilter.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::envoy::api::v2::filter::HttpFilter_Type type() const;
  void set_type(::envoy::api::v2::filter::HttpFilter_Type value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.HttpFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Struct* config_;
  int type_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HttpConnectionManager_Tracing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.HttpConnectionManager.Tracing) */ {
 public:
  HttpConnectionManager_Tracing();
  virtual ~HttpConnectionManager_Tracing();

  HttpConnectionManager_Tracing(const HttpConnectionManager_Tracing& from);

  inline HttpConnectionManager_Tracing& operator=(const HttpConnectionManager_Tracing& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpConnectionManager_Tracing& default_instance();

  static inline const HttpConnectionManager_Tracing* internal_default_instance() {
    return reinterpret_cast<const HttpConnectionManager_Tracing*>(
               &_HttpConnectionManager_Tracing_default_instance_);
  }

  void Swap(HttpConnectionManager_Tracing* other);

  // implements Message ----------------------------------------------

  inline HttpConnectionManager_Tracing* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpConnectionManager_Tracing* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpConnectionManager_Tracing& from);
  void MergeFrom(const HttpConnectionManager_Tracing& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpConnectionManager_Tracing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HttpConnectionManager_Tracing_OperationName OperationName;
  static const OperationName INGRESS =
    HttpConnectionManager_Tracing_OperationName_INGRESS;
  static const OperationName EGRESS =
    HttpConnectionManager_Tracing_OperationName_EGRESS;
  static inline bool OperationName_IsValid(int value) {
    return HttpConnectionManager_Tracing_OperationName_IsValid(value);
  }
  static const OperationName OperationName_MIN =
    HttpConnectionManager_Tracing_OperationName_OperationName_MIN;
  static const OperationName OperationName_MAX =
    HttpConnectionManager_Tracing_OperationName_OperationName_MAX;
  static const int OperationName_ARRAYSIZE =
    HttpConnectionManager_Tracing_OperationName_OperationName_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationName_descriptor() {
    return HttpConnectionManager_Tracing_OperationName_descriptor();
  }
  static inline const ::std::string& OperationName_Name(OperationName value) {
    return HttpConnectionManager_Tracing_OperationName_Name(value);
  }
  static inline bool OperationName_Parse(const ::std::string& name,
      OperationName* value) {
    return HttpConnectionManager_Tracing_OperationName_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string request_headers_for_tags = 2;
  int request_headers_for_tags_size() const;
  void clear_request_headers_for_tags();
  static const int kRequestHeadersForTagsFieldNumber = 2;
  const ::std::string& request_headers_for_tags(int index) const;
  ::std::string* mutable_request_headers_for_tags(int index);
  void set_request_headers_for_tags(int index, const ::std::string& value);
  void set_request_headers_for_tags(int index, const char* value);
  void set_request_headers_for_tags(int index, const char* value, size_t size);
  ::std::string* add_request_headers_for_tags();
  void add_request_headers_for_tags(const ::std::string& value);
  void add_request_headers_for_tags(const char* value);
  void add_request_headers_for_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& request_headers_for_tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_request_headers_for_tags();

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
  void clear_operation_name();
  static const int kOperationNameFieldNumber = 1;
  ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName operation_name() const;
  void set_operation_name(::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.HttpConnectionManager.Tracing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> request_headers_for_tags_;
  int operation_name_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HttpConnectionManager : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.HttpConnectionManager) */ {
 public:
  HttpConnectionManager();
  virtual ~HttpConnectionManager();

  HttpConnectionManager(const HttpConnectionManager& from);

  inline HttpConnectionManager& operator=(const HttpConnectionManager& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpConnectionManager& default_instance();

  enum RouteSpecifierCase {
    kRds = 3,
    kRouteConfig = 4,
    ROUTE_SPECIFIER_NOT_SET = 0,
  };

  enum HttpCodecOptionsCase {
    kHttpProtocolOptions = 8,
    kHttp2ProtocolOptions = 9,
    HTTP_CODEC_OPTIONS_NOT_SET = 0,
  };

  static inline const HttpConnectionManager* internal_default_instance() {
    return reinterpret_cast<const HttpConnectionManager*>(
               &_HttpConnectionManager_default_instance_);
  }

  void Swap(HttpConnectionManager* other);

  // implements Message ----------------------------------------------

  inline HttpConnectionManager* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpConnectionManager* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpConnectionManager& from);
  void MergeFrom(const HttpConnectionManager& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpConnectionManager* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HttpConnectionManager_Tracing Tracing;

  typedef HttpConnectionManager_CodecType CodecType;
  static const CodecType AUTO =
    HttpConnectionManager_CodecType_AUTO;
  static const CodecType HTTP1 =
    HttpConnectionManager_CodecType_HTTP1;
  static const CodecType HTTP2 =
    HttpConnectionManager_CodecType_HTTP2;
  static inline bool CodecType_IsValid(int value) {
    return HttpConnectionManager_CodecType_IsValid(value);
  }
  static const CodecType CodecType_MIN =
    HttpConnectionManager_CodecType_CodecType_MIN;
  static const CodecType CodecType_MAX =
    HttpConnectionManager_CodecType_CodecType_MAX;
  static const int CodecType_ARRAYSIZE =
    HttpConnectionManager_CodecType_CodecType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CodecType_descriptor() {
    return HttpConnectionManager_CodecType_descriptor();
  }
  static inline const ::std::string& CodecType_Name(CodecType value) {
    return HttpConnectionManager_CodecType_Name(value);
  }
  static inline bool CodecType_Parse(const ::std::string& name,
      CodecType* value) {
    return HttpConnectionManager_CodecType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
  int http_filters_size() const;
  void clear_http_filters();
  static const int kHttpFiltersFieldNumber = 5;
  const ::envoy::api::v2::filter::HttpFilter& http_filters(int index) const;
  ::envoy::api::v2::filter::HttpFilter* mutable_http_filters(int index);
  ::envoy::api::v2::filter::HttpFilter* add_http_filters();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter >*
      mutable_http_filters();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter >&
      http_filters() const;

  // string stat_prefix = 2;
  void clear_stat_prefix();
  static const int kStatPrefixFieldNumber = 2;
  const ::std::string& stat_prefix() const;
  void set_stat_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_stat_prefix(::std::string&& value);
  #endif
  void set_stat_prefix(const char* value);
  void set_stat_prefix(const char* value, size_t size);
  ::std::string* mutable_stat_prefix();
  ::std::string* release_stat_prefix();
  void set_allocated_stat_prefix(::std::string* stat_prefix);

  // string server_name = 10;
  void clear_server_name();
  static const int kServerNameFieldNumber = 10;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // .google.protobuf.BoolValue add_user_agent = 6;
  bool has_add_user_agent() const;
  void clear_add_user_agent();
  static const int kAddUserAgentFieldNumber = 6;
  const ::google::protobuf::BoolValue& add_user_agent() const;
  ::google::protobuf::BoolValue* mutable_add_user_agent();
  ::google::protobuf::BoolValue* release_add_user_agent();
  void set_allocated_add_user_agent(::google::protobuf::BoolValue* add_user_agent);

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
  bool has_tracing() const;
  void clear_tracing();
  static const int kTracingFieldNumber = 7;
  const ::envoy::api::v2::filter::HttpConnectionManager_Tracing& tracing() const;
  ::envoy::api::v2::filter::HttpConnectionManager_Tracing* mutable_tracing();
  ::envoy::api::v2::filter::HttpConnectionManager_Tracing* release_tracing();
  void set_allocated_tracing(::envoy::api::v2::filter::HttpConnectionManager_Tracing* tracing);

  // .google.protobuf.Duration idle_timeout = 11;
  bool has_idle_timeout() const;
  void clear_idle_timeout();
  static const int kIdleTimeoutFieldNumber = 11;
  const ::google::protobuf::Duration& idle_timeout() const;
  ::google::protobuf::Duration* mutable_idle_timeout();
  ::google::protobuf::Duration* release_idle_timeout();
  void set_allocated_idle_timeout(::google::protobuf::Duration* idle_timeout);

  // .google.protobuf.Duration drain_timeout = 12;
  bool has_drain_timeout() const;
  void clear_drain_timeout();
  static const int kDrainTimeoutFieldNumber = 12;
  const ::google::protobuf::Duration& drain_timeout() const;
  ::google::protobuf::Duration* mutable_drain_timeout();
  ::google::protobuf::Duration* release_drain_timeout();
  void set_allocated_drain_timeout(::google::protobuf::Duration* drain_timeout);

  // .envoy.api.v2.filter.AccessLog access_log = 13;
  bool has_access_log() const;
  void clear_access_log();
  static const int kAccessLogFieldNumber = 13;
  const ::envoy::api::v2::filter::AccessLog& access_log() const;
  ::envoy::api::v2::filter::AccessLog* mutable_access_log();
  ::envoy::api::v2::filter::AccessLog* release_access_log();
  void set_allocated_access_log(::envoy::api::v2::filter::AccessLog* access_log);

  // .google.protobuf.BoolValue use_remote_address = 14;
  bool has_use_remote_address() const;
  void clear_use_remote_address();
  static const int kUseRemoteAddressFieldNumber = 14;
  const ::google::protobuf::BoolValue& use_remote_address() const;
  ::google::protobuf::BoolValue* mutable_use_remote_address();
  ::google::protobuf::BoolValue* release_use_remote_address();
  void set_allocated_use_remote_address(::google::protobuf::BoolValue* use_remote_address);

  // .google.protobuf.BoolValue generate_request_id = 15;
  bool has_generate_request_id() const;
  void clear_generate_request_id();
  static const int kGenerateRequestIdFieldNumber = 15;
  const ::google::protobuf::BoolValue& generate_request_id() const;
  ::google::protobuf::BoolValue* mutable_generate_request_id();
  ::google::protobuf::BoolValue* release_generate_request_id();
  void set_allocated_generate_request_id(::google::protobuf::BoolValue* generate_request_id);

  // .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
  void clear_codec_type();
  static const int kCodecTypeFieldNumber = 1;
  ::envoy::api::v2::filter::HttpConnectionManager_CodecType codec_type() const;
  void set_codec_type(::envoy::api::v2::filter::HttpConnectionManager_CodecType value);

  // .envoy.api.v2.filter.Rds rds = 3;
  bool has_rds() const;
  void clear_rds();
  static const int kRdsFieldNumber = 3;
  const ::envoy::api::v2::filter::Rds& rds() const;
  ::envoy::api::v2::filter::Rds* mutable_rds();
  ::envoy::api::v2::filter::Rds* release_rds();
  void set_allocated_rds(::envoy::api::v2::filter::Rds* rds);

  // .envoy.api.v2.RouteConfiguration route_config = 4;
  bool has_route_config() const;
  void clear_route_config();
  static const int kRouteConfigFieldNumber = 4;
  const ::envoy::api::v2::RouteConfiguration& route_config() const;
  ::envoy::api::v2::RouteConfiguration* mutable_route_config();
  ::envoy::api::v2::RouteConfiguration* release_route_config();
  void set_allocated_route_config(::envoy::api::v2::RouteConfiguration* route_config);

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
  bool has_http_protocol_options() const;
  void clear_http_protocol_options();
  static const int kHttpProtocolOptionsFieldNumber = 8;
  const ::envoy::api::v2::Http1ProtocolOptions& http_protocol_options() const;
  ::envoy::api::v2::Http1ProtocolOptions* mutable_http_protocol_options();
  ::envoy::api::v2::Http1ProtocolOptions* release_http_protocol_options();
  void set_allocated_http_protocol_options(::envoy::api::v2::Http1ProtocolOptions* http_protocol_options);

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
  bool has_http2_protocol_options() const;
  void clear_http2_protocol_options();
  static const int kHttp2ProtocolOptionsFieldNumber = 9;
  const ::envoy::api::v2::Http2ProtocolOptions& http2_protocol_options() const;
  ::envoy::api::v2::Http2ProtocolOptions* mutable_http2_protocol_options();
  ::envoy::api::v2::Http2ProtocolOptions* release_http2_protocol_options();
  void set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options);

  RouteSpecifierCase route_specifier_case() const;
  HttpCodecOptionsCase http_codec_options_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.HttpConnectionManager)
 private:
  void set_has_rds();
  void set_has_route_config();
  void set_has_http_protocol_options();
  void set_has_http2_protocol_options();

  inline bool has_route_specifier() const;
  void clear_route_specifier();
  inline void clear_has_route_specifier();

  inline bool has_http_codec_options() const;
  void clear_http_codec_options();
  inline void clear_has_http_codec_options();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter > http_filters_;
  ::google::protobuf::internal::ArenaStringPtr stat_prefix_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::BoolValue* add_user_agent_;
  ::envoy::api::v2::filter::HttpConnectionManager_Tracing* tracing_;
  ::google::protobuf::Duration* idle_timeout_;
  ::google::protobuf::Duration* drain_timeout_;
  ::envoy::api::v2::filter::AccessLog* access_log_;
  ::google::protobuf::BoolValue* use_remote_address_;
  ::google::protobuf::BoolValue* generate_request_id_;
  int codec_type_;
  union RouteSpecifierUnion {
    RouteSpecifierUnion() {}
    ::envoy::api::v2::filter::Rds* rds_;
    ::envoy::api::v2::RouteConfiguration* route_config_;
  } route_specifier_;
  union HttpCodecOptionsUnion {
    HttpCodecOptionsUnion() {}
    ::envoy::api::v2::Http1ProtocolOptions* http_protocol_options_;
    ::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options_;
  } http_codec_options_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct  protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Rds

// string cluster = 1;
inline void Rds::clear_cluster() {
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rds::cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.Rds.cluster)
  return cluster_.GetNoArena();
}
inline void Rds::set_cluster(const ::std::string& value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.Rds.cluster)
}
#if LANG_CXX11
inline void Rds::set_cluster(::std::string&& value) {
  
  cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.Rds.cluster)
}
#endif
inline void Rds::set_cluster(const char* value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.Rds.cluster)
}
inline void Rds::set_cluster(const char* value, size_t size) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.Rds.cluster)
}
inline ::std::string* Rds::mutable_cluster() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.Rds.cluster)
  return cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rds::release_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.Rds.cluster)
  
  return cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rds::set_allocated_cluster(::std::string* cluster) {
  if (cluster != NULL) {
    
  } else {
    
  }
  cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.Rds.cluster)
}

// string router_config_name = 2;
inline void Rds::clear_router_config_name() {
  router_config_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rds::router_config_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.Rds.router_config_name)
  return router_config_name_.GetNoArena();
}
inline void Rds::set_router_config_name(const ::std::string& value) {
  
  router_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.Rds.router_config_name)
}
#if LANG_CXX11
inline void Rds::set_router_config_name(::std::string&& value) {
  
  router_config_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.Rds.router_config_name)
}
#endif
inline void Rds::set_router_config_name(const char* value) {
  
  router_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.Rds.router_config_name)
}
inline void Rds::set_router_config_name(const char* value, size_t size) {
  
  router_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.Rds.router_config_name)
}
inline ::std::string* Rds::mutable_router_config_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.Rds.router_config_name)
  return router_config_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rds::release_router_config_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.Rds.router_config_name)
  
  return router_config_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rds::set_allocated_router_config_name(::std::string* router_config_name) {
  if (router_config_name != NULL) {
    
  } else {
    
  }
  router_config_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), router_config_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.Rds.router_config_name)
}

// .google.protobuf.Duration refresh_delay = 3;
inline bool Rds::has_refresh_delay() const {
  return this != internal_default_instance() && refresh_delay_ != NULL;
}
inline void Rds::clear_refresh_delay() {
  if (GetArenaNoVirtual() == NULL && refresh_delay_ != NULL) delete refresh_delay_;
  refresh_delay_ = NULL;
}
inline const ::google::protobuf::Duration& Rds::refresh_delay() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.Rds.refresh_delay)
  return refresh_delay_ != NULL ? *refresh_delay_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* Rds::mutable_refresh_delay() {
  
  if (refresh_delay_ == NULL) {
    refresh_delay_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.Rds.refresh_delay)
  return refresh_delay_;
}
inline ::google::protobuf::Duration* Rds::release_refresh_delay() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.Rds.refresh_delay)
  
  ::google::protobuf::Duration* temp = refresh_delay_;
  refresh_delay_ = NULL;
  return temp;
}
inline void Rds::set_allocated_refresh_delay(::google::protobuf::Duration* refresh_delay) {
  delete refresh_delay_;
  if (refresh_delay != NULL && refresh_delay->GetArena() != NULL) {
    ::google::protobuf::Duration* new_refresh_delay = new ::google::protobuf::Duration;
    new_refresh_delay->CopyFrom(*refresh_delay);
    refresh_delay = new_refresh_delay;
  }
  refresh_delay_ = refresh_delay;
  if (refresh_delay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.Rds.refresh_delay)
}

// -------------------------------------------------------------------

// StatusCodeFilter

// .envoy.api.v2.filter.StatusCodeFilter.Op op = 1;
inline void StatusCodeFilter::clear_op() {
  op_ = 0;
}
inline ::envoy::api::v2::filter::StatusCodeFilter_Op StatusCodeFilter::op() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.StatusCodeFilter.op)
  return static_cast< ::envoy::api::v2::filter::StatusCodeFilter_Op >(op_);
}
inline void StatusCodeFilter::set_op(::envoy::api::v2::filter::StatusCodeFilter_Op value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.StatusCodeFilter.op)
}

// .envoy.api.v2.RuntimeUInt32 value = 2;
inline bool StatusCodeFilter::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void StatusCodeFilter::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::envoy::api::v2::RuntimeUInt32& StatusCodeFilter::value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.StatusCodeFilter.value)
  return value_ != NULL ? *value_
                         : *::envoy::api::v2::RuntimeUInt32::internal_default_instance();
}
inline ::envoy::api::v2::RuntimeUInt32* StatusCodeFilter::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::envoy::api::v2::RuntimeUInt32;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.StatusCodeFilter.value)
  return value_;
}
inline ::envoy::api::v2::RuntimeUInt32* StatusCodeFilter::release_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.StatusCodeFilter.value)
  
  ::envoy::api::v2::RuntimeUInt32* temp = value_;
  value_ = NULL;
  return temp;
}
inline void StatusCodeFilter::set_allocated_value(::envoy::api::v2::RuntimeUInt32* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.StatusCodeFilter.value)
}

// -------------------------------------------------------------------

// DurationFilter

// .envoy.api.v2.filter.DurationFilter.Op op = 1;
inline void DurationFilter::clear_op() {
  op_ = 0;
}
inline ::envoy::api::v2::filter::DurationFilter_Op DurationFilter::op() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.DurationFilter.op)
  return static_cast< ::envoy::api::v2::filter::DurationFilter_Op >(op_);
}
inline void DurationFilter::set_op(::envoy::api::v2::filter::DurationFilter_Op value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.DurationFilter.op)
}

// .envoy.api.v2.RuntimeUInt32 value = 2;
inline bool DurationFilter::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void DurationFilter::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::envoy::api::v2::RuntimeUInt32& DurationFilter::value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.DurationFilter.value)
  return value_ != NULL ? *value_
                         : *::envoy::api::v2::RuntimeUInt32::internal_default_instance();
}
inline ::envoy::api::v2::RuntimeUInt32* DurationFilter::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::envoy::api::v2::RuntimeUInt32;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.DurationFilter.value)
  return value_;
}
inline ::envoy::api::v2::RuntimeUInt32* DurationFilter::release_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.DurationFilter.value)
  
  ::envoy::api::v2::RuntimeUInt32* temp = value_;
  value_ = NULL;
  return temp;
}
inline void DurationFilter::set_allocated_value(::envoy::api::v2::RuntimeUInt32* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.DurationFilter.value)
}

// -------------------------------------------------------------------

// NotHealthCheckFilter

// -------------------------------------------------------------------

// TraceableFilter

// -------------------------------------------------------------------

// RuntimeFilter

// string runtime_key = 1;
inline void RuntimeFilter::clear_runtime_key() {
  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RuntimeFilter::runtime_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.RuntimeFilter.runtime_key)
  return runtime_key_.GetNoArena();
}
inline void RuntimeFilter::set_runtime_key(const ::std::string& value) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
#if LANG_CXX11
inline void RuntimeFilter::set_runtime_key(::std::string&& value) {
  
  runtime_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
#endif
inline void RuntimeFilter::set_runtime_key(const char* value) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
inline void RuntimeFilter::set_runtime_key(const char* value, size_t size) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
inline ::std::string* RuntimeFilter::mutable_runtime_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.RuntimeFilter.runtime_key)
  return runtime_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RuntimeFilter::release_runtime_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.RuntimeFilter.runtime_key)
  
  return runtime_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RuntimeFilter::set_allocated_runtime_key(::std::string* runtime_key) {
  if (runtime_key != NULL) {
    
  } else {
    
  }
  runtime_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}

// -------------------------------------------------------------------

// AndFilter

// repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
inline int AndFilter::filters_size() const {
  return filters_.size();
}
inline void AndFilter::clear_filters() {
  filters_.Clear();
}
inline const ::envoy::api::v2::filter::AccessLogFilter& AndFilter::filters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AndFilter.filters)
  return filters_.Get(index);
}
inline ::envoy::api::v2::filter::AccessLogFilter* AndFilter::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AndFilter.filters)
  return filters_.Mutable(index);
}
inline ::envoy::api::v2::filter::AccessLogFilter* AndFilter::add_filters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.AndFilter.filters)
  return filters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >*
AndFilter::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.AndFilter.filters)
  return &filters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >&
AndFilter::filters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.AndFilter.filters)
  return filters_;
}

// -------------------------------------------------------------------

// OrFilter

// repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
inline int OrFilter::filters_size() const {
  return filters_.size();
}
inline void OrFilter::clear_filters() {
  filters_.Clear();
}
inline const ::envoy::api::v2::filter::AccessLogFilter& OrFilter::filters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.OrFilter.filters)
  return filters_.Get(index);
}
inline ::envoy::api::v2::filter::AccessLogFilter* OrFilter::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.OrFilter.filters)
  return filters_.Mutable(index);
}
inline ::envoy::api::v2::filter::AccessLogFilter* OrFilter::add_filters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.OrFilter.filters)
  return filters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >*
OrFilter::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.OrFilter.filters)
  return &filters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >&
OrFilter::filters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.OrFilter.filters)
  return filters_;
}

// -------------------------------------------------------------------

// AccessLogFilter

// .envoy.api.v2.filter.StatusCodeFilter status_code = 1;
inline bool AccessLogFilter::has_status_code() const {
  return filter_specifier_case() == kStatusCode;
}
inline void AccessLogFilter::set_has_status_code() {
  _oneof_case_[0] = kStatusCode;
}
inline void AccessLogFilter::clear_status_code() {
  if (has_status_code()) {
    delete filter_specifier_.status_code_;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::StatusCodeFilter& AccessLogFilter::status_code() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.status_code)
  return has_status_code()
      ? *filter_specifier_.status_code_
      : ::envoy::api::v2::filter::StatusCodeFilter::default_instance();
}
inline ::envoy::api::v2::filter::StatusCodeFilter* AccessLogFilter::mutable_status_code() {
  if (!has_status_code()) {
    clear_filter_specifier();
    set_has_status_code();
    filter_specifier_.status_code_ = new ::envoy::api::v2::filter::StatusCodeFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.status_code)
  return filter_specifier_.status_code_;
}
inline ::envoy::api::v2::filter::StatusCodeFilter* AccessLogFilter::release_status_code() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.status_code)
  if (has_status_code()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::StatusCodeFilter* temp = filter_specifier_.status_code_;
    filter_specifier_.status_code_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_status_code(::envoy::api::v2::filter::StatusCodeFilter* status_code) {
  clear_filter_specifier();
  if (status_code) {
    set_has_status_code();
    filter_specifier_.status_code_ = status_code;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.status_code)
}

// .envoy.api.v2.filter.DurationFilter duration = 2;
inline bool AccessLogFilter::has_duration() const {
  return filter_specifier_case() == kDuration;
}
inline void AccessLogFilter::set_has_duration() {
  _oneof_case_[0] = kDuration;
}
inline void AccessLogFilter::clear_duration() {
  if (has_duration()) {
    delete filter_specifier_.duration_;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::DurationFilter& AccessLogFilter::duration() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.duration)
  return has_duration()
      ? *filter_specifier_.duration_
      : ::envoy::api::v2::filter::DurationFilter::default_instance();
}
inline ::envoy::api::v2::filter::DurationFilter* AccessLogFilter::mutable_duration() {
  if (!has_duration()) {
    clear_filter_specifier();
    set_has_duration();
    filter_specifier_.duration_ = new ::envoy::api::v2::filter::DurationFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.duration)
  return filter_specifier_.duration_;
}
inline ::envoy::api::v2::filter::DurationFilter* AccessLogFilter::release_duration() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.duration)
  if (has_duration()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::DurationFilter* temp = filter_specifier_.duration_;
    filter_specifier_.duration_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_duration(::envoy::api::v2::filter::DurationFilter* duration) {
  clear_filter_specifier();
  if (duration) {
    set_has_duration();
    filter_specifier_.duration_ = duration;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.duration)
}

// .envoy.api.v2.filter.NotHealthCheckFilter not_health_check = 3;
inline bool AccessLogFilter::has_not_health_check() const {
  return filter_specifier_case() == kNotHealthCheck;
}
inline void AccessLogFilter::set_has_not_health_check() {
  _oneof_case_[0] = kNotHealthCheck;
}
inline void AccessLogFilter::clear_not_health_check() {
  if (has_not_health_check()) {
    delete filter_specifier_.not_health_check_;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::NotHealthCheckFilter& AccessLogFilter::not_health_check() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.not_health_check)
  return has_not_health_check()
      ? *filter_specifier_.not_health_check_
      : ::envoy::api::v2::filter::NotHealthCheckFilter::default_instance();
}
inline ::envoy::api::v2::filter::NotHealthCheckFilter* AccessLogFilter::mutable_not_health_check() {
  if (!has_not_health_check()) {
    clear_filter_specifier();
    set_has_not_health_check();
    filter_specifier_.not_health_check_ = new ::envoy::api::v2::filter::NotHealthCheckFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.not_health_check)
  return filter_specifier_.not_health_check_;
}
inline ::envoy::api::v2::filter::NotHealthCheckFilter* AccessLogFilter::release_not_health_check() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.not_health_check)
  if (has_not_health_check()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::NotHealthCheckFilter* temp = filter_specifier_.not_health_check_;
    filter_specifier_.not_health_check_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_not_health_check(::envoy::api::v2::filter::NotHealthCheckFilter* not_health_check) {
  clear_filter_specifier();
  if (not_health_check) {
    set_has_not_health_check();
    filter_specifier_.not_health_check_ = not_health_check;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.not_health_check)
}

// .envoy.api.v2.filter.TraceableFilter traceable = 4;
inline bool AccessLogFilter::has_traceable() const {
  return filter_specifier_case() == kTraceable;
}
inline void AccessLogFilter::set_has_traceable() {
  _oneof_case_[0] = kTraceable;
}
inline void AccessLogFilter::clear_traceable() {
  if (has_traceable()) {
    delete filter_specifier_.traceable_;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::TraceableFilter& AccessLogFilter::traceable() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.traceable)
  return has_traceable()
      ? *filter_specifier_.traceable_
      : ::envoy::api::v2::filter::TraceableFilter::default_instance();
}
inline ::envoy::api::v2::filter::TraceableFilter* AccessLogFilter::mutable_traceable() {
  if (!has_traceable()) {
    clear_filter_specifier();
    set_has_traceable();
    filter_specifier_.traceable_ = new ::envoy::api::v2::filter::TraceableFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.traceable)
  return filter_specifier_.traceable_;
}
inline ::envoy::api::v2::filter::TraceableFilter* AccessLogFilter::release_traceable() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.traceable)
  if (has_traceable()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::TraceableFilter* temp = filter_specifier_.traceable_;
    filter_specifier_.traceable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_traceable(::envoy::api::v2::filter::TraceableFilter* traceable) {
  clear_filter_specifier();
  if (traceable) {
    set_has_traceable();
    filter_specifier_.traceable_ = traceable;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.traceable)
}

// .envoy.api.v2.filter.RuntimeFilter runtime = 5;
inline bool AccessLogFilter::has_runtime() const {
  return filter_specifier_case() == kRuntime;
}
inline void AccessLogFilter::set_has_runtime() {
  _oneof_case_[0] = kRuntime;
}
inline void AccessLogFilter::clear_runtime() {
  if (has_runtime()) {
    delete filter_specifier_.runtime_;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::RuntimeFilter& AccessLogFilter::runtime() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.runtime)
  return has_runtime()
      ? *filter_specifier_.runtime_
      : ::envoy::api::v2::filter::RuntimeFilter::default_instance();
}
inline ::envoy::api::v2::filter::RuntimeFilter* AccessLogFilter::mutable_runtime() {
  if (!has_runtime()) {
    clear_filter_specifier();
    set_has_runtime();
    filter_specifier_.runtime_ = new ::envoy::api::v2::filter::RuntimeFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.runtime)
  return filter_specifier_.runtime_;
}
inline ::envoy::api::v2::filter::RuntimeFilter* AccessLogFilter::release_runtime() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.runtime)
  if (has_runtime()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::RuntimeFilter* temp = filter_specifier_.runtime_;
    filter_specifier_.runtime_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_runtime(::envoy::api::v2::filter::RuntimeFilter* runtime) {
  clear_filter_specifier();
  if (runtime) {
    set_has_runtime();
    filter_specifier_.runtime_ = runtime;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.runtime)
}

// .envoy.api.v2.filter.AndFilter and = 6;
inline bool AccessLogFilter::has_and_() const {
  return filter_specifier_case() == kAnd;
}
inline void AccessLogFilter::set_has_and_() {
  _oneof_case_[0] = kAnd;
}
inline void AccessLogFilter::clear_and_() {
  if (has_and_()) {
    delete filter_specifier_.and__;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::AndFilter& AccessLogFilter::and_() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.and)
  return has_and_()
      ? *filter_specifier_.and__
      : ::envoy::api::v2::filter::AndFilter::default_instance();
}
inline ::envoy::api::v2::filter::AndFilter* AccessLogFilter::mutable_and_() {
  if (!has_and_()) {
    clear_filter_specifier();
    set_has_and_();
    filter_specifier_.and__ = new ::envoy::api::v2::filter::AndFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.and)
  return filter_specifier_.and__;
}
inline ::envoy::api::v2::filter::AndFilter* AccessLogFilter::release_and_() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.and)
  if (has_and_()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::AndFilter* temp = filter_specifier_.and__;
    filter_specifier_.and__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_and_(::envoy::api::v2::filter::AndFilter* and_) {
  clear_filter_specifier();
  if (and_) {
    set_has_and_();
    filter_specifier_.and__ = and_;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.and)
}

// .envoy.api.v2.filter.OrFilter or = 7;
inline bool AccessLogFilter::has_or_() const {
  return filter_specifier_case() == kOr;
}
inline void AccessLogFilter::set_has_or_() {
  _oneof_case_[0] = kOr;
}
inline void AccessLogFilter::clear_or_() {
  if (has_or_()) {
    delete filter_specifier_.or__;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::OrFilter& AccessLogFilter::or_() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.or)
  return has_or_()
      ? *filter_specifier_.or__
      : ::envoy::api::v2::filter::OrFilter::default_instance();
}
inline ::envoy::api::v2::filter::OrFilter* AccessLogFilter::mutable_or_() {
  if (!has_or_()) {
    clear_filter_specifier();
    set_has_or_();
    filter_specifier_.or__ = new ::envoy::api::v2::filter::OrFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.or)
  return filter_specifier_.or__;
}
inline ::envoy::api::v2::filter::OrFilter* AccessLogFilter::release_or_() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.or)
  if (has_or_()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::OrFilter* temp = filter_specifier_.or__;
    filter_specifier_.or__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_or_(::envoy::api::v2::filter::OrFilter* or_) {
  clear_filter_specifier();
  if (or_) {
    set_has_or_();
    filter_specifier_.or__ = or_;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.or)
}

inline bool AccessLogFilter::has_filter_specifier() const {
  return filter_specifier_case() != FILTER_SPECIFIER_NOT_SET;
}
inline void AccessLogFilter::clear_has_filter_specifier() {
  _oneof_case_[0] = FILTER_SPECIFIER_NOT_SET;
}
inline AccessLogFilter::FilterSpecifierCase AccessLogFilter::filter_specifier_case() const {
  return AccessLogFilter::FilterSpecifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HeaderSelection

// repeated string request_headers = 1;
inline int HeaderSelection::request_headers_size() const {
  return request_headers_.size();
}
inline void HeaderSelection::clear_request_headers() {
  request_headers_.Clear();
}
inline const ::std::string& HeaderSelection::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HeaderSelection.request_headers)
  return request_headers_.Get(index);
}
inline ::std::string* HeaderSelection::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HeaderSelection.request_headers)
  return request_headers_.Mutable(index);
}
inline void HeaderSelection::set_request_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HeaderSelection.request_headers)
  request_headers_.Mutable(index)->assign(value);
}
inline void HeaderSelection::set_request_headers(int index, const char* value) {
  request_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HeaderSelection.request_headers)
}
inline void HeaderSelection::set_request_headers(int index, const char* value, size_t size) {
  request_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HeaderSelection.request_headers)
}
inline ::std::string* HeaderSelection::add_request_headers() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.filter.HeaderSelection.request_headers)
  return request_headers_.Add();
}
inline void HeaderSelection::add_request_headers(const ::std::string& value) {
  request_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HeaderSelection.request_headers)
}
inline void HeaderSelection::add_request_headers(const char* value) {
  request_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.filter.HeaderSelection.request_headers)
}
inline void HeaderSelection::add_request_headers(const char* value, size_t size) {
  request_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.filter.HeaderSelection.request_headers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeaderSelection::request_headers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HeaderSelection.request_headers)
  return request_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeaderSelection::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HeaderSelection.request_headers)
  return &request_headers_;
}

// repeated string response_headers = 2;
inline int HeaderSelection::response_headers_size() const {
  return response_headers_.size();
}
inline void HeaderSelection::clear_response_headers() {
  response_headers_.Clear();
}
inline const ::std::string& HeaderSelection::response_headers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HeaderSelection.response_headers)
  return response_headers_.Get(index);
}
inline ::std::string* HeaderSelection::mutable_response_headers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HeaderSelection.response_headers)
  return response_headers_.Mutable(index);
}
inline void HeaderSelection::set_response_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HeaderSelection.response_headers)
  response_headers_.Mutable(index)->assign(value);
}
inline void HeaderSelection::set_response_headers(int index, const char* value) {
  response_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HeaderSelection.response_headers)
}
inline void HeaderSelection::set_response_headers(int index, const char* value, size_t size) {
  response_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HeaderSelection.response_headers)
}
inline ::std::string* HeaderSelection::add_response_headers() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.filter.HeaderSelection.response_headers)
  return response_headers_.Add();
}
inline void HeaderSelection::add_response_headers(const ::std::string& value) {
  response_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HeaderSelection.response_headers)
}
inline void HeaderSelection::add_response_headers(const char* value) {
  response_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.filter.HeaderSelection.response_headers)
}
inline void HeaderSelection::add_response_headers(const char* value, size_t size) {
  response_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.filter.HeaderSelection.response_headers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeaderSelection::response_headers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HeaderSelection.response_headers)
  return response_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeaderSelection::mutable_response_headers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HeaderSelection.response_headers)
  return &response_headers_;
}

// -------------------------------------------------------------------

// AccessLog

// string path = 1;
inline bool AccessLog::has_path() const {
  return destination_case() == kPath;
}
inline void AccessLog::set_has_path() {
  _oneof_case_[0] = kPath;
}
inline void AccessLog::clear_path() {
  if (has_path()) {
    destination_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_destination();
  }
}
inline const ::std::string& AccessLog::path() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.path)
  if (has_path()) {
    return destination_.path_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AccessLog::set_path(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.path)
  if (!has_path()) {
    clear_destination();
    set_has_path();
    destination_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.path)
}
#if LANG_CXX11
inline void AccessLog::set_path(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.path)
  if (!has_path()) {
    clear_destination();
    set_has_path();
    destination_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.AccessLog.path)
}
#endif
inline void AccessLog::set_path(const char* value) {
  if (!has_path()) {
    clear_destination();
    set_has_path();
    destination_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.AccessLog.path)
}
inline void AccessLog::set_path(const char* value, size_t size) {
  if (!has_path()) {
    clear_destination();
    set_has_path();
    destination_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.AccessLog.path)
}
inline ::std::string* AccessLog::mutable_path() {
  if (!has_path()) {
    clear_destination();
    set_has_path();
    destination_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.path)
  return destination_.path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessLog::release_path() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.path)
  if (has_path()) {
    clear_has_destination();
    return destination_.path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void AccessLog::set_allocated_path(::std::string* path) {
  if (!has_path()) {
    destination_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_destination();
  if (path != NULL) {
    set_has_path();
    destination_.path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        path);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.path)
}

// string cluster = 5;
inline bool AccessLog::has_cluster() const {
  return destination_case() == kCluster;
}
inline void AccessLog::set_has_cluster() {
  _oneof_case_[0] = kCluster;
}
inline void AccessLog::clear_cluster() {
  if (has_cluster()) {
    destination_.cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_destination();
  }
}
inline const ::std::string& AccessLog::cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.cluster)
  if (has_cluster()) {
    return destination_.cluster_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AccessLog::set_cluster(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.cluster)
  if (!has_cluster()) {
    clear_destination();
    set_has_cluster();
    destination_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.cluster)
}
#if LANG_CXX11
inline void AccessLog::set_cluster(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.cluster)
  if (!has_cluster()) {
    clear_destination();
    set_has_cluster();
    destination_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.AccessLog.cluster)
}
#endif
inline void AccessLog::set_cluster(const char* value) {
  if (!has_cluster()) {
    clear_destination();
    set_has_cluster();
    destination_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.AccessLog.cluster)
}
inline void AccessLog::set_cluster(const char* value, size_t size) {
  if (!has_cluster()) {
    clear_destination();
    set_has_cluster();
    destination_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  destination_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.AccessLog.cluster)
}
inline ::std::string* AccessLog::mutable_cluster() {
  if (!has_cluster()) {
    clear_destination();
    set_has_cluster();
    destination_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.cluster)
  return destination_.cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessLog::release_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.cluster)
  if (has_cluster()) {
    clear_has_destination();
    return destination_.cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void AccessLog::set_allocated_cluster(::std::string* cluster) {
  if (!has_cluster()) {
    destination_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_destination();
  if (cluster != NULL) {
    set_has_cluster();
    destination_.cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        cluster);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.cluster)
}

// string format = 2;
inline bool AccessLog::has_format() const {
  return content_case() == kFormat;
}
inline void AccessLog::set_has_format() {
  _oneof_case_[1] = kFormat;
}
inline void AccessLog::clear_format() {
  if (has_format()) {
    content_.format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const ::std::string& AccessLog::format() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.format)
  if (has_format()) {
    return content_.format_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AccessLog::set_format(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.format)
  if (!has_format()) {
    clear_content();
    set_has_format();
    content_.format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.format)
}
#if LANG_CXX11
inline void AccessLog::set_format(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.format)
  if (!has_format()) {
    clear_content();
    set_has_format();
    content_.format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.AccessLog.format)
}
#endif
inline void AccessLog::set_format(const char* value) {
  if (!has_format()) {
    clear_content();
    set_has_format();
    content_.format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.AccessLog.format)
}
inline void AccessLog::set_format(const char* value, size_t size) {
  if (!has_format()) {
    clear_content();
    set_has_format();
    content_.format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.AccessLog.format)
}
inline ::std::string* AccessLog::mutable_format() {
  if (!has_format()) {
    clear_content();
    set_has_format();
    content_.format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.format)
  return content_.format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessLog::release_format() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.format)
  if (has_format()) {
    clear_has_content();
    return content_.format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void AccessLog::set_allocated_format(::std::string* format) {
  if (!has_format()) {
    content_.format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_content();
  if (format != NULL) {
    set_has_format();
    content_.format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        format);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.format)
}

// .envoy.api.v2.filter.HeaderSelection headers = 4;
inline bool AccessLog::has_headers() const {
  return content_case() == kHeaders;
}
inline void AccessLog::set_has_headers() {
  _oneof_case_[1] = kHeaders;
}
inline void AccessLog::clear_headers() {
  if (has_headers()) {
    delete content_.headers_;
    clear_has_content();
  }
}
inline  const ::envoy::api::v2::filter::HeaderSelection& AccessLog::headers() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.headers)
  return has_headers()
      ? *content_.headers_
      : ::envoy::api::v2::filter::HeaderSelection::default_instance();
}
inline ::envoy::api::v2::filter::HeaderSelection* AccessLog::mutable_headers() {
  if (!has_headers()) {
    clear_content();
    set_has_headers();
    content_.headers_ = new ::envoy::api::v2::filter::HeaderSelection;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.headers)
  return content_.headers_;
}
inline ::envoy::api::v2::filter::HeaderSelection* AccessLog::release_headers() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.headers)
  if (has_headers()) {
    clear_has_content();
    ::envoy::api::v2::filter::HeaderSelection* temp = content_.headers_;
    content_.headers_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLog::set_allocated_headers(::envoy::api::v2::filter::HeaderSelection* headers) {
  clear_content();
  if (headers) {
    set_has_headers();
    content_.headers_ = headers;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.headers)
}

// .envoy.api.v2.filter.AccessLogFilter filter = 3;
inline bool AccessLog::has_filter() const {
  return this != internal_default_instance() && filter_ != NULL;
}
inline void AccessLog::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
}
inline const ::envoy::api::v2::filter::AccessLogFilter& AccessLog::filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.filter)
  return filter_ != NULL ? *filter_
                         : *::envoy::api::v2::filter::AccessLogFilter::internal_default_instance();
}
inline ::envoy::api::v2::filter::AccessLogFilter* AccessLog::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::envoy::api::v2::filter::AccessLogFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.filter)
  return filter_;
}
inline ::envoy::api::v2::filter::AccessLogFilter* AccessLog::release_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.filter)
  
  ::envoy::api::v2::filter::AccessLogFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
inline void AccessLog::set_allocated_filter(::envoy::api::v2::filter::AccessLogFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.filter)
}

inline bool AccessLog::has_destination() const {
  return destination_case() != DESTINATION_NOT_SET;
}
inline void AccessLog::clear_has_destination() {
  _oneof_case_[0] = DESTINATION_NOT_SET;
}
inline bool AccessLog::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void AccessLog::clear_has_content() {
  _oneof_case_[1] = CONTENT_NOT_SET;
}
inline AccessLog::DestinationCase AccessLog::destination_case() const {
  return AccessLog::DestinationCase(_oneof_case_[0]);
}
inline AccessLog::ContentCase AccessLog::content_case() const {
  return AccessLog::ContentCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// HttpFilter

// .envoy.api.v2.filter.HttpFilter.Type type = 1;
inline void HttpFilter::clear_type() {
  type_ = 0;
}
inline ::envoy::api::v2::filter::HttpFilter_Type HttpFilter::type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.type)
  return static_cast< ::envoy::api::v2::filter::HttpFilter_Type >(type_);
}
inline void HttpFilter::set_type(::envoy::api::v2::filter::HttpFilter_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpFilter.type)
}

// string name = 2;
inline void HttpFilter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpFilter::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.name)
  return name_.GetNoArena();
}
inline void HttpFilter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpFilter.name)
}
#if LANG_CXX11
inline void HttpFilter::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpFilter.name)
}
#endif
inline void HttpFilter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpFilter.name)
}
inline void HttpFilter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpFilter.name)
}
inline ::std::string* HttpFilter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpFilter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpFilter::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpFilter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpFilter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpFilter.name)
}

// .google.protobuf.Struct config = 3;
inline bool HttpFilter::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void HttpFilter::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::google::protobuf::Struct& HttpFilter::config() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.config)
  return config_ != NULL ? *config_
                         : *::google::protobuf::Struct::internal_default_instance();
}
inline ::google::protobuf::Struct* HttpFilter::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpFilter.config)
  return config_;
}
inline ::google::protobuf::Struct* HttpFilter::release_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpFilter.config)
  
  ::google::protobuf::Struct* temp = config_;
  config_ = NULL;
  return temp;
}
inline void HttpFilter::set_allocated_config(::google::protobuf::Struct* config) {
  delete config_;
  if (config != NULL && config->GetArena() != NULL) {
    ::google::protobuf::Struct* new_config = new ::google::protobuf::Struct;
    new_config->CopyFrom(*config);
    config = new_config;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpFilter.config)
}

// -------------------------------------------------------------------

// HttpConnectionManager_Tracing

// .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
inline void HttpConnectionManager_Tracing::clear_operation_name() {
  operation_name_ = 0;
}
inline ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::operation_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.Tracing.operation_name)
  return static_cast< ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName >(operation_name_);
}
inline void HttpConnectionManager_Tracing::set_operation_name(::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName value) {
  
  operation_name_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.Tracing.operation_name)
}

// repeated string request_headers_for_tags = 2;
inline int HttpConnectionManager_Tracing::request_headers_for_tags_size() const {
  return request_headers_for_tags_.size();
}
inline void HttpConnectionManager_Tracing::clear_request_headers_for_tags() {
  request_headers_for_tags_.Clear();
}
inline const ::std::string& HttpConnectionManager_Tracing::request_headers_for_tags(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Get(index);
}
inline ::std::string* HttpConnectionManager_Tracing::mutable_request_headers_for_tags(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Mutable(index);
}
inline void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  request_headers_for_tags_.Mutable(index)->assign(value);
}
inline void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const char* value) {
  request_headers_for_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
inline void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const char* value, size_t size) {
  request_headers_for_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
inline ::std::string* HttpConnectionManager_Tracing::add_request_headers_for_tags() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Add();
}
inline void HttpConnectionManager_Tracing::add_request_headers_for_tags(const ::std::string& value) {
  request_headers_for_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
inline void HttpConnectionManager_Tracing::add_request_headers_for_tags(const char* value) {
  request_headers_for_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
inline void HttpConnectionManager_Tracing::add_request_headers_for_tags(const char* value, size_t size) {
  request_headers_for_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HttpConnectionManager_Tracing::request_headers_for_tags() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HttpConnectionManager_Tracing::mutable_request_headers_for_tags() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return &request_headers_for_tags_;
}

// -------------------------------------------------------------------

// HttpConnectionManager

// .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
inline void HttpConnectionManager::clear_codec_type() {
  codec_type_ = 0;
}
inline ::envoy::api::v2::filter::HttpConnectionManager_CodecType HttpConnectionManager::codec_type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.codec_type)
  return static_cast< ::envoy::api::v2::filter::HttpConnectionManager_CodecType >(codec_type_);
}
inline void HttpConnectionManager::set_codec_type(::envoy::api::v2::filter::HttpConnectionManager_CodecType value) {
  
  codec_type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.codec_type)
}

// string stat_prefix = 2;
inline void HttpConnectionManager::clear_stat_prefix() {
  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpConnectionManager::stat_prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
  return stat_prefix_.GetNoArena();
}
inline void HttpConnectionManager::set_stat_prefix(const ::std::string& value) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
#if LANG_CXX11
inline void HttpConnectionManager::set_stat_prefix(::std::string&& value) {
  
  stat_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
#endif
inline void HttpConnectionManager::set_stat_prefix(const char* value) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
inline void HttpConnectionManager::set_stat_prefix(const char* value, size_t size) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
inline ::std::string* HttpConnectionManager::mutable_stat_prefix() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
  return stat_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpConnectionManager::release_stat_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
  
  return stat_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpConnectionManager::set_allocated_stat_prefix(::std::string* stat_prefix) {
  if (stat_prefix != NULL) {
    
  } else {
    
  }
  stat_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stat_prefix);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}

// .envoy.api.v2.filter.Rds rds = 3;
inline bool HttpConnectionManager::has_rds() const {
  return route_specifier_case() == kRds;
}
inline void HttpConnectionManager::set_has_rds() {
  _oneof_case_[0] = kRds;
}
inline void HttpConnectionManager::clear_rds() {
  if (has_rds()) {
    delete route_specifier_.rds_;
    clear_has_route_specifier();
  }
}
inline  const ::envoy::api::v2::filter::Rds& HttpConnectionManager::rds() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.rds)
  return has_rds()
      ? *route_specifier_.rds_
      : ::envoy::api::v2::filter::Rds::default_instance();
}
inline ::envoy::api::v2::filter::Rds* HttpConnectionManager::mutable_rds() {
  if (!has_rds()) {
    clear_route_specifier();
    set_has_rds();
    route_specifier_.rds_ = new ::envoy::api::v2::filter::Rds;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.rds)
  return route_specifier_.rds_;
}
inline ::envoy::api::v2::filter::Rds* HttpConnectionManager::release_rds() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.rds)
  if (has_rds()) {
    clear_has_route_specifier();
    ::envoy::api::v2::filter::Rds* temp = route_specifier_.rds_;
    route_specifier_.rds_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void HttpConnectionManager::set_allocated_rds(::envoy::api::v2::filter::Rds* rds) {
  clear_route_specifier();
  if (rds) {
    set_has_rds();
    route_specifier_.rds_ = rds;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.rds)
}

// .envoy.api.v2.RouteConfiguration route_config = 4;
inline bool HttpConnectionManager::has_route_config() const {
  return route_specifier_case() == kRouteConfig;
}
inline void HttpConnectionManager::set_has_route_config() {
  _oneof_case_[0] = kRouteConfig;
}
inline void HttpConnectionManager::clear_route_config() {
  if (has_route_config()) {
    delete route_specifier_.route_config_;
    clear_has_route_specifier();
  }
}
inline  const ::envoy::api::v2::RouteConfiguration& HttpConnectionManager::route_config() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.route_config)
  return has_route_config()
      ? *route_specifier_.route_config_
      : ::envoy::api::v2::RouteConfiguration::default_instance();
}
inline ::envoy::api::v2::RouteConfiguration* HttpConnectionManager::mutable_route_config() {
  if (!has_route_config()) {
    clear_route_specifier();
    set_has_route_config();
    route_specifier_.route_config_ = new ::envoy::api::v2::RouteConfiguration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.route_config)
  return route_specifier_.route_config_;
}
inline ::envoy::api::v2::RouteConfiguration* HttpConnectionManager::release_route_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.route_config)
  if (has_route_config()) {
    clear_has_route_specifier();
    ::envoy::api::v2::RouteConfiguration* temp = route_specifier_.route_config_;
    route_specifier_.route_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void HttpConnectionManager::set_allocated_route_config(::envoy::api::v2::RouteConfiguration* route_config) {
  clear_route_specifier();
  if (route_config) {
    set_has_route_config();
    route_specifier_.route_config_ = route_config;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.route_config)
}

// repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
inline int HttpConnectionManager::http_filters_size() const {
  return http_filters_.size();
}
inline void HttpConnectionManager::clear_http_filters() {
  http_filters_.Clear();
}
inline const ::envoy::api::v2::filter::HttpFilter& HttpConnectionManager::http_filters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_.Get(index);
}
inline ::envoy::api::v2::filter::HttpFilter* HttpConnectionManager::mutable_http_filters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_.Mutable(index);
}
inline ::envoy::api::v2::filter::HttpFilter* HttpConnectionManager::add_http_filters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter >*
HttpConnectionManager::mutable_http_filters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return &http_filters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter >&
HttpConnectionManager::http_filters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_;
}

// .google.protobuf.BoolValue add_user_agent = 6;
inline bool HttpConnectionManager::has_add_user_agent() const {
  return this != internal_default_instance() && add_user_agent_ != NULL;
}
inline void HttpConnectionManager::clear_add_user_agent() {
  if (GetArenaNoVirtual() == NULL && add_user_agent_ != NULL) delete add_user_agent_;
  add_user_agent_ = NULL;
}
inline const ::google::protobuf::BoolValue& HttpConnectionManager::add_user_agent() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
  return add_user_agent_ != NULL ? *add_user_agent_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::mutable_add_user_agent() {
  
  if (add_user_agent_ == NULL) {
    add_user_agent_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
  return add_user_agent_;
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::release_add_user_agent() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
  
  ::google::protobuf::BoolValue* temp = add_user_agent_;
  add_user_agent_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_add_user_agent(::google::protobuf::BoolValue* add_user_agent) {
  delete add_user_agent_;
  if (add_user_agent != NULL && add_user_agent->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_add_user_agent = new ::google::protobuf::BoolValue;
    new_add_user_agent->CopyFrom(*add_user_agent);
    add_user_agent = new_add_user_agent;
  }
  add_user_agent_ = add_user_agent;
  if (add_user_agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
}

// .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
inline bool HttpConnectionManager::has_tracing() const {
  return this != internal_default_instance() && tracing_ != NULL;
}
inline void HttpConnectionManager::clear_tracing() {
  if (GetArenaNoVirtual() == NULL && tracing_ != NULL) delete tracing_;
  tracing_ = NULL;
}
inline const ::envoy::api::v2::filter::HttpConnectionManager_Tracing& HttpConnectionManager::tracing() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.tracing)
  return tracing_ != NULL ? *tracing_
                         : *::envoy::api::v2::filter::HttpConnectionManager_Tracing::internal_default_instance();
}
inline ::envoy::api::v2::filter::HttpConnectionManager_Tracing* HttpConnectionManager::mutable_tracing() {
  
  if (tracing_ == NULL) {
    tracing_ = new ::envoy::api::v2::filter::HttpConnectionManager_Tracing;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.tracing)
  return tracing_;
}
inline ::envoy::api::v2::filter::HttpConnectionManager_Tracing* HttpConnectionManager::release_tracing() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.tracing)
  
  ::envoy::api::v2::filter::HttpConnectionManager_Tracing* temp = tracing_;
  tracing_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_tracing(::envoy::api::v2::filter::HttpConnectionManager_Tracing* tracing) {
  delete tracing_;
  tracing_ = tracing;
  if (tracing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.tracing)
}

// .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
inline bool HttpConnectionManager::has_http_protocol_options() const {
  return http_codec_options_case() == kHttpProtocolOptions;
}
inline void HttpConnectionManager::set_has_http_protocol_options() {
  _oneof_case_[1] = kHttpProtocolOptions;
}
inline void HttpConnectionManager::clear_http_protocol_options() {
  if (has_http_protocol_options()) {
    delete http_codec_options_.http_protocol_options_;
    clear_has_http_codec_options();
  }
}
inline  const ::envoy::api::v2::Http1ProtocolOptions& HttpConnectionManager::http_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
  return has_http_protocol_options()
      ? *http_codec_options_.http_protocol_options_
      : ::envoy::api::v2::Http1ProtocolOptions::default_instance();
}
inline ::envoy::api::v2::Http1ProtocolOptions* HttpConnectionManager::mutable_http_protocol_options() {
  if (!has_http_protocol_options()) {
    clear_http_codec_options();
    set_has_http_protocol_options();
    http_codec_options_.http_protocol_options_ = new ::envoy::api::v2::Http1ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
  return http_codec_options_.http_protocol_options_;
}
inline ::envoy::api::v2::Http1ProtocolOptions* HttpConnectionManager::release_http_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
  if (has_http_protocol_options()) {
    clear_has_http_codec_options();
    ::envoy::api::v2::Http1ProtocolOptions* temp = http_codec_options_.http_protocol_options_;
    http_codec_options_.http_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void HttpConnectionManager::set_allocated_http_protocol_options(::envoy::api::v2::Http1ProtocolOptions* http_protocol_options) {
  clear_http_codec_options();
  if (http_protocol_options) {
    set_has_http_protocol_options();
    http_codec_options_.http_protocol_options_ = http_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
}

// .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
inline bool HttpConnectionManager::has_http2_protocol_options() const {
  return http_codec_options_case() == kHttp2ProtocolOptions;
}
inline void HttpConnectionManager::set_has_http2_protocol_options() {
  _oneof_case_[1] = kHttp2ProtocolOptions;
}
inline void HttpConnectionManager::clear_http2_protocol_options() {
  if (has_http2_protocol_options()) {
    delete http_codec_options_.http2_protocol_options_;
    clear_has_http_codec_options();
  }
}
inline  const ::envoy::api::v2::Http2ProtocolOptions& HttpConnectionManager::http2_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
  return has_http2_protocol_options()
      ? *http_codec_options_.http2_protocol_options_
      : ::envoy::api::v2::Http2ProtocolOptions::default_instance();
}
inline ::envoy::api::v2::Http2ProtocolOptions* HttpConnectionManager::mutable_http2_protocol_options() {
  if (!has_http2_protocol_options()) {
    clear_http_codec_options();
    set_has_http2_protocol_options();
    http_codec_options_.http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
  return http_codec_options_.http2_protocol_options_;
}
inline ::envoy::api::v2::Http2ProtocolOptions* HttpConnectionManager::release_http2_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
  if (has_http2_protocol_options()) {
    clear_has_http_codec_options();
    ::envoy::api::v2::Http2ProtocolOptions* temp = http_codec_options_.http2_protocol_options_;
    http_codec_options_.http2_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void HttpConnectionManager::set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options) {
  clear_http_codec_options();
  if (http2_protocol_options) {
    set_has_http2_protocol_options();
    http_codec_options_.http2_protocol_options_ = http2_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
}

// string server_name = 10;
inline void HttpConnectionManager::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpConnectionManager::server_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.server_name)
  return server_name_.GetNoArena();
}
inline void HttpConnectionManager::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
#if LANG_CXX11
inline void HttpConnectionManager::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
#endif
inline void HttpConnectionManager::set_server_name(const char* value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
inline void HttpConnectionManager::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
inline ::std::string* HttpConnectionManager::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpConnectionManager::release_server_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpConnectionManager::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.server_name)
}

// .google.protobuf.Duration idle_timeout = 11;
inline bool HttpConnectionManager::has_idle_timeout() const {
  return this != internal_default_instance() && idle_timeout_ != NULL;
}
inline void HttpConnectionManager::clear_idle_timeout() {
  if (GetArenaNoVirtual() == NULL && idle_timeout_ != NULL) delete idle_timeout_;
  idle_timeout_ = NULL;
}
inline const ::google::protobuf::Duration& HttpConnectionManager::idle_timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
  return idle_timeout_ != NULL ? *idle_timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* HttpConnectionManager::mutable_idle_timeout() {
  
  if (idle_timeout_ == NULL) {
    idle_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
  return idle_timeout_;
}
inline ::google::protobuf::Duration* HttpConnectionManager::release_idle_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
  
  ::google::protobuf::Duration* temp = idle_timeout_;
  idle_timeout_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_idle_timeout(::google::protobuf::Duration* idle_timeout) {
  delete idle_timeout_;
  if (idle_timeout != NULL && idle_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_idle_timeout = new ::google::protobuf::Duration;
    new_idle_timeout->CopyFrom(*idle_timeout);
    idle_timeout = new_idle_timeout;
  }
  idle_timeout_ = idle_timeout;
  if (idle_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
}

// .google.protobuf.Duration drain_timeout = 12;
inline bool HttpConnectionManager::has_drain_timeout() const {
  return this != internal_default_instance() && drain_timeout_ != NULL;
}
inline void HttpConnectionManager::clear_drain_timeout() {
  if (GetArenaNoVirtual() == NULL && drain_timeout_ != NULL) delete drain_timeout_;
  drain_timeout_ = NULL;
}
inline const ::google::protobuf::Duration& HttpConnectionManager::drain_timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
  return drain_timeout_ != NULL ? *drain_timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* HttpConnectionManager::mutable_drain_timeout() {
  
  if (drain_timeout_ == NULL) {
    drain_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
  return drain_timeout_;
}
inline ::google::protobuf::Duration* HttpConnectionManager::release_drain_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
  
  ::google::protobuf::Duration* temp = drain_timeout_;
  drain_timeout_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_drain_timeout(::google::protobuf::Duration* drain_timeout) {
  delete drain_timeout_;
  if (drain_timeout != NULL && drain_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_drain_timeout = new ::google::protobuf::Duration;
    new_drain_timeout->CopyFrom(*drain_timeout);
    drain_timeout = new_drain_timeout;
  }
  drain_timeout_ = drain_timeout;
  if (drain_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
}

// .envoy.api.v2.filter.AccessLog access_log = 13;
inline bool HttpConnectionManager::has_access_log() const {
  return this != internal_default_instance() && access_log_ != NULL;
}
inline void HttpConnectionManager::clear_access_log() {
  if (GetArenaNoVirtual() == NULL && access_log_ != NULL) delete access_log_;
  access_log_ = NULL;
}
inline const ::envoy::api::v2::filter::AccessLog& HttpConnectionManager::access_log() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return access_log_ != NULL ? *access_log_
                         : *::envoy::api::v2::filter::AccessLog::internal_default_instance();
}
inline ::envoy::api::v2::filter::AccessLog* HttpConnectionManager::mutable_access_log() {
  
  if (access_log_ == NULL) {
    access_log_ = new ::envoy::api::v2::filter::AccessLog;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return access_log_;
}
inline ::envoy::api::v2::filter::AccessLog* HttpConnectionManager::release_access_log() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.access_log)
  
  ::envoy::api::v2::filter::AccessLog* temp = access_log_;
  access_log_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_access_log(::envoy::api::v2::filter::AccessLog* access_log) {
  delete access_log_;
  access_log_ = access_log;
  if (access_log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.access_log)
}

// .google.protobuf.BoolValue use_remote_address = 14;
inline bool HttpConnectionManager::has_use_remote_address() const {
  return this != internal_default_instance() && use_remote_address_ != NULL;
}
inline void HttpConnectionManager::clear_use_remote_address() {
  if (GetArenaNoVirtual() == NULL && use_remote_address_ != NULL) delete use_remote_address_;
  use_remote_address_ = NULL;
}
inline const ::google::protobuf::BoolValue& HttpConnectionManager::use_remote_address() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
  return use_remote_address_ != NULL ? *use_remote_address_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::mutable_use_remote_address() {
  
  if (use_remote_address_ == NULL) {
    use_remote_address_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
  return use_remote_address_;
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::release_use_remote_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
  
  ::google::protobuf::BoolValue* temp = use_remote_address_;
  use_remote_address_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_use_remote_address(::google::protobuf::BoolValue* use_remote_address) {
  delete use_remote_address_;
  if (use_remote_address != NULL && use_remote_address->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_use_remote_address = new ::google::protobuf::BoolValue;
    new_use_remote_address->CopyFrom(*use_remote_address);
    use_remote_address = new_use_remote_address;
  }
  use_remote_address_ = use_remote_address;
  if (use_remote_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
}

// .google.protobuf.BoolValue generate_request_id = 15;
inline bool HttpConnectionManager::has_generate_request_id() const {
  return this != internal_default_instance() && generate_request_id_ != NULL;
}
inline void HttpConnectionManager::clear_generate_request_id() {
  if (GetArenaNoVirtual() == NULL && generate_request_id_ != NULL) delete generate_request_id_;
  generate_request_id_ = NULL;
}
inline const ::google::protobuf::BoolValue& HttpConnectionManager::generate_request_id() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
  return generate_request_id_ != NULL ? *generate_request_id_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::mutable_generate_request_id() {
  
  if (generate_request_id_ == NULL) {
    generate_request_id_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
  return generate_request_id_;
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::release_generate_request_id() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
  
  ::google::protobuf::BoolValue* temp = generate_request_id_;
  generate_request_id_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_generate_request_id(::google::protobuf::BoolValue* generate_request_id) {
  delete generate_request_id_;
  if (generate_request_id != NULL && generate_request_id->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_generate_request_id = new ::google::protobuf::BoolValue;
    new_generate_request_id->CopyFrom(*generate_request_id);
    generate_request_id = new_generate_request_id;
  }
  generate_request_id_ = generate_request_id;
  if (generate_request_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
}

inline bool HttpConnectionManager::has_route_specifier() const {
  return route_specifier_case() != ROUTE_SPECIFIER_NOT_SET;
}
inline void HttpConnectionManager::clear_has_route_specifier() {
  _oneof_case_[0] = ROUTE_SPECIFIER_NOT_SET;
}
inline bool HttpConnectionManager::has_http_codec_options() const {
  return http_codec_options_case() != HTTP_CODEC_OPTIONS_NOT_SET;
}
inline void HttpConnectionManager::clear_has_http_codec_options() {
  _oneof_case_[1] = HTTP_CODEC_OPTIONS_NOT_SET;
}
inline HttpConnectionManager::RouteSpecifierCase HttpConnectionManager::route_specifier_case() const {
  return HttpConnectionManager::RouteSpecifierCase(_oneof_case_[0]);
}
inline HttpConnectionManager::HttpCodecOptionsCase HttpConnectionManager::http_codec_options_case() const {
  return HttpConnectionManager::HttpCodecOptionsCase(_oneof_case_[1]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::envoy::api::v2::filter::StatusCodeFilter_Op> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::filter::StatusCodeFilter_Op>() {
  return ::envoy::api::v2::filter::StatusCodeFilter_Op_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::filter::DurationFilter_Op> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::filter::DurationFilter_Op>() {
  return ::envoy::api::v2::filter::DurationFilter_Op_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::filter::HttpFilter_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::filter::HttpFilter_Type>() {
  return ::envoy::api::v2::filter::HttpFilter_Type_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName>() {
  return ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::filter::HttpConnectionManager_CodecType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::filter::HttpConnectionManager_CodecType>() {
  return ::envoy::api::v2::filter::HttpConnectionManager_CodecType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto__INCLUDED
