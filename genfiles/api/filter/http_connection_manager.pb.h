// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/http_connection_manager.proto

#ifndef PROTOBUF_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto__INCLUDED
#define PROTOBUF_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "api/base.pb.h"
#include "api/discovery.pb.h"
#include "api/protocol.pb.h"
#include "api/rds.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
namespace filter {
class AccessLog;
class AccessLogDefaultTypeInternal;
extern AccessLogDefaultTypeInternal _AccessLog_default_instance_;
class AccessLogFilter;
class AccessLogFilterDefaultTypeInternal;
extern AccessLogFilterDefaultTypeInternal _AccessLogFilter_default_instance_;
class AndFilter;
class AndFilterDefaultTypeInternal;
extern AndFilterDefaultTypeInternal _AndFilter_default_instance_;
class ComparisonFilter;
class ComparisonFilterDefaultTypeInternal;
extern ComparisonFilterDefaultTypeInternal _ComparisonFilter_default_instance_;
class DurationFilter;
class DurationFilterDefaultTypeInternal;
extern DurationFilterDefaultTypeInternal _DurationFilter_default_instance_;
class FileAccessLog;
class FileAccessLogDefaultTypeInternal;
extern FileAccessLogDefaultTypeInternal _FileAccessLog_default_instance_;
class HttpConnectionManager;
class HttpConnectionManagerDefaultTypeInternal;
extern HttpConnectionManagerDefaultTypeInternal _HttpConnectionManager_default_instance_;
class HttpConnectionManager_SetCurrentClientCertDetails;
class HttpConnectionManager_SetCurrentClientCertDetailsDefaultTypeInternal;
extern HttpConnectionManager_SetCurrentClientCertDetailsDefaultTypeInternal _HttpConnectionManager_SetCurrentClientCertDetails_default_instance_;
class HttpConnectionManager_Tracing;
class HttpConnectionManager_TracingDefaultTypeInternal;
extern HttpConnectionManager_TracingDefaultTypeInternal _HttpConnectionManager_Tracing_default_instance_;
class HttpFilter;
class HttpFilterDefaultTypeInternal;
extern HttpFilterDefaultTypeInternal _HttpFilter_default_instance_;
class HttpFilter_DeprecatedV1;
class HttpFilter_DeprecatedV1DefaultTypeInternal;
extern HttpFilter_DeprecatedV1DefaultTypeInternal _HttpFilter_DeprecatedV1_default_instance_;
class NotHealthCheckFilter;
class NotHealthCheckFilterDefaultTypeInternal;
extern NotHealthCheckFilterDefaultTypeInternal _NotHealthCheckFilter_default_instance_;
class OrFilter;
class OrFilterDefaultTypeInternal;
extern OrFilterDefaultTypeInternal _OrFilter_default_instance_;
class Rds;
class RdsDefaultTypeInternal;
extern RdsDefaultTypeInternal _Rds_default_instance_;
class RuntimeFilter;
class RuntimeFilterDefaultTypeInternal;
extern RuntimeFilterDefaultTypeInternal _RuntimeFilter_default_instance_;
class StatusCodeFilter;
class StatusCodeFilterDefaultTypeInternal;
extern StatusCodeFilterDefaultTypeInternal _StatusCodeFilter_default_instance_;
class TraceableFilter;
class TraceableFilterDefaultTypeInternal;
extern TraceableFilterDefaultTypeInternal _TraceableFilter_default_instance_;
}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

namespace envoy {
namespace api {
namespace v2 {
namespace filter {

namespace protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto

enum ComparisonFilter_Op {
  ComparisonFilter_Op_EQ = 0,
  ComparisonFilter_Op_GE = 1,
  ComparisonFilter_Op_ComparisonFilter_Op_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ComparisonFilter_Op_ComparisonFilter_Op_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ComparisonFilter_Op_IsValid(int value);
const ComparisonFilter_Op ComparisonFilter_Op_Op_MIN = ComparisonFilter_Op_EQ;
const ComparisonFilter_Op ComparisonFilter_Op_Op_MAX = ComparisonFilter_Op_GE;
const int ComparisonFilter_Op_Op_ARRAYSIZE = ComparisonFilter_Op_Op_MAX + 1;

const ::google::protobuf::EnumDescriptor* ComparisonFilter_Op_descriptor();
inline const ::std::string& ComparisonFilter_Op_Name(ComparisonFilter_Op value) {
  return ::google::protobuf::internal::NameOfEnum(
    ComparisonFilter_Op_descriptor(), value);
}
inline bool ComparisonFilter_Op_Parse(
    const ::std::string& name, ComparisonFilter_Op* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComparisonFilter_Op>(
    ComparisonFilter_Op_descriptor(), name, value);
}
enum HttpConnectionManager_Tracing_OperationName {
  HttpConnectionManager_Tracing_OperationName_INGRESS = 0,
  HttpConnectionManager_Tracing_OperationName_EGRESS = 1,
  HttpConnectionManager_Tracing_OperationName_HttpConnectionManager_Tracing_OperationName_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HttpConnectionManager_Tracing_OperationName_HttpConnectionManager_Tracing_OperationName_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HttpConnectionManager_Tracing_OperationName_IsValid(int value);
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing_OperationName_OperationName_MIN = HttpConnectionManager_Tracing_OperationName_INGRESS;
const HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing_OperationName_OperationName_MAX = HttpConnectionManager_Tracing_OperationName_EGRESS;
const int HttpConnectionManager_Tracing_OperationName_OperationName_ARRAYSIZE = HttpConnectionManager_Tracing_OperationName_OperationName_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpConnectionManager_Tracing_OperationName_descriptor();
inline const ::std::string& HttpConnectionManager_Tracing_OperationName_Name(HttpConnectionManager_Tracing_OperationName value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpConnectionManager_Tracing_OperationName_descriptor(), value);
}
inline bool HttpConnectionManager_Tracing_OperationName_Parse(
    const ::std::string& name, HttpConnectionManager_Tracing_OperationName* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpConnectionManager_Tracing_OperationName>(
    HttpConnectionManager_Tracing_OperationName_descriptor(), name, value);
}
enum HttpConnectionManager_CodecType {
  HttpConnectionManager_CodecType_AUTO = 0,
  HttpConnectionManager_CodecType_HTTP1 = 1,
  HttpConnectionManager_CodecType_HTTP2 = 2,
  HttpConnectionManager_CodecType_HttpConnectionManager_CodecType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HttpConnectionManager_CodecType_HttpConnectionManager_CodecType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HttpConnectionManager_CodecType_IsValid(int value);
const HttpConnectionManager_CodecType HttpConnectionManager_CodecType_CodecType_MIN = HttpConnectionManager_CodecType_AUTO;
const HttpConnectionManager_CodecType HttpConnectionManager_CodecType_CodecType_MAX = HttpConnectionManager_CodecType_HTTP2;
const int HttpConnectionManager_CodecType_CodecType_ARRAYSIZE = HttpConnectionManager_CodecType_CodecType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpConnectionManager_CodecType_descriptor();
inline const ::std::string& HttpConnectionManager_CodecType_Name(HttpConnectionManager_CodecType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpConnectionManager_CodecType_descriptor(), value);
}
inline bool HttpConnectionManager_CodecType_Parse(
    const ::std::string& name, HttpConnectionManager_CodecType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpConnectionManager_CodecType>(
    HttpConnectionManager_CodecType_descriptor(), name, value);
}
enum HttpConnectionManager_ForwardClientCertDetails {
  HttpConnectionManager_ForwardClientCertDetails_SANITIZE = 0,
  HttpConnectionManager_ForwardClientCertDetails_FORWARD_ONLY = 1,
  HttpConnectionManager_ForwardClientCertDetails_APPEND_FORWARD = 2,
  HttpConnectionManager_ForwardClientCertDetails_SANITIZE_SET = 3,
  HttpConnectionManager_ForwardClientCertDetails_ALWAYS_FORWARD_ONLY = 4,
  HttpConnectionManager_ForwardClientCertDetails_HttpConnectionManager_ForwardClientCertDetails_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HttpConnectionManager_ForwardClientCertDetails_HttpConnectionManager_ForwardClientCertDetails_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HttpConnectionManager_ForwardClientCertDetails_IsValid(int value);
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_MIN = HttpConnectionManager_ForwardClientCertDetails_SANITIZE;
const HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_MAX = HttpConnectionManager_ForwardClientCertDetails_ALWAYS_FORWARD_ONLY;
const int HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_ARRAYSIZE = HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpConnectionManager_ForwardClientCertDetails_descriptor();
inline const ::std::string& HttpConnectionManager_ForwardClientCertDetails_Name(HttpConnectionManager_ForwardClientCertDetails value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpConnectionManager_ForwardClientCertDetails_descriptor(), value);
}
inline bool HttpConnectionManager_ForwardClientCertDetails_Parse(
    const ::std::string& name, HttpConnectionManager_ForwardClientCertDetails* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpConnectionManager_ForwardClientCertDetails>(
    HttpConnectionManager_ForwardClientCertDetails_descriptor(), name, value);
}
// ===================================================================

class Rds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.Rds) */ {
 public:
  Rds();
  virtual ~Rds();

  Rds(const Rds& from);

  inline Rds& operator=(const Rds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rds(Rds&& from) noexcept
    : Rds() {
    *this = ::std::move(from);
  }

  inline Rds& operator=(Rds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rds& default_instance();

  static inline const Rds* internal_default_instance() {
    return reinterpret_cast<const Rds*>(
               &_Rds_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Rds* other);
  friend void swap(Rds& a, Rds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rds* New() const PROTOBUF_FINAL { return New(NULL); }

  Rds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rds& from);
  void MergeFrom(const Rds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string route_config_name = 2;
  void clear_route_config_name();
  static const int kRouteConfigNameFieldNumber = 2;
  const ::std::string& route_config_name() const;
  void set_route_config_name(const ::std::string& value);
  #if LANG_CXX11
  void set_route_config_name(::std::string&& value);
  #endif
  void set_route_config_name(const char* value);
  void set_route_config_name(const char* value, size_t size);
  ::std::string* mutable_route_config_name();
  ::std::string* release_route_config_name();
  void set_allocated_route_config_name(::std::string* route_config_name);

  // .envoy.api.v2.ConfigSource config_source = 1;
  bool has_config_source() const;
  void clear_config_source();
  static const int kConfigSourceFieldNumber = 1;
  const ::envoy::api::v2::ConfigSource& config_source() const;
  ::envoy::api::v2::ConfigSource* mutable_config_source();
  ::envoy::api::v2::ConfigSource* release_config_source();
  void set_allocated_config_source(::envoy::api::v2::ConfigSource* config_source);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.Rds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr route_config_name_;
  ::envoy::api::v2::ConfigSource* config_source_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ComparisonFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.ComparisonFilter) */ {
 public:
  ComparisonFilter();
  virtual ~ComparisonFilter();

  ComparisonFilter(const ComparisonFilter& from);

  inline ComparisonFilter& operator=(const ComparisonFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ComparisonFilter(ComparisonFilter&& from) noexcept
    : ComparisonFilter() {
    *this = ::std::move(from);
  }

  inline ComparisonFilter& operator=(ComparisonFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComparisonFilter& default_instance();

  static inline const ComparisonFilter* internal_default_instance() {
    return reinterpret_cast<const ComparisonFilter*>(
               &_ComparisonFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ComparisonFilter* other);
  friend void swap(ComparisonFilter& a, ComparisonFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComparisonFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  ComparisonFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ComparisonFilter& from);
  void MergeFrom(const ComparisonFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ComparisonFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ComparisonFilter_Op Op;
  static const Op EQ =
    ComparisonFilter_Op_EQ;
  static const Op GE =
    ComparisonFilter_Op_GE;
  static inline bool Op_IsValid(int value) {
    return ComparisonFilter_Op_IsValid(value);
  }
  static const Op Op_MIN =
    ComparisonFilter_Op_Op_MIN;
  static const Op Op_MAX =
    ComparisonFilter_Op_Op_MAX;
  static const int Op_ARRAYSIZE =
    ComparisonFilter_Op_Op_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Op_descriptor() {
    return ComparisonFilter_Op_descriptor();
  }
  static inline const ::std::string& Op_Name(Op value) {
    return ComparisonFilter_Op_Name(value);
  }
  static inline bool Op_Parse(const ::std::string& name,
      Op* value) {
    return ComparisonFilter_Op_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .envoy.api.v2.RuntimeUInt32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::envoy::api::v2::RuntimeUInt32& value() const;
  ::envoy::api::v2::RuntimeUInt32* mutable_value();
  ::envoy::api::v2::RuntimeUInt32* release_value();
  void set_allocated_value(::envoy::api::v2::RuntimeUInt32* value);

  // .envoy.api.v2.filter.ComparisonFilter.Op op = 1;
  void clear_op();
  static const int kOpFieldNumber = 1;
  ::envoy::api::v2::filter::ComparisonFilter_Op op() const;
  void set_op(::envoy::api::v2::filter::ComparisonFilter_Op value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.ComparisonFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::envoy::api::v2::RuntimeUInt32* value_;
  int op_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatusCodeFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.StatusCodeFilter) */ {
 public:
  StatusCodeFilter();
  virtual ~StatusCodeFilter();

  StatusCodeFilter(const StatusCodeFilter& from);

  inline StatusCodeFilter& operator=(const StatusCodeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusCodeFilter(StatusCodeFilter&& from) noexcept
    : StatusCodeFilter() {
    *this = ::std::move(from);
  }

  inline StatusCodeFilter& operator=(StatusCodeFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusCodeFilter& default_instance();

  static inline const StatusCodeFilter* internal_default_instance() {
    return reinterpret_cast<const StatusCodeFilter*>(
               &_StatusCodeFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(StatusCodeFilter* other);
  friend void swap(StatusCodeFilter& a, StatusCodeFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusCodeFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  StatusCodeFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatusCodeFilter& from);
  void MergeFrom(const StatusCodeFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatusCodeFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  bool has_comparison() const;
  void clear_comparison();
  static const int kComparisonFieldNumber = 1;
  const ::envoy::api::v2::filter::ComparisonFilter& comparison() const;
  ::envoy::api::v2::filter::ComparisonFilter* mutable_comparison();
  ::envoy::api::v2::filter::ComparisonFilter* release_comparison();
  void set_allocated_comparison(::envoy::api::v2::filter::ComparisonFilter* comparison);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.StatusCodeFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::envoy::api::v2::filter::ComparisonFilter* comparison_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DurationFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.DurationFilter) */ {
 public:
  DurationFilter();
  virtual ~DurationFilter();

  DurationFilter(const DurationFilter& from);

  inline DurationFilter& operator=(const DurationFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DurationFilter(DurationFilter&& from) noexcept
    : DurationFilter() {
    *this = ::std::move(from);
  }

  inline DurationFilter& operator=(DurationFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DurationFilter& default_instance();

  static inline const DurationFilter* internal_default_instance() {
    return reinterpret_cast<const DurationFilter*>(
               &_DurationFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DurationFilter* other);
  friend void swap(DurationFilter& a, DurationFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DurationFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  DurationFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DurationFilter& from);
  void MergeFrom(const DurationFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DurationFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .envoy.api.v2.filter.ComparisonFilter comparison = 1;
  bool has_comparison() const;
  void clear_comparison();
  static const int kComparisonFieldNumber = 1;
  const ::envoy::api::v2::filter::ComparisonFilter& comparison() const;
  ::envoy::api::v2::filter::ComparisonFilter* mutable_comparison();
  ::envoy::api::v2::filter::ComparisonFilter* release_comparison();
  void set_allocated_comparison(::envoy::api::v2::filter::ComparisonFilter* comparison);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.DurationFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::envoy::api::v2::filter::ComparisonFilter* comparison_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotHealthCheckFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.NotHealthCheckFilter) */ {
 public:
  NotHealthCheckFilter();
  virtual ~NotHealthCheckFilter();

  NotHealthCheckFilter(const NotHealthCheckFilter& from);

  inline NotHealthCheckFilter& operator=(const NotHealthCheckFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotHealthCheckFilter(NotHealthCheckFilter&& from) noexcept
    : NotHealthCheckFilter() {
    *this = ::std::move(from);
  }

  inline NotHealthCheckFilter& operator=(NotHealthCheckFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotHealthCheckFilter& default_instance();

  static inline const NotHealthCheckFilter* internal_default_instance() {
    return reinterpret_cast<const NotHealthCheckFilter*>(
               &_NotHealthCheckFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(NotHealthCheckFilter* other);
  friend void swap(NotHealthCheckFilter& a, NotHealthCheckFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotHealthCheckFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  NotHealthCheckFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotHealthCheckFilter& from);
  void MergeFrom(const NotHealthCheckFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotHealthCheckFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.NotHealthCheckFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TraceableFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.TraceableFilter) */ {
 public:
  TraceableFilter();
  virtual ~TraceableFilter();

  TraceableFilter(const TraceableFilter& from);

  inline TraceableFilter& operator=(const TraceableFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TraceableFilter(TraceableFilter&& from) noexcept
    : TraceableFilter() {
    *this = ::std::move(from);
  }

  inline TraceableFilter& operator=(TraceableFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TraceableFilter& default_instance();

  static inline const TraceableFilter* internal_default_instance() {
    return reinterpret_cast<const TraceableFilter*>(
               &_TraceableFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TraceableFilter* other);
  friend void swap(TraceableFilter& a, TraceableFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TraceableFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  TraceableFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TraceableFilter& from);
  void MergeFrom(const TraceableFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TraceableFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.TraceableFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RuntimeFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.RuntimeFilter) */ {
 public:
  RuntimeFilter();
  virtual ~RuntimeFilter();

  RuntimeFilter(const RuntimeFilter& from);

  inline RuntimeFilter& operator=(const RuntimeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RuntimeFilter(RuntimeFilter&& from) noexcept
    : RuntimeFilter() {
    *this = ::std::move(from);
  }

  inline RuntimeFilter& operator=(RuntimeFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RuntimeFilter& default_instance();

  static inline const RuntimeFilter* internal_default_instance() {
    return reinterpret_cast<const RuntimeFilter*>(
               &_RuntimeFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RuntimeFilter* other);
  friend void swap(RuntimeFilter& a, RuntimeFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RuntimeFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  RuntimeFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RuntimeFilter& from);
  void MergeFrom(const RuntimeFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RuntimeFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string runtime_key = 1;
  void clear_runtime_key();
  static const int kRuntimeKeyFieldNumber = 1;
  const ::std::string& runtime_key() const;
  void set_runtime_key(const ::std::string& value);
  #if LANG_CXX11
  void set_runtime_key(::std::string&& value);
  #endif
  void set_runtime_key(const char* value);
  void set_runtime_key(const char* value, size_t size);
  ::std::string* mutable_runtime_key();
  ::std::string* release_runtime_key();
  void set_allocated_runtime_key(::std::string* runtime_key);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.RuntimeFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr runtime_key_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AndFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.AndFilter) */ {
 public:
  AndFilter();
  virtual ~AndFilter();

  AndFilter(const AndFilter& from);

  inline AndFilter& operator=(const AndFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AndFilter(AndFilter&& from) noexcept
    : AndFilter() {
    *this = ::std::move(from);
  }

  inline AndFilter& operator=(AndFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AndFilter& default_instance();

  static inline const AndFilter* internal_default_instance() {
    return reinterpret_cast<const AndFilter*>(
               &_AndFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(AndFilter* other);
  friend void swap(AndFilter& a, AndFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AndFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  AndFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AndFilter& from);
  void MergeFrom(const AndFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AndFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
  int filters_size() const;
  void clear_filters();
  static const int kFiltersFieldNumber = 1;
  const ::envoy::api::v2::filter::AccessLogFilter& filters(int index) const;
  ::envoy::api::v2::filter::AccessLogFilter* mutable_filters(int index);
  ::envoy::api::v2::filter::AccessLogFilter* add_filters();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >*
      mutable_filters();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >&
      filters() const;

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.AndFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter > filters_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OrFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.OrFilter) */ {
 public:
  OrFilter();
  virtual ~OrFilter();

  OrFilter(const OrFilter& from);

  inline OrFilter& operator=(const OrFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrFilter(OrFilter&& from) noexcept
    : OrFilter() {
    *this = ::std::move(from);
  }

  inline OrFilter& operator=(OrFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OrFilter& default_instance();

  static inline const OrFilter* internal_default_instance() {
    return reinterpret_cast<const OrFilter*>(
               &_OrFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(OrFilter* other);
  friend void swap(OrFilter& a, OrFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  OrFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OrFilter& from);
  void MergeFrom(const OrFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OrFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
  int filters_size() const;
  void clear_filters();
  static const int kFiltersFieldNumber = 2;
  const ::envoy::api::v2::filter::AccessLogFilter& filters(int index) const;
  ::envoy::api::v2::filter::AccessLogFilter* mutable_filters(int index);
  ::envoy::api::v2::filter::AccessLogFilter* add_filters();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >*
      mutable_filters();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >&
      filters() const;

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.OrFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter > filters_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccessLogFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.AccessLogFilter) */ {
 public:
  AccessLogFilter();
  virtual ~AccessLogFilter();

  AccessLogFilter(const AccessLogFilter& from);

  inline AccessLogFilter& operator=(const AccessLogFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccessLogFilter(AccessLogFilter&& from) noexcept
    : AccessLogFilter() {
    *this = ::std::move(from);
  }

  inline AccessLogFilter& operator=(AccessLogFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessLogFilter& default_instance();

  enum FilterSpecifierCase {
    kStatusCodeFilter = 1,
    kDurationFilter = 2,
    kNotHealthCheckFilter = 3,
    kTraceableFilter = 4,
    kRuntimeFilter = 5,
    kAndFilter = 6,
    kOrFilter = 7,
    FILTER_SPECIFIER_NOT_SET = 0,
  };

  static inline const AccessLogFilter* internal_default_instance() {
    return reinterpret_cast<const AccessLogFilter*>(
               &_AccessLogFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(AccessLogFilter* other);
  friend void swap(AccessLogFilter& a, AccessLogFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccessLogFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  AccessLogFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccessLogFilter& from);
  void MergeFrom(const AccessLogFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccessLogFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .envoy.api.v2.filter.StatusCodeFilter status_code_filter = 1;
  bool has_status_code_filter() const;
  void clear_status_code_filter();
  static const int kStatusCodeFilterFieldNumber = 1;
  const ::envoy::api::v2::filter::StatusCodeFilter& status_code_filter() const;
  ::envoy::api::v2::filter::StatusCodeFilter* mutable_status_code_filter();
  ::envoy::api::v2::filter::StatusCodeFilter* release_status_code_filter();
  void set_allocated_status_code_filter(::envoy::api::v2::filter::StatusCodeFilter* status_code_filter);

  // .envoy.api.v2.filter.DurationFilter duration_filter = 2;
  bool has_duration_filter() const;
  void clear_duration_filter();
  static const int kDurationFilterFieldNumber = 2;
  const ::envoy::api::v2::filter::DurationFilter& duration_filter() const;
  ::envoy::api::v2::filter::DurationFilter* mutable_duration_filter();
  ::envoy::api::v2::filter::DurationFilter* release_duration_filter();
  void set_allocated_duration_filter(::envoy::api::v2::filter::DurationFilter* duration_filter);

  // .envoy.api.v2.filter.NotHealthCheckFilter not_health_check_filter = 3;
  bool has_not_health_check_filter() const;
  void clear_not_health_check_filter();
  static const int kNotHealthCheckFilterFieldNumber = 3;
  const ::envoy::api::v2::filter::NotHealthCheckFilter& not_health_check_filter() const;
  ::envoy::api::v2::filter::NotHealthCheckFilter* mutable_not_health_check_filter();
  ::envoy::api::v2::filter::NotHealthCheckFilter* release_not_health_check_filter();
  void set_allocated_not_health_check_filter(::envoy::api::v2::filter::NotHealthCheckFilter* not_health_check_filter);

  // .envoy.api.v2.filter.TraceableFilter traceable_filter = 4;
  bool has_traceable_filter() const;
  void clear_traceable_filter();
  static const int kTraceableFilterFieldNumber = 4;
  const ::envoy::api::v2::filter::TraceableFilter& traceable_filter() const;
  ::envoy::api::v2::filter::TraceableFilter* mutable_traceable_filter();
  ::envoy::api::v2::filter::TraceableFilter* release_traceable_filter();
  void set_allocated_traceable_filter(::envoy::api::v2::filter::TraceableFilter* traceable_filter);

  // .envoy.api.v2.filter.RuntimeFilter runtime_filter = 5;
  bool has_runtime_filter() const;
  void clear_runtime_filter();
  static const int kRuntimeFilterFieldNumber = 5;
  const ::envoy::api::v2::filter::RuntimeFilter& runtime_filter() const;
  ::envoy::api::v2::filter::RuntimeFilter* mutable_runtime_filter();
  ::envoy::api::v2::filter::RuntimeFilter* release_runtime_filter();
  void set_allocated_runtime_filter(::envoy::api::v2::filter::RuntimeFilter* runtime_filter);

  // .envoy.api.v2.filter.AndFilter and_filter = 6;
  bool has_and_filter() const;
  void clear_and_filter();
  static const int kAndFilterFieldNumber = 6;
  const ::envoy::api::v2::filter::AndFilter& and_filter() const;
  ::envoy::api::v2::filter::AndFilter* mutable_and_filter();
  ::envoy::api::v2::filter::AndFilter* release_and_filter();
  void set_allocated_and_filter(::envoy::api::v2::filter::AndFilter* and_filter);

  // .envoy.api.v2.filter.OrFilter or_filter = 7;
  bool has_or_filter() const;
  void clear_or_filter();
  static const int kOrFilterFieldNumber = 7;
  const ::envoy::api::v2::filter::OrFilter& or_filter() const;
  ::envoy::api::v2::filter::OrFilter* mutable_or_filter();
  ::envoy::api::v2::filter::OrFilter* release_or_filter();
  void set_allocated_or_filter(::envoy::api::v2::filter::OrFilter* or_filter);

  FilterSpecifierCase filter_specifier_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.AccessLogFilter)
 private:
  void set_has_status_code_filter();
  void set_has_duration_filter();
  void set_has_not_health_check_filter();
  void set_has_traceable_filter();
  void set_has_runtime_filter();
  void set_has_and_filter();
  void set_has_or_filter();

  inline bool has_filter_specifier() const;
  void clear_filter_specifier();
  inline void clear_has_filter_specifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union FilterSpecifierUnion {
    FilterSpecifierUnion() {}
    ::envoy::api::v2::filter::StatusCodeFilter* status_code_filter_;
    ::envoy::api::v2::filter::DurationFilter* duration_filter_;
    ::envoy::api::v2::filter::NotHealthCheckFilter* not_health_check_filter_;
    ::envoy::api::v2::filter::TraceableFilter* traceable_filter_;
    ::envoy::api::v2::filter::RuntimeFilter* runtime_filter_;
    ::envoy::api::v2::filter::AndFilter* and_filter_;
    ::envoy::api::v2::filter::OrFilter* or_filter_;
  } filter_specifier_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileAccessLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.FileAccessLog) */ {
 public:
  FileAccessLog();
  virtual ~FileAccessLog();

  FileAccessLog(const FileAccessLog& from);

  inline FileAccessLog& operator=(const FileAccessLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileAccessLog(FileAccessLog&& from) noexcept
    : FileAccessLog() {
    *this = ::std::move(from);
  }

  inline FileAccessLog& operator=(FileAccessLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileAccessLog& default_instance();

  static inline const FileAccessLog* internal_default_instance() {
    return reinterpret_cast<const FileAccessLog*>(
               &_FileAccessLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(FileAccessLog* other);
  friend void swap(FileAccessLog& a, FileAccessLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileAccessLog* New() const PROTOBUF_FINAL { return New(NULL); }

  FileAccessLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FileAccessLog& from);
  void MergeFrom(const FileAccessLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FileAccessLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string format = 2;
  void clear_format();
  static const int kFormatFieldNumber = 2;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  #if LANG_CXX11
  void set_format(::std::string&& value);
  #endif
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.FileAccessLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccessLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.AccessLog) */ {
 public:
  AccessLog();
  virtual ~AccessLog();

  AccessLog(const AccessLog& from);

  inline AccessLog& operator=(const AccessLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccessLog(AccessLog&& from) noexcept
    : AccessLog() {
    *this = ::std::move(from);
  }

  inline AccessLog& operator=(AccessLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessLog& default_instance();

  static inline const AccessLog* internal_default_instance() {
    return reinterpret_cast<const AccessLog*>(
               &_AccessLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(AccessLog* other);
  friend void swap(AccessLog& a, AccessLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccessLog* New() const PROTOBUF_FINAL { return New(NULL); }

  AccessLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccessLog& from);
  void MergeFrom(const AccessLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccessLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .envoy.api.v2.filter.AccessLogFilter filter = 2;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::envoy::api::v2::filter::AccessLogFilter& filter() const;
  ::envoy::api::v2::filter::AccessLogFilter* mutable_filter();
  ::envoy::api::v2::filter::AccessLogFilter* release_filter();
  void set_allocated_filter(::envoy::api::v2::filter::AccessLogFilter* filter);

  // .google.protobuf.Struct config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  const ::google::protobuf::Struct& config() const;
  ::google::protobuf::Struct* mutable_config();
  ::google::protobuf::Struct* release_config();
  void set_allocated_config(::google::protobuf::Struct* config);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.AccessLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::envoy::api::v2::filter::AccessLogFilter* filter_;
  ::google::protobuf::Struct* config_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HttpFilter_DeprecatedV1 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.HttpFilter.DeprecatedV1) */ {
 public:
  HttpFilter_DeprecatedV1();
  virtual ~HttpFilter_DeprecatedV1();

  HttpFilter_DeprecatedV1(const HttpFilter_DeprecatedV1& from);

  inline HttpFilter_DeprecatedV1& operator=(const HttpFilter_DeprecatedV1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpFilter_DeprecatedV1(HttpFilter_DeprecatedV1&& from) noexcept
    : HttpFilter_DeprecatedV1() {
    *this = ::std::move(from);
  }

  inline HttpFilter_DeprecatedV1& operator=(HttpFilter_DeprecatedV1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpFilter_DeprecatedV1& default_instance();

  static inline const HttpFilter_DeprecatedV1* internal_default_instance() {
    return reinterpret_cast<const HttpFilter_DeprecatedV1*>(
               &_HttpFilter_DeprecatedV1_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(HttpFilter_DeprecatedV1* other);
  friend void swap(HttpFilter_DeprecatedV1& a, HttpFilter_DeprecatedV1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpFilter_DeprecatedV1* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpFilter_DeprecatedV1* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpFilter_DeprecatedV1& from);
  void MergeFrom(const HttpFilter_DeprecatedV1& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpFilter_DeprecatedV1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.HttpFilter.DeprecatedV1)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HttpFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.HttpFilter) */ {
 public:
  HttpFilter();
  virtual ~HttpFilter();

  HttpFilter(const HttpFilter& from);

  inline HttpFilter& operator=(const HttpFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpFilter(HttpFilter&& from) noexcept
    : HttpFilter() {
    *this = ::std::move(from);
  }

  inline HttpFilter& operator=(HttpFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpFilter& default_instance();

  static inline const HttpFilter* internal_default_instance() {
    return reinterpret_cast<const HttpFilter*>(
               &_HttpFilter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(HttpFilter* other);
  friend void swap(HttpFilter& a, HttpFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpFilter* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpFilter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpFilter& from);
  void MergeFrom(const HttpFilter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HttpFilter_DeprecatedV1 DeprecatedV1;

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Struct config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::google::protobuf::Struct& config() const;
  ::google::protobuf::Struct* mutable_config();
  ::google::protobuf::Struct* release_config();
  void set_allocated_config(::google::protobuf::Struct* config);

  // .envoy.api.v2.filter.HttpFilter.DeprecatedV1 deprecated_v1 = 3;
  bool has_deprecated_v1() const;
  void clear_deprecated_v1();
  static const int kDeprecatedV1FieldNumber = 3;
  const ::envoy::api::v2::filter::HttpFilter_DeprecatedV1& deprecated_v1() const;
  ::envoy::api::v2::filter::HttpFilter_DeprecatedV1* mutable_deprecated_v1();
  ::envoy::api::v2::filter::HttpFilter_DeprecatedV1* release_deprecated_v1();
  void set_allocated_deprecated_v1(::envoy::api::v2::filter::HttpFilter_DeprecatedV1* deprecated_v1);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.HttpFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Struct* config_;
  ::envoy::api::v2::filter::HttpFilter_DeprecatedV1* deprecated_v1_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HttpConnectionManager_Tracing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.HttpConnectionManager.Tracing) */ {
 public:
  HttpConnectionManager_Tracing();
  virtual ~HttpConnectionManager_Tracing();

  HttpConnectionManager_Tracing(const HttpConnectionManager_Tracing& from);

  inline HttpConnectionManager_Tracing& operator=(const HttpConnectionManager_Tracing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpConnectionManager_Tracing(HttpConnectionManager_Tracing&& from) noexcept
    : HttpConnectionManager_Tracing() {
    *this = ::std::move(from);
  }

  inline HttpConnectionManager_Tracing& operator=(HttpConnectionManager_Tracing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpConnectionManager_Tracing& default_instance();

  static inline const HttpConnectionManager_Tracing* internal_default_instance() {
    return reinterpret_cast<const HttpConnectionManager_Tracing*>(
               &_HttpConnectionManager_Tracing_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(HttpConnectionManager_Tracing* other);
  friend void swap(HttpConnectionManager_Tracing& a, HttpConnectionManager_Tracing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpConnectionManager_Tracing* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpConnectionManager_Tracing* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpConnectionManager_Tracing& from);
  void MergeFrom(const HttpConnectionManager_Tracing& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpConnectionManager_Tracing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HttpConnectionManager_Tracing_OperationName OperationName;
  static const OperationName INGRESS =
    HttpConnectionManager_Tracing_OperationName_INGRESS;
  static const OperationName EGRESS =
    HttpConnectionManager_Tracing_OperationName_EGRESS;
  static inline bool OperationName_IsValid(int value) {
    return HttpConnectionManager_Tracing_OperationName_IsValid(value);
  }
  static const OperationName OperationName_MIN =
    HttpConnectionManager_Tracing_OperationName_OperationName_MIN;
  static const OperationName OperationName_MAX =
    HttpConnectionManager_Tracing_OperationName_OperationName_MAX;
  static const int OperationName_ARRAYSIZE =
    HttpConnectionManager_Tracing_OperationName_OperationName_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationName_descriptor() {
    return HttpConnectionManager_Tracing_OperationName_descriptor();
  }
  static inline const ::std::string& OperationName_Name(OperationName value) {
    return HttpConnectionManager_Tracing_OperationName_Name(value);
  }
  static inline bool OperationName_Parse(const ::std::string& name,
      OperationName* value) {
    return HttpConnectionManager_Tracing_OperationName_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string request_headers_for_tags = 2;
  int request_headers_for_tags_size() const;
  void clear_request_headers_for_tags();
  static const int kRequestHeadersForTagsFieldNumber = 2;
  const ::std::string& request_headers_for_tags(int index) const;
  ::std::string* mutable_request_headers_for_tags(int index);
  void set_request_headers_for_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_request_headers_for_tags(int index, ::std::string&& value);
  #endif
  void set_request_headers_for_tags(int index, const char* value);
  void set_request_headers_for_tags(int index, const char* value, size_t size);
  ::std::string* add_request_headers_for_tags();
  void add_request_headers_for_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_request_headers_for_tags(::std::string&& value);
  #endif
  void add_request_headers_for_tags(const char* value);
  void add_request_headers_for_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& request_headers_for_tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_request_headers_for_tags();

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
  void clear_operation_name();
  static const int kOperationNameFieldNumber = 1;
  ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName operation_name() const;
  void set_operation_name(::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.HttpConnectionManager.Tracing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> request_headers_for_tags_;
  int operation_name_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HttpConnectionManager_SetCurrentClientCertDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails) */ {
 public:
  HttpConnectionManager_SetCurrentClientCertDetails();
  virtual ~HttpConnectionManager_SetCurrentClientCertDetails();

  HttpConnectionManager_SetCurrentClientCertDetails(const HttpConnectionManager_SetCurrentClientCertDetails& from);

  inline HttpConnectionManager_SetCurrentClientCertDetails& operator=(const HttpConnectionManager_SetCurrentClientCertDetails& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpConnectionManager_SetCurrentClientCertDetails(HttpConnectionManager_SetCurrentClientCertDetails&& from) noexcept
    : HttpConnectionManager_SetCurrentClientCertDetails() {
    *this = ::std::move(from);
  }

  inline HttpConnectionManager_SetCurrentClientCertDetails& operator=(HttpConnectionManager_SetCurrentClientCertDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpConnectionManager_SetCurrentClientCertDetails& default_instance();

  static inline const HttpConnectionManager_SetCurrentClientCertDetails* internal_default_instance() {
    return reinterpret_cast<const HttpConnectionManager_SetCurrentClientCertDetails*>(
               &_HttpConnectionManager_SetCurrentClientCertDetails_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(HttpConnectionManager_SetCurrentClientCertDetails* other);
  friend void swap(HttpConnectionManager_SetCurrentClientCertDetails& a, HttpConnectionManager_SetCurrentClientCertDetails& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpConnectionManager_SetCurrentClientCertDetails* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpConnectionManager_SetCurrentClientCertDetails* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpConnectionManager_SetCurrentClientCertDetails& from);
  void MergeFrom(const HttpConnectionManager_SetCurrentClientCertDetails& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpConnectionManager_SetCurrentClientCertDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.BoolValue subject = 1;
  bool has_subject() const;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::google::protobuf::BoolValue& subject() const;
  ::google::protobuf::BoolValue* mutable_subject();
  ::google::protobuf::BoolValue* release_subject();
  void set_allocated_subject(::google::protobuf::BoolValue* subject);

  // .google.protobuf.BoolValue san = 2;
  bool has_san() const;
  void clear_san();
  static const int kSanFieldNumber = 2;
  const ::google::protobuf::BoolValue& san() const;
  ::google::protobuf::BoolValue* mutable_san();
  ::google::protobuf::BoolValue* release_san();
  void set_allocated_san(::google::protobuf::BoolValue* san);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::BoolValue* subject_;
  ::google::protobuf::BoolValue* san_;
  mutable int _cached_size_;
  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HttpConnectionManager : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.filter.HttpConnectionManager) */ {
 public:
  HttpConnectionManager();
  virtual ~HttpConnectionManager();

  HttpConnectionManager(const HttpConnectionManager& from);

  inline HttpConnectionManager& operator=(const HttpConnectionManager& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpConnectionManager(HttpConnectionManager&& from) noexcept
    : HttpConnectionManager() {
    *this = ::std::move(from);
  }

  inline HttpConnectionManager& operator=(HttpConnectionManager&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpConnectionManager& default_instance();

  enum RouteSpecifierCase {
    kRds = 3,
    kRouteConfig = 4,
    ROUTE_SPECIFIER_NOT_SET = 0,
  };

  static inline const HttpConnectionManager* internal_default_instance() {
    return reinterpret_cast<const HttpConnectionManager*>(
               &_HttpConnectionManager_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(HttpConnectionManager* other);
  friend void swap(HttpConnectionManager& a, HttpConnectionManager& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpConnectionManager* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpConnectionManager* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpConnectionManager& from);
  void MergeFrom(const HttpConnectionManager& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpConnectionManager* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HttpConnectionManager_Tracing Tracing;
  typedef HttpConnectionManager_SetCurrentClientCertDetails SetCurrentClientCertDetails;

  typedef HttpConnectionManager_CodecType CodecType;
  static const CodecType AUTO =
    HttpConnectionManager_CodecType_AUTO;
  static const CodecType HTTP1 =
    HttpConnectionManager_CodecType_HTTP1;
  static const CodecType HTTP2 =
    HttpConnectionManager_CodecType_HTTP2;
  static inline bool CodecType_IsValid(int value) {
    return HttpConnectionManager_CodecType_IsValid(value);
  }
  static const CodecType CodecType_MIN =
    HttpConnectionManager_CodecType_CodecType_MIN;
  static const CodecType CodecType_MAX =
    HttpConnectionManager_CodecType_CodecType_MAX;
  static const int CodecType_ARRAYSIZE =
    HttpConnectionManager_CodecType_CodecType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CodecType_descriptor() {
    return HttpConnectionManager_CodecType_descriptor();
  }
  static inline const ::std::string& CodecType_Name(CodecType value) {
    return HttpConnectionManager_CodecType_Name(value);
  }
  static inline bool CodecType_Parse(const ::std::string& name,
      CodecType* value) {
    return HttpConnectionManager_CodecType_Parse(name, value);
  }

  typedef HttpConnectionManager_ForwardClientCertDetails ForwardClientCertDetails;
  static const ForwardClientCertDetails SANITIZE =
    HttpConnectionManager_ForwardClientCertDetails_SANITIZE;
  static const ForwardClientCertDetails FORWARD_ONLY =
    HttpConnectionManager_ForwardClientCertDetails_FORWARD_ONLY;
  static const ForwardClientCertDetails APPEND_FORWARD =
    HttpConnectionManager_ForwardClientCertDetails_APPEND_FORWARD;
  static const ForwardClientCertDetails SANITIZE_SET =
    HttpConnectionManager_ForwardClientCertDetails_SANITIZE_SET;
  static const ForwardClientCertDetails ALWAYS_FORWARD_ONLY =
    HttpConnectionManager_ForwardClientCertDetails_ALWAYS_FORWARD_ONLY;
  static inline bool ForwardClientCertDetails_IsValid(int value) {
    return HttpConnectionManager_ForwardClientCertDetails_IsValid(value);
  }
  static const ForwardClientCertDetails ForwardClientCertDetails_MIN =
    HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_MIN;
  static const ForwardClientCertDetails ForwardClientCertDetails_MAX =
    HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_MAX;
  static const int ForwardClientCertDetails_ARRAYSIZE =
    HttpConnectionManager_ForwardClientCertDetails_ForwardClientCertDetails_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ForwardClientCertDetails_descriptor() {
    return HttpConnectionManager_ForwardClientCertDetails_descriptor();
  }
  static inline const ::std::string& ForwardClientCertDetails_Name(ForwardClientCertDetails value) {
    return HttpConnectionManager_ForwardClientCertDetails_Name(value);
  }
  static inline bool ForwardClientCertDetails_Parse(const ::std::string& name,
      ForwardClientCertDetails* value) {
    return HttpConnectionManager_ForwardClientCertDetails_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
  int http_filters_size() const;
  void clear_http_filters();
  static const int kHttpFiltersFieldNumber = 5;
  const ::envoy::api::v2::filter::HttpFilter& http_filters(int index) const;
  ::envoy::api::v2::filter::HttpFilter* mutable_http_filters(int index);
  ::envoy::api::v2::filter::HttpFilter* add_http_filters();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter >*
      mutable_http_filters();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter >&
      http_filters() const;

  // repeated .envoy.api.v2.filter.AccessLog access_log = 13;
  int access_log_size() const;
  void clear_access_log();
  static const int kAccessLogFieldNumber = 13;
  const ::envoy::api::v2::filter::AccessLog& access_log(int index) const;
  ::envoy::api::v2::filter::AccessLog* mutable_access_log(int index);
  ::envoy::api::v2::filter::AccessLog* add_access_log();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLog >*
      mutable_access_log();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLog >&
      access_log() const;

  // string stat_prefix = 2;
  void clear_stat_prefix();
  static const int kStatPrefixFieldNumber = 2;
  const ::std::string& stat_prefix() const;
  void set_stat_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_stat_prefix(::std::string&& value);
  #endif
  void set_stat_prefix(const char* value);
  void set_stat_prefix(const char* value, size_t size);
  ::std::string* mutable_stat_prefix();
  ::std::string* release_stat_prefix();
  void set_allocated_stat_prefix(::std::string* stat_prefix);

  // string server_name = 10;
  void clear_server_name();
  static const int kServerNameFieldNumber = 10;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // .google.protobuf.BoolValue add_user_agent = 6;
  bool has_add_user_agent() const;
  void clear_add_user_agent();
  static const int kAddUserAgentFieldNumber = 6;
  const ::google::protobuf::BoolValue& add_user_agent() const;
  ::google::protobuf::BoolValue* mutable_add_user_agent();
  ::google::protobuf::BoolValue* release_add_user_agent();
  void set_allocated_add_user_agent(::google::protobuf::BoolValue* add_user_agent);

  // .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
  bool has_tracing() const;
  void clear_tracing();
  static const int kTracingFieldNumber = 7;
  const ::envoy::api::v2::filter::HttpConnectionManager_Tracing& tracing() const;
  ::envoy::api::v2::filter::HttpConnectionManager_Tracing* mutable_tracing();
  ::envoy::api::v2::filter::HttpConnectionManager_Tracing* release_tracing();
  void set_allocated_tracing(::envoy::api::v2::filter::HttpConnectionManager_Tracing* tracing);

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
  bool has_http_protocol_options() const;
  void clear_http_protocol_options();
  static const int kHttpProtocolOptionsFieldNumber = 8;
  const ::envoy::api::v2::Http1ProtocolOptions& http_protocol_options() const;
  ::envoy::api::v2::Http1ProtocolOptions* mutable_http_protocol_options();
  ::envoy::api::v2::Http1ProtocolOptions* release_http_protocol_options();
  void set_allocated_http_protocol_options(::envoy::api::v2::Http1ProtocolOptions* http_protocol_options);

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
  bool has_http2_protocol_options() const;
  void clear_http2_protocol_options();
  static const int kHttp2ProtocolOptionsFieldNumber = 9;
  const ::envoy::api::v2::Http2ProtocolOptions& http2_protocol_options() const;
  ::envoy::api::v2::Http2ProtocolOptions* mutable_http2_protocol_options();
  ::envoy::api::v2::Http2ProtocolOptions* release_http2_protocol_options();
  void set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options);

  // .google.protobuf.Duration idle_timeout = 11;
  bool has_idle_timeout() const;
  void clear_idle_timeout();
  static const int kIdleTimeoutFieldNumber = 11;
  const ::google::protobuf::Duration& idle_timeout() const;
  ::google::protobuf::Duration* mutable_idle_timeout();
  ::google::protobuf::Duration* release_idle_timeout();
  void set_allocated_idle_timeout(::google::protobuf::Duration* idle_timeout);

  // .google.protobuf.Duration drain_timeout = 12;
  bool has_drain_timeout() const;
  void clear_drain_timeout();
  static const int kDrainTimeoutFieldNumber = 12;
  const ::google::protobuf::Duration& drain_timeout() const;
  ::google::protobuf::Duration* mutable_drain_timeout();
  ::google::protobuf::Duration* release_drain_timeout();
  void set_allocated_drain_timeout(::google::protobuf::Duration* drain_timeout);

  // .google.protobuf.BoolValue use_remote_address = 14;
  bool has_use_remote_address() const;
  void clear_use_remote_address();
  static const int kUseRemoteAddressFieldNumber = 14;
  const ::google::protobuf::BoolValue& use_remote_address() const;
  ::google::protobuf::BoolValue* mutable_use_remote_address();
  ::google::protobuf::BoolValue* release_use_remote_address();
  void set_allocated_use_remote_address(::google::protobuf::BoolValue* use_remote_address);

  // .google.protobuf.BoolValue generate_request_id = 15;
  bool has_generate_request_id() const;
  void clear_generate_request_id();
  static const int kGenerateRequestIdFieldNumber = 15;
  const ::google::protobuf::BoolValue& generate_request_id() const;
  ::google::protobuf::BoolValue* mutable_generate_request_id();
  ::google::protobuf::BoolValue* release_generate_request_id();
  void set_allocated_generate_request_id(::google::protobuf::BoolValue* generate_request_id);

  // .envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
  bool has_set_current_client_cert_details() const;
  void clear_set_current_client_cert_details();
  static const int kSetCurrentClientCertDetailsFieldNumber = 17;
  const ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails& set_current_client_cert_details() const;
  ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* mutable_set_current_client_cert_details();
  ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* release_set_current_client_cert_details();
  void set_allocated_set_current_client_cert_details(::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* set_current_client_cert_details);

  // .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
  void clear_codec_type();
  static const int kCodecTypeFieldNumber = 1;
  ::envoy::api::v2::filter::HttpConnectionManager_CodecType codec_type() const;
  void set_codec_type(::envoy::api::v2::filter::HttpConnectionManager_CodecType value);

  // .envoy.api.v2.filter.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
  void clear_forward_client_cert_details();
  static const int kForwardClientCertDetailsFieldNumber = 16;
  ::envoy::api::v2::filter::HttpConnectionManager_ForwardClientCertDetails forward_client_cert_details() const;
  void set_forward_client_cert_details(::envoy::api::v2::filter::HttpConnectionManager_ForwardClientCertDetails value);

  // .envoy.api.v2.filter.Rds rds = 3;
  bool has_rds() const;
  void clear_rds();
  static const int kRdsFieldNumber = 3;
  const ::envoy::api::v2::filter::Rds& rds() const;
  ::envoy::api::v2::filter::Rds* mutable_rds();
  ::envoy::api::v2::filter::Rds* release_rds();
  void set_allocated_rds(::envoy::api::v2::filter::Rds* rds);

  // .envoy.api.v2.RouteConfiguration route_config = 4;
  bool has_route_config() const;
  void clear_route_config();
  static const int kRouteConfigFieldNumber = 4;
  const ::envoy::api::v2::RouteConfiguration& route_config() const;
  ::envoy::api::v2::RouteConfiguration* mutable_route_config();
  ::envoy::api::v2::RouteConfiguration* release_route_config();
  void set_allocated_route_config(::envoy::api::v2::RouteConfiguration* route_config);

  RouteSpecifierCase route_specifier_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.filter.HttpConnectionManager)
 private:
  void set_has_rds();
  void set_has_route_config();

  inline bool has_route_specifier() const;
  void clear_route_specifier();
  inline void clear_has_route_specifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter > http_filters_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLog > access_log_;
  ::google::protobuf::internal::ArenaStringPtr stat_prefix_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::BoolValue* add_user_agent_;
  ::envoy::api::v2::filter::HttpConnectionManager_Tracing* tracing_;
  ::envoy::api::v2::Http1ProtocolOptions* http_protocol_options_;
  ::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options_;
  ::google::protobuf::Duration* idle_timeout_;
  ::google::protobuf::Duration* drain_timeout_;
  ::google::protobuf::BoolValue* use_remote_address_;
  ::google::protobuf::BoolValue* generate_request_id_;
  ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* set_current_client_cert_details_;
  int codec_type_;
  int forward_client_cert_details_;
  union RouteSpecifierUnion {
    RouteSpecifierUnion() {}
    ::envoy::api::v2::filter::Rds* rds_;
    ::envoy::api::v2::RouteConfiguration* route_config_;
  } route_specifier_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Rds

// .envoy.api.v2.ConfigSource config_source = 1;
inline bool Rds::has_config_source() const {
  return this != internal_default_instance() && config_source_ != NULL;
}
inline void Rds::clear_config_source() {
  if (GetArenaNoVirtual() == NULL && config_source_ != NULL) delete config_source_;
  config_source_ = NULL;
}
inline const ::envoy::api::v2::ConfigSource& Rds::config_source() const {
  const ::envoy::api::v2::ConfigSource* p = config_source_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.Rds.config_source)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::ConfigSource*>(
      &::envoy::api::v2::_ConfigSource_default_instance_);
}
inline ::envoy::api::v2::ConfigSource* Rds::mutable_config_source() {
  
  if (config_source_ == NULL) {
    config_source_ = new ::envoy::api::v2::ConfigSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.Rds.config_source)
  return config_source_;
}
inline ::envoy::api::v2::ConfigSource* Rds::release_config_source() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.Rds.config_source)
  
  ::envoy::api::v2::ConfigSource* temp = config_source_;
  config_source_ = NULL;
  return temp;
}
inline void Rds::set_allocated_config_source(::envoy::api::v2::ConfigSource* config_source) {
  delete config_source_;
  config_source_ = config_source;
  if (config_source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.Rds.config_source)
}

// string route_config_name = 2;
inline void Rds::clear_route_config_name() {
  route_config_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rds::route_config_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.Rds.route_config_name)
  return route_config_name_.GetNoArena();
}
inline void Rds::set_route_config_name(const ::std::string& value) {
  
  route_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.Rds.route_config_name)
}
#if LANG_CXX11
inline void Rds::set_route_config_name(::std::string&& value) {
  
  route_config_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.Rds.route_config_name)
}
#endif
inline void Rds::set_route_config_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  route_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.Rds.route_config_name)
}
inline void Rds::set_route_config_name(const char* value, size_t size) {
  
  route_config_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.Rds.route_config_name)
}
inline ::std::string* Rds::mutable_route_config_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.Rds.route_config_name)
  return route_config_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rds::release_route_config_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.Rds.route_config_name)
  
  return route_config_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rds::set_allocated_route_config_name(::std::string* route_config_name) {
  if (route_config_name != NULL) {
    
  } else {
    
  }
  route_config_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_config_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.Rds.route_config_name)
}

// -------------------------------------------------------------------

// ComparisonFilter

// .envoy.api.v2.filter.ComparisonFilter.Op op = 1;
inline void ComparisonFilter::clear_op() {
  op_ = 0;
}
inline ::envoy::api::v2::filter::ComparisonFilter_Op ComparisonFilter::op() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.ComparisonFilter.op)
  return static_cast< ::envoy::api::v2::filter::ComparisonFilter_Op >(op_);
}
inline void ComparisonFilter::set_op(::envoy::api::v2::filter::ComparisonFilter_Op value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.ComparisonFilter.op)
}

// .envoy.api.v2.RuntimeUInt32 value = 2;
inline bool ComparisonFilter::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ComparisonFilter::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::envoy::api::v2::RuntimeUInt32& ComparisonFilter::value() const {
  const ::envoy::api::v2::RuntimeUInt32* p = value_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.ComparisonFilter.value)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::RuntimeUInt32*>(
      &::envoy::api::v2::_RuntimeUInt32_default_instance_);
}
inline ::envoy::api::v2::RuntimeUInt32* ComparisonFilter::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::envoy::api::v2::RuntimeUInt32;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.ComparisonFilter.value)
  return value_;
}
inline ::envoy::api::v2::RuntimeUInt32* ComparisonFilter::release_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.ComparisonFilter.value)
  
  ::envoy::api::v2::RuntimeUInt32* temp = value_;
  value_ = NULL;
  return temp;
}
inline void ComparisonFilter::set_allocated_value(::envoy::api::v2::RuntimeUInt32* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.ComparisonFilter.value)
}

// -------------------------------------------------------------------

// StatusCodeFilter

// .envoy.api.v2.filter.ComparisonFilter comparison = 1;
inline bool StatusCodeFilter::has_comparison() const {
  return this != internal_default_instance() && comparison_ != NULL;
}
inline void StatusCodeFilter::clear_comparison() {
  if (GetArenaNoVirtual() == NULL && comparison_ != NULL) delete comparison_;
  comparison_ = NULL;
}
inline const ::envoy::api::v2::filter::ComparisonFilter& StatusCodeFilter::comparison() const {
  const ::envoy::api::v2::filter::ComparisonFilter* p = comparison_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.StatusCodeFilter.comparison)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::ComparisonFilter*>(
      &::envoy::api::v2::filter::_ComparisonFilter_default_instance_);
}
inline ::envoy::api::v2::filter::ComparisonFilter* StatusCodeFilter::mutable_comparison() {
  
  if (comparison_ == NULL) {
    comparison_ = new ::envoy::api::v2::filter::ComparisonFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.StatusCodeFilter.comparison)
  return comparison_;
}
inline ::envoy::api::v2::filter::ComparisonFilter* StatusCodeFilter::release_comparison() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.StatusCodeFilter.comparison)
  
  ::envoy::api::v2::filter::ComparisonFilter* temp = comparison_;
  comparison_ = NULL;
  return temp;
}
inline void StatusCodeFilter::set_allocated_comparison(::envoy::api::v2::filter::ComparisonFilter* comparison) {
  delete comparison_;
  comparison_ = comparison;
  if (comparison) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.StatusCodeFilter.comparison)
}

// -------------------------------------------------------------------

// DurationFilter

// .envoy.api.v2.filter.ComparisonFilter comparison = 1;
inline bool DurationFilter::has_comparison() const {
  return this != internal_default_instance() && comparison_ != NULL;
}
inline void DurationFilter::clear_comparison() {
  if (GetArenaNoVirtual() == NULL && comparison_ != NULL) delete comparison_;
  comparison_ = NULL;
}
inline const ::envoy::api::v2::filter::ComparisonFilter& DurationFilter::comparison() const {
  const ::envoy::api::v2::filter::ComparisonFilter* p = comparison_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.DurationFilter.comparison)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::ComparisonFilter*>(
      &::envoy::api::v2::filter::_ComparisonFilter_default_instance_);
}
inline ::envoy::api::v2::filter::ComparisonFilter* DurationFilter::mutable_comparison() {
  
  if (comparison_ == NULL) {
    comparison_ = new ::envoy::api::v2::filter::ComparisonFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.DurationFilter.comparison)
  return comparison_;
}
inline ::envoy::api::v2::filter::ComparisonFilter* DurationFilter::release_comparison() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.DurationFilter.comparison)
  
  ::envoy::api::v2::filter::ComparisonFilter* temp = comparison_;
  comparison_ = NULL;
  return temp;
}
inline void DurationFilter::set_allocated_comparison(::envoy::api::v2::filter::ComparisonFilter* comparison) {
  delete comparison_;
  comparison_ = comparison;
  if (comparison) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.DurationFilter.comparison)
}

// -------------------------------------------------------------------

// NotHealthCheckFilter

// -------------------------------------------------------------------

// TraceableFilter

// -------------------------------------------------------------------

// RuntimeFilter

// string runtime_key = 1;
inline void RuntimeFilter::clear_runtime_key() {
  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RuntimeFilter::runtime_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.RuntimeFilter.runtime_key)
  return runtime_key_.GetNoArena();
}
inline void RuntimeFilter::set_runtime_key(const ::std::string& value) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
#if LANG_CXX11
inline void RuntimeFilter::set_runtime_key(::std::string&& value) {
  
  runtime_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
#endif
inline void RuntimeFilter::set_runtime_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
inline void RuntimeFilter::set_runtime_key(const char* value, size_t size) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}
inline ::std::string* RuntimeFilter::mutable_runtime_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.RuntimeFilter.runtime_key)
  return runtime_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RuntimeFilter::release_runtime_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.RuntimeFilter.runtime_key)
  
  return runtime_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RuntimeFilter::set_allocated_runtime_key(::std::string* runtime_key) {
  if (runtime_key != NULL) {
    
  } else {
    
  }
  runtime_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.RuntimeFilter.runtime_key)
}

// -------------------------------------------------------------------

// AndFilter

// repeated .envoy.api.v2.filter.AccessLogFilter filters = 1;
inline int AndFilter::filters_size() const {
  return filters_.size();
}
inline void AndFilter::clear_filters() {
  filters_.Clear();
}
inline const ::envoy::api::v2::filter::AccessLogFilter& AndFilter::filters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AndFilter.filters)
  return filters_.Get(index);
}
inline ::envoy::api::v2::filter::AccessLogFilter* AndFilter::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AndFilter.filters)
  return filters_.Mutable(index);
}
inline ::envoy::api::v2::filter::AccessLogFilter* AndFilter::add_filters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.AndFilter.filters)
  return filters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >*
AndFilter::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.AndFilter.filters)
  return &filters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >&
AndFilter::filters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.AndFilter.filters)
  return filters_;
}

// -------------------------------------------------------------------

// OrFilter

// repeated .envoy.api.v2.filter.AccessLogFilter filters = 2;
inline int OrFilter::filters_size() const {
  return filters_.size();
}
inline void OrFilter::clear_filters() {
  filters_.Clear();
}
inline const ::envoy::api::v2::filter::AccessLogFilter& OrFilter::filters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.OrFilter.filters)
  return filters_.Get(index);
}
inline ::envoy::api::v2::filter::AccessLogFilter* OrFilter::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.OrFilter.filters)
  return filters_.Mutable(index);
}
inline ::envoy::api::v2::filter::AccessLogFilter* OrFilter::add_filters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.OrFilter.filters)
  return filters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >*
OrFilter::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.OrFilter.filters)
  return &filters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLogFilter >&
OrFilter::filters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.OrFilter.filters)
  return filters_;
}

// -------------------------------------------------------------------

// AccessLogFilter

// .envoy.api.v2.filter.StatusCodeFilter status_code_filter = 1;
inline bool AccessLogFilter::has_status_code_filter() const {
  return filter_specifier_case() == kStatusCodeFilter;
}
inline void AccessLogFilter::set_has_status_code_filter() {
  _oneof_case_[0] = kStatusCodeFilter;
}
inline void AccessLogFilter::clear_status_code_filter() {
  if (has_status_code_filter()) {
    delete filter_specifier_.status_code_filter_;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::StatusCodeFilter& AccessLogFilter::status_code_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.status_code_filter)
  return has_status_code_filter()
      ? *filter_specifier_.status_code_filter_
      : ::envoy::api::v2::filter::StatusCodeFilter::default_instance();
}
inline ::envoy::api::v2::filter::StatusCodeFilter* AccessLogFilter::mutable_status_code_filter() {
  if (!has_status_code_filter()) {
    clear_filter_specifier();
    set_has_status_code_filter();
    filter_specifier_.status_code_filter_ = new ::envoy::api::v2::filter::StatusCodeFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.status_code_filter)
  return filter_specifier_.status_code_filter_;
}
inline ::envoy::api::v2::filter::StatusCodeFilter* AccessLogFilter::release_status_code_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.status_code_filter)
  if (has_status_code_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::StatusCodeFilter* temp = filter_specifier_.status_code_filter_;
    filter_specifier_.status_code_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_status_code_filter(::envoy::api::v2::filter::StatusCodeFilter* status_code_filter) {
  clear_filter_specifier();
  if (status_code_filter) {
    set_has_status_code_filter();
    filter_specifier_.status_code_filter_ = status_code_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.status_code_filter)
}

// .envoy.api.v2.filter.DurationFilter duration_filter = 2;
inline bool AccessLogFilter::has_duration_filter() const {
  return filter_specifier_case() == kDurationFilter;
}
inline void AccessLogFilter::set_has_duration_filter() {
  _oneof_case_[0] = kDurationFilter;
}
inline void AccessLogFilter::clear_duration_filter() {
  if (has_duration_filter()) {
    delete filter_specifier_.duration_filter_;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::DurationFilter& AccessLogFilter::duration_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.duration_filter)
  return has_duration_filter()
      ? *filter_specifier_.duration_filter_
      : ::envoy::api::v2::filter::DurationFilter::default_instance();
}
inline ::envoy::api::v2::filter::DurationFilter* AccessLogFilter::mutable_duration_filter() {
  if (!has_duration_filter()) {
    clear_filter_specifier();
    set_has_duration_filter();
    filter_specifier_.duration_filter_ = new ::envoy::api::v2::filter::DurationFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.duration_filter)
  return filter_specifier_.duration_filter_;
}
inline ::envoy::api::v2::filter::DurationFilter* AccessLogFilter::release_duration_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.duration_filter)
  if (has_duration_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::DurationFilter* temp = filter_specifier_.duration_filter_;
    filter_specifier_.duration_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_duration_filter(::envoy::api::v2::filter::DurationFilter* duration_filter) {
  clear_filter_specifier();
  if (duration_filter) {
    set_has_duration_filter();
    filter_specifier_.duration_filter_ = duration_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.duration_filter)
}

// .envoy.api.v2.filter.NotHealthCheckFilter not_health_check_filter = 3;
inline bool AccessLogFilter::has_not_health_check_filter() const {
  return filter_specifier_case() == kNotHealthCheckFilter;
}
inline void AccessLogFilter::set_has_not_health_check_filter() {
  _oneof_case_[0] = kNotHealthCheckFilter;
}
inline void AccessLogFilter::clear_not_health_check_filter() {
  if (has_not_health_check_filter()) {
    delete filter_specifier_.not_health_check_filter_;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::NotHealthCheckFilter& AccessLogFilter::not_health_check_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.not_health_check_filter)
  return has_not_health_check_filter()
      ? *filter_specifier_.not_health_check_filter_
      : ::envoy::api::v2::filter::NotHealthCheckFilter::default_instance();
}
inline ::envoy::api::v2::filter::NotHealthCheckFilter* AccessLogFilter::mutable_not_health_check_filter() {
  if (!has_not_health_check_filter()) {
    clear_filter_specifier();
    set_has_not_health_check_filter();
    filter_specifier_.not_health_check_filter_ = new ::envoy::api::v2::filter::NotHealthCheckFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.not_health_check_filter)
  return filter_specifier_.not_health_check_filter_;
}
inline ::envoy::api::v2::filter::NotHealthCheckFilter* AccessLogFilter::release_not_health_check_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.not_health_check_filter)
  if (has_not_health_check_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::NotHealthCheckFilter* temp = filter_specifier_.not_health_check_filter_;
    filter_specifier_.not_health_check_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_not_health_check_filter(::envoy::api::v2::filter::NotHealthCheckFilter* not_health_check_filter) {
  clear_filter_specifier();
  if (not_health_check_filter) {
    set_has_not_health_check_filter();
    filter_specifier_.not_health_check_filter_ = not_health_check_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.not_health_check_filter)
}

// .envoy.api.v2.filter.TraceableFilter traceable_filter = 4;
inline bool AccessLogFilter::has_traceable_filter() const {
  return filter_specifier_case() == kTraceableFilter;
}
inline void AccessLogFilter::set_has_traceable_filter() {
  _oneof_case_[0] = kTraceableFilter;
}
inline void AccessLogFilter::clear_traceable_filter() {
  if (has_traceable_filter()) {
    delete filter_specifier_.traceable_filter_;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::TraceableFilter& AccessLogFilter::traceable_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.traceable_filter)
  return has_traceable_filter()
      ? *filter_specifier_.traceable_filter_
      : ::envoy::api::v2::filter::TraceableFilter::default_instance();
}
inline ::envoy::api::v2::filter::TraceableFilter* AccessLogFilter::mutable_traceable_filter() {
  if (!has_traceable_filter()) {
    clear_filter_specifier();
    set_has_traceable_filter();
    filter_specifier_.traceable_filter_ = new ::envoy::api::v2::filter::TraceableFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.traceable_filter)
  return filter_specifier_.traceable_filter_;
}
inline ::envoy::api::v2::filter::TraceableFilter* AccessLogFilter::release_traceable_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.traceable_filter)
  if (has_traceable_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::TraceableFilter* temp = filter_specifier_.traceable_filter_;
    filter_specifier_.traceable_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_traceable_filter(::envoy::api::v2::filter::TraceableFilter* traceable_filter) {
  clear_filter_specifier();
  if (traceable_filter) {
    set_has_traceable_filter();
    filter_specifier_.traceable_filter_ = traceable_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.traceable_filter)
}

// .envoy.api.v2.filter.RuntimeFilter runtime_filter = 5;
inline bool AccessLogFilter::has_runtime_filter() const {
  return filter_specifier_case() == kRuntimeFilter;
}
inline void AccessLogFilter::set_has_runtime_filter() {
  _oneof_case_[0] = kRuntimeFilter;
}
inline void AccessLogFilter::clear_runtime_filter() {
  if (has_runtime_filter()) {
    delete filter_specifier_.runtime_filter_;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::RuntimeFilter& AccessLogFilter::runtime_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.runtime_filter)
  return has_runtime_filter()
      ? *filter_specifier_.runtime_filter_
      : ::envoy::api::v2::filter::RuntimeFilter::default_instance();
}
inline ::envoy::api::v2::filter::RuntimeFilter* AccessLogFilter::mutable_runtime_filter() {
  if (!has_runtime_filter()) {
    clear_filter_specifier();
    set_has_runtime_filter();
    filter_specifier_.runtime_filter_ = new ::envoy::api::v2::filter::RuntimeFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.runtime_filter)
  return filter_specifier_.runtime_filter_;
}
inline ::envoy::api::v2::filter::RuntimeFilter* AccessLogFilter::release_runtime_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.runtime_filter)
  if (has_runtime_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::RuntimeFilter* temp = filter_specifier_.runtime_filter_;
    filter_specifier_.runtime_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_runtime_filter(::envoy::api::v2::filter::RuntimeFilter* runtime_filter) {
  clear_filter_specifier();
  if (runtime_filter) {
    set_has_runtime_filter();
    filter_specifier_.runtime_filter_ = runtime_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.runtime_filter)
}

// .envoy.api.v2.filter.AndFilter and_filter = 6;
inline bool AccessLogFilter::has_and_filter() const {
  return filter_specifier_case() == kAndFilter;
}
inline void AccessLogFilter::set_has_and_filter() {
  _oneof_case_[0] = kAndFilter;
}
inline void AccessLogFilter::clear_and_filter() {
  if (has_and_filter()) {
    delete filter_specifier_.and_filter_;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::AndFilter& AccessLogFilter::and_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.and_filter)
  return has_and_filter()
      ? *filter_specifier_.and_filter_
      : ::envoy::api::v2::filter::AndFilter::default_instance();
}
inline ::envoy::api::v2::filter::AndFilter* AccessLogFilter::mutable_and_filter() {
  if (!has_and_filter()) {
    clear_filter_specifier();
    set_has_and_filter();
    filter_specifier_.and_filter_ = new ::envoy::api::v2::filter::AndFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.and_filter)
  return filter_specifier_.and_filter_;
}
inline ::envoy::api::v2::filter::AndFilter* AccessLogFilter::release_and_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.and_filter)
  if (has_and_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::AndFilter* temp = filter_specifier_.and_filter_;
    filter_specifier_.and_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_and_filter(::envoy::api::v2::filter::AndFilter* and_filter) {
  clear_filter_specifier();
  if (and_filter) {
    set_has_and_filter();
    filter_specifier_.and_filter_ = and_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.and_filter)
}

// .envoy.api.v2.filter.OrFilter or_filter = 7;
inline bool AccessLogFilter::has_or_filter() const {
  return filter_specifier_case() == kOrFilter;
}
inline void AccessLogFilter::set_has_or_filter() {
  _oneof_case_[0] = kOrFilter;
}
inline void AccessLogFilter::clear_or_filter() {
  if (has_or_filter()) {
    delete filter_specifier_.or_filter_;
    clear_has_filter_specifier();
  }
}
inline  const ::envoy::api::v2::filter::OrFilter& AccessLogFilter::or_filter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLogFilter.or_filter)
  return has_or_filter()
      ? *filter_specifier_.or_filter_
      : ::envoy::api::v2::filter::OrFilter::default_instance();
}
inline ::envoy::api::v2::filter::OrFilter* AccessLogFilter::mutable_or_filter() {
  if (!has_or_filter()) {
    clear_filter_specifier();
    set_has_or_filter();
    filter_specifier_.or_filter_ = new ::envoy::api::v2::filter::OrFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLogFilter.or_filter)
  return filter_specifier_.or_filter_;
}
inline ::envoy::api::v2::filter::OrFilter* AccessLogFilter::release_or_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLogFilter.or_filter)
  if (has_or_filter()) {
    clear_has_filter_specifier();
    ::envoy::api::v2::filter::OrFilter* temp = filter_specifier_.or_filter_;
    filter_specifier_.or_filter_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void AccessLogFilter::set_allocated_or_filter(::envoy::api::v2::filter::OrFilter* or_filter) {
  clear_filter_specifier();
  if (or_filter) {
    set_has_or_filter();
    filter_specifier_.or_filter_ = or_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLogFilter.or_filter)
}

inline bool AccessLogFilter::has_filter_specifier() const {
  return filter_specifier_case() != FILTER_SPECIFIER_NOT_SET;
}
inline void AccessLogFilter::clear_has_filter_specifier() {
  _oneof_case_[0] = FILTER_SPECIFIER_NOT_SET;
}
inline AccessLogFilter::FilterSpecifierCase AccessLogFilter::filter_specifier_case() const {
  return AccessLogFilter::FilterSpecifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileAccessLog

// string path = 1;
inline void FileAccessLog::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileAccessLog::path() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.FileAccessLog.path)
  return path_.GetNoArena();
}
inline void FileAccessLog::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.FileAccessLog.path)
}
#if LANG_CXX11
inline void FileAccessLog::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.FileAccessLog.path)
}
#endif
inline void FileAccessLog::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.FileAccessLog.path)
}
inline void FileAccessLog::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.FileAccessLog.path)
}
inline ::std::string* FileAccessLog::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.FileAccessLog.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileAccessLog::release_path() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.FileAccessLog.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileAccessLog::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.FileAccessLog.path)
}

// string format = 2;
inline void FileAccessLog::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileAccessLog::format() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.FileAccessLog.format)
  return format_.GetNoArena();
}
inline void FileAccessLog::set_format(const ::std::string& value) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.FileAccessLog.format)
}
#if LANG_CXX11
inline void FileAccessLog::set_format(::std::string&& value) {
  
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.FileAccessLog.format)
}
#endif
inline void FileAccessLog::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.FileAccessLog.format)
}
inline void FileAccessLog::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.FileAccessLog.format)
}
inline ::std::string* FileAccessLog::mutable_format() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.FileAccessLog.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileAccessLog::release_format() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.FileAccessLog.format)
  
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileAccessLog::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.FileAccessLog.format)
}

// -------------------------------------------------------------------

// AccessLog

// string name = 1;
inline void AccessLog::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessLog::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.name)
  return name_.GetNoArena();
}
inline void AccessLog::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.AccessLog.name)
}
#if LANG_CXX11
inline void AccessLog::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.AccessLog.name)
}
#endif
inline void AccessLog::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.AccessLog.name)
}
inline void AccessLog::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.AccessLog.name)
}
inline ::std::string* AccessLog::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessLog::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessLog::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.name)
}

// .envoy.api.v2.filter.AccessLogFilter filter = 2;
inline bool AccessLog::has_filter() const {
  return this != internal_default_instance() && filter_ != NULL;
}
inline void AccessLog::clear_filter() {
  if (GetArenaNoVirtual() == NULL && filter_ != NULL) delete filter_;
  filter_ = NULL;
}
inline const ::envoy::api::v2::filter::AccessLogFilter& AccessLog::filter() const {
  const ::envoy::api::v2::filter::AccessLogFilter* p = filter_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.filter)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::AccessLogFilter*>(
      &::envoy::api::v2::filter::_AccessLogFilter_default_instance_);
}
inline ::envoy::api::v2::filter::AccessLogFilter* AccessLog::mutable_filter() {
  
  if (filter_ == NULL) {
    filter_ = new ::envoy::api::v2::filter::AccessLogFilter;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.filter)
  return filter_;
}
inline ::envoy::api::v2::filter::AccessLogFilter* AccessLog::release_filter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.filter)
  
  ::envoy::api::v2::filter::AccessLogFilter* temp = filter_;
  filter_ = NULL;
  return temp;
}
inline void AccessLog::set_allocated_filter(::envoy::api::v2::filter::AccessLogFilter* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.filter)
}

// .google.protobuf.Struct config = 3;
inline bool AccessLog::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void AccessLog::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::google::protobuf::Struct& AccessLog::config() const {
  const ::google::protobuf::Struct* p = config_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.AccessLog.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* AccessLog::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.AccessLog.config)
  return config_;
}
inline ::google::protobuf::Struct* AccessLog::release_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.AccessLog.config)
  
  ::google::protobuf::Struct* temp = config_;
  config_ = NULL;
  return temp;
}
inline void AccessLog::set_allocated_config(::google::protobuf::Struct* config) {
  delete config_;
  if (config != NULL && config->GetArena() != NULL) {
    ::google::protobuf::Struct* new_config = new ::google::protobuf::Struct;
    new_config->CopyFrom(*config);
    config = new_config;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.AccessLog.config)
}

// -------------------------------------------------------------------

// HttpFilter_DeprecatedV1

// string type = 1;
inline void HttpFilter_DeprecatedV1::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpFilter_DeprecatedV1::type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
  return type_.GetNoArena();
}
inline void HttpFilter_DeprecatedV1::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
}
#if LANG_CXX11
inline void HttpFilter_DeprecatedV1::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
}
#endif
inline void HttpFilter_DeprecatedV1::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
}
inline void HttpFilter_DeprecatedV1::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
}
inline ::std::string* HttpFilter_DeprecatedV1::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpFilter_DeprecatedV1::release_type() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpFilter_DeprecatedV1::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpFilter.DeprecatedV1.type)
}

// -------------------------------------------------------------------

// HttpFilter

// string name = 1;
inline void HttpFilter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpFilter::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.name)
  return name_.GetNoArena();
}
inline void HttpFilter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpFilter.name)
}
#if LANG_CXX11
inline void HttpFilter::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpFilter.name)
}
#endif
inline void HttpFilter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpFilter.name)
}
inline void HttpFilter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpFilter.name)
}
inline ::std::string* HttpFilter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpFilter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpFilter::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpFilter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpFilter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpFilter.name)
}

// .google.protobuf.Struct config = 2;
inline bool HttpFilter::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void HttpFilter::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::google::protobuf::Struct& HttpFilter::config() const {
  const ::google::protobuf::Struct* p = config_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* HttpFilter::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpFilter.config)
  return config_;
}
inline ::google::protobuf::Struct* HttpFilter::release_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpFilter.config)
  
  ::google::protobuf::Struct* temp = config_;
  config_ = NULL;
  return temp;
}
inline void HttpFilter::set_allocated_config(::google::protobuf::Struct* config) {
  delete config_;
  if (config != NULL && config->GetArena() != NULL) {
    ::google::protobuf::Struct* new_config = new ::google::protobuf::Struct;
    new_config->CopyFrom(*config);
    config = new_config;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpFilter.config)
}

// .envoy.api.v2.filter.HttpFilter.DeprecatedV1 deprecated_v1 = 3;
inline bool HttpFilter::has_deprecated_v1() const {
  return this != internal_default_instance() && deprecated_v1_ != NULL;
}
inline void HttpFilter::clear_deprecated_v1() {
  if (GetArenaNoVirtual() == NULL && deprecated_v1_ != NULL) delete deprecated_v1_;
  deprecated_v1_ = NULL;
}
inline const ::envoy::api::v2::filter::HttpFilter_DeprecatedV1& HttpFilter::deprecated_v1() const {
  const ::envoy::api::v2::filter::HttpFilter_DeprecatedV1* p = deprecated_v1_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpFilter.deprecated_v1)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::HttpFilter_DeprecatedV1*>(
      &::envoy::api::v2::filter::_HttpFilter_DeprecatedV1_default_instance_);
}
inline ::envoy::api::v2::filter::HttpFilter_DeprecatedV1* HttpFilter::mutable_deprecated_v1() {
  
  if (deprecated_v1_ == NULL) {
    deprecated_v1_ = new ::envoy::api::v2::filter::HttpFilter_DeprecatedV1;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpFilter.deprecated_v1)
  return deprecated_v1_;
}
inline ::envoy::api::v2::filter::HttpFilter_DeprecatedV1* HttpFilter::release_deprecated_v1() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpFilter.deprecated_v1)
  
  ::envoy::api::v2::filter::HttpFilter_DeprecatedV1* temp = deprecated_v1_;
  deprecated_v1_ = NULL;
  return temp;
}
inline void HttpFilter::set_allocated_deprecated_v1(::envoy::api::v2::filter::HttpFilter_DeprecatedV1* deprecated_v1) {
  delete deprecated_v1_;
  deprecated_v1_ = deprecated_v1;
  if (deprecated_v1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpFilter.deprecated_v1)
}

// -------------------------------------------------------------------

// HttpConnectionManager_Tracing

// .envoy.api.v2.filter.HttpConnectionManager.Tracing.OperationName operation_name = 1;
inline void HttpConnectionManager_Tracing::clear_operation_name() {
  operation_name_ = 0;
}
inline ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName HttpConnectionManager_Tracing::operation_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.Tracing.operation_name)
  return static_cast< ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName >(operation_name_);
}
inline void HttpConnectionManager_Tracing::set_operation_name(::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName value) {
  
  operation_name_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.Tracing.operation_name)
}

// repeated string request_headers_for_tags = 2;
inline int HttpConnectionManager_Tracing::request_headers_for_tags_size() const {
  return request_headers_for_tags_.size();
}
inline void HttpConnectionManager_Tracing::clear_request_headers_for_tags() {
  request_headers_for_tags_.Clear();
}
inline const ::std::string& HttpConnectionManager_Tracing::request_headers_for_tags(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Get(index);
}
inline ::std::string* HttpConnectionManager_Tracing::mutable_request_headers_for_tags(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Mutable(index);
}
inline void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  request_headers_for_tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  request_headers_for_tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  request_headers_for_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
inline void HttpConnectionManager_Tracing::set_request_headers_for_tags(int index, const char* value, size_t size) {
  request_headers_for_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
inline ::std::string* HttpConnectionManager_Tracing::add_request_headers_for_tags() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_.Add();
}
inline void HttpConnectionManager_Tracing::add_request_headers_for_tags(const ::std::string& value) {
  request_headers_for_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
#if LANG_CXX11
inline void HttpConnectionManager_Tracing::add_request_headers_for_tags(::std::string&& value) {
  request_headers_for_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
#endif
inline void HttpConnectionManager_Tracing::add_request_headers_for_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  request_headers_for_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
inline void HttpConnectionManager_Tracing::add_request_headers_for_tags(const char* value, size_t size) {
  request_headers_for_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HttpConnectionManager_Tracing::request_headers_for_tags() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return request_headers_for_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HttpConnectionManager_Tracing::mutable_request_headers_for_tags() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HttpConnectionManager.Tracing.request_headers_for_tags)
  return &request_headers_for_tags_;
}

// -------------------------------------------------------------------

// HttpConnectionManager_SetCurrentClientCertDetails

// .google.protobuf.BoolValue subject = 1;
inline bool HttpConnectionManager_SetCurrentClientCertDetails::has_subject() const {
  return this != internal_default_instance() && subject_ != NULL;
}
inline void HttpConnectionManager_SetCurrentClientCertDetails::clear_subject() {
  if (GetArenaNoVirtual() == NULL && subject_ != NULL) delete subject_;
  subject_ = NULL;
}
inline const ::google::protobuf::BoolValue& HttpConnectionManager_SetCurrentClientCertDetails::subject() const {
  const ::google::protobuf::BoolValue* p = subject_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.subject)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* HttpConnectionManager_SetCurrentClientCertDetails::mutable_subject() {
  
  if (subject_ == NULL) {
    subject_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.subject)
  return subject_;
}
inline ::google::protobuf::BoolValue* HttpConnectionManager_SetCurrentClientCertDetails::release_subject() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.subject)
  
  ::google::protobuf::BoolValue* temp = subject_;
  subject_ = NULL;
  return temp;
}
inline void HttpConnectionManager_SetCurrentClientCertDetails::set_allocated_subject(::google::protobuf::BoolValue* subject) {
  delete subject_;
  if (subject != NULL && subject->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_subject = new ::google::protobuf::BoolValue;
    new_subject->CopyFrom(*subject);
    subject = new_subject;
  }
  subject_ = subject;
  if (subject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.subject)
}

// .google.protobuf.BoolValue san = 2;
inline bool HttpConnectionManager_SetCurrentClientCertDetails::has_san() const {
  return this != internal_default_instance() && san_ != NULL;
}
inline void HttpConnectionManager_SetCurrentClientCertDetails::clear_san() {
  if (GetArenaNoVirtual() == NULL && san_ != NULL) delete san_;
  san_ = NULL;
}
inline const ::google::protobuf::BoolValue& HttpConnectionManager_SetCurrentClientCertDetails::san() const {
  const ::google::protobuf::BoolValue* p = san_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.san)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* HttpConnectionManager_SetCurrentClientCertDetails::mutable_san() {
  
  if (san_ == NULL) {
    san_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.san)
  return san_;
}
inline ::google::protobuf::BoolValue* HttpConnectionManager_SetCurrentClientCertDetails::release_san() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.san)
  
  ::google::protobuf::BoolValue* temp = san_;
  san_ = NULL;
  return temp;
}
inline void HttpConnectionManager_SetCurrentClientCertDetails::set_allocated_san(::google::protobuf::BoolValue* san) {
  delete san_;
  if (san != NULL && san->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_san = new ::google::protobuf::BoolValue;
    new_san->CopyFrom(*san);
    san = new_san;
  }
  san_ = san;
  if (san) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails.san)
}

// -------------------------------------------------------------------

// HttpConnectionManager

// .envoy.api.v2.filter.HttpConnectionManager.CodecType codec_type = 1;
inline void HttpConnectionManager::clear_codec_type() {
  codec_type_ = 0;
}
inline ::envoy::api::v2::filter::HttpConnectionManager_CodecType HttpConnectionManager::codec_type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.codec_type)
  return static_cast< ::envoy::api::v2::filter::HttpConnectionManager_CodecType >(codec_type_);
}
inline void HttpConnectionManager::set_codec_type(::envoy::api::v2::filter::HttpConnectionManager_CodecType value) {
  
  codec_type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.codec_type)
}

// string stat_prefix = 2;
inline void HttpConnectionManager::clear_stat_prefix() {
  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpConnectionManager::stat_prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
  return stat_prefix_.GetNoArena();
}
inline void HttpConnectionManager::set_stat_prefix(const ::std::string& value) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
#if LANG_CXX11
inline void HttpConnectionManager::set_stat_prefix(::std::string&& value) {
  
  stat_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
#endif
inline void HttpConnectionManager::set_stat_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
inline void HttpConnectionManager::set_stat_prefix(const char* value, size_t size) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}
inline ::std::string* HttpConnectionManager::mutable_stat_prefix() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
  return stat_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpConnectionManager::release_stat_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
  
  return stat_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpConnectionManager::set_allocated_stat_prefix(::std::string* stat_prefix) {
  if (stat_prefix != NULL) {
    
  } else {
    
  }
  stat_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stat_prefix);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.stat_prefix)
}

// .envoy.api.v2.filter.Rds rds = 3;
inline bool HttpConnectionManager::has_rds() const {
  return route_specifier_case() == kRds;
}
inline void HttpConnectionManager::set_has_rds() {
  _oneof_case_[0] = kRds;
}
inline void HttpConnectionManager::clear_rds() {
  if (has_rds()) {
    delete route_specifier_.rds_;
    clear_has_route_specifier();
  }
}
inline  const ::envoy::api::v2::filter::Rds& HttpConnectionManager::rds() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.rds)
  return has_rds()
      ? *route_specifier_.rds_
      : ::envoy::api::v2::filter::Rds::default_instance();
}
inline ::envoy::api::v2::filter::Rds* HttpConnectionManager::mutable_rds() {
  if (!has_rds()) {
    clear_route_specifier();
    set_has_rds();
    route_specifier_.rds_ = new ::envoy::api::v2::filter::Rds;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.rds)
  return route_specifier_.rds_;
}
inline ::envoy::api::v2::filter::Rds* HttpConnectionManager::release_rds() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.rds)
  if (has_rds()) {
    clear_has_route_specifier();
    ::envoy::api::v2::filter::Rds* temp = route_specifier_.rds_;
    route_specifier_.rds_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void HttpConnectionManager::set_allocated_rds(::envoy::api::v2::filter::Rds* rds) {
  clear_route_specifier();
  if (rds) {
    set_has_rds();
    route_specifier_.rds_ = rds;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.rds)
}

// .envoy.api.v2.RouteConfiguration route_config = 4;
inline bool HttpConnectionManager::has_route_config() const {
  return route_specifier_case() == kRouteConfig;
}
inline void HttpConnectionManager::set_has_route_config() {
  _oneof_case_[0] = kRouteConfig;
}
inline void HttpConnectionManager::clear_route_config() {
  if (has_route_config()) {
    delete route_specifier_.route_config_;
    clear_has_route_specifier();
  }
}
inline  const ::envoy::api::v2::RouteConfiguration& HttpConnectionManager::route_config() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.route_config)
  return has_route_config()
      ? *route_specifier_.route_config_
      : ::envoy::api::v2::RouteConfiguration::default_instance();
}
inline ::envoy::api::v2::RouteConfiguration* HttpConnectionManager::mutable_route_config() {
  if (!has_route_config()) {
    clear_route_specifier();
    set_has_route_config();
    route_specifier_.route_config_ = new ::envoy::api::v2::RouteConfiguration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.route_config)
  return route_specifier_.route_config_;
}
inline ::envoy::api::v2::RouteConfiguration* HttpConnectionManager::release_route_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.route_config)
  if (has_route_config()) {
    clear_has_route_specifier();
    ::envoy::api::v2::RouteConfiguration* temp = route_specifier_.route_config_;
    route_specifier_.route_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void HttpConnectionManager::set_allocated_route_config(::envoy::api::v2::RouteConfiguration* route_config) {
  clear_route_specifier();
  if (route_config) {
    set_has_route_config();
    route_specifier_.route_config_ = route_config;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.route_config)
}

// repeated .envoy.api.v2.filter.HttpFilter http_filters = 5;
inline int HttpConnectionManager::http_filters_size() const {
  return http_filters_.size();
}
inline void HttpConnectionManager::clear_http_filters() {
  http_filters_.Clear();
}
inline const ::envoy::api::v2::filter::HttpFilter& HttpConnectionManager::http_filters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_.Get(index);
}
inline ::envoy::api::v2::filter::HttpFilter* HttpConnectionManager::mutable_http_filters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_.Mutable(index);
}
inline ::envoy::api::v2::filter::HttpFilter* HttpConnectionManager::add_http_filters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter >*
HttpConnectionManager::mutable_http_filters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return &http_filters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::HttpFilter >&
HttpConnectionManager::http_filters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HttpConnectionManager.http_filters)
  return http_filters_;
}

// .google.protobuf.BoolValue add_user_agent = 6;
inline bool HttpConnectionManager::has_add_user_agent() const {
  return this != internal_default_instance() && add_user_agent_ != NULL;
}
inline void HttpConnectionManager::clear_add_user_agent() {
  if (GetArenaNoVirtual() == NULL && add_user_agent_ != NULL) delete add_user_agent_;
  add_user_agent_ = NULL;
}
inline const ::google::protobuf::BoolValue& HttpConnectionManager::add_user_agent() const {
  const ::google::protobuf::BoolValue* p = add_user_agent_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::mutable_add_user_agent() {
  
  if (add_user_agent_ == NULL) {
    add_user_agent_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
  return add_user_agent_;
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::release_add_user_agent() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
  
  ::google::protobuf::BoolValue* temp = add_user_agent_;
  add_user_agent_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_add_user_agent(::google::protobuf::BoolValue* add_user_agent) {
  delete add_user_agent_;
  if (add_user_agent != NULL && add_user_agent->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_add_user_agent = new ::google::protobuf::BoolValue;
    new_add_user_agent->CopyFrom(*add_user_agent);
    add_user_agent = new_add_user_agent;
  }
  add_user_agent_ = add_user_agent;
  if (add_user_agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.add_user_agent)
}

// .envoy.api.v2.filter.HttpConnectionManager.Tracing tracing = 7;
inline bool HttpConnectionManager::has_tracing() const {
  return this != internal_default_instance() && tracing_ != NULL;
}
inline void HttpConnectionManager::clear_tracing() {
  if (GetArenaNoVirtual() == NULL && tracing_ != NULL) delete tracing_;
  tracing_ = NULL;
}
inline const ::envoy::api::v2::filter::HttpConnectionManager_Tracing& HttpConnectionManager::tracing() const {
  const ::envoy::api::v2::filter::HttpConnectionManager_Tracing* p = tracing_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.tracing)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::HttpConnectionManager_Tracing*>(
      &::envoy::api::v2::filter::_HttpConnectionManager_Tracing_default_instance_);
}
inline ::envoy::api::v2::filter::HttpConnectionManager_Tracing* HttpConnectionManager::mutable_tracing() {
  
  if (tracing_ == NULL) {
    tracing_ = new ::envoy::api::v2::filter::HttpConnectionManager_Tracing;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.tracing)
  return tracing_;
}
inline ::envoy::api::v2::filter::HttpConnectionManager_Tracing* HttpConnectionManager::release_tracing() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.tracing)
  
  ::envoy::api::v2::filter::HttpConnectionManager_Tracing* temp = tracing_;
  tracing_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_tracing(::envoy::api::v2::filter::HttpConnectionManager_Tracing* tracing) {
  delete tracing_;
  tracing_ = tracing;
  if (tracing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.tracing)
}

// .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 8;
inline bool HttpConnectionManager::has_http_protocol_options() const {
  return this != internal_default_instance() && http_protocol_options_ != NULL;
}
inline void HttpConnectionManager::clear_http_protocol_options() {
  if (GetArenaNoVirtual() == NULL && http_protocol_options_ != NULL) delete http_protocol_options_;
  http_protocol_options_ = NULL;
}
inline const ::envoy::api::v2::Http1ProtocolOptions& HttpConnectionManager::http_protocol_options() const {
  const ::envoy::api::v2::Http1ProtocolOptions* p = http_protocol_options_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Http1ProtocolOptions*>(
      &::envoy::api::v2::_Http1ProtocolOptions_default_instance_);
}
inline ::envoy::api::v2::Http1ProtocolOptions* HttpConnectionManager::mutable_http_protocol_options() {
  
  if (http_protocol_options_ == NULL) {
    http_protocol_options_ = new ::envoy::api::v2::Http1ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
  return http_protocol_options_;
}
inline ::envoy::api::v2::Http1ProtocolOptions* HttpConnectionManager::release_http_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
  
  ::envoy::api::v2::Http1ProtocolOptions* temp = http_protocol_options_;
  http_protocol_options_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_http_protocol_options(::envoy::api::v2::Http1ProtocolOptions* http_protocol_options) {
  delete http_protocol_options_;
  http_protocol_options_ = http_protocol_options;
  if (http_protocol_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.http_protocol_options)
}

// .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 9;
inline bool HttpConnectionManager::has_http2_protocol_options() const {
  return this != internal_default_instance() && http2_protocol_options_ != NULL;
}
inline void HttpConnectionManager::clear_http2_protocol_options() {
  if (GetArenaNoVirtual() == NULL && http2_protocol_options_ != NULL) delete http2_protocol_options_;
  http2_protocol_options_ = NULL;
}
inline const ::envoy::api::v2::Http2ProtocolOptions& HttpConnectionManager::http2_protocol_options() const {
  const ::envoy::api::v2::Http2ProtocolOptions* p = http2_protocol_options_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Http2ProtocolOptions*>(
      &::envoy::api::v2::_Http2ProtocolOptions_default_instance_);
}
inline ::envoy::api::v2::Http2ProtocolOptions* HttpConnectionManager::mutable_http2_protocol_options() {
  
  if (http2_protocol_options_ == NULL) {
    http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
  return http2_protocol_options_;
}
inline ::envoy::api::v2::Http2ProtocolOptions* HttpConnectionManager::release_http2_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
  
  ::envoy::api::v2::Http2ProtocolOptions* temp = http2_protocol_options_;
  http2_protocol_options_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options) {
  delete http2_protocol_options_;
  http2_protocol_options_ = http2_protocol_options;
  if (http2_protocol_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.http2_protocol_options)
}

// string server_name = 10;
inline void HttpConnectionManager::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HttpConnectionManager::server_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.server_name)
  return server_name_.GetNoArena();
}
inline void HttpConnectionManager::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
#if LANG_CXX11
inline void HttpConnectionManager::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
#endif
inline void HttpConnectionManager::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
inline void HttpConnectionManager::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.HttpConnectionManager.server_name)
}
inline ::std::string* HttpConnectionManager::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpConnectionManager::release_server_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpConnectionManager::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.server_name)
}

// .google.protobuf.Duration idle_timeout = 11;
inline bool HttpConnectionManager::has_idle_timeout() const {
  return this != internal_default_instance() && idle_timeout_ != NULL;
}
inline void HttpConnectionManager::clear_idle_timeout() {
  if (GetArenaNoVirtual() == NULL && idle_timeout_ != NULL) delete idle_timeout_;
  idle_timeout_ = NULL;
}
inline const ::google::protobuf::Duration& HttpConnectionManager::idle_timeout() const {
  const ::google::protobuf::Duration* p = idle_timeout_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* HttpConnectionManager::mutable_idle_timeout() {
  
  if (idle_timeout_ == NULL) {
    idle_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
  return idle_timeout_;
}
inline ::google::protobuf::Duration* HttpConnectionManager::release_idle_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
  
  ::google::protobuf::Duration* temp = idle_timeout_;
  idle_timeout_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_idle_timeout(::google::protobuf::Duration* idle_timeout) {
  delete idle_timeout_;
  if (idle_timeout != NULL && idle_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_idle_timeout = new ::google::protobuf::Duration;
    new_idle_timeout->CopyFrom(*idle_timeout);
    idle_timeout = new_idle_timeout;
  }
  idle_timeout_ = idle_timeout;
  if (idle_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.idle_timeout)
}

// .google.protobuf.Duration drain_timeout = 12;
inline bool HttpConnectionManager::has_drain_timeout() const {
  return this != internal_default_instance() && drain_timeout_ != NULL;
}
inline void HttpConnectionManager::clear_drain_timeout() {
  if (GetArenaNoVirtual() == NULL && drain_timeout_ != NULL) delete drain_timeout_;
  drain_timeout_ = NULL;
}
inline const ::google::protobuf::Duration& HttpConnectionManager::drain_timeout() const {
  const ::google::protobuf::Duration* p = drain_timeout_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* HttpConnectionManager::mutable_drain_timeout() {
  
  if (drain_timeout_ == NULL) {
    drain_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
  return drain_timeout_;
}
inline ::google::protobuf::Duration* HttpConnectionManager::release_drain_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
  
  ::google::protobuf::Duration* temp = drain_timeout_;
  drain_timeout_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_drain_timeout(::google::protobuf::Duration* drain_timeout) {
  delete drain_timeout_;
  if (drain_timeout != NULL && drain_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_drain_timeout = new ::google::protobuf::Duration;
    new_drain_timeout->CopyFrom(*drain_timeout);
    drain_timeout = new_drain_timeout;
  }
  drain_timeout_ = drain_timeout;
  if (drain_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.drain_timeout)
}

// repeated .envoy.api.v2.filter.AccessLog access_log = 13;
inline int HttpConnectionManager::access_log_size() const {
  return access_log_.size();
}
inline void HttpConnectionManager::clear_access_log() {
  access_log_.Clear();
}
inline const ::envoy::api::v2::filter::AccessLog& HttpConnectionManager::access_log(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return access_log_.Get(index);
}
inline ::envoy::api::v2::filter::AccessLog* HttpConnectionManager::mutable_access_log(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return access_log_.Mutable(index);
}
inline ::envoy::api::v2::filter::AccessLog* HttpConnectionManager::add_access_log() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return access_log_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLog >*
HttpConnectionManager::mutable_access_log() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return &access_log_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::AccessLog >&
HttpConnectionManager::access_log() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.HttpConnectionManager.access_log)
  return access_log_;
}

// .google.protobuf.BoolValue use_remote_address = 14;
inline bool HttpConnectionManager::has_use_remote_address() const {
  return this != internal_default_instance() && use_remote_address_ != NULL;
}
inline void HttpConnectionManager::clear_use_remote_address() {
  if (GetArenaNoVirtual() == NULL && use_remote_address_ != NULL) delete use_remote_address_;
  use_remote_address_ = NULL;
}
inline const ::google::protobuf::BoolValue& HttpConnectionManager::use_remote_address() const {
  const ::google::protobuf::BoolValue* p = use_remote_address_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::mutable_use_remote_address() {
  
  if (use_remote_address_ == NULL) {
    use_remote_address_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
  return use_remote_address_;
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::release_use_remote_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
  
  ::google::protobuf::BoolValue* temp = use_remote_address_;
  use_remote_address_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_use_remote_address(::google::protobuf::BoolValue* use_remote_address) {
  delete use_remote_address_;
  if (use_remote_address != NULL && use_remote_address->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_use_remote_address = new ::google::protobuf::BoolValue;
    new_use_remote_address->CopyFrom(*use_remote_address);
    use_remote_address = new_use_remote_address;
  }
  use_remote_address_ = use_remote_address;
  if (use_remote_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.use_remote_address)
}

// .google.protobuf.BoolValue generate_request_id = 15;
inline bool HttpConnectionManager::has_generate_request_id() const {
  return this != internal_default_instance() && generate_request_id_ != NULL;
}
inline void HttpConnectionManager::clear_generate_request_id() {
  if (GetArenaNoVirtual() == NULL && generate_request_id_ != NULL) delete generate_request_id_;
  generate_request_id_ = NULL;
}
inline const ::google::protobuf::BoolValue& HttpConnectionManager::generate_request_id() const {
  const ::google::protobuf::BoolValue* p = generate_request_id_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::mutable_generate_request_id() {
  
  if (generate_request_id_ == NULL) {
    generate_request_id_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
  return generate_request_id_;
}
inline ::google::protobuf::BoolValue* HttpConnectionManager::release_generate_request_id() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
  
  ::google::protobuf::BoolValue* temp = generate_request_id_;
  generate_request_id_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_generate_request_id(::google::protobuf::BoolValue* generate_request_id) {
  delete generate_request_id_;
  if (generate_request_id != NULL && generate_request_id->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_generate_request_id = new ::google::protobuf::BoolValue;
    new_generate_request_id->CopyFrom(*generate_request_id);
    generate_request_id = new_generate_request_id;
  }
  generate_request_id_ = generate_request_id;
  if (generate_request_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.generate_request_id)
}

// .envoy.api.v2.filter.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;
inline void HttpConnectionManager::clear_forward_client_cert_details() {
  forward_client_cert_details_ = 0;
}
inline ::envoy::api::v2::filter::HttpConnectionManager_ForwardClientCertDetails HttpConnectionManager::forward_client_cert_details() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.forward_client_cert_details)
  return static_cast< ::envoy::api::v2::filter::HttpConnectionManager_ForwardClientCertDetails >(forward_client_cert_details_);
}
inline void HttpConnectionManager::set_forward_client_cert_details(::envoy::api::v2::filter::HttpConnectionManager_ForwardClientCertDetails value) {
  
  forward_client_cert_details_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.HttpConnectionManager.forward_client_cert_details)
}

// .envoy.api.v2.filter.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;
inline bool HttpConnectionManager::has_set_current_client_cert_details() const {
  return this != internal_default_instance() && set_current_client_cert_details_ != NULL;
}
inline void HttpConnectionManager::clear_set_current_client_cert_details() {
  if (GetArenaNoVirtual() == NULL && set_current_client_cert_details_ != NULL) delete set_current_client_cert_details_;
  set_current_client_cert_details_ = NULL;
}
inline const ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails& HttpConnectionManager::set_current_client_cert_details() const {
  const ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* p = set_current_client_cert_details_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.HttpConnectionManager.set_current_client_cert_details)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails*>(
      &::envoy::api::v2::filter::_HttpConnectionManager_SetCurrentClientCertDetails_default_instance_);
}
inline ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* HttpConnectionManager::mutable_set_current_client_cert_details() {
  
  if (set_current_client_cert_details_ == NULL) {
    set_current_client_cert_details_ = new ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.HttpConnectionManager.set_current_client_cert_details)
  return set_current_client_cert_details_;
}
inline ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* HttpConnectionManager::release_set_current_client_cert_details() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.HttpConnectionManager.set_current_client_cert_details)
  
  ::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* temp = set_current_client_cert_details_;
  set_current_client_cert_details_ = NULL;
  return temp;
}
inline void HttpConnectionManager::set_allocated_set_current_client_cert_details(::envoy::api::v2::filter::HttpConnectionManager_SetCurrentClientCertDetails* set_current_client_cert_details) {
  delete set_current_client_cert_details_;
  set_current_client_cert_details_ = set_current_client_cert_details;
  if (set_current_client_cert_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.HttpConnectionManager.set_current_client_cert_details)
}

inline bool HttpConnectionManager::has_route_specifier() const {
  return route_specifier_case() != ROUTE_SPECIFIER_NOT_SET;
}
inline void HttpConnectionManager::clear_has_route_specifier() {
  _oneof_case_[0] = ROUTE_SPECIFIER_NOT_SET;
}
inline HttpConnectionManager::RouteSpecifierCase HttpConnectionManager::route_specifier_case() const {
  return HttpConnectionManager::RouteSpecifierCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::envoy::api::v2::filter::ComparisonFilter_Op> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::filter::ComparisonFilter_Op>() {
  return ::envoy::api::v2::filter::ComparisonFilter_Op_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName>() {
  return ::envoy::api::v2::filter::HttpConnectionManager_Tracing_OperationName_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::filter::HttpConnectionManager_CodecType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::filter::HttpConnectionManager_CodecType>() {
  return ::envoy::api::v2::filter::HttpConnectionManager_CodecType_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::filter::HttpConnectionManager_ForwardClientCertDetails> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::filter::HttpConnectionManager_ForwardClientCertDetails>() {
  return ::envoy::api::v2::filter::HttpConnectionManager_ForwardClientCertDetails_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2ffilter_2fhttp_5fconnection_5fmanager_2eproto__INCLUDED
