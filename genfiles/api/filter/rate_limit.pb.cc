// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/filter/rate_limit.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/filter/rate_limit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
namespace filter {
class RateLimit_RateLimitDescriptor_EntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RateLimit_RateLimitDescriptor_Entry> {
} _RateLimit_RateLimitDescriptor_Entry_default_instance_;
class RateLimit_RateLimitDescriptorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RateLimit_RateLimitDescriptor> {
} _RateLimit_RateLimitDescriptor_default_instance_;
class RateLimitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RateLimit> {
} _RateLimit_default_instance_;

namespace protobuf_api_2ffilter_2frate_5flimit_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitDescriptor_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitDescriptor_Entry, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitDescriptor_Entry, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit_RateLimitDescriptor, entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, stat_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, rate_limit_descriptors_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(RateLimit_RateLimitDescriptor_Entry)},
  { 6, -1, sizeof(RateLimit_RateLimitDescriptor)},
  { 11, -1, sizeof(RateLimit)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_RateLimitDescriptor_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_RateLimitDescriptor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RateLimit_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/filter/rate_limit.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _RateLimit_RateLimitDescriptor_Entry_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RateLimit_RateLimitDescriptor_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RateLimit_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RateLimit_RateLimitDescriptor_Entry_default_instance_.DefaultConstruct();
  _RateLimit_RateLimitDescriptor_default_instance_.DefaultConstruct();
  _RateLimit_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\033api/filter/rate_limit.proto\022\023envoy.api"
      ".v2.filter\"\214\002\n\tRateLimit\022\023\n\013stat_prefix\030"
      "\001 \001(\t\022\016\n\006domain\030\002 \001(\t\022R\n\026rate_limit_desc"
      "riptors\030\003 \003(\01322.envoy.api.v2.filter.Rate"
      "Limit.RateLimitDescriptor\032\205\001\n\023RateLimitD"
      "escriptor\022I\n\007entries\030\001 \003(\01328.envoy.api.v"
      "2.filter.RateLimit.RateLimitDescriptor.E"
      "ntry\032#\n\005Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
      "\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 329);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/filter/rate_limit.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2ffilter_2frate_5flimit_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimit_RateLimitDescriptor_Entry::kKeyFieldNumber;
const int RateLimit_RateLimitDescriptor_Entry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit_RateLimitDescriptor_Entry::RateLimit_RateLimitDescriptor_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2frate_5flimit_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
}
RateLimit_RateLimitDescriptor_Entry::RateLimit_RateLimitDescriptor_Entry(const RateLimit_RateLimitDescriptor_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
}

void RateLimit_RateLimitDescriptor_Entry::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RateLimit_RateLimitDescriptor_Entry::~RateLimit_RateLimitDescriptor_Entry() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
  SharedDtor();
}

void RateLimit_RateLimitDescriptor_Entry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RateLimit_RateLimitDescriptor_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit_RateLimitDescriptor_Entry::descriptor() {
  protobuf_api_2ffilter_2frate_5flimit_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2frate_5flimit_2eproto::file_level_metadata[0].descriptor;
}

const RateLimit_RateLimitDescriptor_Entry& RateLimit_RateLimitDescriptor_Entry::default_instance() {
  protobuf_api_2ffilter_2frate_5flimit_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit_RateLimitDescriptor_Entry* RateLimit_RateLimitDescriptor_Entry::New(::google::protobuf::Arena* arena) const {
  RateLimit_RateLimitDescriptor_Entry* n = new RateLimit_RateLimitDescriptor_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit_RateLimitDescriptor_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RateLimit_RateLimitDescriptor_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
  return false;
#undef DO_
}

void RateLimit_RateLimitDescriptor_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
}

::google::protobuf::uint8* RateLimit_RateLimitDescriptor_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
  return target;
}

size_t RateLimit_RateLimitDescriptor_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
  size_t total_size = 0;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit_RateLimitDescriptor_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit_RateLimitDescriptor_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit_RateLimitDescriptor_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
    MergeFrom(*source);
  }
}

void RateLimit_RateLimitDescriptor_Entry::MergeFrom(const RateLimit_RateLimitDescriptor_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void RateLimit_RateLimitDescriptor_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit_RateLimitDescriptor_Entry::CopyFrom(const RateLimit_RateLimitDescriptor_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit_RateLimitDescriptor_Entry::IsInitialized() const {
  return true;
}

void RateLimit_RateLimitDescriptor_Entry::Swap(RateLimit_RateLimitDescriptor_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit_RateLimitDescriptor_Entry::InternalSwap(RateLimit_RateLimitDescriptor_Entry* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit_RateLimitDescriptor_Entry::GetMetadata() const {
  protobuf_api_2ffilter_2frate_5flimit_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2frate_5flimit_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit_RateLimitDescriptor_Entry

// string key = 1;
void RateLimit_RateLimitDescriptor_Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimit_RateLimitDescriptor_Entry::key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.key)
  return key_.GetNoArena();
}
void RateLimit_RateLimitDescriptor_Entry::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.key)
}
#if LANG_CXX11
void RateLimit_RateLimitDescriptor_Entry::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.key)
}
#endif
void RateLimit_RateLimitDescriptor_Entry::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.key)
}
void RateLimit_RateLimitDescriptor_Entry::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.key)
}
::std::string* RateLimit_RateLimitDescriptor_Entry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit_RateLimitDescriptor_Entry::release_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimit_RateLimitDescriptor_Entry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.key)
}

// string value = 2;
void RateLimit_RateLimitDescriptor_Entry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimit_RateLimitDescriptor_Entry::value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.value)
  return value_.GetNoArena();
}
void RateLimit_RateLimitDescriptor_Entry::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.value)
}
#if LANG_CXX11
void RateLimit_RateLimitDescriptor_Entry::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.value)
}
#endif
void RateLimit_RateLimitDescriptor_Entry::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.value)
}
void RateLimit_RateLimitDescriptor_Entry::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.value)
}
::std::string* RateLimit_RateLimitDescriptor_Entry::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit_RateLimitDescriptor_Entry::release_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimit_RateLimitDescriptor_Entry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimit_RateLimitDescriptor::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit_RateLimitDescriptor::RateLimit_RateLimitDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2frate_5flimit_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
}
RateLimit_RateLimitDescriptor::RateLimit_RateLimitDescriptor(const RateLimit_RateLimitDescriptor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
}

void RateLimit_RateLimitDescriptor::SharedCtor() {
  _cached_size_ = 0;
}

RateLimit_RateLimitDescriptor::~RateLimit_RateLimitDescriptor() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
  SharedDtor();
}

void RateLimit_RateLimitDescriptor::SharedDtor() {
}

void RateLimit_RateLimitDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit_RateLimitDescriptor::descriptor() {
  protobuf_api_2ffilter_2frate_5flimit_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2frate_5flimit_2eproto::file_level_metadata[1].descriptor;
}

const RateLimit_RateLimitDescriptor& RateLimit_RateLimitDescriptor::default_instance() {
  protobuf_api_2ffilter_2frate_5flimit_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit_RateLimitDescriptor* RateLimit_RateLimitDescriptor::New(::google::protobuf::Arena* arena) const {
  RateLimit_RateLimitDescriptor* n = new RateLimit_RateLimitDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit_RateLimitDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
  entries_.Clear();
}

bool RateLimit_RateLimitDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry entries = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
  return false;
#undef DO_
}

void RateLimit_RateLimitDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
  // repeated .envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
}

::google::protobuf::uint8* RateLimit_RateLimitDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
  // repeated .envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
  return target;
}

size_t RateLimit_RateLimitDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
  size_t total_size = 0;

  // repeated .envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry entries = 1;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit_RateLimitDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit_RateLimitDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit_RateLimitDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
    MergeFrom(*source);
  }
}

void RateLimit_RateLimitDescriptor::MergeFrom(const RateLimit_RateLimitDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entries_.MergeFrom(from.entries_);
}

void RateLimit_RateLimitDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit_RateLimitDescriptor::CopyFrom(const RateLimit_RateLimitDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.RateLimit.RateLimitDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit_RateLimitDescriptor::IsInitialized() const {
  return true;
}

void RateLimit_RateLimitDescriptor::Swap(RateLimit_RateLimitDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit_RateLimitDescriptor::InternalSwap(RateLimit_RateLimitDescriptor* other) {
  entries_.UnsafeArenaSwap(&other->entries_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit_RateLimitDescriptor::GetMetadata() const {
  protobuf_api_2ffilter_2frate_5flimit_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2frate_5flimit_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit_RateLimitDescriptor

// repeated .envoy.api.v2.filter.RateLimit.RateLimitDescriptor.Entry entries = 1;
int RateLimit_RateLimitDescriptor::entries_size() const {
  return entries_.size();
}
void RateLimit_RateLimitDescriptor::clear_entries() {
  entries_.Clear();
}
const ::envoy::api::v2::filter::RateLimit_RateLimitDescriptor_Entry& RateLimit_RateLimitDescriptor::entries(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.entries)
  return entries_.Get(index);
}
::envoy::api::v2::filter::RateLimit_RateLimitDescriptor_Entry* RateLimit_RateLimitDescriptor::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.entries)
  return entries_.Mutable(index);
}
::envoy::api::v2::filter::RateLimit_RateLimitDescriptor_Entry* RateLimit_RateLimitDescriptor::add_entries() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::RateLimit_RateLimitDescriptor_Entry >*
RateLimit_RateLimitDescriptor::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::RateLimit_RateLimitDescriptor_Entry >&
RateLimit_RateLimitDescriptor::entries() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.RateLimit.RateLimitDescriptor.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RateLimit::kStatPrefixFieldNumber;
const int RateLimit::kDomainFieldNumber;
const int RateLimit::kRateLimitDescriptorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RateLimit::RateLimit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ffilter_2frate_5flimit_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.filter.RateLimit)
}
RateLimit::RateLimit(const RateLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rate_limit_descriptors_(from.rate_limit_descriptors_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stat_prefix().size() > 0) {
    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.filter.RateLimit)
}

void RateLimit::SharedCtor() {
  stat_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RateLimit::~RateLimit() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.filter.RateLimit)
  SharedDtor();
}

void RateLimit::SharedDtor() {
  stat_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RateLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit::descriptor() {
  protobuf_api_2ffilter_2frate_5flimit_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2frate_5flimit_2eproto::file_level_metadata[2].descriptor;
}

const RateLimit& RateLimit::default_instance() {
  protobuf_api_2ffilter_2frate_5flimit_2eproto::InitDefaults();
  return *internal_default_instance();
}

RateLimit* RateLimit::New(::google::protobuf::Arena* arena) const {
  RateLimit* n = new RateLimit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RateLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.filter.RateLimit)
  rate_limit_descriptors_.Clear();
  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RateLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.filter.RateLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stat_prefix = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stat_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stat_prefix().data(), this->stat_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.RateLimit.stat_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.filter.RateLimit.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.filter.RateLimit.RateLimitDescriptor rate_limit_descriptors = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rate_limit_descriptors()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.filter.RateLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.filter.RateLimit)
  return false;
#undef DO_
}

void RateLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.filter.RateLimit)
  // string stat_prefix = 1;
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), this->stat_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RateLimit.stat_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stat_prefix(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RateLimit.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // repeated .envoy.api.v2.filter.RateLimit.RateLimitDescriptor rate_limit_descriptors = 3;
  for (unsigned int i = 0, n = this->rate_limit_descriptors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rate_limit_descriptors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.filter.RateLimit)
}

::google::protobuf::uint8* RateLimit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.filter.RateLimit)
  // string stat_prefix = 1;
  if (this->stat_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stat_prefix().data(), this->stat_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RateLimit.stat_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stat_prefix(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.filter.RateLimit.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // repeated .envoy.api.v2.filter.RateLimit.RateLimitDescriptor rate_limit_descriptors = 3;
  for (unsigned int i = 0, n = this->rate_limit_descriptors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->rate_limit_descriptors(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.filter.RateLimit)
  return target;
}

size_t RateLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.filter.RateLimit)
  size_t total_size = 0;

  // repeated .envoy.api.v2.filter.RateLimit.RateLimitDescriptor rate_limit_descriptors = 3;
  {
    unsigned int count = this->rate_limit_descriptors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rate_limit_descriptors(i));
    }
  }

  // string stat_prefix = 1;
  if (this->stat_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stat_prefix());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.filter.RateLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RateLimit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.filter.RateLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.filter.RateLimit)
    MergeFrom(*source);
  }
}

void RateLimit::MergeFrom(const RateLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.filter.RateLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_limit_descriptors_.MergeFrom(from.rate_limit_descriptors_);
  if (from.stat_prefix().size() > 0) {

    stat_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stat_prefix_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
}

void RateLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.filter.RateLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit::CopyFrom(const RateLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.filter.RateLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit::IsInitialized() const {
  return true;
}

void RateLimit::Swap(RateLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RateLimit::InternalSwap(RateLimit* other) {
  rate_limit_descriptors_.UnsafeArenaSwap(&other->rate_limit_descriptors_);
  stat_prefix_.Swap(&other->stat_prefix_);
  domain_.Swap(&other->domain_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RateLimit::GetMetadata() const {
  protobuf_api_2ffilter_2frate_5flimit_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ffilter_2frate_5flimit_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RateLimit

// string stat_prefix = 1;
void RateLimit::clear_stat_prefix() {
  stat_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimit::stat_prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.RateLimit.stat_prefix)
  return stat_prefix_.GetNoArena();
}
void RateLimit::set_stat_prefix(const ::std::string& value) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.RateLimit.stat_prefix)
}
#if LANG_CXX11
void RateLimit::set_stat_prefix(::std::string&& value) {
  
  stat_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.RateLimit.stat_prefix)
}
#endif
void RateLimit::set_stat_prefix(const char* value) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.RateLimit.stat_prefix)
}
void RateLimit::set_stat_prefix(const char* value, size_t size) {
  
  stat_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.RateLimit.stat_prefix)
}
::std::string* RateLimit::mutable_stat_prefix() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.RateLimit.stat_prefix)
  return stat_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit::release_stat_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.RateLimit.stat_prefix)
  
  return stat_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimit::set_allocated_stat_prefix(::std::string* stat_prefix) {
  if (stat_prefix != NULL) {
    
  } else {
    
  }
  stat_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stat_prefix);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.RateLimit.stat_prefix)
}

// string domain = 2;
void RateLimit::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RateLimit::domain() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.RateLimit.domain)
  return domain_.GetNoArena();
}
void RateLimit::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.filter.RateLimit.domain)
}
#if LANG_CXX11
void RateLimit::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.filter.RateLimit.domain)
}
#endif
void RateLimit::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.filter.RateLimit.domain)
}
void RateLimit::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.filter.RateLimit.domain)
}
::std::string* RateLimit::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.RateLimit.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RateLimit::release_domain() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.filter.RateLimit.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RateLimit::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.filter.RateLimit.domain)
}

// repeated .envoy.api.v2.filter.RateLimit.RateLimitDescriptor rate_limit_descriptors = 3;
int RateLimit::rate_limit_descriptors_size() const {
  return rate_limit_descriptors_.size();
}
void RateLimit::clear_rate_limit_descriptors() {
  rate_limit_descriptors_.Clear();
}
const ::envoy::api::v2::filter::RateLimit_RateLimitDescriptor& RateLimit::rate_limit_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.filter.RateLimit.rate_limit_descriptors)
  return rate_limit_descriptors_.Get(index);
}
::envoy::api::v2::filter::RateLimit_RateLimitDescriptor* RateLimit::mutable_rate_limit_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.filter.RateLimit.rate_limit_descriptors)
  return rate_limit_descriptors_.Mutable(index);
}
::envoy::api::v2::filter::RateLimit_RateLimitDescriptor* RateLimit::add_rate_limit_descriptors() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.filter.RateLimit.rate_limit_descriptors)
  return rate_limit_descriptors_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::RateLimit_RateLimitDescriptor >*
RateLimit::mutable_rate_limit_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.filter.RateLimit.rate_limit_descriptors)
  return &rate_limit_descriptors_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::filter::RateLimit_RateLimitDescriptor >&
RateLimit::rate_limit_descriptors() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.filter.RateLimit.rate_limit_descriptors)
  return rate_limit_descriptors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace filter
}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
