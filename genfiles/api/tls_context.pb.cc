// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/tls_context.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/tls_context.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
class DataSourceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataSource> {
  public:
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr inline__;
} _DataSource_default_instance_;
class TlsParametersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TlsParameters> {
} _TlsParameters_default_instance_;
class TlsCertificateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TlsCertificate> {
} _TlsCertificate_default_instance_;
class CertificateValidationContextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CertificateValidationContext> {
} _CertificateValidationContext_default_instance_;
class UpstreamTlsContextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpstreamTlsContext> {
} _UpstreamTlsContext_default_instance_;
class DownstreamTlsContextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownstreamTlsContext> {
} _DownstreamTlsContext_default_instance_;

namespace protobuf_api_2ftls_5fcontext_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSource, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSource, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_DataSource_default_instance_), filename_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_DataSource_default_instance_), inline__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSource, specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TlsParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TlsParameters, tls_minimum_protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TlsParameters, tls_maximum_protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TlsParameters, cipher_suites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TlsParameters, ecdh_curves_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TlsCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TlsCertificate, cert_chain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TlsCertificate, private_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TlsCertificate, ocsp_staple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TlsCertificate, signed_certificate_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidationContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidationContext, ca_cert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidationContext, verify_certificate_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidationContext, verify_spki_sha256_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidationContext, verify_subject_alt_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidationContext, require_ocsp_staple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidationContext, require_signed_certificate_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpstreamTlsContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpstreamTlsContext, tls_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpstreamTlsContext, client_certificate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpstreamTlsContext, sni_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpstreamTlsContext, alpn_protocols_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpstreamTlsContext, server_validation_context_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownstreamTlsContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownstreamTlsContext, tls_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownstreamTlsContext, tls_certificates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownstreamTlsContext, alpn_protocols_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownstreamTlsContext, client_validation_context_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(DataSource)},
  { 7, -1, sizeof(TlsParameters)},
  { 15, -1, sizeof(TlsCertificate)},
  { 23, -1, sizeof(CertificateValidationContext)},
  { 33, -1, sizeof(UpstreamTlsContext)},
  { 42, -1, sizeof(DownstreamTlsContext)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TlsParameters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TlsCertificate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CertificateValidationContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpstreamTlsContext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DownstreamTlsContext_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/tls_context.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _DataSource_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TlsParameters_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TlsCertificate_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CertificateValidationContext_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _UpstreamTlsContext_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _DownstreamTlsContext_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  _DataSource_default_instance_.DefaultConstruct();
  _TlsParameters_default_instance_.DefaultConstruct();
  _TlsCertificate_default_instance_.DefaultConstruct();
  _CertificateValidationContext_default_instance_.DefaultConstruct();
  _UpstreamTlsContext_default_instance_.DefaultConstruct();
  _DownstreamTlsContext_default_instance_.DefaultConstruct();
  _DataSource_default_instance_.filename_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _DataSource_default_instance_.inline__.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _TlsCertificate_default_instance_.get_mutable()->cert_chain_ = const_cast< ::envoy::api::v2::DataSource*>(
      ::envoy::api::v2::DataSource::internal_default_instance());
  _TlsCertificate_default_instance_.get_mutable()->private_key_ = const_cast< ::envoy::api::v2::DataSource*>(
      ::envoy::api::v2::DataSource::internal_default_instance());
  _TlsCertificate_default_instance_.get_mutable()->ocsp_staple_ = const_cast< ::envoy::api::v2::DataSource*>(
      ::envoy::api::v2::DataSource::internal_default_instance());
  _CertificateValidationContext_default_instance_.get_mutable()->ca_cert_ = const_cast< ::envoy::api::v2::DataSource*>(
      ::envoy::api::v2::DataSource::internal_default_instance());
  _CertificateValidationContext_default_instance_.get_mutable()->require_ocsp_staple_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _CertificateValidationContext_default_instance_.get_mutable()->require_signed_certificate_timestamp_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _UpstreamTlsContext_default_instance_.get_mutable()->tls_params_ = const_cast< ::envoy::api::v2::TlsParameters*>(
      ::envoy::api::v2::TlsParameters::internal_default_instance());
  _UpstreamTlsContext_default_instance_.get_mutable()->client_certificate_ = const_cast< ::envoy::api::v2::TlsCertificate*>(
      ::envoy::api::v2::TlsCertificate::internal_default_instance());
  _UpstreamTlsContext_default_instance_.get_mutable()->server_validation_context_ = const_cast< ::envoy::api::v2::CertificateValidationContext*>(
      ::envoy::api::v2::CertificateValidationContext::internal_default_instance());
  _DownstreamTlsContext_default_instance_.get_mutable()->tls_params_ = const_cast< ::envoy::api::v2::TlsParameters*>(
      ::envoy::api::v2::TlsParameters::internal_default_instance());
  _DownstreamTlsContext_default_instance_.get_mutable()->client_validation_context_ = const_cast< ::envoy::api::v2::CertificateValidationContext*>(
      ::envoy::api::v2::CertificateValidationContext::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025api/tls_context.proto\022\014envoy.api.v2\032\036g"
      "oogle/protobuf/wrappers.proto\"\?\n\nDataSou"
      "rce\022\022\n\010filename\030\001 \001(\tH\000\022\020\n\006inline\030\002 \001(\014H"
      "\000B\013\n\tspecifier\"\252\002\n\rTlsParameters\022M\n\034tls_"
      "minimum_protocol_version\030\001 \001(\0162\'.envoy.a"
      "pi.v2.TlsParameters.TlsProtocol\022M\n\034tls_m"
      "aximum_protocol_version\030\002 \001(\0162\'.envoy.ap"
      "i.v2.TlsParameters.TlsProtocol\022\025\n\rcipher"
      "_suites\030\003 \003(\t\022\023\n\013ecdh_curves\030\004 \003(\t\"O\n\013Tl"
      "sProtocol\022\014\n\010TLS_AUTO\020\000\022\013\n\007TLSv1_0\020\001\022\013\n\007"
      "TLSv1_1\020\002\022\013\n\007TLSv1_2\020\003\022\013\n\007TLSv1_3\020\004\"\334\001\n\016"
      "TlsCertificate\022,\n\ncert_chain\030\001 \001(\0132\030.env"
      "oy.api.v2.DataSource\022-\n\013private_key\030\002 \001("
      "\0132\030.envoy.api.v2.DataSource\022-\n\013ocsp_stap"
      "le\030\003 \001(\0132\030.envoy.api.v2.DataSource\022>\n\034si"
      "gned_certificate_timestamp\030\004 \003(\0132\030.envoy"
      ".api.v2.DataSource\"\252\002\n\034CertificateValida"
      "tionContext\022)\n\007ca_cert\030\001 \001(\0132\030.envoy.api"
      ".v2.DataSource\022\037\n\027verify_certificate_has"
      "h\030\002 \003(\t\022\032\n\022verify_spki_sha256\030\003 \003(\t\022\037\n\027v"
      "erify_subject_alt_name\030\004 \003(\t\0227\n\023require_"
      "ocsp_staple\030\005 \001(\0132\032.google.protobuf.Bool"
      "Value\022H\n$require_signed_certificate_time"
      "stamp\030\006 \001(\0132\032.google.protobuf.BoolValue\""
      "\363\001\n\022UpstreamTlsContext\022/\n\ntls_params\030\001 \001"
      "(\0132\033.envoy.api.v2.TlsParameters\0228\n\022clien"
      "t_certificate\030\002 \001(\0132\034.envoy.api.v2.TlsCe"
      "rtificate\022\013\n\003sni\030\003 \001(\t\022\026\n\016alpn_protocols"
      "\030\004 \003(\t\022M\n\031server_validation_context\030\005 \001("
      "\0132*.envoy.api.v2.CertificateValidationCo"
      "ntext\"\346\001\n\024DownstreamTlsContext\022/\n\ntls_pa"
      "rams\030\001 \001(\0132\033.envoy.api.v2.TlsParameters\022"
      "6\n\020tls_certificates\030\002 \003(\0132\034.envoy.api.v2"
      ".TlsCertificate\022\026\n\016alpn_protocols\030\003 \003(\t\022"
      "M\n\031client_validation_context\030\004 \001(\0132*.env"
      "oy.api.v2.CertificateValidationContextb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1446);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/tls_context.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2ftls_5fcontext_2eproto

const ::google::protobuf::EnumDescriptor* TlsParameters_TlsProtocol_descriptor() {
  protobuf_api_2ftls_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ftls_5fcontext_2eproto::file_level_enum_descriptors[0];
}
bool TlsParameters_TlsProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TlsParameters_TlsProtocol TlsParameters::TLS_AUTO;
const TlsParameters_TlsProtocol TlsParameters::TLSv1_0;
const TlsParameters_TlsProtocol TlsParameters::TLSv1_1;
const TlsParameters_TlsProtocol TlsParameters::TLSv1_2;
const TlsParameters_TlsProtocol TlsParameters::TLSv1_3;
const TlsParameters_TlsProtocol TlsParameters::TlsProtocol_MIN;
const TlsParameters_TlsProtocol TlsParameters::TlsProtocol_MAX;
const int TlsParameters::TlsProtocol_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSource::kFilenameFieldNumber;
const int DataSource::kInlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSource::DataSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.DataSource)
}
DataSource::DataSource(const DataSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_specifier();
  switch (from.specifier_case()) {
    case kFilename: {
      set_filename(from.filename());
      break;
    }
    case kInline: {
      set_inline_(from.inline_());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.DataSource)
}

void DataSource::SharedCtor() {
  clear_has_specifier();
  _cached_size_ = 0;
}

DataSource::~DataSource() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.DataSource)
  SharedDtor();
}

void DataSource::SharedDtor() {
  if (has_specifier()) {
    clear_specifier();
  }
}

void DataSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSource::descriptor() {
  protobuf_api_2ftls_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ftls_5fcontext_2eproto::file_level_metadata[0].descriptor;
}

const DataSource& DataSource::default_instance() {
  protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataSource* DataSource::New(::google::protobuf::Arena* arena) const {
  DataSource* n = new DataSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataSource::clear_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.DataSource)
  switch (specifier_case()) {
    case kFilename: {
      specifier_.filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kInline: {
      specifier_.inline__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SPECIFIER_NOT_SET;
}


void DataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.DataSource)
  clear_specifier();
}

bool DataSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.DataSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filename = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.DataSource.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes inline = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inline_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.DataSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.DataSource)
  return false;
#undef DO_
}

void DataSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.DataSource)
  // string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.DataSource.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // bytes inline = 2;
  if (has_inline_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->inline_(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.DataSource)
}

::google::protobuf::uint8* DataSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.DataSource)
  // string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.DataSource.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // bytes inline = 2;
  if (has_inline_()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->inline_(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.DataSource)
  return target;
}

size_t DataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.DataSource)
  size_t total_size = 0;

  switch (specifier_case()) {
    // string filename = 1;
    case kFilename: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
      break;
    }
    // bytes inline = 2;
    case kInline: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->inline_());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.DataSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.DataSource)
    MergeFrom(*source);
  }
}

void DataSource::MergeFrom(const DataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.specifier_case()) {
    case kFilename: {
      set_filename(from.filename());
      break;
    }
    case kInline: {
      set_inline_(from.inline_());
      break;
    }
    case SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void DataSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSource::CopyFrom(const DataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSource::IsInitialized() const {
  return true;
}

void DataSource::Swap(DataSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSource::InternalSwap(DataSource* other) {
  std::swap(specifier_, other->specifier_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataSource::GetMetadata() const {
  protobuf_api_2ftls_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ftls_5fcontext_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataSource

// string filename = 1;
bool DataSource::has_filename() const {
  return specifier_case() == kFilename;
}
void DataSource::set_has_filename() {
  _oneof_case_[0] = kFilename;
}
void DataSource::clear_filename() {
  if (has_filename()) {
    specifier_.filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_specifier();
  }
}
const ::std::string& DataSource::filename() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DataSource.filename)
  if (has_filename()) {
    return specifier_.filename_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void DataSource::set_filename(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.DataSource.filename)
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.DataSource.filename)
}
#if LANG_CXX11
void DataSource::set_filename(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.DataSource.filename)
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.DataSource.filename)
}
#endif
void DataSource::set_filename(const char* value) {
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.DataSource.filename)
}
void DataSource::set_filename(const char* value, size_t size) {
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.DataSource.filename)
}
::std::string* DataSource::mutable_filename() {
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DataSource.filename)
  return specifier_.filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataSource::release_filename() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DataSource.filename)
  if (has_filename()) {
    clear_has_specifier();
    return specifier_.filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void DataSource::set_allocated_filename(::std::string* filename) {
  if (!has_filename()) {
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_specifier();
  if (filename != NULL) {
    set_has_filename();
    specifier_.filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        filename);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DataSource.filename)
}

// bytes inline = 2;
bool DataSource::has_inline_() const {
  return specifier_case() == kInline;
}
void DataSource::set_has_inline_() {
  _oneof_case_[0] = kInline;
}
void DataSource::clear_inline_() {
  if (has_inline_()) {
    specifier_.inline__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_specifier();
  }
}
const ::std::string& DataSource::inline_() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DataSource.inline)
  if (has_inline_()) {
    return specifier_.inline__.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void DataSource::set_inline_(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.DataSource.inline)
  if (!has_inline_()) {
    clear_specifier();
    set_has_inline_();
    specifier_.inline__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.DataSource.inline)
}
#if LANG_CXX11
void DataSource::set_inline_(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.DataSource.inline)
  if (!has_inline_()) {
    clear_specifier();
    set_has_inline_();
    specifier_.inline__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.DataSource.inline)
}
#endif
void DataSource::set_inline_(const char* value) {
  if (!has_inline_()) {
    clear_specifier();
    set_has_inline_();
    specifier_.inline__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.DataSource.inline)
}
void DataSource::set_inline_(const void* value, size_t size) {
  if (!has_inline_()) {
    clear_specifier();
    set_has_inline_();
    specifier_.inline__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.DataSource.inline)
}
::std::string* DataSource::mutable_inline_() {
  if (!has_inline_()) {
    clear_specifier();
    set_has_inline_();
    specifier_.inline__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DataSource.inline)
  return specifier_.inline__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataSource::release_inline_() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DataSource.inline)
  if (has_inline_()) {
    clear_has_specifier();
    return specifier_.inline__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void DataSource::set_allocated_inline_(::std::string* inline_) {
  if (!has_inline_()) {
    specifier_.inline__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_specifier();
  if (inline_ != NULL) {
    set_has_inline_();
    specifier_.inline__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        inline_);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DataSource.inline)
}

bool DataSource::has_specifier() const {
  return specifier_case() != SPECIFIER_NOT_SET;
}
void DataSource::clear_has_specifier() {
  _oneof_case_[0] = SPECIFIER_NOT_SET;
}
DataSource::SpecifierCase DataSource::specifier_case() const {
  return DataSource::SpecifierCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TlsParameters::kTlsMinimumProtocolVersionFieldNumber;
const int TlsParameters::kTlsMaximumProtocolVersionFieldNumber;
const int TlsParameters::kCipherSuitesFieldNumber;
const int TlsParameters::kEcdhCurvesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TlsParameters::TlsParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.TlsParameters)
}
TlsParameters::TlsParameters(const TlsParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cipher_suites_(from.cipher_suites_),
      ecdh_curves_(from.ecdh_curves_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tls_minimum_protocol_version_, &from.tls_minimum_protocol_version_,
    reinterpret_cast<char*>(&tls_maximum_protocol_version_) -
    reinterpret_cast<char*>(&tls_minimum_protocol_version_) + sizeof(tls_maximum_protocol_version_));
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.TlsParameters)
}

void TlsParameters::SharedCtor() {
  ::memset(&tls_minimum_protocol_version_, 0, reinterpret_cast<char*>(&tls_maximum_protocol_version_) -
    reinterpret_cast<char*>(&tls_minimum_protocol_version_) + sizeof(tls_maximum_protocol_version_));
  _cached_size_ = 0;
}

TlsParameters::~TlsParameters() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.TlsParameters)
  SharedDtor();
}

void TlsParameters::SharedDtor() {
}

void TlsParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TlsParameters::descriptor() {
  protobuf_api_2ftls_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ftls_5fcontext_2eproto::file_level_metadata[1].descriptor;
}

const TlsParameters& TlsParameters::default_instance() {
  protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  return *internal_default_instance();
}

TlsParameters* TlsParameters::New(::google::protobuf::Arena* arena) const {
  TlsParameters* n = new TlsParameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TlsParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.TlsParameters)
  cipher_suites_.Clear();
  ecdh_curves_.Clear();
  ::memset(&tls_minimum_protocol_version_, 0, reinterpret_cast<char*>(&tls_maximum_protocol_version_) -
    reinterpret_cast<char*>(&tls_minimum_protocol_version_) + sizeof(tls_maximum_protocol_version_));
}

bool TlsParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.TlsParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tls_minimum_protocol_version(static_cast< ::envoy::api::v2::TlsParameters_TlsProtocol >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tls_maximum_protocol_version(static_cast< ::envoy::api::v2::TlsParameters_TlsProtocol >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string cipher_suites = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cipher_suites()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cipher_suites(this->cipher_suites_size() - 1).data(),
            this->cipher_suites(this->cipher_suites_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.TlsParameters.cipher_suites"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ecdh_curves = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ecdh_curves()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ecdh_curves(this->ecdh_curves_size() - 1).data(),
            this->ecdh_curves(this->ecdh_curves_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.TlsParameters.ecdh_curves"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.TlsParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.TlsParameters)
  return false;
#undef DO_
}

void TlsParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.TlsParameters)
  // .envoy.api.v2.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;
  if (this->tls_minimum_protocol_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tls_minimum_protocol_version(), output);
  }

  // .envoy.api.v2.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;
  if (this->tls_maximum_protocol_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tls_maximum_protocol_version(), output);
  }

  // repeated string cipher_suites = 3;
  for (int i = 0; i < this->cipher_suites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cipher_suites(i).data(), this->cipher_suites(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.TlsParameters.cipher_suites");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cipher_suites(i), output);
  }

  // repeated string ecdh_curves = 4;
  for (int i = 0; i < this->ecdh_curves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ecdh_curves(i).data(), this->ecdh_curves(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.TlsParameters.ecdh_curves");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ecdh_curves(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.TlsParameters)
}

::google::protobuf::uint8* TlsParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.TlsParameters)
  // .envoy.api.v2.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;
  if (this->tls_minimum_protocol_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tls_minimum_protocol_version(), target);
  }

  // .envoy.api.v2.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;
  if (this->tls_maximum_protocol_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tls_maximum_protocol_version(), target);
  }

  // repeated string cipher_suites = 3;
  for (int i = 0; i < this->cipher_suites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cipher_suites(i).data(), this->cipher_suites(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.TlsParameters.cipher_suites");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->cipher_suites(i), target);
  }

  // repeated string ecdh_curves = 4;
  for (int i = 0; i < this->ecdh_curves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ecdh_curves(i).data(), this->ecdh_curves(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.TlsParameters.ecdh_curves");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->ecdh_curves(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.TlsParameters)
  return target;
}

size_t TlsParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.TlsParameters)
  size_t total_size = 0;

  // repeated string cipher_suites = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cipher_suites_size());
  for (int i = 0; i < this->cipher_suites_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cipher_suites(i));
  }

  // repeated string ecdh_curves = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ecdh_curves_size());
  for (int i = 0; i < this->ecdh_curves_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ecdh_curves(i));
  }

  // .envoy.api.v2.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;
  if (this->tls_minimum_protocol_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tls_minimum_protocol_version());
  }

  // .envoy.api.v2.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;
  if (this->tls_maximum_protocol_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tls_maximum_protocol_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TlsParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.TlsParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const TlsParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TlsParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.TlsParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.TlsParameters)
    MergeFrom(*source);
  }
}

void TlsParameters::MergeFrom(const TlsParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.TlsParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cipher_suites_.MergeFrom(from.cipher_suites_);
  ecdh_curves_.MergeFrom(from.ecdh_curves_);
  if (from.tls_minimum_protocol_version() != 0) {
    set_tls_minimum_protocol_version(from.tls_minimum_protocol_version());
  }
  if (from.tls_maximum_protocol_version() != 0) {
    set_tls_maximum_protocol_version(from.tls_maximum_protocol_version());
  }
}

void TlsParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.TlsParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TlsParameters::CopyFrom(const TlsParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.TlsParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TlsParameters::IsInitialized() const {
  return true;
}

void TlsParameters::Swap(TlsParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TlsParameters::InternalSwap(TlsParameters* other) {
  cipher_suites_.UnsafeArenaSwap(&other->cipher_suites_);
  ecdh_curves_.UnsafeArenaSwap(&other->ecdh_curves_);
  std::swap(tls_minimum_protocol_version_, other->tls_minimum_protocol_version_);
  std::swap(tls_maximum_protocol_version_, other->tls_maximum_protocol_version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TlsParameters::GetMetadata() const {
  protobuf_api_2ftls_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ftls_5fcontext_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TlsParameters

// .envoy.api.v2.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;
void TlsParameters::clear_tls_minimum_protocol_version() {
  tls_minimum_protocol_version_ = 0;
}
::envoy::api::v2::TlsParameters_TlsProtocol TlsParameters::tls_minimum_protocol_version() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsParameters.tls_minimum_protocol_version)
  return static_cast< ::envoy::api::v2::TlsParameters_TlsProtocol >(tls_minimum_protocol_version_);
}
void TlsParameters::set_tls_minimum_protocol_version(::envoy::api::v2::TlsParameters_TlsProtocol value) {
  
  tls_minimum_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.TlsParameters.tls_minimum_protocol_version)
}

// .envoy.api.v2.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;
void TlsParameters::clear_tls_maximum_protocol_version() {
  tls_maximum_protocol_version_ = 0;
}
::envoy::api::v2::TlsParameters_TlsProtocol TlsParameters::tls_maximum_protocol_version() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsParameters.tls_maximum_protocol_version)
  return static_cast< ::envoy::api::v2::TlsParameters_TlsProtocol >(tls_maximum_protocol_version_);
}
void TlsParameters::set_tls_maximum_protocol_version(::envoy::api::v2::TlsParameters_TlsProtocol value) {
  
  tls_maximum_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.TlsParameters.tls_maximum_protocol_version)
}

// repeated string cipher_suites = 3;
int TlsParameters::cipher_suites_size() const {
  return cipher_suites_.size();
}
void TlsParameters::clear_cipher_suites() {
  cipher_suites_.Clear();
}
const ::std::string& TlsParameters::cipher_suites(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsParameters.cipher_suites)
  return cipher_suites_.Get(index);
}
::std::string* TlsParameters::mutable_cipher_suites(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.TlsParameters.cipher_suites)
  return cipher_suites_.Mutable(index);
}
void TlsParameters::set_cipher_suites(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.TlsParameters.cipher_suites)
  cipher_suites_.Mutable(index)->assign(value);
}
void TlsParameters::set_cipher_suites(int index, const char* value) {
  cipher_suites_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.TlsParameters.cipher_suites)
}
void TlsParameters::set_cipher_suites(int index, const char* value, size_t size) {
  cipher_suites_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.TlsParameters.cipher_suites)
}
::std::string* TlsParameters::add_cipher_suites() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.TlsParameters.cipher_suites)
  return cipher_suites_.Add();
}
void TlsParameters::add_cipher_suites(const ::std::string& value) {
  cipher_suites_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.TlsParameters.cipher_suites)
}
void TlsParameters::add_cipher_suites(const char* value) {
  cipher_suites_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.TlsParameters.cipher_suites)
}
void TlsParameters::add_cipher_suites(const char* value, size_t size) {
  cipher_suites_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.TlsParameters.cipher_suites)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TlsParameters::cipher_suites() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.TlsParameters.cipher_suites)
  return cipher_suites_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TlsParameters::mutable_cipher_suites() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.TlsParameters.cipher_suites)
  return &cipher_suites_;
}

// repeated string ecdh_curves = 4;
int TlsParameters::ecdh_curves_size() const {
  return ecdh_curves_.size();
}
void TlsParameters::clear_ecdh_curves() {
  ecdh_curves_.Clear();
}
const ::std::string& TlsParameters::ecdh_curves(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsParameters.ecdh_curves)
  return ecdh_curves_.Get(index);
}
::std::string* TlsParameters::mutable_ecdh_curves(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.TlsParameters.ecdh_curves)
  return ecdh_curves_.Mutable(index);
}
void TlsParameters::set_ecdh_curves(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.TlsParameters.ecdh_curves)
  ecdh_curves_.Mutable(index)->assign(value);
}
void TlsParameters::set_ecdh_curves(int index, const char* value) {
  ecdh_curves_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.TlsParameters.ecdh_curves)
}
void TlsParameters::set_ecdh_curves(int index, const char* value, size_t size) {
  ecdh_curves_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.TlsParameters.ecdh_curves)
}
::std::string* TlsParameters::add_ecdh_curves() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.TlsParameters.ecdh_curves)
  return ecdh_curves_.Add();
}
void TlsParameters::add_ecdh_curves(const ::std::string& value) {
  ecdh_curves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.TlsParameters.ecdh_curves)
}
void TlsParameters::add_ecdh_curves(const char* value) {
  ecdh_curves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.TlsParameters.ecdh_curves)
}
void TlsParameters::add_ecdh_curves(const char* value, size_t size) {
  ecdh_curves_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.TlsParameters.ecdh_curves)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TlsParameters::ecdh_curves() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.TlsParameters.ecdh_curves)
  return ecdh_curves_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TlsParameters::mutable_ecdh_curves() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.TlsParameters.ecdh_curves)
  return &ecdh_curves_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TlsCertificate::kCertChainFieldNumber;
const int TlsCertificate::kPrivateKeyFieldNumber;
const int TlsCertificate::kOcspStapleFieldNumber;
const int TlsCertificate::kSignedCertificateTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TlsCertificate::TlsCertificate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.TlsCertificate)
}
TlsCertificate::TlsCertificate(const TlsCertificate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      signed_certificate_timestamp_(from.signed_certificate_timestamp_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cert_chain()) {
    cert_chain_ = new ::envoy::api::v2::DataSource(*from.cert_chain_);
  } else {
    cert_chain_ = NULL;
  }
  if (from.has_private_key()) {
    private_key_ = new ::envoy::api::v2::DataSource(*from.private_key_);
  } else {
    private_key_ = NULL;
  }
  if (from.has_ocsp_staple()) {
    ocsp_staple_ = new ::envoy::api::v2::DataSource(*from.ocsp_staple_);
  } else {
    ocsp_staple_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.TlsCertificate)
}

void TlsCertificate::SharedCtor() {
  ::memset(&cert_chain_, 0, reinterpret_cast<char*>(&ocsp_staple_) -
    reinterpret_cast<char*>(&cert_chain_) + sizeof(ocsp_staple_));
  _cached_size_ = 0;
}

TlsCertificate::~TlsCertificate() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.TlsCertificate)
  SharedDtor();
}

void TlsCertificate::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cert_chain_;
  }
  if (this != internal_default_instance()) {
    delete private_key_;
  }
  if (this != internal_default_instance()) {
    delete ocsp_staple_;
  }
}

void TlsCertificate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TlsCertificate::descriptor() {
  protobuf_api_2ftls_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ftls_5fcontext_2eproto::file_level_metadata[2].descriptor;
}

const TlsCertificate& TlsCertificate::default_instance() {
  protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  return *internal_default_instance();
}

TlsCertificate* TlsCertificate::New(::google::protobuf::Arena* arena) const {
  TlsCertificate* n = new TlsCertificate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TlsCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.TlsCertificate)
  signed_certificate_timestamp_.Clear();
  if (GetArenaNoVirtual() == NULL && cert_chain_ != NULL) {
    delete cert_chain_;
  }
  cert_chain_ = NULL;
  if (GetArenaNoVirtual() == NULL && private_key_ != NULL) {
    delete private_key_;
  }
  private_key_ = NULL;
  if (GetArenaNoVirtual() == NULL && ocsp_staple_ != NULL) {
    delete ocsp_staple_;
  }
  ocsp_staple_ = NULL;
}

bool TlsCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.TlsCertificate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.DataSource cert_chain = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cert_chain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.DataSource private_key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.DataSource ocsp_staple = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ocsp_staple()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.DataSource signed_certificate_timestamp = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_signed_certificate_timestamp()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.TlsCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.TlsCertificate)
  return false;
#undef DO_
}

void TlsCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.TlsCertificate)
  // .envoy.api.v2.DataSource cert_chain = 1;
  if (this->has_cert_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cert_chain_, output);
  }

  // .envoy.api.v2.DataSource private_key = 2;
  if (this->has_private_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->private_key_, output);
  }

  // .envoy.api.v2.DataSource ocsp_staple = 3;
  if (this->has_ocsp_staple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ocsp_staple_, output);
  }

  // repeated .envoy.api.v2.DataSource signed_certificate_timestamp = 4;
  for (unsigned int i = 0, n = this->signed_certificate_timestamp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->signed_certificate_timestamp(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.TlsCertificate)
}

::google::protobuf::uint8* TlsCertificate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.TlsCertificate)
  // .envoy.api.v2.DataSource cert_chain = 1;
  if (this->has_cert_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cert_chain_, false, target);
  }

  // .envoy.api.v2.DataSource private_key = 2;
  if (this->has_private_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->private_key_, false, target);
  }

  // .envoy.api.v2.DataSource ocsp_staple = 3;
  if (this->has_ocsp_staple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ocsp_staple_, false, target);
  }

  // repeated .envoy.api.v2.DataSource signed_certificate_timestamp = 4;
  for (unsigned int i = 0, n = this->signed_certificate_timestamp_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->signed_certificate_timestamp(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.TlsCertificate)
  return target;
}

size_t TlsCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.TlsCertificate)
  size_t total_size = 0;

  // repeated .envoy.api.v2.DataSource signed_certificate_timestamp = 4;
  {
    unsigned int count = this->signed_certificate_timestamp_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signed_certificate_timestamp(i));
    }
  }

  // .envoy.api.v2.DataSource cert_chain = 1;
  if (this->has_cert_chain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cert_chain_);
  }

  // .envoy.api.v2.DataSource private_key = 2;
  if (this->has_private_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->private_key_);
  }

  // .envoy.api.v2.DataSource ocsp_staple = 3;
  if (this->has_ocsp_staple()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ocsp_staple_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TlsCertificate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.TlsCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const TlsCertificate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TlsCertificate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.TlsCertificate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.TlsCertificate)
    MergeFrom(*source);
  }
}

void TlsCertificate::MergeFrom(const TlsCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.TlsCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signed_certificate_timestamp_.MergeFrom(from.signed_certificate_timestamp_);
  if (from.has_cert_chain()) {
    mutable_cert_chain()->::envoy::api::v2::DataSource::MergeFrom(from.cert_chain());
  }
  if (from.has_private_key()) {
    mutable_private_key()->::envoy::api::v2::DataSource::MergeFrom(from.private_key());
  }
  if (from.has_ocsp_staple()) {
    mutable_ocsp_staple()->::envoy::api::v2::DataSource::MergeFrom(from.ocsp_staple());
  }
}

void TlsCertificate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.TlsCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TlsCertificate::CopyFrom(const TlsCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.TlsCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TlsCertificate::IsInitialized() const {
  return true;
}

void TlsCertificate::Swap(TlsCertificate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TlsCertificate::InternalSwap(TlsCertificate* other) {
  signed_certificate_timestamp_.UnsafeArenaSwap(&other->signed_certificate_timestamp_);
  std::swap(cert_chain_, other->cert_chain_);
  std::swap(private_key_, other->private_key_);
  std::swap(ocsp_staple_, other->ocsp_staple_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TlsCertificate::GetMetadata() const {
  protobuf_api_2ftls_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ftls_5fcontext_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TlsCertificate

// .envoy.api.v2.DataSource cert_chain = 1;
bool TlsCertificate::has_cert_chain() const {
  return this != internal_default_instance() && cert_chain_ != NULL;
}
void TlsCertificate::clear_cert_chain() {
  if (GetArenaNoVirtual() == NULL && cert_chain_ != NULL) delete cert_chain_;
  cert_chain_ = NULL;
}
const ::envoy::api::v2::DataSource& TlsCertificate::cert_chain() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsCertificate.cert_chain)
  return cert_chain_ != NULL ? *cert_chain_
                         : *::envoy::api::v2::DataSource::internal_default_instance();
}
::envoy::api::v2::DataSource* TlsCertificate::mutable_cert_chain() {
  
  if (cert_chain_ == NULL) {
    cert_chain_ = new ::envoy::api::v2::DataSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.TlsCertificate.cert_chain)
  return cert_chain_;
}
::envoy::api::v2::DataSource* TlsCertificate::release_cert_chain() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.TlsCertificate.cert_chain)
  
  ::envoy::api::v2::DataSource* temp = cert_chain_;
  cert_chain_ = NULL;
  return temp;
}
void TlsCertificate::set_allocated_cert_chain(::envoy::api::v2::DataSource* cert_chain) {
  delete cert_chain_;
  cert_chain_ = cert_chain;
  if (cert_chain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.TlsCertificate.cert_chain)
}

// .envoy.api.v2.DataSource private_key = 2;
bool TlsCertificate::has_private_key() const {
  return this != internal_default_instance() && private_key_ != NULL;
}
void TlsCertificate::clear_private_key() {
  if (GetArenaNoVirtual() == NULL && private_key_ != NULL) delete private_key_;
  private_key_ = NULL;
}
const ::envoy::api::v2::DataSource& TlsCertificate::private_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsCertificate.private_key)
  return private_key_ != NULL ? *private_key_
                         : *::envoy::api::v2::DataSource::internal_default_instance();
}
::envoy::api::v2::DataSource* TlsCertificate::mutable_private_key() {
  
  if (private_key_ == NULL) {
    private_key_ = new ::envoy::api::v2::DataSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.TlsCertificate.private_key)
  return private_key_;
}
::envoy::api::v2::DataSource* TlsCertificate::release_private_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.TlsCertificate.private_key)
  
  ::envoy::api::v2::DataSource* temp = private_key_;
  private_key_ = NULL;
  return temp;
}
void TlsCertificate::set_allocated_private_key(::envoy::api::v2::DataSource* private_key) {
  delete private_key_;
  private_key_ = private_key;
  if (private_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.TlsCertificate.private_key)
}

// .envoy.api.v2.DataSource ocsp_staple = 3;
bool TlsCertificate::has_ocsp_staple() const {
  return this != internal_default_instance() && ocsp_staple_ != NULL;
}
void TlsCertificate::clear_ocsp_staple() {
  if (GetArenaNoVirtual() == NULL && ocsp_staple_ != NULL) delete ocsp_staple_;
  ocsp_staple_ = NULL;
}
const ::envoy::api::v2::DataSource& TlsCertificate::ocsp_staple() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsCertificate.ocsp_staple)
  return ocsp_staple_ != NULL ? *ocsp_staple_
                         : *::envoy::api::v2::DataSource::internal_default_instance();
}
::envoy::api::v2::DataSource* TlsCertificate::mutable_ocsp_staple() {
  
  if (ocsp_staple_ == NULL) {
    ocsp_staple_ = new ::envoy::api::v2::DataSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.TlsCertificate.ocsp_staple)
  return ocsp_staple_;
}
::envoy::api::v2::DataSource* TlsCertificate::release_ocsp_staple() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.TlsCertificate.ocsp_staple)
  
  ::envoy::api::v2::DataSource* temp = ocsp_staple_;
  ocsp_staple_ = NULL;
  return temp;
}
void TlsCertificate::set_allocated_ocsp_staple(::envoy::api::v2::DataSource* ocsp_staple) {
  delete ocsp_staple_;
  ocsp_staple_ = ocsp_staple;
  if (ocsp_staple) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.TlsCertificate.ocsp_staple)
}

// repeated .envoy.api.v2.DataSource signed_certificate_timestamp = 4;
int TlsCertificate::signed_certificate_timestamp_size() const {
  return signed_certificate_timestamp_.size();
}
void TlsCertificate::clear_signed_certificate_timestamp() {
  signed_certificate_timestamp_.Clear();
}
const ::envoy::api::v2::DataSource& TlsCertificate::signed_certificate_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsCertificate.signed_certificate_timestamp)
  return signed_certificate_timestamp_.Get(index);
}
::envoy::api::v2::DataSource* TlsCertificate::mutable_signed_certificate_timestamp(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.TlsCertificate.signed_certificate_timestamp)
  return signed_certificate_timestamp_.Mutable(index);
}
::envoy::api::v2::DataSource* TlsCertificate::add_signed_certificate_timestamp() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.TlsCertificate.signed_certificate_timestamp)
  return signed_certificate_timestamp_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::DataSource >*
TlsCertificate::mutable_signed_certificate_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.TlsCertificate.signed_certificate_timestamp)
  return &signed_certificate_timestamp_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::DataSource >&
TlsCertificate::signed_certificate_timestamp() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.TlsCertificate.signed_certificate_timestamp)
  return signed_certificate_timestamp_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertificateValidationContext::kCaCertFieldNumber;
const int CertificateValidationContext::kVerifyCertificateHashFieldNumber;
const int CertificateValidationContext::kVerifySpkiSha256FieldNumber;
const int CertificateValidationContext::kVerifySubjectAltNameFieldNumber;
const int CertificateValidationContext::kRequireOcspStapleFieldNumber;
const int CertificateValidationContext::kRequireSignedCertificateTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertificateValidationContext::CertificateValidationContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.CertificateValidationContext)
}
CertificateValidationContext::CertificateValidationContext(const CertificateValidationContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      verify_certificate_hash_(from.verify_certificate_hash_),
      verify_spki_sha256_(from.verify_spki_sha256_),
      verify_subject_alt_name_(from.verify_subject_alt_name_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ca_cert()) {
    ca_cert_ = new ::envoy::api::v2::DataSource(*from.ca_cert_);
  } else {
    ca_cert_ = NULL;
  }
  if (from.has_require_ocsp_staple()) {
    require_ocsp_staple_ = new ::google::protobuf::BoolValue(*from.require_ocsp_staple_);
  } else {
    require_ocsp_staple_ = NULL;
  }
  if (from.has_require_signed_certificate_timestamp()) {
    require_signed_certificate_timestamp_ = new ::google::protobuf::BoolValue(*from.require_signed_certificate_timestamp_);
  } else {
    require_signed_certificate_timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.CertificateValidationContext)
}

void CertificateValidationContext::SharedCtor() {
  ::memset(&ca_cert_, 0, reinterpret_cast<char*>(&require_signed_certificate_timestamp_) -
    reinterpret_cast<char*>(&ca_cert_) + sizeof(require_signed_certificate_timestamp_));
  _cached_size_ = 0;
}

CertificateValidationContext::~CertificateValidationContext() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.CertificateValidationContext)
  SharedDtor();
}

void CertificateValidationContext::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ca_cert_;
  }
  if (this != internal_default_instance()) {
    delete require_ocsp_staple_;
  }
  if (this != internal_default_instance()) {
    delete require_signed_certificate_timestamp_;
  }
}

void CertificateValidationContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CertificateValidationContext::descriptor() {
  protobuf_api_2ftls_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ftls_5fcontext_2eproto::file_level_metadata[3].descriptor;
}

const CertificateValidationContext& CertificateValidationContext::default_instance() {
  protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  return *internal_default_instance();
}

CertificateValidationContext* CertificateValidationContext::New(::google::protobuf::Arena* arena) const {
  CertificateValidationContext* n = new CertificateValidationContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CertificateValidationContext::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.CertificateValidationContext)
  verify_certificate_hash_.Clear();
  verify_spki_sha256_.Clear();
  verify_subject_alt_name_.Clear();
  if (GetArenaNoVirtual() == NULL && ca_cert_ != NULL) {
    delete ca_cert_;
  }
  ca_cert_ = NULL;
  if (GetArenaNoVirtual() == NULL && require_ocsp_staple_ != NULL) {
    delete require_ocsp_staple_;
  }
  require_ocsp_staple_ = NULL;
  if (GetArenaNoVirtual() == NULL && require_signed_certificate_timestamp_ != NULL) {
    delete require_signed_certificate_timestamp_;
  }
  require_signed_certificate_timestamp_ = NULL;
}

bool CertificateValidationContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.CertificateValidationContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.DataSource ca_cert = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ca_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string verify_certificate_hash = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_verify_certificate_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verify_certificate_hash(this->verify_certificate_hash_size() - 1).data(),
            this->verify_certificate_hash(this->verify_certificate_hash_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CertificateValidationContext.verify_certificate_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string verify_spki_sha256 = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_verify_spki_sha256()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verify_spki_sha256(this->verify_spki_sha256_size() - 1).data(),
            this->verify_spki_sha256(this->verify_spki_sha256_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CertificateValidationContext.verify_spki_sha256"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string verify_subject_alt_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_verify_subject_alt_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verify_subject_alt_name(this->verify_subject_alt_name_size() - 1).data(),
            this->verify_subject_alt_name(this->verify_subject_alt_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.CertificateValidationContext.verify_subject_alt_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue require_ocsp_staple = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_require_ocsp_staple()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue require_signed_certificate_timestamp = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_require_signed_certificate_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.CertificateValidationContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.CertificateValidationContext)
  return false;
#undef DO_
}

void CertificateValidationContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.CertificateValidationContext)
  // .envoy.api.v2.DataSource ca_cert = 1;
  if (this->has_ca_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ca_cert_, output);
  }

  // repeated string verify_certificate_hash = 2;
  for (int i = 0; i < this->verify_certificate_hash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_certificate_hash(i).data(), this->verify_certificate_hash(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CertificateValidationContext.verify_certificate_hash");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->verify_certificate_hash(i), output);
  }

  // repeated string verify_spki_sha256 = 3;
  for (int i = 0; i < this->verify_spki_sha256_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_spki_sha256(i).data(), this->verify_spki_sha256(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CertificateValidationContext.verify_spki_sha256");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->verify_spki_sha256(i), output);
  }

  // repeated string verify_subject_alt_name = 4;
  for (int i = 0; i < this->verify_subject_alt_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_subject_alt_name(i).data(), this->verify_subject_alt_name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CertificateValidationContext.verify_subject_alt_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->verify_subject_alt_name(i), output);
  }

  // .google.protobuf.BoolValue require_ocsp_staple = 5;
  if (this->has_require_ocsp_staple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->require_ocsp_staple_, output);
  }

  // .google.protobuf.BoolValue require_signed_certificate_timestamp = 6;
  if (this->has_require_signed_certificate_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->require_signed_certificate_timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.CertificateValidationContext)
}

::google::protobuf::uint8* CertificateValidationContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.CertificateValidationContext)
  // .envoy.api.v2.DataSource ca_cert = 1;
  if (this->has_ca_cert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ca_cert_, false, target);
  }

  // repeated string verify_certificate_hash = 2;
  for (int i = 0; i < this->verify_certificate_hash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_certificate_hash(i).data(), this->verify_certificate_hash(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CertificateValidationContext.verify_certificate_hash");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->verify_certificate_hash(i), target);
  }

  // repeated string verify_spki_sha256 = 3;
  for (int i = 0; i < this->verify_spki_sha256_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_spki_sha256(i).data(), this->verify_spki_sha256(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CertificateValidationContext.verify_spki_sha256");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->verify_spki_sha256(i), target);
  }

  // repeated string verify_subject_alt_name = 4;
  for (int i = 0; i < this->verify_subject_alt_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_subject_alt_name(i).data(), this->verify_subject_alt_name(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.CertificateValidationContext.verify_subject_alt_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->verify_subject_alt_name(i), target);
  }

  // .google.protobuf.BoolValue require_ocsp_staple = 5;
  if (this->has_require_ocsp_staple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->require_ocsp_staple_, false, target);
  }

  // .google.protobuf.BoolValue require_signed_certificate_timestamp = 6;
  if (this->has_require_signed_certificate_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->require_signed_certificate_timestamp_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.CertificateValidationContext)
  return target;
}

size_t CertificateValidationContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.CertificateValidationContext)
  size_t total_size = 0;

  // repeated string verify_certificate_hash = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->verify_certificate_hash_size());
  for (int i = 0; i < this->verify_certificate_hash_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->verify_certificate_hash(i));
  }

  // repeated string verify_spki_sha256 = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->verify_spki_sha256_size());
  for (int i = 0; i < this->verify_spki_sha256_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->verify_spki_sha256(i));
  }

  // repeated string verify_subject_alt_name = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->verify_subject_alt_name_size());
  for (int i = 0; i < this->verify_subject_alt_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->verify_subject_alt_name(i));
  }

  // .envoy.api.v2.DataSource ca_cert = 1;
  if (this->has_ca_cert()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ca_cert_);
  }

  // .google.protobuf.BoolValue require_ocsp_staple = 5;
  if (this->has_require_ocsp_staple()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->require_ocsp_staple_);
  }

  // .google.protobuf.BoolValue require_signed_certificate_timestamp = 6;
  if (this->has_require_signed_certificate_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->require_signed_certificate_timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertificateValidationContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.CertificateValidationContext)
  GOOGLE_DCHECK_NE(&from, this);
  const CertificateValidationContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CertificateValidationContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.CertificateValidationContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.CertificateValidationContext)
    MergeFrom(*source);
  }
}

void CertificateValidationContext::MergeFrom(const CertificateValidationContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.CertificateValidationContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  verify_certificate_hash_.MergeFrom(from.verify_certificate_hash_);
  verify_spki_sha256_.MergeFrom(from.verify_spki_sha256_);
  verify_subject_alt_name_.MergeFrom(from.verify_subject_alt_name_);
  if (from.has_ca_cert()) {
    mutable_ca_cert()->::envoy::api::v2::DataSource::MergeFrom(from.ca_cert());
  }
  if (from.has_require_ocsp_staple()) {
    mutable_require_ocsp_staple()->::google::protobuf::BoolValue::MergeFrom(from.require_ocsp_staple());
  }
  if (from.has_require_signed_certificate_timestamp()) {
    mutable_require_signed_certificate_timestamp()->::google::protobuf::BoolValue::MergeFrom(from.require_signed_certificate_timestamp());
  }
}

void CertificateValidationContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.CertificateValidationContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CertificateValidationContext::CopyFrom(const CertificateValidationContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.CertificateValidationContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateValidationContext::IsInitialized() const {
  return true;
}

void CertificateValidationContext::Swap(CertificateValidationContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertificateValidationContext::InternalSwap(CertificateValidationContext* other) {
  verify_certificate_hash_.UnsafeArenaSwap(&other->verify_certificate_hash_);
  verify_spki_sha256_.UnsafeArenaSwap(&other->verify_spki_sha256_);
  verify_subject_alt_name_.UnsafeArenaSwap(&other->verify_subject_alt_name_);
  std::swap(ca_cert_, other->ca_cert_);
  std::swap(require_ocsp_staple_, other->require_ocsp_staple_);
  std::swap(require_signed_certificate_timestamp_, other->require_signed_certificate_timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CertificateValidationContext::GetMetadata() const {
  protobuf_api_2ftls_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ftls_5fcontext_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertificateValidationContext

// .envoy.api.v2.DataSource ca_cert = 1;
bool CertificateValidationContext::has_ca_cert() const {
  return this != internal_default_instance() && ca_cert_ != NULL;
}
void CertificateValidationContext::clear_ca_cert() {
  if (GetArenaNoVirtual() == NULL && ca_cert_ != NULL) delete ca_cert_;
  ca_cert_ = NULL;
}
const ::envoy::api::v2::DataSource& CertificateValidationContext::ca_cert() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CertificateValidationContext.ca_cert)
  return ca_cert_ != NULL ? *ca_cert_
                         : *::envoy::api::v2::DataSource::internal_default_instance();
}
::envoy::api::v2::DataSource* CertificateValidationContext::mutable_ca_cert() {
  
  if (ca_cert_ == NULL) {
    ca_cert_ = new ::envoy::api::v2::DataSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CertificateValidationContext.ca_cert)
  return ca_cert_;
}
::envoy::api::v2::DataSource* CertificateValidationContext::release_ca_cert() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CertificateValidationContext.ca_cert)
  
  ::envoy::api::v2::DataSource* temp = ca_cert_;
  ca_cert_ = NULL;
  return temp;
}
void CertificateValidationContext::set_allocated_ca_cert(::envoy::api::v2::DataSource* ca_cert) {
  delete ca_cert_;
  ca_cert_ = ca_cert;
  if (ca_cert) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CertificateValidationContext.ca_cert)
}

// repeated string verify_certificate_hash = 2;
int CertificateValidationContext::verify_certificate_hash_size() const {
  return verify_certificate_hash_.size();
}
void CertificateValidationContext::clear_verify_certificate_hash() {
  verify_certificate_hash_.Clear();
}
const ::std::string& CertificateValidationContext::verify_certificate_hash(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
  return verify_certificate_hash_.Get(index);
}
::std::string* CertificateValidationContext::mutable_verify_certificate_hash(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
  return verify_certificate_hash_.Mutable(index);
}
void CertificateValidationContext::set_verify_certificate_hash(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
  verify_certificate_hash_.Mutable(index)->assign(value);
}
void CertificateValidationContext::set_verify_certificate_hash(int index, const char* value) {
  verify_certificate_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
}
void CertificateValidationContext::set_verify_certificate_hash(int index, const char* value, size_t size) {
  verify_certificate_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
}
::std::string* CertificateValidationContext::add_verify_certificate_hash() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
  return verify_certificate_hash_.Add();
}
void CertificateValidationContext::add_verify_certificate_hash(const ::std::string& value) {
  verify_certificate_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
}
void CertificateValidationContext::add_verify_certificate_hash(const char* value) {
  verify_certificate_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
}
void CertificateValidationContext::add_verify_certificate_hash(const char* value, size_t size) {
  verify_certificate_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertificateValidationContext::verify_certificate_hash() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
  return verify_certificate_hash_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CertificateValidationContext::mutable_verify_certificate_hash() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
  return &verify_certificate_hash_;
}

// repeated string verify_spki_sha256 = 3;
int CertificateValidationContext::verify_spki_sha256_size() const {
  return verify_spki_sha256_.size();
}
void CertificateValidationContext::clear_verify_spki_sha256() {
  verify_spki_sha256_.Clear();
}
const ::std::string& CertificateValidationContext::verify_spki_sha256(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
  return verify_spki_sha256_.Get(index);
}
::std::string* CertificateValidationContext::mutable_verify_spki_sha256(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
  return verify_spki_sha256_.Mutable(index);
}
void CertificateValidationContext::set_verify_spki_sha256(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
  verify_spki_sha256_.Mutable(index)->assign(value);
}
void CertificateValidationContext::set_verify_spki_sha256(int index, const char* value) {
  verify_spki_sha256_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
}
void CertificateValidationContext::set_verify_spki_sha256(int index, const char* value, size_t size) {
  verify_spki_sha256_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
}
::std::string* CertificateValidationContext::add_verify_spki_sha256() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
  return verify_spki_sha256_.Add();
}
void CertificateValidationContext::add_verify_spki_sha256(const ::std::string& value) {
  verify_spki_sha256_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
}
void CertificateValidationContext::add_verify_spki_sha256(const char* value) {
  verify_spki_sha256_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
}
void CertificateValidationContext::add_verify_spki_sha256(const char* value, size_t size) {
  verify_spki_sha256_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertificateValidationContext::verify_spki_sha256() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
  return verify_spki_sha256_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CertificateValidationContext::mutable_verify_spki_sha256() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
  return &verify_spki_sha256_;
}

// repeated string verify_subject_alt_name = 4;
int CertificateValidationContext::verify_subject_alt_name_size() const {
  return verify_subject_alt_name_.size();
}
void CertificateValidationContext::clear_verify_subject_alt_name() {
  verify_subject_alt_name_.Clear();
}
const ::std::string& CertificateValidationContext::verify_subject_alt_name(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
  return verify_subject_alt_name_.Get(index);
}
::std::string* CertificateValidationContext::mutable_verify_subject_alt_name(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
  return verify_subject_alt_name_.Mutable(index);
}
void CertificateValidationContext::set_verify_subject_alt_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
  verify_subject_alt_name_.Mutable(index)->assign(value);
}
void CertificateValidationContext::set_verify_subject_alt_name(int index, const char* value) {
  verify_subject_alt_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
}
void CertificateValidationContext::set_verify_subject_alt_name(int index, const char* value, size_t size) {
  verify_subject_alt_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
}
::std::string* CertificateValidationContext::add_verify_subject_alt_name() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
  return verify_subject_alt_name_.Add();
}
void CertificateValidationContext::add_verify_subject_alt_name(const ::std::string& value) {
  verify_subject_alt_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
}
void CertificateValidationContext::add_verify_subject_alt_name(const char* value) {
  verify_subject_alt_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
}
void CertificateValidationContext::add_verify_subject_alt_name(const char* value, size_t size) {
  verify_subject_alt_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertificateValidationContext::verify_subject_alt_name() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
  return verify_subject_alt_name_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CertificateValidationContext::mutable_verify_subject_alt_name() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
  return &verify_subject_alt_name_;
}

// .google.protobuf.BoolValue require_ocsp_staple = 5;
bool CertificateValidationContext::has_require_ocsp_staple() const {
  return this != internal_default_instance() && require_ocsp_staple_ != NULL;
}
void CertificateValidationContext::clear_require_ocsp_staple() {
  if (GetArenaNoVirtual() == NULL && require_ocsp_staple_ != NULL) delete require_ocsp_staple_;
  require_ocsp_staple_ = NULL;
}
const ::google::protobuf::BoolValue& CertificateValidationContext::require_ocsp_staple() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CertificateValidationContext.require_ocsp_staple)
  return require_ocsp_staple_ != NULL ? *require_ocsp_staple_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
::google::protobuf::BoolValue* CertificateValidationContext::mutable_require_ocsp_staple() {
  
  if (require_ocsp_staple_ == NULL) {
    require_ocsp_staple_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CertificateValidationContext.require_ocsp_staple)
  return require_ocsp_staple_;
}
::google::protobuf::BoolValue* CertificateValidationContext::release_require_ocsp_staple() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CertificateValidationContext.require_ocsp_staple)
  
  ::google::protobuf::BoolValue* temp = require_ocsp_staple_;
  require_ocsp_staple_ = NULL;
  return temp;
}
void CertificateValidationContext::set_allocated_require_ocsp_staple(::google::protobuf::BoolValue* require_ocsp_staple) {
  delete require_ocsp_staple_;
  if (require_ocsp_staple != NULL && require_ocsp_staple->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_require_ocsp_staple = new ::google::protobuf::BoolValue;
    new_require_ocsp_staple->CopyFrom(*require_ocsp_staple);
    require_ocsp_staple = new_require_ocsp_staple;
  }
  require_ocsp_staple_ = require_ocsp_staple;
  if (require_ocsp_staple) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CertificateValidationContext.require_ocsp_staple)
}

// .google.protobuf.BoolValue require_signed_certificate_timestamp = 6;
bool CertificateValidationContext::has_require_signed_certificate_timestamp() const {
  return this != internal_default_instance() && require_signed_certificate_timestamp_ != NULL;
}
void CertificateValidationContext::clear_require_signed_certificate_timestamp() {
  if (GetArenaNoVirtual() == NULL && require_signed_certificate_timestamp_ != NULL) delete require_signed_certificate_timestamp_;
  require_signed_certificate_timestamp_ = NULL;
}
const ::google::protobuf::BoolValue& CertificateValidationContext::require_signed_certificate_timestamp() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CertificateValidationContext.require_signed_certificate_timestamp)
  return require_signed_certificate_timestamp_ != NULL ? *require_signed_certificate_timestamp_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
::google::protobuf::BoolValue* CertificateValidationContext::mutable_require_signed_certificate_timestamp() {
  
  if (require_signed_certificate_timestamp_ == NULL) {
    require_signed_certificate_timestamp_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CertificateValidationContext.require_signed_certificate_timestamp)
  return require_signed_certificate_timestamp_;
}
::google::protobuf::BoolValue* CertificateValidationContext::release_require_signed_certificate_timestamp() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CertificateValidationContext.require_signed_certificate_timestamp)
  
  ::google::protobuf::BoolValue* temp = require_signed_certificate_timestamp_;
  require_signed_certificate_timestamp_ = NULL;
  return temp;
}
void CertificateValidationContext::set_allocated_require_signed_certificate_timestamp(::google::protobuf::BoolValue* require_signed_certificate_timestamp) {
  delete require_signed_certificate_timestamp_;
  if (require_signed_certificate_timestamp != NULL && require_signed_certificate_timestamp->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_require_signed_certificate_timestamp = new ::google::protobuf::BoolValue;
    new_require_signed_certificate_timestamp->CopyFrom(*require_signed_certificate_timestamp);
    require_signed_certificate_timestamp = new_require_signed_certificate_timestamp;
  }
  require_signed_certificate_timestamp_ = require_signed_certificate_timestamp;
  if (require_signed_certificate_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CertificateValidationContext.require_signed_certificate_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpstreamTlsContext::kTlsParamsFieldNumber;
const int UpstreamTlsContext::kClientCertificateFieldNumber;
const int UpstreamTlsContext::kSniFieldNumber;
const int UpstreamTlsContext::kAlpnProtocolsFieldNumber;
const int UpstreamTlsContext::kServerValidationContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpstreamTlsContext::UpstreamTlsContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.UpstreamTlsContext)
}
UpstreamTlsContext::UpstreamTlsContext(const UpstreamTlsContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alpn_protocols_(from.alpn_protocols_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sni_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sni().size() > 0) {
    sni_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sni_);
  }
  if (from.has_tls_params()) {
    tls_params_ = new ::envoy::api::v2::TlsParameters(*from.tls_params_);
  } else {
    tls_params_ = NULL;
  }
  if (from.has_client_certificate()) {
    client_certificate_ = new ::envoy::api::v2::TlsCertificate(*from.client_certificate_);
  } else {
    client_certificate_ = NULL;
  }
  if (from.has_server_validation_context()) {
    server_validation_context_ = new ::envoy::api::v2::CertificateValidationContext(*from.server_validation_context_);
  } else {
    server_validation_context_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.UpstreamTlsContext)
}

void UpstreamTlsContext::SharedCtor() {
  sni_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tls_params_, 0, reinterpret_cast<char*>(&server_validation_context_) -
    reinterpret_cast<char*>(&tls_params_) + sizeof(server_validation_context_));
  _cached_size_ = 0;
}

UpstreamTlsContext::~UpstreamTlsContext() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.UpstreamTlsContext)
  SharedDtor();
}

void UpstreamTlsContext::SharedDtor() {
  sni_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete tls_params_;
  }
  if (this != internal_default_instance()) {
    delete client_certificate_;
  }
  if (this != internal_default_instance()) {
    delete server_validation_context_;
  }
}

void UpstreamTlsContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpstreamTlsContext::descriptor() {
  protobuf_api_2ftls_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ftls_5fcontext_2eproto::file_level_metadata[4].descriptor;
}

const UpstreamTlsContext& UpstreamTlsContext::default_instance() {
  protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpstreamTlsContext* UpstreamTlsContext::New(::google::protobuf::Arena* arena) const {
  UpstreamTlsContext* n = new UpstreamTlsContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpstreamTlsContext::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.UpstreamTlsContext)
  alpn_protocols_.Clear();
  sni_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && tls_params_ != NULL) {
    delete tls_params_;
  }
  tls_params_ = NULL;
  if (GetArenaNoVirtual() == NULL && client_certificate_ != NULL) {
    delete client_certificate_;
  }
  client_certificate_ = NULL;
  if (GetArenaNoVirtual() == NULL && server_validation_context_ != NULL) {
    delete server_validation_context_;
  }
  server_validation_context_ = NULL;
}

bool UpstreamTlsContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.UpstreamTlsContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.TlsParameters tls_params = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tls_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.TlsCertificate client_certificate = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_certificate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sni = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sni()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sni().data(), this->sni().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.UpstreamTlsContext.sni"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string alpn_protocols = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_alpn_protocols()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alpn_protocols(this->alpn_protocols_size() - 1).data(),
            this->alpn_protocols(this->alpn_protocols_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.UpstreamTlsContext.alpn_protocols"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.CertificateValidationContext server_validation_context = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_validation_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.UpstreamTlsContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.UpstreamTlsContext)
  return false;
#undef DO_
}

void UpstreamTlsContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.UpstreamTlsContext)
  // .envoy.api.v2.TlsParameters tls_params = 1;
  if (this->has_tls_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tls_params_, output);
  }

  // .envoy.api.v2.TlsCertificate client_certificate = 2;
  if (this->has_client_certificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->client_certificate_, output);
  }

  // string sni = 3;
  if (this->sni().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sni().data(), this->sni().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.UpstreamTlsContext.sni");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sni(), output);
  }

  // repeated string alpn_protocols = 4;
  for (int i = 0; i < this->alpn_protocols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alpn_protocols(i).data(), this->alpn_protocols(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.UpstreamTlsContext.alpn_protocols");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->alpn_protocols(i), output);
  }

  // .envoy.api.v2.CertificateValidationContext server_validation_context = 5;
  if (this->has_server_validation_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->server_validation_context_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.UpstreamTlsContext)
}

::google::protobuf::uint8* UpstreamTlsContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.UpstreamTlsContext)
  // .envoy.api.v2.TlsParameters tls_params = 1;
  if (this->has_tls_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tls_params_, false, target);
  }

  // .envoy.api.v2.TlsCertificate client_certificate = 2;
  if (this->has_client_certificate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->client_certificate_, false, target);
  }

  // string sni = 3;
  if (this->sni().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sni().data(), this->sni().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.UpstreamTlsContext.sni");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sni(), target);
  }

  // repeated string alpn_protocols = 4;
  for (int i = 0; i < this->alpn_protocols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alpn_protocols(i).data(), this->alpn_protocols(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.UpstreamTlsContext.alpn_protocols");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->alpn_protocols(i), target);
  }

  // .envoy.api.v2.CertificateValidationContext server_validation_context = 5;
  if (this->has_server_validation_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->server_validation_context_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.UpstreamTlsContext)
  return target;
}

size_t UpstreamTlsContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.UpstreamTlsContext)
  size_t total_size = 0;

  // repeated string alpn_protocols = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->alpn_protocols_size());
  for (int i = 0; i < this->alpn_protocols_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->alpn_protocols(i));
  }

  // string sni = 3;
  if (this->sni().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sni());
  }

  // .envoy.api.v2.TlsParameters tls_params = 1;
  if (this->has_tls_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tls_params_);
  }

  // .envoy.api.v2.TlsCertificate client_certificate = 2;
  if (this->has_client_certificate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_certificate_);
  }

  // .envoy.api.v2.CertificateValidationContext server_validation_context = 5;
  if (this->has_server_validation_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_validation_context_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpstreamTlsContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.UpstreamTlsContext)
  GOOGLE_DCHECK_NE(&from, this);
  const UpstreamTlsContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpstreamTlsContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.UpstreamTlsContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.UpstreamTlsContext)
    MergeFrom(*source);
  }
}

void UpstreamTlsContext::MergeFrom(const UpstreamTlsContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.UpstreamTlsContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alpn_protocols_.MergeFrom(from.alpn_protocols_);
  if (from.sni().size() > 0) {

    sni_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sni_);
  }
  if (from.has_tls_params()) {
    mutable_tls_params()->::envoy::api::v2::TlsParameters::MergeFrom(from.tls_params());
  }
  if (from.has_client_certificate()) {
    mutable_client_certificate()->::envoy::api::v2::TlsCertificate::MergeFrom(from.client_certificate());
  }
  if (from.has_server_validation_context()) {
    mutable_server_validation_context()->::envoy::api::v2::CertificateValidationContext::MergeFrom(from.server_validation_context());
  }
}

void UpstreamTlsContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.UpstreamTlsContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpstreamTlsContext::CopyFrom(const UpstreamTlsContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.UpstreamTlsContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpstreamTlsContext::IsInitialized() const {
  return true;
}

void UpstreamTlsContext::Swap(UpstreamTlsContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpstreamTlsContext::InternalSwap(UpstreamTlsContext* other) {
  alpn_protocols_.UnsafeArenaSwap(&other->alpn_protocols_);
  sni_.Swap(&other->sni_);
  std::swap(tls_params_, other->tls_params_);
  std::swap(client_certificate_, other->client_certificate_);
  std::swap(server_validation_context_, other->server_validation_context_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpstreamTlsContext::GetMetadata() const {
  protobuf_api_2ftls_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ftls_5fcontext_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpstreamTlsContext

// .envoy.api.v2.TlsParameters tls_params = 1;
bool UpstreamTlsContext::has_tls_params() const {
  return this != internal_default_instance() && tls_params_ != NULL;
}
void UpstreamTlsContext::clear_tls_params() {
  if (GetArenaNoVirtual() == NULL && tls_params_ != NULL) delete tls_params_;
  tls_params_ = NULL;
}
const ::envoy::api::v2::TlsParameters& UpstreamTlsContext::tls_params() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UpstreamTlsContext.tls_params)
  return tls_params_ != NULL ? *tls_params_
                         : *::envoy::api::v2::TlsParameters::internal_default_instance();
}
::envoy::api::v2::TlsParameters* UpstreamTlsContext::mutable_tls_params() {
  
  if (tls_params_ == NULL) {
    tls_params_ = new ::envoy::api::v2::TlsParameters;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UpstreamTlsContext.tls_params)
  return tls_params_;
}
::envoy::api::v2::TlsParameters* UpstreamTlsContext::release_tls_params() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UpstreamTlsContext.tls_params)
  
  ::envoy::api::v2::TlsParameters* temp = tls_params_;
  tls_params_ = NULL;
  return temp;
}
void UpstreamTlsContext::set_allocated_tls_params(::envoy::api::v2::TlsParameters* tls_params) {
  delete tls_params_;
  tls_params_ = tls_params;
  if (tls_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UpstreamTlsContext.tls_params)
}

// .envoy.api.v2.TlsCertificate client_certificate = 2;
bool UpstreamTlsContext::has_client_certificate() const {
  return this != internal_default_instance() && client_certificate_ != NULL;
}
void UpstreamTlsContext::clear_client_certificate() {
  if (GetArenaNoVirtual() == NULL && client_certificate_ != NULL) delete client_certificate_;
  client_certificate_ = NULL;
}
const ::envoy::api::v2::TlsCertificate& UpstreamTlsContext::client_certificate() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UpstreamTlsContext.client_certificate)
  return client_certificate_ != NULL ? *client_certificate_
                         : *::envoy::api::v2::TlsCertificate::internal_default_instance();
}
::envoy::api::v2::TlsCertificate* UpstreamTlsContext::mutable_client_certificate() {
  
  if (client_certificate_ == NULL) {
    client_certificate_ = new ::envoy::api::v2::TlsCertificate;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UpstreamTlsContext.client_certificate)
  return client_certificate_;
}
::envoy::api::v2::TlsCertificate* UpstreamTlsContext::release_client_certificate() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UpstreamTlsContext.client_certificate)
  
  ::envoy::api::v2::TlsCertificate* temp = client_certificate_;
  client_certificate_ = NULL;
  return temp;
}
void UpstreamTlsContext::set_allocated_client_certificate(::envoy::api::v2::TlsCertificate* client_certificate) {
  delete client_certificate_;
  client_certificate_ = client_certificate;
  if (client_certificate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UpstreamTlsContext.client_certificate)
}

// string sni = 3;
void UpstreamTlsContext::clear_sni() {
  sni_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpstreamTlsContext::sni() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UpstreamTlsContext.sni)
  return sni_.GetNoArena();
}
void UpstreamTlsContext::set_sni(const ::std::string& value) {
  
  sni_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.UpstreamTlsContext.sni)
}
#if LANG_CXX11
void UpstreamTlsContext::set_sni(::std::string&& value) {
  
  sni_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.UpstreamTlsContext.sni)
}
#endif
void UpstreamTlsContext::set_sni(const char* value) {
  
  sni_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.UpstreamTlsContext.sni)
}
void UpstreamTlsContext::set_sni(const char* value, size_t size) {
  
  sni_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.UpstreamTlsContext.sni)
}
::std::string* UpstreamTlsContext::mutable_sni() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UpstreamTlsContext.sni)
  return sni_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpstreamTlsContext::release_sni() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UpstreamTlsContext.sni)
  
  return sni_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpstreamTlsContext::set_allocated_sni(::std::string* sni) {
  if (sni != NULL) {
    
  } else {
    
  }
  sni_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sni);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UpstreamTlsContext.sni)
}

// repeated string alpn_protocols = 4;
int UpstreamTlsContext::alpn_protocols_size() const {
  return alpn_protocols_.size();
}
void UpstreamTlsContext::clear_alpn_protocols() {
  alpn_protocols_.Clear();
}
const ::std::string& UpstreamTlsContext::alpn_protocols(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
  return alpn_protocols_.Get(index);
}
::std::string* UpstreamTlsContext::mutable_alpn_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
  return alpn_protocols_.Mutable(index);
}
void UpstreamTlsContext::set_alpn_protocols(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
  alpn_protocols_.Mutable(index)->assign(value);
}
void UpstreamTlsContext::set_alpn_protocols(int index, const char* value) {
  alpn_protocols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
}
void UpstreamTlsContext::set_alpn_protocols(int index, const char* value, size_t size) {
  alpn_protocols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
}
::std::string* UpstreamTlsContext::add_alpn_protocols() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
  return alpn_protocols_.Add();
}
void UpstreamTlsContext::add_alpn_protocols(const ::std::string& value) {
  alpn_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
}
void UpstreamTlsContext::add_alpn_protocols(const char* value) {
  alpn_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
}
void UpstreamTlsContext::add_alpn_protocols(const char* value, size_t size) {
  alpn_protocols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpstreamTlsContext::alpn_protocols() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
  return alpn_protocols_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UpstreamTlsContext::mutable_alpn_protocols() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
  return &alpn_protocols_;
}

// .envoy.api.v2.CertificateValidationContext server_validation_context = 5;
bool UpstreamTlsContext::has_server_validation_context() const {
  return this != internal_default_instance() && server_validation_context_ != NULL;
}
void UpstreamTlsContext::clear_server_validation_context() {
  if (GetArenaNoVirtual() == NULL && server_validation_context_ != NULL) delete server_validation_context_;
  server_validation_context_ = NULL;
}
const ::envoy::api::v2::CertificateValidationContext& UpstreamTlsContext::server_validation_context() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UpstreamTlsContext.server_validation_context)
  return server_validation_context_ != NULL ? *server_validation_context_
                         : *::envoy::api::v2::CertificateValidationContext::internal_default_instance();
}
::envoy::api::v2::CertificateValidationContext* UpstreamTlsContext::mutable_server_validation_context() {
  
  if (server_validation_context_ == NULL) {
    server_validation_context_ = new ::envoy::api::v2::CertificateValidationContext;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UpstreamTlsContext.server_validation_context)
  return server_validation_context_;
}
::envoy::api::v2::CertificateValidationContext* UpstreamTlsContext::release_server_validation_context() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UpstreamTlsContext.server_validation_context)
  
  ::envoy::api::v2::CertificateValidationContext* temp = server_validation_context_;
  server_validation_context_ = NULL;
  return temp;
}
void UpstreamTlsContext::set_allocated_server_validation_context(::envoy::api::v2::CertificateValidationContext* server_validation_context) {
  delete server_validation_context_;
  server_validation_context_ = server_validation_context;
  if (server_validation_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UpstreamTlsContext.server_validation_context)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownstreamTlsContext::kTlsParamsFieldNumber;
const int DownstreamTlsContext::kTlsCertificatesFieldNumber;
const int DownstreamTlsContext::kAlpnProtocolsFieldNumber;
const int DownstreamTlsContext::kClientValidationContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownstreamTlsContext::DownstreamTlsContext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.DownstreamTlsContext)
}
DownstreamTlsContext::DownstreamTlsContext(const DownstreamTlsContext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tls_certificates_(from.tls_certificates_),
      alpn_protocols_(from.alpn_protocols_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tls_params()) {
    tls_params_ = new ::envoy::api::v2::TlsParameters(*from.tls_params_);
  } else {
    tls_params_ = NULL;
  }
  if (from.has_client_validation_context()) {
    client_validation_context_ = new ::envoy::api::v2::CertificateValidationContext(*from.client_validation_context_);
  } else {
    client_validation_context_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.DownstreamTlsContext)
}

void DownstreamTlsContext::SharedCtor() {
  ::memset(&tls_params_, 0, reinterpret_cast<char*>(&client_validation_context_) -
    reinterpret_cast<char*>(&tls_params_) + sizeof(client_validation_context_));
  _cached_size_ = 0;
}

DownstreamTlsContext::~DownstreamTlsContext() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.DownstreamTlsContext)
  SharedDtor();
}

void DownstreamTlsContext::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tls_params_;
  }
  if (this != internal_default_instance()) {
    delete client_validation_context_;
  }
}

void DownstreamTlsContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownstreamTlsContext::descriptor() {
  protobuf_api_2ftls_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ftls_5fcontext_2eproto::file_level_metadata[5].descriptor;
}

const DownstreamTlsContext& DownstreamTlsContext::default_instance() {
  protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownstreamTlsContext* DownstreamTlsContext::New(::google::protobuf::Arena* arena) const {
  DownstreamTlsContext* n = new DownstreamTlsContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownstreamTlsContext::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.DownstreamTlsContext)
  tls_certificates_.Clear();
  alpn_protocols_.Clear();
  if (GetArenaNoVirtual() == NULL && tls_params_ != NULL) {
    delete tls_params_;
  }
  tls_params_ = NULL;
  if (GetArenaNoVirtual() == NULL && client_validation_context_ != NULL) {
    delete client_validation_context_;
  }
  client_validation_context_ = NULL;
}

bool DownstreamTlsContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.DownstreamTlsContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.TlsParameters tls_params = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tls_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.TlsCertificate tls_certificates = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tls_certificates()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated string alpn_protocols = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_alpn_protocols()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alpn_protocols(this->alpn_protocols_size() - 1).data(),
            this->alpn_protocols(this->alpn_protocols_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.DownstreamTlsContext.alpn_protocols"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.CertificateValidationContext client_validation_context = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_validation_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.DownstreamTlsContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.DownstreamTlsContext)
  return false;
#undef DO_
}

void DownstreamTlsContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.DownstreamTlsContext)
  // .envoy.api.v2.TlsParameters tls_params = 1;
  if (this->has_tls_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tls_params_, output);
  }

  // repeated .envoy.api.v2.TlsCertificate tls_certificates = 2;
  for (unsigned int i = 0, n = this->tls_certificates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tls_certificates(i), output);
  }

  // repeated string alpn_protocols = 3;
  for (int i = 0; i < this->alpn_protocols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alpn_protocols(i).data(), this->alpn_protocols(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.DownstreamTlsContext.alpn_protocols");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->alpn_protocols(i), output);
  }

  // .envoy.api.v2.CertificateValidationContext client_validation_context = 4;
  if (this->has_client_validation_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->client_validation_context_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.DownstreamTlsContext)
}

::google::protobuf::uint8* DownstreamTlsContext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.DownstreamTlsContext)
  // .envoy.api.v2.TlsParameters tls_params = 1;
  if (this->has_tls_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tls_params_, false, target);
  }

  // repeated .envoy.api.v2.TlsCertificate tls_certificates = 2;
  for (unsigned int i = 0, n = this->tls_certificates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tls_certificates(i), false, target);
  }

  // repeated string alpn_protocols = 3;
  for (int i = 0; i < this->alpn_protocols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alpn_protocols(i).data(), this->alpn_protocols(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.DownstreamTlsContext.alpn_protocols");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->alpn_protocols(i), target);
  }

  // .envoy.api.v2.CertificateValidationContext client_validation_context = 4;
  if (this->has_client_validation_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->client_validation_context_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.DownstreamTlsContext)
  return target;
}

size_t DownstreamTlsContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.DownstreamTlsContext)
  size_t total_size = 0;

  // repeated .envoy.api.v2.TlsCertificate tls_certificates = 2;
  {
    unsigned int count = this->tls_certificates_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tls_certificates(i));
    }
  }

  // repeated string alpn_protocols = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->alpn_protocols_size());
  for (int i = 0; i < this->alpn_protocols_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->alpn_protocols(i));
  }

  // .envoy.api.v2.TlsParameters tls_params = 1;
  if (this->has_tls_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tls_params_);
  }

  // .envoy.api.v2.CertificateValidationContext client_validation_context = 4;
  if (this->has_client_validation_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_validation_context_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownstreamTlsContext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.DownstreamTlsContext)
  GOOGLE_DCHECK_NE(&from, this);
  const DownstreamTlsContext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DownstreamTlsContext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.DownstreamTlsContext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.DownstreamTlsContext)
    MergeFrom(*source);
  }
}

void DownstreamTlsContext::MergeFrom(const DownstreamTlsContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.DownstreamTlsContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tls_certificates_.MergeFrom(from.tls_certificates_);
  alpn_protocols_.MergeFrom(from.alpn_protocols_);
  if (from.has_tls_params()) {
    mutable_tls_params()->::envoy::api::v2::TlsParameters::MergeFrom(from.tls_params());
  }
  if (from.has_client_validation_context()) {
    mutable_client_validation_context()->::envoy::api::v2::CertificateValidationContext::MergeFrom(from.client_validation_context());
  }
}

void DownstreamTlsContext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.DownstreamTlsContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownstreamTlsContext::CopyFrom(const DownstreamTlsContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.DownstreamTlsContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownstreamTlsContext::IsInitialized() const {
  return true;
}

void DownstreamTlsContext::Swap(DownstreamTlsContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownstreamTlsContext::InternalSwap(DownstreamTlsContext* other) {
  tls_certificates_.UnsafeArenaSwap(&other->tls_certificates_);
  alpn_protocols_.UnsafeArenaSwap(&other->alpn_protocols_);
  std::swap(tls_params_, other->tls_params_);
  std::swap(client_validation_context_, other->client_validation_context_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownstreamTlsContext::GetMetadata() const {
  protobuf_api_2ftls_5fcontext_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2ftls_5fcontext_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownstreamTlsContext

// .envoy.api.v2.TlsParameters tls_params = 1;
bool DownstreamTlsContext::has_tls_params() const {
  return this != internal_default_instance() && tls_params_ != NULL;
}
void DownstreamTlsContext::clear_tls_params() {
  if (GetArenaNoVirtual() == NULL && tls_params_ != NULL) delete tls_params_;
  tls_params_ = NULL;
}
const ::envoy::api::v2::TlsParameters& DownstreamTlsContext::tls_params() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DownstreamTlsContext.tls_params)
  return tls_params_ != NULL ? *tls_params_
                         : *::envoy::api::v2::TlsParameters::internal_default_instance();
}
::envoy::api::v2::TlsParameters* DownstreamTlsContext::mutable_tls_params() {
  
  if (tls_params_ == NULL) {
    tls_params_ = new ::envoy::api::v2::TlsParameters;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DownstreamTlsContext.tls_params)
  return tls_params_;
}
::envoy::api::v2::TlsParameters* DownstreamTlsContext::release_tls_params() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DownstreamTlsContext.tls_params)
  
  ::envoy::api::v2::TlsParameters* temp = tls_params_;
  tls_params_ = NULL;
  return temp;
}
void DownstreamTlsContext::set_allocated_tls_params(::envoy::api::v2::TlsParameters* tls_params) {
  delete tls_params_;
  tls_params_ = tls_params;
  if (tls_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DownstreamTlsContext.tls_params)
}

// repeated .envoy.api.v2.TlsCertificate tls_certificates = 2;
int DownstreamTlsContext::tls_certificates_size() const {
  return tls_certificates_.size();
}
void DownstreamTlsContext::clear_tls_certificates() {
  tls_certificates_.Clear();
}
const ::envoy::api::v2::TlsCertificate& DownstreamTlsContext::tls_certificates(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DownstreamTlsContext.tls_certificates)
  return tls_certificates_.Get(index);
}
::envoy::api::v2::TlsCertificate* DownstreamTlsContext::mutable_tls_certificates(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DownstreamTlsContext.tls_certificates)
  return tls_certificates_.Mutable(index);
}
::envoy::api::v2::TlsCertificate* DownstreamTlsContext::add_tls_certificates() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.DownstreamTlsContext.tls_certificates)
  return tls_certificates_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::TlsCertificate >*
DownstreamTlsContext::mutable_tls_certificates() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.DownstreamTlsContext.tls_certificates)
  return &tls_certificates_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::TlsCertificate >&
DownstreamTlsContext::tls_certificates() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.DownstreamTlsContext.tls_certificates)
  return tls_certificates_;
}

// repeated string alpn_protocols = 3;
int DownstreamTlsContext::alpn_protocols_size() const {
  return alpn_protocols_.size();
}
void DownstreamTlsContext::clear_alpn_protocols() {
  alpn_protocols_.Clear();
}
const ::std::string& DownstreamTlsContext::alpn_protocols(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
  return alpn_protocols_.Get(index);
}
::std::string* DownstreamTlsContext::mutable_alpn_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
  return alpn_protocols_.Mutable(index);
}
void DownstreamTlsContext::set_alpn_protocols(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
  alpn_protocols_.Mutable(index)->assign(value);
}
void DownstreamTlsContext::set_alpn_protocols(int index, const char* value) {
  alpn_protocols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
}
void DownstreamTlsContext::set_alpn_protocols(int index, const char* value, size_t size) {
  alpn_protocols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
}
::std::string* DownstreamTlsContext::add_alpn_protocols() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
  return alpn_protocols_.Add();
}
void DownstreamTlsContext::add_alpn_protocols(const ::std::string& value) {
  alpn_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
}
void DownstreamTlsContext::add_alpn_protocols(const char* value) {
  alpn_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
}
void DownstreamTlsContext::add_alpn_protocols(const char* value, size_t size) {
  alpn_protocols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DownstreamTlsContext::alpn_protocols() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
  return alpn_protocols_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DownstreamTlsContext::mutable_alpn_protocols() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
  return &alpn_protocols_;
}

// .envoy.api.v2.CertificateValidationContext client_validation_context = 4;
bool DownstreamTlsContext::has_client_validation_context() const {
  return this != internal_default_instance() && client_validation_context_ != NULL;
}
void DownstreamTlsContext::clear_client_validation_context() {
  if (GetArenaNoVirtual() == NULL && client_validation_context_ != NULL) delete client_validation_context_;
  client_validation_context_ = NULL;
}
const ::envoy::api::v2::CertificateValidationContext& DownstreamTlsContext::client_validation_context() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DownstreamTlsContext.client_validation_context)
  return client_validation_context_ != NULL ? *client_validation_context_
                         : *::envoy::api::v2::CertificateValidationContext::internal_default_instance();
}
::envoy::api::v2::CertificateValidationContext* DownstreamTlsContext::mutable_client_validation_context() {
  
  if (client_validation_context_ == NULL) {
    client_validation_context_ = new ::envoy::api::v2::CertificateValidationContext;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DownstreamTlsContext.client_validation_context)
  return client_validation_context_;
}
::envoy::api::v2::CertificateValidationContext* DownstreamTlsContext::release_client_validation_context() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DownstreamTlsContext.client_validation_context)
  
  ::envoy::api::v2::CertificateValidationContext* temp = client_validation_context_;
  client_validation_context_ = NULL;
  return temp;
}
void DownstreamTlsContext::set_allocated_client_validation_context(::envoy::api::v2::CertificateValidationContext* client_validation_context) {
  delete client_validation_context_;
  client_validation_context_ = client_validation_context;
  if (client_validation_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DownstreamTlsContext.client_validation_context)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
