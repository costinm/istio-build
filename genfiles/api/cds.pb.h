// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/cds.proto

#ifndef PROTOBUF_api_2fcds_2eproto__INCLUDED
#define PROTOBUF_api_2fcds_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "api/address.pb.h"
#include "api/base.pb.h"
#include "api/health_check.pb.h"
#include "api/tls_context.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
class CertificateValidationContext;
class CertificateValidationContextDefaultTypeInternal;
extern CertificateValidationContextDefaultTypeInternal _CertificateValidationContext_default_instance_;
class CircuitBreakers;
class CircuitBreakersDefaultTypeInternal;
extern CircuitBreakersDefaultTypeInternal _CircuitBreakers_default_instance_;
class CircuitBreakers_Thresholds;
class CircuitBreakers_ThresholdsDefaultTypeInternal;
extern CircuitBreakers_ThresholdsDefaultTypeInternal _CircuitBreakers_Thresholds_default_instance_;
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class Cluster_OutlierDetection;
class Cluster_OutlierDetectionDefaultTypeInternal;
extern Cluster_OutlierDetectionDefaultTypeInternal _Cluster_OutlierDetection_default_instance_;
class DataSource;
class DataSourceDefaultTypeInternal;
extern DataSourceDefaultTypeInternal _DataSource_default_instance_;
class DiscoveryRequest;
class DiscoveryRequestDefaultTypeInternal;
extern DiscoveryRequestDefaultTypeInternal _DiscoveryRequest_default_instance_;
class DiscoveryResponse;
class DiscoveryResponseDefaultTypeInternal;
extern DiscoveryResponseDefaultTypeInternal _DiscoveryResponse_default_instance_;
class DownstreamTlsContext;
class DownstreamTlsContextDefaultTypeInternal;
extern DownstreamTlsContextDefaultTypeInternal _DownstreamTlsContext_default_instance_;
class Endpoint;
class EndpointDefaultTypeInternal;
extern EndpointDefaultTypeInternal _Endpoint_default_instance_;
class GrpcProtocolOptions;
class GrpcProtocolOptionsDefaultTypeInternal;
extern GrpcProtocolOptionsDefaultTypeInternal _GrpcProtocolOptions_default_instance_;
class HeaderValue;
class HeaderValueDefaultTypeInternal;
extern HeaderValueDefaultTypeInternal _HeaderValue_default_instance_;
class HeaderValueOption;
class HeaderValueOptionDefaultTypeInternal;
extern HeaderValueOptionDefaultTypeInternal _HeaderValueOption_default_instance_;
class HealthCheck;
class HealthCheckDefaultTypeInternal;
extern HealthCheckDefaultTypeInternal _HealthCheck_default_instance_;
class HealthCheck_HttpHealthCheck;
class HealthCheck_HttpHealthCheckDefaultTypeInternal;
extern HealthCheck_HttpHealthCheckDefaultTypeInternal _HealthCheck_HttpHealthCheck_default_instance_;
class HealthCheck_Payload;
class HealthCheck_PayloadDefaultTypeInternal;
extern HealthCheck_PayloadDefaultTypeInternal _HealthCheck_Payload_default_instance_;
class HealthCheck_TcpHealthCheck;
class HealthCheck_TcpHealthCheckDefaultTypeInternal;
extern HealthCheck_TcpHealthCheckDefaultTypeInternal _HealthCheck_TcpHealthCheck_default_instance_;
class Http1ProtocolOptions;
class Http1ProtocolOptionsDefaultTypeInternal;
extern Http1ProtocolOptionsDefaultTypeInternal _Http1ProtocolOptions_default_instance_;
class Http2ProtocolOptions;
class Http2ProtocolOptionsDefaultTypeInternal;
extern Http2ProtocolOptionsDefaultTypeInternal _Http2ProtocolOptions_default_instance_;
class Locality;
class LocalityDefaultTypeInternal;
extern LocalityDefaultTypeInternal _Locality_default_instance_;
class Metadata;
class MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Pipe;
class PipeDefaultTypeInternal;
extern PipeDefaultTypeInternal _Pipe_default_instance_;
class ResolvedAddress;
class ResolvedAddressDefaultTypeInternal;
extern ResolvedAddressDefaultTypeInternal _ResolvedAddress_default_instance_;
class ResolvedAddress_SocketAddress;
class ResolvedAddress_SocketAddressDefaultTypeInternal;
extern ResolvedAddress_SocketAddressDefaultTypeInternal _ResolvedAddress_SocketAddress_default_instance_;
class ResolvedAddresses;
class ResolvedAddressesDefaultTypeInternal;
extern ResolvedAddressesDefaultTypeInternal _ResolvedAddresses_default_instance_;
class RuntimeUInt32;
class RuntimeUInt32DefaultTypeInternal;
extern RuntimeUInt32DefaultTypeInternal _RuntimeUInt32_default_instance_;
class TcpProtocolOptions;
class TcpProtocolOptionsDefaultTypeInternal;
extern TcpProtocolOptionsDefaultTypeInternal _TcpProtocolOptions_default_instance_;
class TlsCertificate;
class TlsCertificateDefaultTypeInternal;
extern TlsCertificateDefaultTypeInternal _TlsCertificate_default_instance_;
class TlsParameters;
class TlsParametersDefaultTypeInternal;
extern TlsParametersDefaultTypeInternal _TlsParameters_default_instance_;
class UnresolvedAddress;
class UnresolvedAddressDefaultTypeInternal;
extern UnresolvedAddressDefaultTypeInternal _UnresolvedAddress_default_instance_;
class UnresolvedAddress_NamedAddress;
class UnresolvedAddress_NamedAddressDefaultTypeInternal;
extern UnresolvedAddress_NamedAddressDefaultTypeInternal _UnresolvedAddress_NamedAddress_default_instance_;
class UnresolvedAddress_Resolver;
class UnresolvedAddress_ResolverDefaultTypeInternal;
extern UnresolvedAddress_ResolverDefaultTypeInternal _UnresolvedAddress_Resolver_default_instance_;
class UnresolvedAddresses;
class UnresolvedAddressesDefaultTypeInternal;
extern UnresolvedAddressesDefaultTypeInternal _UnresolvedAddresses_default_instance_;
class UpstreamTlsContext;
class UpstreamTlsContextDefaultTypeInternal;
extern UpstreamTlsContextDefaultTypeInternal _UpstreamTlsContext_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace google {
namespace api {
}  // namespace api
namespace protobuf {
class BoolValue;
class BoolValueDefaultTypeInternal;
extern BoolValueDefaultTypeInternal _BoolValue_default_instance_;
class BytesValue;
class BytesValueDefaultTypeInternal;
extern BytesValueDefaultTypeInternal _BytesValue_default_instance_;
class DoubleValue;
class DoubleValueDefaultTypeInternal;
extern DoubleValueDefaultTypeInternal _DoubleValue_default_instance_;
class Duration;
class DurationDefaultTypeInternal;
extern DurationDefaultTypeInternal _Duration_default_instance_;
class FloatValue;
class FloatValueDefaultTypeInternal;
extern FloatValueDefaultTypeInternal _FloatValue_default_instance_;
class Int32Value;
class Int32ValueDefaultTypeInternal;
extern Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
class Int64Value;
class Int64ValueDefaultTypeInternal;
extern Int64ValueDefaultTypeInternal _Int64Value_default_instance_;
class StringValue;
class StringValueDefaultTypeInternal;
extern StringValueDefaultTypeInternal _StringValue_default_instance_;
class UInt32Value;
class UInt32ValueDefaultTypeInternal;
extern UInt32ValueDefaultTypeInternal _UInt32Value_default_instance_;
class UInt64Value;
class UInt64ValueDefaultTypeInternal;
extern UInt64ValueDefaultTypeInternal _UInt64Value_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace envoy {
namespace api {
namespace v2 {

namespace protobuf_api_2fcds_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_api_2fcds_2eproto

enum Cluster_DiscoveryType {
  Cluster_DiscoveryType_STATIC = 0,
  Cluster_DiscoveryType_STRICT_DNS = 1,
  Cluster_DiscoveryType_LOGICAL_DNS = 2,
  Cluster_DiscoveryType_EDS = 3,
  Cluster_DiscoveryType_Cluster_DiscoveryType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Cluster_DiscoveryType_Cluster_DiscoveryType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Cluster_DiscoveryType_IsValid(int value);
const Cluster_DiscoveryType Cluster_DiscoveryType_DiscoveryType_MIN = Cluster_DiscoveryType_STATIC;
const Cluster_DiscoveryType Cluster_DiscoveryType_DiscoveryType_MAX = Cluster_DiscoveryType_EDS;
const int Cluster_DiscoveryType_DiscoveryType_ARRAYSIZE = Cluster_DiscoveryType_DiscoveryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Cluster_DiscoveryType_descriptor();
inline const ::std::string& Cluster_DiscoveryType_Name(Cluster_DiscoveryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Cluster_DiscoveryType_descriptor(), value);
}
inline bool Cluster_DiscoveryType_Parse(
    const ::std::string& name, Cluster_DiscoveryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Cluster_DiscoveryType>(
    Cluster_DiscoveryType_descriptor(), name, value);
}
enum Cluster_LbPolicy {
  Cluster_LbPolicy_ROUND_ROBIN = 0,
  Cluster_LbPolicy_LEAST_REQUEST = 1,
  Cluster_LbPolicy_RING_HASH = 2,
  Cluster_LbPolicy_RANDOM = 3,
  Cluster_LbPolicy_Cluster_LbPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Cluster_LbPolicy_Cluster_LbPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Cluster_LbPolicy_IsValid(int value);
const Cluster_LbPolicy Cluster_LbPolicy_LbPolicy_MIN = Cluster_LbPolicy_ROUND_ROBIN;
const Cluster_LbPolicy Cluster_LbPolicy_LbPolicy_MAX = Cluster_LbPolicy_RANDOM;
const int Cluster_LbPolicy_LbPolicy_ARRAYSIZE = Cluster_LbPolicy_LbPolicy_MAX + 1;

const ::google::protobuf::EnumDescriptor* Cluster_LbPolicy_descriptor();
inline const ::std::string& Cluster_LbPolicy_Name(Cluster_LbPolicy value) {
  return ::google::protobuf::internal::NameOfEnum(
    Cluster_LbPolicy_descriptor(), value);
}
inline bool Cluster_LbPolicy_Parse(
    const ::std::string& name, Cluster_LbPolicy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Cluster_LbPolicy>(
    Cluster_LbPolicy_descriptor(), name, value);
}
// ===================================================================

class CircuitBreakers_Thresholds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.CircuitBreakers.Thresholds) */ {
 public:
  CircuitBreakers_Thresholds();
  virtual ~CircuitBreakers_Thresholds();

  CircuitBreakers_Thresholds(const CircuitBreakers_Thresholds& from);

  inline CircuitBreakers_Thresholds& operator=(const CircuitBreakers_Thresholds& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CircuitBreakers_Thresholds& default_instance();

  static inline const CircuitBreakers_Thresholds* internal_default_instance() {
    return reinterpret_cast<const CircuitBreakers_Thresholds*>(
               &_CircuitBreakers_Thresholds_default_instance_);
  }

  void Swap(CircuitBreakers_Thresholds* other);

  // implements Message ----------------------------------------------

  inline CircuitBreakers_Thresholds* New() const PROTOBUF_FINAL { return New(NULL); }

  CircuitBreakers_Thresholds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CircuitBreakers_Thresholds& from);
  void MergeFrom(const CircuitBreakers_Thresholds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CircuitBreakers_Thresholds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.UInt32Value max_connections = 2;
  bool has_max_connections() const;
  void clear_max_connections();
  static const int kMaxConnectionsFieldNumber = 2;
  const ::google::protobuf::UInt32Value& max_connections() const;
  ::google::protobuf::UInt32Value* mutable_max_connections();
  ::google::protobuf::UInt32Value* release_max_connections();
  void set_allocated_max_connections(::google::protobuf::UInt32Value* max_connections);

  // .google.protobuf.UInt32Value max_pending_requests = 3;
  bool has_max_pending_requests() const;
  void clear_max_pending_requests();
  static const int kMaxPendingRequestsFieldNumber = 3;
  const ::google::protobuf::UInt32Value& max_pending_requests() const;
  ::google::protobuf::UInt32Value* mutable_max_pending_requests();
  ::google::protobuf::UInt32Value* release_max_pending_requests();
  void set_allocated_max_pending_requests(::google::protobuf::UInt32Value* max_pending_requests);

  // .google.protobuf.UInt32Value max_requests = 4;
  bool has_max_requests() const;
  void clear_max_requests();
  static const int kMaxRequestsFieldNumber = 4;
  const ::google::protobuf::UInt32Value& max_requests() const;
  ::google::protobuf::UInt32Value* mutable_max_requests();
  ::google::protobuf::UInt32Value* release_max_requests();
  void set_allocated_max_requests(::google::protobuf::UInt32Value* max_requests);

  // .google.protobuf.UInt32Value max_retries = 5;
  bool has_max_retries() const;
  void clear_max_retries();
  static const int kMaxRetriesFieldNumber = 5;
  const ::google::protobuf::UInt32Value& max_retries() const;
  ::google::protobuf::UInt32Value* mutable_max_retries();
  ::google::protobuf::UInt32Value* release_max_retries();
  void set_allocated_max_retries(::google::protobuf::UInt32Value* max_retries);

  // .envoy.api.v2.RoutingPriority priority = 1;
  void clear_priority();
  static const int kPriorityFieldNumber = 1;
  ::envoy::api::v2::RoutingPriority priority() const;
  void set_priority(::envoy::api::v2::RoutingPriority value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.CircuitBreakers.Thresholds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::UInt32Value* max_connections_;
  ::google::protobuf::UInt32Value* max_pending_requests_;
  ::google::protobuf::UInt32Value* max_requests_;
  ::google::protobuf::UInt32Value* max_retries_;
  int priority_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2fcds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CircuitBreakers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.CircuitBreakers) */ {
 public:
  CircuitBreakers();
  virtual ~CircuitBreakers();

  CircuitBreakers(const CircuitBreakers& from);

  inline CircuitBreakers& operator=(const CircuitBreakers& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CircuitBreakers& default_instance();

  static inline const CircuitBreakers* internal_default_instance() {
    return reinterpret_cast<const CircuitBreakers*>(
               &_CircuitBreakers_default_instance_);
  }

  void Swap(CircuitBreakers* other);

  // implements Message ----------------------------------------------

  inline CircuitBreakers* New() const PROTOBUF_FINAL { return New(NULL); }

  CircuitBreakers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CircuitBreakers& from);
  void MergeFrom(const CircuitBreakers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CircuitBreakers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CircuitBreakers_Thresholds Thresholds;

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.CircuitBreakers.Thresholds thresholds = 1;
  int thresholds_size() const;
  void clear_thresholds();
  static const int kThresholdsFieldNumber = 1;
  const ::envoy::api::v2::CircuitBreakers_Thresholds& thresholds(int index) const;
  ::envoy::api::v2::CircuitBreakers_Thresholds* mutable_thresholds(int index);
  ::envoy::api::v2::CircuitBreakers_Thresholds* add_thresholds();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::CircuitBreakers_Thresholds >*
      mutable_thresholds();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::CircuitBreakers_Thresholds >&
      thresholds() const;

  // @@protoc_insertion_point(class_scope:envoy.api.v2.CircuitBreakers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::CircuitBreakers_Thresholds > thresholds_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2fcds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TcpProtocolOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.TcpProtocolOptions) */ {
 public:
  TcpProtocolOptions();
  virtual ~TcpProtocolOptions();

  TcpProtocolOptions(const TcpProtocolOptions& from);

  inline TcpProtocolOptions& operator=(const TcpProtocolOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TcpProtocolOptions& default_instance();

  static inline const TcpProtocolOptions* internal_default_instance() {
    return reinterpret_cast<const TcpProtocolOptions*>(
               &_TcpProtocolOptions_default_instance_);
  }

  void Swap(TcpProtocolOptions* other);

  // implements Message ----------------------------------------------

  inline TcpProtocolOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  TcpProtocolOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TcpProtocolOptions& from);
  void MergeFrom(const TcpProtocolOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TcpProtocolOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:envoy.api.v2.TcpProtocolOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2fcds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Http1ProtocolOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.Http1ProtocolOptions) */ {
 public:
  Http1ProtocolOptions();
  virtual ~Http1ProtocolOptions();

  Http1ProtocolOptions(const Http1ProtocolOptions& from);

  inline Http1ProtocolOptions& operator=(const Http1ProtocolOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Http1ProtocolOptions& default_instance();

  static inline const Http1ProtocolOptions* internal_default_instance() {
    return reinterpret_cast<const Http1ProtocolOptions*>(
               &_Http1ProtocolOptions_default_instance_);
  }

  void Swap(Http1ProtocolOptions* other);

  // implements Message ----------------------------------------------

  inline Http1ProtocolOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  Http1ProtocolOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Http1ProtocolOptions& from);
  void MergeFrom(const Http1ProtocolOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Http1ProtocolOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:envoy.api.v2.Http1ProtocolOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2fcds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Http2ProtocolOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.Http2ProtocolOptions) */ {
 public:
  Http2ProtocolOptions();
  virtual ~Http2ProtocolOptions();

  Http2ProtocolOptions(const Http2ProtocolOptions& from);

  inline Http2ProtocolOptions& operator=(const Http2ProtocolOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Http2ProtocolOptions& default_instance();

  static inline const Http2ProtocolOptions* internal_default_instance() {
    return reinterpret_cast<const Http2ProtocolOptions*>(
               &_Http2ProtocolOptions_default_instance_);
  }

  void Swap(Http2ProtocolOptions* other);

  // implements Message ----------------------------------------------

  inline Http2ProtocolOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  Http2ProtocolOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Http2ProtocolOptions& from);
  void MergeFrom(const Http2ProtocolOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Http2ProtocolOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.UInt32Value per_stream_buffer_limit_bytes = 2;
  bool has_per_stream_buffer_limit_bytes() const;
  void clear_per_stream_buffer_limit_bytes();
  static const int kPerStreamBufferLimitBytesFieldNumber = 2;
  const ::google::protobuf::UInt32Value& per_stream_buffer_limit_bytes() const;
  ::google::protobuf::UInt32Value* mutable_per_stream_buffer_limit_bytes();
  ::google::protobuf::UInt32Value* release_per_stream_buffer_limit_bytes();
  void set_allocated_per_stream_buffer_limit_bytes(::google::protobuf::UInt32Value* per_stream_buffer_limit_bytes);

  // .google.protobuf.UInt32Value max_concurrent_streams = 3;
  bool has_max_concurrent_streams() const;
  void clear_max_concurrent_streams();
  static const int kMaxConcurrentStreamsFieldNumber = 3;
  const ::google::protobuf::UInt32Value& max_concurrent_streams() const;
  ::google::protobuf::UInt32Value* mutable_max_concurrent_streams();
  ::google::protobuf::UInt32Value* release_max_concurrent_streams();
  void set_allocated_max_concurrent_streams(::google::protobuf::UInt32Value* max_concurrent_streams);

  // .google.protobuf.UInt32Value initial_window_size = 4;
  bool has_initial_window_size() const;
  void clear_initial_window_size();
  static const int kInitialWindowSizeFieldNumber = 4;
  const ::google::protobuf::UInt32Value& initial_window_size() const;
  ::google::protobuf::UInt32Value* mutable_initial_window_size();
  ::google::protobuf::UInt32Value* release_initial_window_size();
  void set_allocated_initial_window_size(::google::protobuf::UInt32Value* initial_window_size);

  // bool disable_dynamic_table = 1;
  void clear_disable_dynamic_table();
  static const int kDisableDynamicTableFieldNumber = 1;
  bool disable_dynamic_table() const;
  void set_disable_dynamic_table(bool value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.Http2ProtocolOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::UInt32Value* per_stream_buffer_limit_bytes_;
  ::google::protobuf::UInt32Value* max_concurrent_streams_;
  ::google::protobuf::UInt32Value* initial_window_size_;
  bool disable_dynamic_table_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2fcds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GrpcProtocolOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.GrpcProtocolOptions) */ {
 public:
  GrpcProtocolOptions();
  virtual ~GrpcProtocolOptions();

  GrpcProtocolOptions(const GrpcProtocolOptions& from);

  inline GrpcProtocolOptions& operator=(const GrpcProtocolOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GrpcProtocolOptions& default_instance();

  static inline const GrpcProtocolOptions* internal_default_instance() {
    return reinterpret_cast<const GrpcProtocolOptions*>(
               &_GrpcProtocolOptions_default_instance_);
  }

  void Swap(GrpcProtocolOptions* other);

  // implements Message ----------------------------------------------

  inline GrpcProtocolOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  GrpcProtocolOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GrpcProtocolOptions& from);
  void MergeFrom(const GrpcProtocolOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GrpcProtocolOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 1;
  bool has_http2_protocol_options() const;
  void clear_http2_protocol_options();
  static const int kHttp2ProtocolOptionsFieldNumber = 1;
  const ::envoy::api::v2::Http2ProtocolOptions& http2_protocol_options() const;
  ::envoy::api::v2::Http2ProtocolOptions* mutable_http2_protocol_options();
  ::envoy::api::v2::Http2ProtocolOptions* release_http2_protocol_options();
  void set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.GrpcProtocolOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2fcds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Cluster_OutlierDetection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.Cluster.OutlierDetection) */ {
 public:
  Cluster_OutlierDetection();
  virtual ~Cluster_OutlierDetection();

  Cluster_OutlierDetection(const Cluster_OutlierDetection& from);

  inline Cluster_OutlierDetection& operator=(const Cluster_OutlierDetection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cluster_OutlierDetection& default_instance();

  static inline const Cluster_OutlierDetection* internal_default_instance() {
    return reinterpret_cast<const Cluster_OutlierDetection*>(
               &_Cluster_OutlierDetection_default_instance_);
  }

  void Swap(Cluster_OutlierDetection* other);

  // implements Message ----------------------------------------------

  inline Cluster_OutlierDetection* New() const PROTOBUF_FINAL { return New(NULL); }

  Cluster_OutlierDetection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cluster_OutlierDetection& from);
  void MergeFrom(const Cluster_OutlierDetection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cluster_OutlierDetection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.UInt32Value consecutive_5xx = 1;
  bool has_consecutive_5xx() const;
  void clear_consecutive_5xx();
  static const int kConsecutive5XxFieldNumber = 1;
  const ::google::protobuf::UInt32Value& consecutive_5xx() const;
  ::google::protobuf::UInt32Value* mutable_consecutive_5xx();
  ::google::protobuf::UInt32Value* release_consecutive_5xx();
  void set_allocated_consecutive_5xx(::google::protobuf::UInt32Value* consecutive_5xx);

  // .google.protobuf.Duration interval = 2;
  bool has_interval() const;
  void clear_interval();
  static const int kIntervalFieldNumber = 2;
  const ::google::protobuf::Duration& interval() const;
  ::google::protobuf::Duration* mutable_interval();
  ::google::protobuf::Duration* release_interval();
  void set_allocated_interval(::google::protobuf::Duration* interval);

  // .google.protobuf.Duration base_ejection_time = 3;
  bool has_base_ejection_time() const;
  void clear_base_ejection_time();
  static const int kBaseEjectionTimeFieldNumber = 3;
  const ::google::protobuf::Duration& base_ejection_time() const;
  ::google::protobuf::Duration* mutable_base_ejection_time();
  ::google::protobuf::Duration* release_base_ejection_time();
  void set_allocated_base_ejection_time(::google::protobuf::Duration* base_ejection_time);

  // .google.protobuf.UInt32Value max_ejection_percent = 4;
  bool has_max_ejection_percent() const;
  void clear_max_ejection_percent();
  static const int kMaxEjectionPercentFieldNumber = 4;
  const ::google::protobuf::UInt32Value& max_ejection_percent() const;
  ::google::protobuf::UInt32Value* mutable_max_ejection_percent();
  ::google::protobuf::UInt32Value* release_max_ejection_percent();
  void set_allocated_max_ejection_percent(::google::protobuf::UInt32Value* max_ejection_percent);

  // .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;
  bool has_enforcing_consecutive_5xx() const;
  void clear_enforcing_consecutive_5xx();
  static const int kEnforcingConsecutive5XxFieldNumber = 5;
  const ::google::protobuf::UInt32Value& enforcing_consecutive_5xx() const;
  ::google::protobuf::UInt32Value* mutable_enforcing_consecutive_5xx();
  ::google::protobuf::UInt32Value* release_enforcing_consecutive_5xx();
  void set_allocated_enforcing_consecutive_5xx(::google::protobuf::UInt32Value* enforcing_consecutive_5xx);

  // .google.protobuf.UInt32Value enforcing_success_rate = 6;
  bool has_enforcing_success_rate() const;
  void clear_enforcing_success_rate();
  static const int kEnforcingSuccessRateFieldNumber = 6;
  const ::google::protobuf::UInt32Value& enforcing_success_rate() const;
  ::google::protobuf::UInt32Value* mutable_enforcing_success_rate();
  ::google::protobuf::UInt32Value* release_enforcing_success_rate();
  void set_allocated_enforcing_success_rate(::google::protobuf::UInt32Value* enforcing_success_rate);

  // .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;
  bool has_success_rate_minimum_hosts() const;
  void clear_success_rate_minimum_hosts();
  static const int kSuccessRateMinimumHostsFieldNumber = 7;
  const ::google::protobuf::UInt32Value& success_rate_minimum_hosts() const;
  ::google::protobuf::UInt32Value* mutable_success_rate_minimum_hosts();
  ::google::protobuf::UInt32Value* release_success_rate_minimum_hosts();
  void set_allocated_success_rate_minimum_hosts(::google::protobuf::UInt32Value* success_rate_minimum_hosts);

  // .google.protobuf.UInt32Value success_rate_request_volume = 8;
  bool has_success_rate_request_volume() const;
  void clear_success_rate_request_volume();
  static const int kSuccessRateRequestVolumeFieldNumber = 8;
  const ::google::protobuf::UInt32Value& success_rate_request_volume() const;
  ::google::protobuf::UInt32Value* mutable_success_rate_request_volume();
  ::google::protobuf::UInt32Value* release_success_rate_request_volume();
  void set_allocated_success_rate_request_volume(::google::protobuf::UInt32Value* success_rate_request_volume);

  // .google.protobuf.UInt32Value success_rate_stdev_factor = 9;
  bool has_success_rate_stdev_factor() const;
  void clear_success_rate_stdev_factor();
  static const int kSuccessRateStdevFactorFieldNumber = 9;
  const ::google::protobuf::UInt32Value& success_rate_stdev_factor() const;
  ::google::protobuf::UInt32Value* mutable_success_rate_stdev_factor();
  ::google::protobuf::UInt32Value* release_success_rate_stdev_factor();
  void set_allocated_success_rate_stdev_factor(::google::protobuf::UInt32Value* success_rate_stdev_factor);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.Cluster.OutlierDetection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::UInt32Value* consecutive_5xx_;
  ::google::protobuf::Duration* interval_;
  ::google::protobuf::Duration* base_ejection_time_;
  ::google::protobuf::UInt32Value* max_ejection_percent_;
  ::google::protobuf::UInt32Value* enforcing_consecutive_5xx_;
  ::google::protobuf::UInt32Value* enforcing_success_rate_;
  ::google::protobuf::UInt32Value* success_rate_minimum_hosts_;
  ::google::protobuf::UInt32Value* success_rate_request_volume_;
  ::google::protobuf::UInt32Value* success_rate_stdev_factor_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2fcds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Cluster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.Cluster) */ {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cluster& default_instance();

  enum HostsSpecifierCase {
    kStaticHosts = 6,
    kDnsHosts = 7,
    HOSTS_SPECIFIER_NOT_SET = 0,
  };

  enum ProtocolOptionsCase {
    kTcpProtocolOptions = 12,
    kHttpProtocolOptions = 13,
    kHttp2ProtocolOptions = 14,
    kGrpcProtocolOptions = 15,
    PROTOCOL_OPTIONS_NOT_SET = 0,
  };

  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }

  void Swap(Cluster* other);

  // implements Message ----------------------------------------------

  inline Cluster* New() const PROTOBUF_FINAL { return New(NULL); }

  Cluster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Cluster_OutlierDetection OutlierDetection;

  typedef Cluster_DiscoveryType DiscoveryType;
  static const DiscoveryType STATIC =
    Cluster_DiscoveryType_STATIC;
  static const DiscoveryType STRICT_DNS =
    Cluster_DiscoveryType_STRICT_DNS;
  static const DiscoveryType LOGICAL_DNS =
    Cluster_DiscoveryType_LOGICAL_DNS;
  static const DiscoveryType EDS =
    Cluster_DiscoveryType_EDS;
  static inline bool DiscoveryType_IsValid(int value) {
    return Cluster_DiscoveryType_IsValid(value);
  }
  static const DiscoveryType DiscoveryType_MIN =
    Cluster_DiscoveryType_DiscoveryType_MIN;
  static const DiscoveryType DiscoveryType_MAX =
    Cluster_DiscoveryType_DiscoveryType_MAX;
  static const int DiscoveryType_ARRAYSIZE =
    Cluster_DiscoveryType_DiscoveryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DiscoveryType_descriptor() {
    return Cluster_DiscoveryType_descriptor();
  }
  static inline const ::std::string& DiscoveryType_Name(DiscoveryType value) {
    return Cluster_DiscoveryType_Name(value);
  }
  static inline bool DiscoveryType_Parse(const ::std::string& name,
      DiscoveryType* value) {
    return Cluster_DiscoveryType_Parse(name, value);
  }

  typedef Cluster_LbPolicy LbPolicy;
  static const LbPolicy ROUND_ROBIN =
    Cluster_LbPolicy_ROUND_ROBIN;
  static const LbPolicy LEAST_REQUEST =
    Cluster_LbPolicy_LEAST_REQUEST;
  static const LbPolicy RING_HASH =
    Cluster_LbPolicy_RING_HASH;
  static const LbPolicy RANDOM =
    Cluster_LbPolicy_RANDOM;
  static inline bool LbPolicy_IsValid(int value) {
    return Cluster_LbPolicy_IsValid(value);
  }
  static const LbPolicy LbPolicy_MIN =
    Cluster_LbPolicy_LbPolicy_MIN;
  static const LbPolicy LbPolicy_MAX =
    Cluster_LbPolicy_LbPolicy_MAX;
  static const int LbPolicy_ARRAYSIZE =
    Cluster_LbPolicy_LbPolicy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LbPolicy_descriptor() {
    return Cluster_LbPolicy_descriptor();
  }
  static inline const ::std::string& LbPolicy_Name(LbPolicy value) {
    return Cluster_LbPolicy_Name(value);
  }
  static inline bool LbPolicy_Parse(const ::std::string& name,
      LbPolicy* value) {
    return Cluster_LbPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.HealthCheck health_checks = 8;
  int health_checks_size() const;
  void clear_health_checks();
  static const int kHealthChecksFieldNumber = 8;
  const ::envoy::api::v2::HealthCheck& health_checks(int index) const;
  ::envoy::api::v2::HealthCheck* mutable_health_checks(int index);
  ::envoy::api::v2::HealthCheck* add_health_checks();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck >*
      mutable_health_checks();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck >&
      health_checks() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Duration connect_timeout = 3;
  bool has_connect_timeout() const;
  void clear_connect_timeout();
  static const int kConnectTimeoutFieldNumber = 3;
  const ::google::protobuf::Duration& connect_timeout() const;
  ::google::protobuf::Duration* mutable_connect_timeout();
  ::google::protobuf::Duration* release_connect_timeout();
  void set_allocated_connect_timeout(::google::protobuf::Duration* connect_timeout);

  // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;
  bool has_per_connection_buffer_limit_bytes() const;
  void clear_per_connection_buffer_limit_bytes();
  static const int kPerConnectionBufferLimitBytesFieldNumber = 4;
  const ::google::protobuf::UInt32Value& per_connection_buffer_limit_bytes() const;
  ::google::protobuf::UInt32Value* mutable_per_connection_buffer_limit_bytes();
  ::google::protobuf::UInt32Value* release_per_connection_buffer_limit_bytes();
  void set_allocated_per_connection_buffer_limit_bytes(::google::protobuf::UInt32Value* per_connection_buffer_limit_bytes);

  // .google.protobuf.UInt32Value max_requests_per_connection = 9;
  bool has_max_requests_per_connection() const;
  void clear_max_requests_per_connection();
  static const int kMaxRequestsPerConnectionFieldNumber = 9;
  const ::google::protobuf::UInt32Value& max_requests_per_connection() const;
  ::google::protobuf::UInt32Value* mutable_max_requests_per_connection();
  ::google::protobuf::UInt32Value* release_max_requests_per_connection();
  void set_allocated_max_requests_per_connection(::google::protobuf::UInt32Value* max_requests_per_connection);

  // .envoy.api.v2.CircuitBreakers circuit_breakers = 10;
  bool has_circuit_breakers() const;
  void clear_circuit_breakers();
  static const int kCircuitBreakersFieldNumber = 10;
  const ::envoy::api::v2::CircuitBreakers& circuit_breakers() const;
  ::envoy::api::v2::CircuitBreakers* mutable_circuit_breakers();
  ::envoy::api::v2::CircuitBreakers* release_circuit_breakers();
  void set_allocated_circuit_breakers(::envoy::api::v2::CircuitBreakers* circuit_breakers);

  // .envoy.api.v2.UpstreamTlsContext tls_context = 11;
  bool has_tls_context() const;
  void clear_tls_context();
  static const int kTlsContextFieldNumber = 11;
  const ::envoy::api::v2::UpstreamTlsContext& tls_context() const;
  ::envoy::api::v2::UpstreamTlsContext* mutable_tls_context();
  ::envoy::api::v2::UpstreamTlsContext* release_tls_context();
  void set_allocated_tls_context(::envoy::api::v2::UpstreamTlsContext* tls_context);

  // .google.protobuf.Duration dns_refresh_rate = 16;
  bool has_dns_refresh_rate() const;
  void clear_dns_refresh_rate();
  static const int kDnsRefreshRateFieldNumber = 16;
  const ::google::protobuf::Duration& dns_refresh_rate() const;
  ::google::protobuf::Duration* mutable_dns_refresh_rate();
  ::google::protobuf::Duration* release_dns_refresh_rate();
  void set_allocated_dns_refresh_rate(::google::protobuf::Duration* dns_refresh_rate);

  // .envoy.api.v2.Cluster.OutlierDetection outlier_detection = 17;
  bool has_outlier_detection() const;
  void clear_outlier_detection();
  static const int kOutlierDetectionFieldNumber = 17;
  const ::envoy::api::v2::Cluster_OutlierDetection& outlier_detection() const;
  ::envoy::api::v2::Cluster_OutlierDetection* mutable_outlier_detection();
  ::envoy::api::v2::Cluster_OutlierDetection* release_outlier_detection();
  void set_allocated_outlier_detection(::envoy::api::v2::Cluster_OutlierDetection* outlier_detection);

  // .envoy.api.v2.Cluster.DiscoveryType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::envoy::api::v2::Cluster_DiscoveryType type() const;
  void set_type(::envoy::api::v2::Cluster_DiscoveryType value);

  // .envoy.api.v2.Cluster.LbPolicy lb_policy = 5;
  void clear_lb_policy();
  static const int kLbPolicyFieldNumber = 5;
  ::envoy::api::v2::Cluster_LbPolicy lb_policy() const;
  void set_lb_policy(::envoy::api::v2::Cluster_LbPolicy value);

  // .envoy.api.v2.ResolvedAddresses static_hosts = 6;
  bool has_static_hosts() const;
  void clear_static_hosts();
  static const int kStaticHostsFieldNumber = 6;
  const ::envoy::api::v2::ResolvedAddresses& static_hosts() const;
  ::envoy::api::v2::ResolvedAddresses* mutable_static_hosts();
  ::envoy::api::v2::ResolvedAddresses* release_static_hosts();
  void set_allocated_static_hosts(::envoy::api::v2::ResolvedAddresses* static_hosts);

  // .envoy.api.v2.UnresolvedAddress dns_hosts = 7;
  bool has_dns_hosts() const;
  void clear_dns_hosts();
  static const int kDnsHostsFieldNumber = 7;
  const ::envoy::api::v2::UnresolvedAddress& dns_hosts() const;
  ::envoy::api::v2::UnresolvedAddress* mutable_dns_hosts();
  ::envoy::api::v2::UnresolvedAddress* release_dns_hosts();
  void set_allocated_dns_hosts(::envoy::api::v2::UnresolvedAddress* dns_hosts);

  // .envoy.api.v2.TcpProtocolOptions tcp_protocol_options = 12;
  bool has_tcp_protocol_options() const;
  void clear_tcp_protocol_options();
  static const int kTcpProtocolOptionsFieldNumber = 12;
  const ::envoy::api::v2::TcpProtocolOptions& tcp_protocol_options() const;
  ::envoy::api::v2::TcpProtocolOptions* mutable_tcp_protocol_options();
  ::envoy::api::v2::TcpProtocolOptions* release_tcp_protocol_options();
  void set_allocated_tcp_protocol_options(::envoy::api::v2::TcpProtocolOptions* tcp_protocol_options);

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 13;
  bool has_http_protocol_options() const;
  void clear_http_protocol_options();
  static const int kHttpProtocolOptionsFieldNumber = 13;
  const ::envoy::api::v2::Http1ProtocolOptions& http_protocol_options() const;
  ::envoy::api::v2::Http1ProtocolOptions* mutable_http_protocol_options();
  ::envoy::api::v2::Http1ProtocolOptions* release_http_protocol_options();
  void set_allocated_http_protocol_options(::envoy::api::v2::Http1ProtocolOptions* http_protocol_options);

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 14;
  bool has_http2_protocol_options() const;
  void clear_http2_protocol_options();
  static const int kHttp2ProtocolOptionsFieldNumber = 14;
  const ::envoy::api::v2::Http2ProtocolOptions& http2_protocol_options() const;
  ::envoy::api::v2::Http2ProtocolOptions* mutable_http2_protocol_options();
  ::envoy::api::v2::Http2ProtocolOptions* release_http2_protocol_options();
  void set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options);

  // .envoy.api.v2.GrpcProtocolOptions grpc_protocol_options = 15;
  bool has_grpc_protocol_options() const;
  void clear_grpc_protocol_options();
  static const int kGrpcProtocolOptionsFieldNumber = 15;
  const ::envoy::api::v2::GrpcProtocolOptions& grpc_protocol_options() const;
  ::envoy::api::v2::GrpcProtocolOptions* mutable_grpc_protocol_options();
  ::envoy::api::v2::GrpcProtocolOptions* release_grpc_protocol_options();
  void set_allocated_grpc_protocol_options(::envoy::api::v2::GrpcProtocolOptions* grpc_protocol_options);

  HostsSpecifierCase hosts_specifier_case() const;
  ProtocolOptionsCase protocol_options_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.Cluster)
 private:
  void set_has_static_hosts();
  void set_has_dns_hosts();
  void set_has_tcp_protocol_options();
  void set_has_http_protocol_options();
  void set_has_http2_protocol_options();
  void set_has_grpc_protocol_options();

  inline bool has_hosts_specifier() const;
  void clear_hosts_specifier();
  inline void clear_has_hosts_specifier();

  inline bool has_protocol_options() const;
  void clear_protocol_options();
  inline void clear_has_protocol_options();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck > health_checks_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Duration* connect_timeout_;
  ::google::protobuf::UInt32Value* per_connection_buffer_limit_bytes_;
  ::google::protobuf::UInt32Value* max_requests_per_connection_;
  ::envoy::api::v2::CircuitBreakers* circuit_breakers_;
  ::envoy::api::v2::UpstreamTlsContext* tls_context_;
  ::google::protobuf::Duration* dns_refresh_rate_;
  ::envoy::api::v2::Cluster_OutlierDetection* outlier_detection_;
  int type_;
  int lb_policy_;
  union HostsSpecifierUnion {
    HostsSpecifierUnion() {}
    ::envoy::api::v2::ResolvedAddresses* static_hosts_;
    ::envoy::api::v2::UnresolvedAddress* dns_hosts_;
  } hosts_specifier_;
  union ProtocolOptionsUnion {
    ProtocolOptionsUnion() {}
    ::envoy::api::v2::TcpProtocolOptions* tcp_protocol_options_;
    ::envoy::api::v2::Http1ProtocolOptions* http_protocol_options_;
    ::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options_;
    ::envoy::api::v2::GrpcProtocolOptions* grpc_protocol_options_;
  } protocol_options_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct  protobuf_api_2fcds_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CircuitBreakers_Thresholds

// .envoy.api.v2.RoutingPriority priority = 1;
inline void CircuitBreakers_Thresholds::clear_priority() {
  priority_ = 0;
}
inline ::envoy::api::v2::RoutingPriority CircuitBreakers_Thresholds::priority() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.priority)
  return static_cast< ::envoy::api::v2::RoutingPriority >(priority_);
}
inline void CircuitBreakers_Thresholds::set_priority(::envoy::api::v2::RoutingPriority value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.CircuitBreakers.Thresholds.priority)
}

// .google.protobuf.UInt32Value max_connections = 2;
inline bool CircuitBreakers_Thresholds::has_max_connections() const {
  return this != internal_default_instance() && max_connections_ != NULL;
}
inline void CircuitBreakers_Thresholds::clear_max_connections() {
  if (GetArenaNoVirtual() == NULL && max_connections_ != NULL) delete max_connections_;
  max_connections_ = NULL;
}
inline const ::google::protobuf::UInt32Value& CircuitBreakers_Thresholds::max_connections() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.max_connections)
  return max_connections_ != NULL ? *max_connections_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::mutable_max_connections() {
  
  if (max_connections_ == NULL) {
    max_connections_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.Thresholds.max_connections)
  return max_connections_;
}
inline ::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::release_max_connections() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CircuitBreakers.Thresholds.max_connections)
  
  ::google::protobuf::UInt32Value* temp = max_connections_;
  max_connections_ = NULL;
  return temp;
}
inline void CircuitBreakers_Thresholds::set_allocated_max_connections(::google::protobuf::UInt32Value* max_connections) {
  delete max_connections_;
  if (max_connections != NULL && max_connections->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_connections = new ::google::protobuf::UInt32Value;
    new_max_connections->CopyFrom(*max_connections);
    max_connections = new_max_connections;
  }
  max_connections_ = max_connections;
  if (max_connections) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CircuitBreakers.Thresholds.max_connections)
}

// .google.protobuf.UInt32Value max_pending_requests = 3;
inline bool CircuitBreakers_Thresholds::has_max_pending_requests() const {
  return this != internal_default_instance() && max_pending_requests_ != NULL;
}
inline void CircuitBreakers_Thresholds::clear_max_pending_requests() {
  if (GetArenaNoVirtual() == NULL && max_pending_requests_ != NULL) delete max_pending_requests_;
  max_pending_requests_ = NULL;
}
inline const ::google::protobuf::UInt32Value& CircuitBreakers_Thresholds::max_pending_requests() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.max_pending_requests)
  return max_pending_requests_ != NULL ? *max_pending_requests_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::mutable_max_pending_requests() {
  
  if (max_pending_requests_ == NULL) {
    max_pending_requests_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.Thresholds.max_pending_requests)
  return max_pending_requests_;
}
inline ::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::release_max_pending_requests() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CircuitBreakers.Thresholds.max_pending_requests)
  
  ::google::protobuf::UInt32Value* temp = max_pending_requests_;
  max_pending_requests_ = NULL;
  return temp;
}
inline void CircuitBreakers_Thresholds::set_allocated_max_pending_requests(::google::protobuf::UInt32Value* max_pending_requests) {
  delete max_pending_requests_;
  if (max_pending_requests != NULL && max_pending_requests->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_pending_requests = new ::google::protobuf::UInt32Value;
    new_max_pending_requests->CopyFrom(*max_pending_requests);
    max_pending_requests = new_max_pending_requests;
  }
  max_pending_requests_ = max_pending_requests;
  if (max_pending_requests) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CircuitBreakers.Thresholds.max_pending_requests)
}

// .google.protobuf.UInt32Value max_requests = 4;
inline bool CircuitBreakers_Thresholds::has_max_requests() const {
  return this != internal_default_instance() && max_requests_ != NULL;
}
inline void CircuitBreakers_Thresholds::clear_max_requests() {
  if (GetArenaNoVirtual() == NULL && max_requests_ != NULL) delete max_requests_;
  max_requests_ = NULL;
}
inline const ::google::protobuf::UInt32Value& CircuitBreakers_Thresholds::max_requests() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.max_requests)
  return max_requests_ != NULL ? *max_requests_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::mutable_max_requests() {
  
  if (max_requests_ == NULL) {
    max_requests_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.Thresholds.max_requests)
  return max_requests_;
}
inline ::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::release_max_requests() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CircuitBreakers.Thresholds.max_requests)
  
  ::google::protobuf::UInt32Value* temp = max_requests_;
  max_requests_ = NULL;
  return temp;
}
inline void CircuitBreakers_Thresholds::set_allocated_max_requests(::google::protobuf::UInt32Value* max_requests) {
  delete max_requests_;
  if (max_requests != NULL && max_requests->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_requests = new ::google::protobuf::UInt32Value;
    new_max_requests->CopyFrom(*max_requests);
    max_requests = new_max_requests;
  }
  max_requests_ = max_requests;
  if (max_requests) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CircuitBreakers.Thresholds.max_requests)
}

// .google.protobuf.UInt32Value max_retries = 5;
inline bool CircuitBreakers_Thresholds::has_max_retries() const {
  return this != internal_default_instance() && max_retries_ != NULL;
}
inline void CircuitBreakers_Thresholds::clear_max_retries() {
  if (GetArenaNoVirtual() == NULL && max_retries_ != NULL) delete max_retries_;
  max_retries_ = NULL;
}
inline const ::google::protobuf::UInt32Value& CircuitBreakers_Thresholds::max_retries() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.max_retries)
  return max_retries_ != NULL ? *max_retries_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::mutable_max_retries() {
  
  if (max_retries_ == NULL) {
    max_retries_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.Thresholds.max_retries)
  return max_retries_;
}
inline ::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::release_max_retries() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CircuitBreakers.Thresholds.max_retries)
  
  ::google::protobuf::UInt32Value* temp = max_retries_;
  max_retries_ = NULL;
  return temp;
}
inline void CircuitBreakers_Thresholds::set_allocated_max_retries(::google::protobuf::UInt32Value* max_retries) {
  delete max_retries_;
  if (max_retries != NULL && max_retries->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_retries = new ::google::protobuf::UInt32Value;
    new_max_retries->CopyFrom(*max_retries);
    max_retries = new_max_retries;
  }
  max_retries_ = max_retries;
  if (max_retries) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CircuitBreakers.Thresholds.max_retries)
}

// -------------------------------------------------------------------

// CircuitBreakers

// repeated .envoy.api.v2.CircuitBreakers.Thresholds thresholds = 1;
inline int CircuitBreakers::thresholds_size() const {
  return thresholds_.size();
}
inline void CircuitBreakers::clear_thresholds() {
  thresholds_.Clear();
}
inline const ::envoy::api::v2::CircuitBreakers_Thresholds& CircuitBreakers::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.thresholds)
  return thresholds_.Get(index);
}
inline ::envoy::api::v2::CircuitBreakers_Thresholds* CircuitBreakers::mutable_thresholds(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.thresholds)
  return thresholds_.Mutable(index);
}
inline ::envoy::api::v2::CircuitBreakers_Thresholds* CircuitBreakers::add_thresholds() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.CircuitBreakers.thresholds)
  return thresholds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::CircuitBreakers_Thresholds >*
CircuitBreakers::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.CircuitBreakers.thresholds)
  return &thresholds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::CircuitBreakers_Thresholds >&
CircuitBreakers::thresholds() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.CircuitBreakers.thresholds)
  return thresholds_;
}

// -------------------------------------------------------------------

// TcpProtocolOptions

// -------------------------------------------------------------------

// Http1ProtocolOptions

// -------------------------------------------------------------------

// Http2ProtocolOptions

// bool disable_dynamic_table = 1;
inline void Http2ProtocolOptions::clear_disable_dynamic_table() {
  disable_dynamic_table_ = false;
}
inline bool Http2ProtocolOptions::disable_dynamic_table() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Http2ProtocolOptions.disable_dynamic_table)
  return disable_dynamic_table_;
}
inline void Http2ProtocolOptions::set_disable_dynamic_table(bool value) {
  
  disable_dynamic_table_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.Http2ProtocolOptions.disable_dynamic_table)
}

// .google.protobuf.UInt32Value per_stream_buffer_limit_bytes = 2;
inline bool Http2ProtocolOptions::has_per_stream_buffer_limit_bytes() const {
  return this != internal_default_instance() && per_stream_buffer_limit_bytes_ != NULL;
}
inline void Http2ProtocolOptions::clear_per_stream_buffer_limit_bytes() {
  if (GetArenaNoVirtual() == NULL && per_stream_buffer_limit_bytes_ != NULL) delete per_stream_buffer_limit_bytes_;
  per_stream_buffer_limit_bytes_ = NULL;
}
inline const ::google::protobuf::UInt32Value& Http2ProtocolOptions::per_stream_buffer_limit_bytes() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Http2ProtocolOptions.per_stream_buffer_limit_bytes)
  return per_stream_buffer_limit_bytes_ != NULL ? *per_stream_buffer_limit_bytes_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* Http2ProtocolOptions::mutable_per_stream_buffer_limit_bytes() {
  
  if (per_stream_buffer_limit_bytes_ == NULL) {
    per_stream_buffer_limit_bytes_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Http2ProtocolOptions.per_stream_buffer_limit_bytes)
  return per_stream_buffer_limit_bytes_;
}
inline ::google::protobuf::UInt32Value* Http2ProtocolOptions::release_per_stream_buffer_limit_bytes() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Http2ProtocolOptions.per_stream_buffer_limit_bytes)
  
  ::google::protobuf::UInt32Value* temp = per_stream_buffer_limit_bytes_;
  per_stream_buffer_limit_bytes_ = NULL;
  return temp;
}
inline void Http2ProtocolOptions::set_allocated_per_stream_buffer_limit_bytes(::google::protobuf::UInt32Value* per_stream_buffer_limit_bytes) {
  delete per_stream_buffer_limit_bytes_;
  if (per_stream_buffer_limit_bytes != NULL && per_stream_buffer_limit_bytes->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_per_stream_buffer_limit_bytes = new ::google::protobuf::UInt32Value;
    new_per_stream_buffer_limit_bytes->CopyFrom(*per_stream_buffer_limit_bytes);
    per_stream_buffer_limit_bytes = new_per_stream_buffer_limit_bytes;
  }
  per_stream_buffer_limit_bytes_ = per_stream_buffer_limit_bytes;
  if (per_stream_buffer_limit_bytes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Http2ProtocolOptions.per_stream_buffer_limit_bytes)
}

// .google.protobuf.UInt32Value max_concurrent_streams = 3;
inline bool Http2ProtocolOptions::has_max_concurrent_streams() const {
  return this != internal_default_instance() && max_concurrent_streams_ != NULL;
}
inline void Http2ProtocolOptions::clear_max_concurrent_streams() {
  if (GetArenaNoVirtual() == NULL && max_concurrent_streams_ != NULL) delete max_concurrent_streams_;
  max_concurrent_streams_ = NULL;
}
inline const ::google::protobuf::UInt32Value& Http2ProtocolOptions::max_concurrent_streams() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Http2ProtocolOptions.max_concurrent_streams)
  return max_concurrent_streams_ != NULL ? *max_concurrent_streams_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* Http2ProtocolOptions::mutable_max_concurrent_streams() {
  
  if (max_concurrent_streams_ == NULL) {
    max_concurrent_streams_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Http2ProtocolOptions.max_concurrent_streams)
  return max_concurrent_streams_;
}
inline ::google::protobuf::UInt32Value* Http2ProtocolOptions::release_max_concurrent_streams() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Http2ProtocolOptions.max_concurrent_streams)
  
  ::google::protobuf::UInt32Value* temp = max_concurrent_streams_;
  max_concurrent_streams_ = NULL;
  return temp;
}
inline void Http2ProtocolOptions::set_allocated_max_concurrent_streams(::google::protobuf::UInt32Value* max_concurrent_streams) {
  delete max_concurrent_streams_;
  if (max_concurrent_streams != NULL && max_concurrent_streams->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_concurrent_streams = new ::google::protobuf::UInt32Value;
    new_max_concurrent_streams->CopyFrom(*max_concurrent_streams);
    max_concurrent_streams = new_max_concurrent_streams;
  }
  max_concurrent_streams_ = max_concurrent_streams;
  if (max_concurrent_streams) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Http2ProtocolOptions.max_concurrent_streams)
}

// .google.protobuf.UInt32Value initial_window_size = 4;
inline bool Http2ProtocolOptions::has_initial_window_size() const {
  return this != internal_default_instance() && initial_window_size_ != NULL;
}
inline void Http2ProtocolOptions::clear_initial_window_size() {
  if (GetArenaNoVirtual() == NULL && initial_window_size_ != NULL) delete initial_window_size_;
  initial_window_size_ = NULL;
}
inline const ::google::protobuf::UInt32Value& Http2ProtocolOptions::initial_window_size() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Http2ProtocolOptions.initial_window_size)
  return initial_window_size_ != NULL ? *initial_window_size_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* Http2ProtocolOptions::mutable_initial_window_size() {
  
  if (initial_window_size_ == NULL) {
    initial_window_size_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Http2ProtocolOptions.initial_window_size)
  return initial_window_size_;
}
inline ::google::protobuf::UInt32Value* Http2ProtocolOptions::release_initial_window_size() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Http2ProtocolOptions.initial_window_size)
  
  ::google::protobuf::UInt32Value* temp = initial_window_size_;
  initial_window_size_ = NULL;
  return temp;
}
inline void Http2ProtocolOptions::set_allocated_initial_window_size(::google::protobuf::UInt32Value* initial_window_size) {
  delete initial_window_size_;
  if (initial_window_size != NULL && initial_window_size->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_initial_window_size = new ::google::protobuf::UInt32Value;
    new_initial_window_size->CopyFrom(*initial_window_size);
    initial_window_size = new_initial_window_size;
  }
  initial_window_size_ = initial_window_size;
  if (initial_window_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Http2ProtocolOptions.initial_window_size)
}

// -------------------------------------------------------------------

// GrpcProtocolOptions

// .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 1;
inline bool GrpcProtocolOptions::has_http2_protocol_options() const {
  return this != internal_default_instance() && http2_protocol_options_ != NULL;
}
inline void GrpcProtocolOptions::clear_http2_protocol_options() {
  if (GetArenaNoVirtual() == NULL && http2_protocol_options_ != NULL) delete http2_protocol_options_;
  http2_protocol_options_ = NULL;
}
inline const ::envoy::api::v2::Http2ProtocolOptions& GrpcProtocolOptions::http2_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.GrpcProtocolOptions.http2_protocol_options)
  return http2_protocol_options_ != NULL ? *http2_protocol_options_
                         : *::envoy::api::v2::Http2ProtocolOptions::internal_default_instance();
}
inline ::envoy::api::v2::Http2ProtocolOptions* GrpcProtocolOptions::mutable_http2_protocol_options() {
  
  if (http2_protocol_options_ == NULL) {
    http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.GrpcProtocolOptions.http2_protocol_options)
  return http2_protocol_options_;
}
inline ::envoy::api::v2::Http2ProtocolOptions* GrpcProtocolOptions::release_http2_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.GrpcProtocolOptions.http2_protocol_options)
  
  ::envoy::api::v2::Http2ProtocolOptions* temp = http2_protocol_options_;
  http2_protocol_options_ = NULL;
  return temp;
}
inline void GrpcProtocolOptions::set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options) {
  delete http2_protocol_options_;
  http2_protocol_options_ = http2_protocol_options;
  if (http2_protocol_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.GrpcProtocolOptions.http2_protocol_options)
}

// -------------------------------------------------------------------

// Cluster_OutlierDetection

// .google.protobuf.UInt32Value consecutive_5xx = 1;
inline bool Cluster_OutlierDetection::has_consecutive_5xx() const {
  return this != internal_default_instance() && consecutive_5xx_ != NULL;
}
inline void Cluster_OutlierDetection::clear_consecutive_5xx() {
  if (GetArenaNoVirtual() == NULL && consecutive_5xx_ != NULL) delete consecutive_5xx_;
  consecutive_5xx_ = NULL;
}
inline const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::consecutive_5xx() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.consecutive_5xx)
  return consecutive_5xx_ != NULL ? *consecutive_5xx_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_consecutive_5xx() {
  
  if (consecutive_5xx_ == NULL) {
    consecutive_5xx_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.consecutive_5xx)
  return consecutive_5xx_;
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_consecutive_5xx() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.consecutive_5xx)
  
  ::google::protobuf::UInt32Value* temp = consecutive_5xx_;
  consecutive_5xx_ = NULL;
  return temp;
}
inline void Cluster_OutlierDetection::set_allocated_consecutive_5xx(::google::protobuf::UInt32Value* consecutive_5xx) {
  delete consecutive_5xx_;
  if (consecutive_5xx != NULL && consecutive_5xx->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_consecutive_5xx = new ::google::protobuf::UInt32Value;
    new_consecutive_5xx->CopyFrom(*consecutive_5xx);
    consecutive_5xx = new_consecutive_5xx;
  }
  consecutive_5xx_ = consecutive_5xx;
  if (consecutive_5xx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.consecutive_5xx)
}

// .google.protobuf.Duration interval = 2;
inline bool Cluster_OutlierDetection::has_interval() const {
  return this != internal_default_instance() && interval_ != NULL;
}
inline void Cluster_OutlierDetection::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}
inline const ::google::protobuf::Duration& Cluster_OutlierDetection::interval() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.interval)
  return interval_ != NULL ? *interval_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* Cluster_OutlierDetection::mutable_interval() {
  
  if (interval_ == NULL) {
    interval_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.interval)
  return interval_;
}
inline ::google::protobuf::Duration* Cluster_OutlierDetection::release_interval() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.interval)
  
  ::google::protobuf::Duration* temp = interval_;
  interval_ = NULL;
  return temp;
}
inline void Cluster_OutlierDetection::set_allocated_interval(::google::protobuf::Duration* interval) {
  delete interval_;
  if (interval != NULL && interval->GetArena() != NULL) {
    ::google::protobuf::Duration* new_interval = new ::google::protobuf::Duration;
    new_interval->CopyFrom(*interval);
    interval = new_interval;
  }
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.interval)
}

// .google.protobuf.Duration base_ejection_time = 3;
inline bool Cluster_OutlierDetection::has_base_ejection_time() const {
  return this != internal_default_instance() && base_ejection_time_ != NULL;
}
inline void Cluster_OutlierDetection::clear_base_ejection_time() {
  if (GetArenaNoVirtual() == NULL && base_ejection_time_ != NULL) delete base_ejection_time_;
  base_ejection_time_ = NULL;
}
inline const ::google::protobuf::Duration& Cluster_OutlierDetection::base_ejection_time() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.base_ejection_time)
  return base_ejection_time_ != NULL ? *base_ejection_time_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* Cluster_OutlierDetection::mutable_base_ejection_time() {
  
  if (base_ejection_time_ == NULL) {
    base_ejection_time_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.base_ejection_time)
  return base_ejection_time_;
}
inline ::google::protobuf::Duration* Cluster_OutlierDetection::release_base_ejection_time() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.base_ejection_time)
  
  ::google::protobuf::Duration* temp = base_ejection_time_;
  base_ejection_time_ = NULL;
  return temp;
}
inline void Cluster_OutlierDetection::set_allocated_base_ejection_time(::google::protobuf::Duration* base_ejection_time) {
  delete base_ejection_time_;
  if (base_ejection_time != NULL && base_ejection_time->GetArena() != NULL) {
    ::google::protobuf::Duration* new_base_ejection_time = new ::google::protobuf::Duration;
    new_base_ejection_time->CopyFrom(*base_ejection_time);
    base_ejection_time = new_base_ejection_time;
  }
  base_ejection_time_ = base_ejection_time;
  if (base_ejection_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.base_ejection_time)
}

// .google.protobuf.UInt32Value max_ejection_percent = 4;
inline bool Cluster_OutlierDetection::has_max_ejection_percent() const {
  return this != internal_default_instance() && max_ejection_percent_ != NULL;
}
inline void Cluster_OutlierDetection::clear_max_ejection_percent() {
  if (GetArenaNoVirtual() == NULL && max_ejection_percent_ != NULL) delete max_ejection_percent_;
  max_ejection_percent_ = NULL;
}
inline const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::max_ejection_percent() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.max_ejection_percent)
  return max_ejection_percent_ != NULL ? *max_ejection_percent_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_max_ejection_percent() {
  
  if (max_ejection_percent_ == NULL) {
    max_ejection_percent_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.max_ejection_percent)
  return max_ejection_percent_;
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_max_ejection_percent() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.max_ejection_percent)
  
  ::google::protobuf::UInt32Value* temp = max_ejection_percent_;
  max_ejection_percent_ = NULL;
  return temp;
}
inline void Cluster_OutlierDetection::set_allocated_max_ejection_percent(::google::protobuf::UInt32Value* max_ejection_percent) {
  delete max_ejection_percent_;
  if (max_ejection_percent != NULL && max_ejection_percent->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_ejection_percent = new ::google::protobuf::UInt32Value;
    new_max_ejection_percent->CopyFrom(*max_ejection_percent);
    max_ejection_percent = new_max_ejection_percent;
  }
  max_ejection_percent_ = max_ejection_percent;
  if (max_ejection_percent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.max_ejection_percent)
}

// .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;
inline bool Cluster_OutlierDetection::has_enforcing_consecutive_5xx() const {
  return this != internal_default_instance() && enforcing_consecutive_5xx_ != NULL;
}
inline void Cluster_OutlierDetection::clear_enforcing_consecutive_5xx() {
  if (GetArenaNoVirtual() == NULL && enforcing_consecutive_5xx_ != NULL) delete enforcing_consecutive_5xx_;
  enforcing_consecutive_5xx_ = NULL;
}
inline const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::enforcing_consecutive_5xx() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.enforcing_consecutive_5xx)
  return enforcing_consecutive_5xx_ != NULL ? *enforcing_consecutive_5xx_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_enforcing_consecutive_5xx() {
  
  if (enforcing_consecutive_5xx_ == NULL) {
    enforcing_consecutive_5xx_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.enforcing_consecutive_5xx)
  return enforcing_consecutive_5xx_;
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_enforcing_consecutive_5xx() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.enforcing_consecutive_5xx)
  
  ::google::protobuf::UInt32Value* temp = enforcing_consecutive_5xx_;
  enforcing_consecutive_5xx_ = NULL;
  return temp;
}
inline void Cluster_OutlierDetection::set_allocated_enforcing_consecutive_5xx(::google::protobuf::UInt32Value* enforcing_consecutive_5xx) {
  delete enforcing_consecutive_5xx_;
  if (enforcing_consecutive_5xx != NULL && enforcing_consecutive_5xx->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_enforcing_consecutive_5xx = new ::google::protobuf::UInt32Value;
    new_enforcing_consecutive_5xx->CopyFrom(*enforcing_consecutive_5xx);
    enforcing_consecutive_5xx = new_enforcing_consecutive_5xx;
  }
  enforcing_consecutive_5xx_ = enforcing_consecutive_5xx;
  if (enforcing_consecutive_5xx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.enforcing_consecutive_5xx)
}

// .google.protobuf.UInt32Value enforcing_success_rate = 6;
inline bool Cluster_OutlierDetection::has_enforcing_success_rate() const {
  return this != internal_default_instance() && enforcing_success_rate_ != NULL;
}
inline void Cluster_OutlierDetection::clear_enforcing_success_rate() {
  if (GetArenaNoVirtual() == NULL && enforcing_success_rate_ != NULL) delete enforcing_success_rate_;
  enforcing_success_rate_ = NULL;
}
inline const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::enforcing_success_rate() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.enforcing_success_rate)
  return enforcing_success_rate_ != NULL ? *enforcing_success_rate_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_enforcing_success_rate() {
  
  if (enforcing_success_rate_ == NULL) {
    enforcing_success_rate_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.enforcing_success_rate)
  return enforcing_success_rate_;
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_enforcing_success_rate() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.enforcing_success_rate)
  
  ::google::protobuf::UInt32Value* temp = enforcing_success_rate_;
  enforcing_success_rate_ = NULL;
  return temp;
}
inline void Cluster_OutlierDetection::set_allocated_enforcing_success_rate(::google::protobuf::UInt32Value* enforcing_success_rate) {
  delete enforcing_success_rate_;
  if (enforcing_success_rate != NULL && enforcing_success_rate->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_enforcing_success_rate = new ::google::protobuf::UInt32Value;
    new_enforcing_success_rate->CopyFrom(*enforcing_success_rate);
    enforcing_success_rate = new_enforcing_success_rate;
  }
  enforcing_success_rate_ = enforcing_success_rate;
  if (enforcing_success_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.enforcing_success_rate)
}

// .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;
inline bool Cluster_OutlierDetection::has_success_rate_minimum_hosts() const {
  return this != internal_default_instance() && success_rate_minimum_hosts_ != NULL;
}
inline void Cluster_OutlierDetection::clear_success_rate_minimum_hosts() {
  if (GetArenaNoVirtual() == NULL && success_rate_minimum_hosts_ != NULL) delete success_rate_minimum_hosts_;
  success_rate_minimum_hosts_ = NULL;
}
inline const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::success_rate_minimum_hosts() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.success_rate_minimum_hosts)
  return success_rate_minimum_hosts_ != NULL ? *success_rate_minimum_hosts_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_success_rate_minimum_hosts() {
  
  if (success_rate_minimum_hosts_ == NULL) {
    success_rate_minimum_hosts_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.success_rate_minimum_hosts)
  return success_rate_minimum_hosts_;
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_success_rate_minimum_hosts() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.success_rate_minimum_hosts)
  
  ::google::protobuf::UInt32Value* temp = success_rate_minimum_hosts_;
  success_rate_minimum_hosts_ = NULL;
  return temp;
}
inline void Cluster_OutlierDetection::set_allocated_success_rate_minimum_hosts(::google::protobuf::UInt32Value* success_rate_minimum_hosts) {
  delete success_rate_minimum_hosts_;
  if (success_rate_minimum_hosts != NULL && success_rate_minimum_hosts->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_success_rate_minimum_hosts = new ::google::protobuf::UInt32Value;
    new_success_rate_minimum_hosts->CopyFrom(*success_rate_minimum_hosts);
    success_rate_minimum_hosts = new_success_rate_minimum_hosts;
  }
  success_rate_minimum_hosts_ = success_rate_minimum_hosts;
  if (success_rate_minimum_hosts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.success_rate_minimum_hosts)
}

// .google.protobuf.UInt32Value success_rate_request_volume = 8;
inline bool Cluster_OutlierDetection::has_success_rate_request_volume() const {
  return this != internal_default_instance() && success_rate_request_volume_ != NULL;
}
inline void Cluster_OutlierDetection::clear_success_rate_request_volume() {
  if (GetArenaNoVirtual() == NULL && success_rate_request_volume_ != NULL) delete success_rate_request_volume_;
  success_rate_request_volume_ = NULL;
}
inline const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::success_rate_request_volume() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.success_rate_request_volume)
  return success_rate_request_volume_ != NULL ? *success_rate_request_volume_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_success_rate_request_volume() {
  
  if (success_rate_request_volume_ == NULL) {
    success_rate_request_volume_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.success_rate_request_volume)
  return success_rate_request_volume_;
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_success_rate_request_volume() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.success_rate_request_volume)
  
  ::google::protobuf::UInt32Value* temp = success_rate_request_volume_;
  success_rate_request_volume_ = NULL;
  return temp;
}
inline void Cluster_OutlierDetection::set_allocated_success_rate_request_volume(::google::protobuf::UInt32Value* success_rate_request_volume) {
  delete success_rate_request_volume_;
  if (success_rate_request_volume != NULL && success_rate_request_volume->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_success_rate_request_volume = new ::google::protobuf::UInt32Value;
    new_success_rate_request_volume->CopyFrom(*success_rate_request_volume);
    success_rate_request_volume = new_success_rate_request_volume;
  }
  success_rate_request_volume_ = success_rate_request_volume;
  if (success_rate_request_volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.success_rate_request_volume)
}

// .google.protobuf.UInt32Value success_rate_stdev_factor = 9;
inline bool Cluster_OutlierDetection::has_success_rate_stdev_factor() const {
  return this != internal_default_instance() && success_rate_stdev_factor_ != NULL;
}
inline void Cluster_OutlierDetection::clear_success_rate_stdev_factor() {
  if (GetArenaNoVirtual() == NULL && success_rate_stdev_factor_ != NULL) delete success_rate_stdev_factor_;
  success_rate_stdev_factor_ = NULL;
}
inline const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::success_rate_stdev_factor() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.success_rate_stdev_factor)
  return success_rate_stdev_factor_ != NULL ? *success_rate_stdev_factor_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_success_rate_stdev_factor() {
  
  if (success_rate_stdev_factor_ == NULL) {
    success_rate_stdev_factor_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.success_rate_stdev_factor)
  return success_rate_stdev_factor_;
}
inline ::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_success_rate_stdev_factor() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.success_rate_stdev_factor)
  
  ::google::protobuf::UInt32Value* temp = success_rate_stdev_factor_;
  success_rate_stdev_factor_ = NULL;
  return temp;
}
inline void Cluster_OutlierDetection::set_allocated_success_rate_stdev_factor(::google::protobuf::UInt32Value* success_rate_stdev_factor) {
  delete success_rate_stdev_factor_;
  if (success_rate_stdev_factor != NULL && success_rate_stdev_factor->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_success_rate_stdev_factor = new ::google::protobuf::UInt32Value;
    new_success_rate_stdev_factor->CopyFrom(*success_rate_stdev_factor);
    success_rate_stdev_factor = new_success_rate_stdev_factor;
  }
  success_rate_stdev_factor_ = success_rate_stdev_factor;
  if (success_rate_stdev_factor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.success_rate_stdev_factor)
}

// -------------------------------------------------------------------

// Cluster

// string name = 1;
inline void Cluster::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.name)
  return name_.GetNoArena();
}
inline void Cluster::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Cluster.name)
}
#if LANG_CXX11
inline void Cluster::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Cluster.name)
}
#endif
inline void Cluster::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Cluster.name)
}
inline void Cluster::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Cluster.name)
}
inline ::std::string* Cluster::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.name)
}

// .envoy.api.v2.Cluster.DiscoveryType type = 2;
inline void Cluster::clear_type() {
  type_ = 0;
}
inline ::envoy::api::v2::Cluster_DiscoveryType Cluster::type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.type)
  return static_cast< ::envoy::api::v2::Cluster_DiscoveryType >(type_);
}
inline void Cluster::set_type(::envoy::api::v2::Cluster_DiscoveryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.Cluster.type)
}

// .google.protobuf.Duration connect_timeout = 3;
inline bool Cluster::has_connect_timeout() const {
  return this != internal_default_instance() && connect_timeout_ != NULL;
}
inline void Cluster::clear_connect_timeout() {
  if (GetArenaNoVirtual() == NULL && connect_timeout_ != NULL) delete connect_timeout_;
  connect_timeout_ = NULL;
}
inline const ::google::protobuf::Duration& Cluster::connect_timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.connect_timeout)
  return connect_timeout_ != NULL ? *connect_timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* Cluster::mutable_connect_timeout() {
  
  if (connect_timeout_ == NULL) {
    connect_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.connect_timeout)
  return connect_timeout_;
}
inline ::google::protobuf::Duration* Cluster::release_connect_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.connect_timeout)
  
  ::google::protobuf::Duration* temp = connect_timeout_;
  connect_timeout_ = NULL;
  return temp;
}
inline void Cluster::set_allocated_connect_timeout(::google::protobuf::Duration* connect_timeout) {
  delete connect_timeout_;
  if (connect_timeout != NULL && connect_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_connect_timeout = new ::google::protobuf::Duration;
    new_connect_timeout->CopyFrom(*connect_timeout);
    connect_timeout = new_connect_timeout;
  }
  connect_timeout_ = connect_timeout;
  if (connect_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.connect_timeout)
}

// .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;
inline bool Cluster::has_per_connection_buffer_limit_bytes() const {
  return this != internal_default_instance() && per_connection_buffer_limit_bytes_ != NULL;
}
inline void Cluster::clear_per_connection_buffer_limit_bytes() {
  if (GetArenaNoVirtual() == NULL && per_connection_buffer_limit_bytes_ != NULL) delete per_connection_buffer_limit_bytes_;
  per_connection_buffer_limit_bytes_ = NULL;
}
inline const ::google::protobuf::UInt32Value& Cluster::per_connection_buffer_limit_bytes() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.per_connection_buffer_limit_bytes)
  return per_connection_buffer_limit_bytes_ != NULL ? *per_connection_buffer_limit_bytes_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* Cluster::mutable_per_connection_buffer_limit_bytes() {
  
  if (per_connection_buffer_limit_bytes_ == NULL) {
    per_connection_buffer_limit_bytes_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.per_connection_buffer_limit_bytes)
  return per_connection_buffer_limit_bytes_;
}
inline ::google::protobuf::UInt32Value* Cluster::release_per_connection_buffer_limit_bytes() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.per_connection_buffer_limit_bytes)
  
  ::google::protobuf::UInt32Value* temp = per_connection_buffer_limit_bytes_;
  per_connection_buffer_limit_bytes_ = NULL;
  return temp;
}
inline void Cluster::set_allocated_per_connection_buffer_limit_bytes(::google::protobuf::UInt32Value* per_connection_buffer_limit_bytes) {
  delete per_connection_buffer_limit_bytes_;
  if (per_connection_buffer_limit_bytes != NULL && per_connection_buffer_limit_bytes->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_per_connection_buffer_limit_bytes = new ::google::protobuf::UInt32Value;
    new_per_connection_buffer_limit_bytes->CopyFrom(*per_connection_buffer_limit_bytes);
    per_connection_buffer_limit_bytes = new_per_connection_buffer_limit_bytes;
  }
  per_connection_buffer_limit_bytes_ = per_connection_buffer_limit_bytes;
  if (per_connection_buffer_limit_bytes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.per_connection_buffer_limit_bytes)
}

// .envoy.api.v2.Cluster.LbPolicy lb_policy = 5;
inline void Cluster::clear_lb_policy() {
  lb_policy_ = 0;
}
inline ::envoy::api::v2::Cluster_LbPolicy Cluster::lb_policy() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.lb_policy)
  return static_cast< ::envoy::api::v2::Cluster_LbPolicy >(lb_policy_);
}
inline void Cluster::set_lb_policy(::envoy::api::v2::Cluster_LbPolicy value) {
  
  lb_policy_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.Cluster.lb_policy)
}

// .envoy.api.v2.ResolvedAddresses static_hosts = 6;
inline bool Cluster::has_static_hosts() const {
  return hosts_specifier_case() == kStaticHosts;
}
inline void Cluster::set_has_static_hosts() {
  _oneof_case_[0] = kStaticHosts;
}
inline void Cluster::clear_static_hosts() {
  if (has_static_hosts()) {
    delete hosts_specifier_.static_hosts_;
    clear_has_hosts_specifier();
  }
}
inline  const ::envoy::api::v2::ResolvedAddresses& Cluster::static_hosts() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.static_hosts)
  return has_static_hosts()
      ? *hosts_specifier_.static_hosts_
      : ::envoy::api::v2::ResolvedAddresses::default_instance();
}
inline ::envoy::api::v2::ResolvedAddresses* Cluster::mutable_static_hosts() {
  if (!has_static_hosts()) {
    clear_hosts_specifier();
    set_has_static_hosts();
    hosts_specifier_.static_hosts_ = new ::envoy::api::v2::ResolvedAddresses;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.static_hosts)
  return hosts_specifier_.static_hosts_;
}
inline ::envoy::api::v2::ResolvedAddresses* Cluster::release_static_hosts() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.static_hosts)
  if (has_static_hosts()) {
    clear_has_hosts_specifier();
    ::envoy::api::v2::ResolvedAddresses* temp = hosts_specifier_.static_hosts_;
    hosts_specifier_.static_hosts_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Cluster::set_allocated_static_hosts(::envoy::api::v2::ResolvedAddresses* static_hosts) {
  clear_hosts_specifier();
  if (static_hosts) {
    set_has_static_hosts();
    hosts_specifier_.static_hosts_ = static_hosts;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.static_hosts)
}

// .envoy.api.v2.UnresolvedAddress dns_hosts = 7;
inline bool Cluster::has_dns_hosts() const {
  return hosts_specifier_case() == kDnsHosts;
}
inline void Cluster::set_has_dns_hosts() {
  _oneof_case_[0] = kDnsHosts;
}
inline void Cluster::clear_dns_hosts() {
  if (has_dns_hosts()) {
    delete hosts_specifier_.dns_hosts_;
    clear_has_hosts_specifier();
  }
}
inline  const ::envoy::api::v2::UnresolvedAddress& Cluster::dns_hosts() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.dns_hosts)
  return has_dns_hosts()
      ? *hosts_specifier_.dns_hosts_
      : ::envoy::api::v2::UnresolvedAddress::default_instance();
}
inline ::envoy::api::v2::UnresolvedAddress* Cluster::mutable_dns_hosts() {
  if (!has_dns_hosts()) {
    clear_hosts_specifier();
    set_has_dns_hosts();
    hosts_specifier_.dns_hosts_ = new ::envoy::api::v2::UnresolvedAddress;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.dns_hosts)
  return hosts_specifier_.dns_hosts_;
}
inline ::envoy::api::v2::UnresolvedAddress* Cluster::release_dns_hosts() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.dns_hosts)
  if (has_dns_hosts()) {
    clear_has_hosts_specifier();
    ::envoy::api::v2::UnresolvedAddress* temp = hosts_specifier_.dns_hosts_;
    hosts_specifier_.dns_hosts_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Cluster::set_allocated_dns_hosts(::envoy::api::v2::UnresolvedAddress* dns_hosts) {
  clear_hosts_specifier();
  if (dns_hosts) {
    set_has_dns_hosts();
    hosts_specifier_.dns_hosts_ = dns_hosts;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.dns_hosts)
}

// repeated .envoy.api.v2.HealthCheck health_checks = 8;
inline int Cluster::health_checks_size() const {
  return health_checks_.size();
}
inline void Cluster::clear_health_checks() {
  health_checks_.Clear();
}
inline const ::envoy::api::v2::HealthCheck& Cluster::health_checks(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.health_checks)
  return health_checks_.Get(index);
}
inline ::envoy::api::v2::HealthCheck* Cluster::mutable_health_checks(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.health_checks)
  return health_checks_.Mutable(index);
}
inline ::envoy::api::v2::HealthCheck* Cluster::add_health_checks() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.Cluster.health_checks)
  return health_checks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck >*
Cluster::mutable_health_checks() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.Cluster.health_checks)
  return &health_checks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck >&
Cluster::health_checks() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.Cluster.health_checks)
  return health_checks_;
}

// .google.protobuf.UInt32Value max_requests_per_connection = 9;
inline bool Cluster::has_max_requests_per_connection() const {
  return this != internal_default_instance() && max_requests_per_connection_ != NULL;
}
inline void Cluster::clear_max_requests_per_connection() {
  if (GetArenaNoVirtual() == NULL && max_requests_per_connection_ != NULL) delete max_requests_per_connection_;
  max_requests_per_connection_ = NULL;
}
inline const ::google::protobuf::UInt32Value& Cluster::max_requests_per_connection() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.max_requests_per_connection)
  return max_requests_per_connection_ != NULL ? *max_requests_per_connection_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* Cluster::mutable_max_requests_per_connection() {
  
  if (max_requests_per_connection_ == NULL) {
    max_requests_per_connection_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.max_requests_per_connection)
  return max_requests_per_connection_;
}
inline ::google::protobuf::UInt32Value* Cluster::release_max_requests_per_connection() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.max_requests_per_connection)
  
  ::google::protobuf::UInt32Value* temp = max_requests_per_connection_;
  max_requests_per_connection_ = NULL;
  return temp;
}
inline void Cluster::set_allocated_max_requests_per_connection(::google::protobuf::UInt32Value* max_requests_per_connection) {
  delete max_requests_per_connection_;
  if (max_requests_per_connection != NULL && max_requests_per_connection->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_requests_per_connection = new ::google::protobuf::UInt32Value;
    new_max_requests_per_connection->CopyFrom(*max_requests_per_connection);
    max_requests_per_connection = new_max_requests_per_connection;
  }
  max_requests_per_connection_ = max_requests_per_connection;
  if (max_requests_per_connection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.max_requests_per_connection)
}

// .envoy.api.v2.CircuitBreakers circuit_breakers = 10;
inline bool Cluster::has_circuit_breakers() const {
  return this != internal_default_instance() && circuit_breakers_ != NULL;
}
inline void Cluster::clear_circuit_breakers() {
  if (GetArenaNoVirtual() == NULL && circuit_breakers_ != NULL) delete circuit_breakers_;
  circuit_breakers_ = NULL;
}
inline const ::envoy::api::v2::CircuitBreakers& Cluster::circuit_breakers() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.circuit_breakers)
  return circuit_breakers_ != NULL ? *circuit_breakers_
                         : *::envoy::api::v2::CircuitBreakers::internal_default_instance();
}
inline ::envoy::api::v2::CircuitBreakers* Cluster::mutable_circuit_breakers() {
  
  if (circuit_breakers_ == NULL) {
    circuit_breakers_ = new ::envoy::api::v2::CircuitBreakers;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.circuit_breakers)
  return circuit_breakers_;
}
inline ::envoy::api::v2::CircuitBreakers* Cluster::release_circuit_breakers() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.circuit_breakers)
  
  ::envoy::api::v2::CircuitBreakers* temp = circuit_breakers_;
  circuit_breakers_ = NULL;
  return temp;
}
inline void Cluster::set_allocated_circuit_breakers(::envoy::api::v2::CircuitBreakers* circuit_breakers) {
  delete circuit_breakers_;
  circuit_breakers_ = circuit_breakers;
  if (circuit_breakers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.circuit_breakers)
}

// .envoy.api.v2.UpstreamTlsContext tls_context = 11;
inline bool Cluster::has_tls_context() const {
  return this != internal_default_instance() && tls_context_ != NULL;
}
inline void Cluster::clear_tls_context() {
  if (GetArenaNoVirtual() == NULL && tls_context_ != NULL) delete tls_context_;
  tls_context_ = NULL;
}
inline const ::envoy::api::v2::UpstreamTlsContext& Cluster::tls_context() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.tls_context)
  return tls_context_ != NULL ? *tls_context_
                         : *::envoy::api::v2::UpstreamTlsContext::internal_default_instance();
}
inline ::envoy::api::v2::UpstreamTlsContext* Cluster::mutable_tls_context() {
  
  if (tls_context_ == NULL) {
    tls_context_ = new ::envoy::api::v2::UpstreamTlsContext;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.tls_context)
  return tls_context_;
}
inline ::envoy::api::v2::UpstreamTlsContext* Cluster::release_tls_context() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.tls_context)
  
  ::envoy::api::v2::UpstreamTlsContext* temp = tls_context_;
  tls_context_ = NULL;
  return temp;
}
inline void Cluster::set_allocated_tls_context(::envoy::api::v2::UpstreamTlsContext* tls_context) {
  delete tls_context_;
  tls_context_ = tls_context;
  if (tls_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.tls_context)
}

// .envoy.api.v2.TcpProtocolOptions tcp_protocol_options = 12;
inline bool Cluster::has_tcp_protocol_options() const {
  return protocol_options_case() == kTcpProtocolOptions;
}
inline void Cluster::set_has_tcp_protocol_options() {
  _oneof_case_[1] = kTcpProtocolOptions;
}
inline void Cluster::clear_tcp_protocol_options() {
  if (has_tcp_protocol_options()) {
    delete protocol_options_.tcp_protocol_options_;
    clear_has_protocol_options();
  }
}
inline  const ::envoy::api::v2::TcpProtocolOptions& Cluster::tcp_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.tcp_protocol_options)
  return has_tcp_protocol_options()
      ? *protocol_options_.tcp_protocol_options_
      : ::envoy::api::v2::TcpProtocolOptions::default_instance();
}
inline ::envoy::api::v2::TcpProtocolOptions* Cluster::mutable_tcp_protocol_options() {
  if (!has_tcp_protocol_options()) {
    clear_protocol_options();
    set_has_tcp_protocol_options();
    protocol_options_.tcp_protocol_options_ = new ::envoy::api::v2::TcpProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.tcp_protocol_options)
  return protocol_options_.tcp_protocol_options_;
}
inline ::envoy::api::v2::TcpProtocolOptions* Cluster::release_tcp_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.tcp_protocol_options)
  if (has_tcp_protocol_options()) {
    clear_has_protocol_options();
    ::envoy::api::v2::TcpProtocolOptions* temp = protocol_options_.tcp_protocol_options_;
    protocol_options_.tcp_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Cluster::set_allocated_tcp_protocol_options(::envoy::api::v2::TcpProtocolOptions* tcp_protocol_options) {
  clear_protocol_options();
  if (tcp_protocol_options) {
    set_has_tcp_protocol_options();
    protocol_options_.tcp_protocol_options_ = tcp_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.tcp_protocol_options)
}

// .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 13;
inline bool Cluster::has_http_protocol_options() const {
  return protocol_options_case() == kHttpProtocolOptions;
}
inline void Cluster::set_has_http_protocol_options() {
  _oneof_case_[1] = kHttpProtocolOptions;
}
inline void Cluster::clear_http_protocol_options() {
  if (has_http_protocol_options()) {
    delete protocol_options_.http_protocol_options_;
    clear_has_protocol_options();
  }
}
inline  const ::envoy::api::v2::Http1ProtocolOptions& Cluster::http_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.http_protocol_options)
  return has_http_protocol_options()
      ? *protocol_options_.http_protocol_options_
      : ::envoy::api::v2::Http1ProtocolOptions::default_instance();
}
inline ::envoy::api::v2::Http1ProtocolOptions* Cluster::mutable_http_protocol_options() {
  if (!has_http_protocol_options()) {
    clear_protocol_options();
    set_has_http_protocol_options();
    protocol_options_.http_protocol_options_ = new ::envoy::api::v2::Http1ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.http_protocol_options)
  return protocol_options_.http_protocol_options_;
}
inline ::envoy::api::v2::Http1ProtocolOptions* Cluster::release_http_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.http_protocol_options)
  if (has_http_protocol_options()) {
    clear_has_protocol_options();
    ::envoy::api::v2::Http1ProtocolOptions* temp = protocol_options_.http_protocol_options_;
    protocol_options_.http_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Cluster::set_allocated_http_protocol_options(::envoy::api::v2::Http1ProtocolOptions* http_protocol_options) {
  clear_protocol_options();
  if (http_protocol_options) {
    set_has_http_protocol_options();
    protocol_options_.http_protocol_options_ = http_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.http_protocol_options)
}

// .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 14;
inline bool Cluster::has_http2_protocol_options() const {
  return protocol_options_case() == kHttp2ProtocolOptions;
}
inline void Cluster::set_has_http2_protocol_options() {
  _oneof_case_[1] = kHttp2ProtocolOptions;
}
inline void Cluster::clear_http2_protocol_options() {
  if (has_http2_protocol_options()) {
    delete protocol_options_.http2_protocol_options_;
    clear_has_protocol_options();
  }
}
inline  const ::envoy::api::v2::Http2ProtocolOptions& Cluster::http2_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.http2_protocol_options)
  return has_http2_protocol_options()
      ? *protocol_options_.http2_protocol_options_
      : ::envoy::api::v2::Http2ProtocolOptions::default_instance();
}
inline ::envoy::api::v2::Http2ProtocolOptions* Cluster::mutable_http2_protocol_options() {
  if (!has_http2_protocol_options()) {
    clear_protocol_options();
    set_has_http2_protocol_options();
    protocol_options_.http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.http2_protocol_options)
  return protocol_options_.http2_protocol_options_;
}
inline ::envoy::api::v2::Http2ProtocolOptions* Cluster::release_http2_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.http2_protocol_options)
  if (has_http2_protocol_options()) {
    clear_has_protocol_options();
    ::envoy::api::v2::Http2ProtocolOptions* temp = protocol_options_.http2_protocol_options_;
    protocol_options_.http2_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Cluster::set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options) {
  clear_protocol_options();
  if (http2_protocol_options) {
    set_has_http2_protocol_options();
    protocol_options_.http2_protocol_options_ = http2_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.http2_protocol_options)
}

// .envoy.api.v2.GrpcProtocolOptions grpc_protocol_options = 15;
inline bool Cluster::has_grpc_protocol_options() const {
  return protocol_options_case() == kGrpcProtocolOptions;
}
inline void Cluster::set_has_grpc_protocol_options() {
  _oneof_case_[1] = kGrpcProtocolOptions;
}
inline void Cluster::clear_grpc_protocol_options() {
  if (has_grpc_protocol_options()) {
    delete protocol_options_.grpc_protocol_options_;
    clear_has_protocol_options();
  }
}
inline  const ::envoy::api::v2::GrpcProtocolOptions& Cluster::grpc_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.grpc_protocol_options)
  return has_grpc_protocol_options()
      ? *protocol_options_.grpc_protocol_options_
      : ::envoy::api::v2::GrpcProtocolOptions::default_instance();
}
inline ::envoy::api::v2::GrpcProtocolOptions* Cluster::mutable_grpc_protocol_options() {
  if (!has_grpc_protocol_options()) {
    clear_protocol_options();
    set_has_grpc_protocol_options();
    protocol_options_.grpc_protocol_options_ = new ::envoy::api::v2::GrpcProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.grpc_protocol_options)
  return protocol_options_.grpc_protocol_options_;
}
inline ::envoy::api::v2::GrpcProtocolOptions* Cluster::release_grpc_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.grpc_protocol_options)
  if (has_grpc_protocol_options()) {
    clear_has_protocol_options();
    ::envoy::api::v2::GrpcProtocolOptions* temp = protocol_options_.grpc_protocol_options_;
    protocol_options_.grpc_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Cluster::set_allocated_grpc_protocol_options(::envoy::api::v2::GrpcProtocolOptions* grpc_protocol_options) {
  clear_protocol_options();
  if (grpc_protocol_options) {
    set_has_grpc_protocol_options();
    protocol_options_.grpc_protocol_options_ = grpc_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.grpc_protocol_options)
}

// .google.protobuf.Duration dns_refresh_rate = 16;
inline bool Cluster::has_dns_refresh_rate() const {
  return this != internal_default_instance() && dns_refresh_rate_ != NULL;
}
inline void Cluster::clear_dns_refresh_rate() {
  if (GetArenaNoVirtual() == NULL && dns_refresh_rate_ != NULL) delete dns_refresh_rate_;
  dns_refresh_rate_ = NULL;
}
inline const ::google::protobuf::Duration& Cluster::dns_refresh_rate() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.dns_refresh_rate)
  return dns_refresh_rate_ != NULL ? *dns_refresh_rate_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* Cluster::mutable_dns_refresh_rate() {
  
  if (dns_refresh_rate_ == NULL) {
    dns_refresh_rate_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.dns_refresh_rate)
  return dns_refresh_rate_;
}
inline ::google::protobuf::Duration* Cluster::release_dns_refresh_rate() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.dns_refresh_rate)
  
  ::google::protobuf::Duration* temp = dns_refresh_rate_;
  dns_refresh_rate_ = NULL;
  return temp;
}
inline void Cluster::set_allocated_dns_refresh_rate(::google::protobuf::Duration* dns_refresh_rate) {
  delete dns_refresh_rate_;
  if (dns_refresh_rate != NULL && dns_refresh_rate->GetArena() != NULL) {
    ::google::protobuf::Duration* new_dns_refresh_rate = new ::google::protobuf::Duration;
    new_dns_refresh_rate->CopyFrom(*dns_refresh_rate);
    dns_refresh_rate = new_dns_refresh_rate;
  }
  dns_refresh_rate_ = dns_refresh_rate;
  if (dns_refresh_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.dns_refresh_rate)
}

// .envoy.api.v2.Cluster.OutlierDetection outlier_detection = 17;
inline bool Cluster::has_outlier_detection() const {
  return this != internal_default_instance() && outlier_detection_ != NULL;
}
inline void Cluster::clear_outlier_detection() {
  if (GetArenaNoVirtual() == NULL && outlier_detection_ != NULL) delete outlier_detection_;
  outlier_detection_ = NULL;
}
inline const ::envoy::api::v2::Cluster_OutlierDetection& Cluster::outlier_detection() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.outlier_detection)
  return outlier_detection_ != NULL ? *outlier_detection_
                         : *::envoy::api::v2::Cluster_OutlierDetection::internal_default_instance();
}
inline ::envoy::api::v2::Cluster_OutlierDetection* Cluster::mutable_outlier_detection() {
  
  if (outlier_detection_ == NULL) {
    outlier_detection_ = new ::envoy::api::v2::Cluster_OutlierDetection;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.outlier_detection)
  return outlier_detection_;
}
inline ::envoy::api::v2::Cluster_OutlierDetection* Cluster::release_outlier_detection() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.outlier_detection)
  
  ::envoy::api::v2::Cluster_OutlierDetection* temp = outlier_detection_;
  outlier_detection_ = NULL;
  return temp;
}
inline void Cluster::set_allocated_outlier_detection(::envoy::api::v2::Cluster_OutlierDetection* outlier_detection) {
  delete outlier_detection_;
  outlier_detection_ = outlier_detection;
  if (outlier_detection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.outlier_detection)
}

inline bool Cluster::has_hosts_specifier() const {
  return hosts_specifier_case() != HOSTS_SPECIFIER_NOT_SET;
}
inline void Cluster::clear_has_hosts_specifier() {
  _oneof_case_[0] = HOSTS_SPECIFIER_NOT_SET;
}
inline bool Cluster::has_protocol_options() const {
  return protocol_options_case() != PROTOCOL_OPTIONS_NOT_SET;
}
inline void Cluster::clear_has_protocol_options() {
  _oneof_case_[1] = PROTOCOL_OPTIONS_NOT_SET;
}
inline Cluster::HostsSpecifierCase Cluster::hosts_specifier_case() const {
  return Cluster::HostsSpecifierCase(_oneof_case_[0]);
}
inline Cluster::ProtocolOptionsCase Cluster::protocol_options_case() const {
  return Cluster::ProtocolOptionsCase(_oneof_case_[1]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v2
}  // namespace api
}  // namespace envoy

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::envoy::api::v2::Cluster_DiscoveryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::Cluster_DiscoveryType>() {
  return ::envoy::api::v2::Cluster_DiscoveryType_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::Cluster_LbPolicy> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::Cluster_LbPolicy>() {
  return ::envoy::api::v2::Cluster_LbPolicy_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2fcds_2eproto__INCLUDED
