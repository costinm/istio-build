// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/tls_context.proto

#ifndef PROTOBUF_api_2ftls_5fcontext_2eproto__INCLUDED
#define PROTOBUF_api_2ftls_5fcontext_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
class CertificateValidationContext;
class CertificateValidationContextDefaultTypeInternal;
extern CertificateValidationContextDefaultTypeInternal _CertificateValidationContext_default_instance_;
class DataSource;
class DataSourceDefaultTypeInternal;
extern DataSourceDefaultTypeInternal _DataSource_default_instance_;
class DownstreamTlsContext;
class DownstreamTlsContextDefaultTypeInternal;
extern DownstreamTlsContextDefaultTypeInternal _DownstreamTlsContext_default_instance_;
class TlsCertificate;
class TlsCertificateDefaultTypeInternal;
extern TlsCertificateDefaultTypeInternal _TlsCertificate_default_instance_;
class TlsParameters;
class TlsParametersDefaultTypeInternal;
extern TlsParametersDefaultTypeInternal _TlsParameters_default_instance_;
class UpstreamTlsContext;
class UpstreamTlsContextDefaultTypeInternal;
extern UpstreamTlsContextDefaultTypeInternal _UpstreamTlsContext_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace google {
namespace protobuf {
class BoolValue;
class BoolValueDefaultTypeInternal;
extern BoolValueDefaultTypeInternal _BoolValue_default_instance_;
class BytesValue;
class BytesValueDefaultTypeInternal;
extern BytesValueDefaultTypeInternal _BytesValue_default_instance_;
class DoubleValue;
class DoubleValueDefaultTypeInternal;
extern DoubleValueDefaultTypeInternal _DoubleValue_default_instance_;
class FloatValue;
class FloatValueDefaultTypeInternal;
extern FloatValueDefaultTypeInternal _FloatValue_default_instance_;
class Int32Value;
class Int32ValueDefaultTypeInternal;
extern Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
class Int64Value;
class Int64ValueDefaultTypeInternal;
extern Int64ValueDefaultTypeInternal _Int64Value_default_instance_;
class StringValue;
class StringValueDefaultTypeInternal;
extern StringValueDefaultTypeInternal _StringValue_default_instance_;
class UInt32Value;
class UInt32ValueDefaultTypeInternal;
extern UInt32ValueDefaultTypeInternal _UInt32Value_default_instance_;
class UInt64Value;
class UInt64ValueDefaultTypeInternal;
extern UInt64ValueDefaultTypeInternal _UInt64Value_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace envoy {
namespace api {
namespace v2 {

namespace protobuf_api_2ftls_5fcontext_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_api_2ftls_5fcontext_2eproto

enum TlsParameters_TlsProtocol {
  TlsParameters_TlsProtocol_TLS_AUTO = 0,
  TlsParameters_TlsProtocol_TLSv1_0 = 1,
  TlsParameters_TlsProtocol_TLSv1_1 = 2,
  TlsParameters_TlsProtocol_TLSv1_2 = 3,
  TlsParameters_TlsProtocol_TLSv1_3 = 4,
  TlsParameters_TlsProtocol_TlsParameters_TlsProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TlsParameters_TlsProtocol_TlsParameters_TlsProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TlsParameters_TlsProtocol_IsValid(int value);
const TlsParameters_TlsProtocol TlsParameters_TlsProtocol_TlsProtocol_MIN = TlsParameters_TlsProtocol_TLS_AUTO;
const TlsParameters_TlsProtocol TlsParameters_TlsProtocol_TlsProtocol_MAX = TlsParameters_TlsProtocol_TLSv1_3;
const int TlsParameters_TlsProtocol_TlsProtocol_ARRAYSIZE = TlsParameters_TlsProtocol_TlsProtocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* TlsParameters_TlsProtocol_descriptor();
inline const ::std::string& TlsParameters_TlsProtocol_Name(TlsParameters_TlsProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    TlsParameters_TlsProtocol_descriptor(), value);
}
inline bool TlsParameters_TlsProtocol_Parse(
    const ::std::string& name, TlsParameters_TlsProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TlsParameters_TlsProtocol>(
    TlsParameters_TlsProtocol_descriptor(), name, value);
}
// ===================================================================

class DataSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.DataSource) */ {
 public:
  DataSource();
  virtual ~DataSource();

  DataSource(const DataSource& from);

  inline DataSource& operator=(const DataSource& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSource& default_instance();

  enum SpecifierCase {
    kFilename = 1,
    kInline = 2,
    SPECIFIER_NOT_SET = 0,
  };

  static inline const DataSource* internal_default_instance() {
    return reinterpret_cast<const DataSource*>(
               &_DataSource_default_instance_);
  }

  void Swap(DataSource* other);

  // implements Message ----------------------------------------------

  inline DataSource* New() const PROTOBUF_FINAL { return New(NULL); }

  DataSource* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataSource& from);
  void MergeFrom(const DataSource& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 1;
  private:
  bool has_filename() const;
  public:
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bytes inline = 2;
  private:
  bool has_inline_() const;
  public:
  void clear_inline_();
  static const int kInlineFieldNumber = 2;
  const ::std::string& inline_() const;
  void set_inline_(const ::std::string& value);
  #if LANG_CXX11
  void set_inline_(::std::string&& value);
  #endif
  void set_inline_(const char* value);
  void set_inline_(const void* value, size_t size);
  ::std::string* mutable_inline_();
  ::std::string* release_inline_();
  void set_allocated_inline_(::std::string* inline_);

  SpecifierCase specifier_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.DataSource)
 private:
  void set_has_filename();
  void set_has_inline_();

  inline bool has_specifier() const;
  void clear_specifier();
  inline void clear_has_specifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union SpecifierUnion {
    SpecifierUnion() {}
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr inline__;
  } specifier_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_api_2ftls_5fcontext_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TlsParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.TlsParameters) */ {
 public:
  TlsParameters();
  virtual ~TlsParameters();

  TlsParameters(const TlsParameters& from);

  inline TlsParameters& operator=(const TlsParameters& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TlsParameters& default_instance();

  static inline const TlsParameters* internal_default_instance() {
    return reinterpret_cast<const TlsParameters*>(
               &_TlsParameters_default_instance_);
  }

  void Swap(TlsParameters* other);

  // implements Message ----------------------------------------------

  inline TlsParameters* New() const PROTOBUF_FINAL { return New(NULL); }

  TlsParameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TlsParameters& from);
  void MergeFrom(const TlsParameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TlsParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TlsParameters_TlsProtocol TlsProtocol;
  static const TlsProtocol TLS_AUTO =
    TlsParameters_TlsProtocol_TLS_AUTO;
  static const TlsProtocol TLSv1_0 =
    TlsParameters_TlsProtocol_TLSv1_0;
  static const TlsProtocol TLSv1_1 =
    TlsParameters_TlsProtocol_TLSv1_1;
  static const TlsProtocol TLSv1_2 =
    TlsParameters_TlsProtocol_TLSv1_2;
  static const TlsProtocol TLSv1_3 =
    TlsParameters_TlsProtocol_TLSv1_3;
  static inline bool TlsProtocol_IsValid(int value) {
    return TlsParameters_TlsProtocol_IsValid(value);
  }
  static const TlsProtocol TlsProtocol_MIN =
    TlsParameters_TlsProtocol_TlsProtocol_MIN;
  static const TlsProtocol TlsProtocol_MAX =
    TlsParameters_TlsProtocol_TlsProtocol_MAX;
  static const int TlsProtocol_ARRAYSIZE =
    TlsParameters_TlsProtocol_TlsProtocol_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TlsProtocol_descriptor() {
    return TlsParameters_TlsProtocol_descriptor();
  }
  static inline const ::std::string& TlsProtocol_Name(TlsProtocol value) {
    return TlsParameters_TlsProtocol_Name(value);
  }
  static inline bool TlsProtocol_Parse(const ::std::string& name,
      TlsProtocol* value) {
    return TlsParameters_TlsProtocol_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string cipher_suites = 3;
  int cipher_suites_size() const;
  void clear_cipher_suites();
  static const int kCipherSuitesFieldNumber = 3;
  const ::std::string& cipher_suites(int index) const;
  ::std::string* mutable_cipher_suites(int index);
  void set_cipher_suites(int index, const ::std::string& value);
  void set_cipher_suites(int index, const char* value);
  void set_cipher_suites(int index, const char* value, size_t size);
  ::std::string* add_cipher_suites();
  void add_cipher_suites(const ::std::string& value);
  void add_cipher_suites(const char* value);
  void add_cipher_suites(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cipher_suites() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cipher_suites();

  // repeated string ecdh_curves = 4;
  int ecdh_curves_size() const;
  void clear_ecdh_curves();
  static const int kEcdhCurvesFieldNumber = 4;
  const ::std::string& ecdh_curves(int index) const;
  ::std::string* mutable_ecdh_curves(int index);
  void set_ecdh_curves(int index, const ::std::string& value);
  void set_ecdh_curves(int index, const char* value);
  void set_ecdh_curves(int index, const char* value, size_t size);
  ::std::string* add_ecdh_curves();
  void add_ecdh_curves(const ::std::string& value);
  void add_ecdh_curves(const char* value);
  void add_ecdh_curves(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ecdh_curves() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ecdh_curves();

  // .envoy.api.v2.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;
  void clear_tls_minimum_protocol_version();
  static const int kTlsMinimumProtocolVersionFieldNumber = 1;
  ::envoy::api::v2::TlsParameters_TlsProtocol tls_minimum_protocol_version() const;
  void set_tls_minimum_protocol_version(::envoy::api::v2::TlsParameters_TlsProtocol value);

  // .envoy.api.v2.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;
  void clear_tls_maximum_protocol_version();
  static const int kTlsMaximumProtocolVersionFieldNumber = 2;
  ::envoy::api::v2::TlsParameters_TlsProtocol tls_maximum_protocol_version() const;
  void set_tls_maximum_protocol_version(::envoy::api::v2::TlsParameters_TlsProtocol value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.TlsParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cipher_suites_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ecdh_curves_;
  int tls_minimum_protocol_version_;
  int tls_maximum_protocol_version_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ftls_5fcontext_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TlsCertificate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.TlsCertificate) */ {
 public:
  TlsCertificate();
  virtual ~TlsCertificate();

  TlsCertificate(const TlsCertificate& from);

  inline TlsCertificate& operator=(const TlsCertificate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TlsCertificate& default_instance();

  static inline const TlsCertificate* internal_default_instance() {
    return reinterpret_cast<const TlsCertificate*>(
               &_TlsCertificate_default_instance_);
  }

  void Swap(TlsCertificate* other);

  // implements Message ----------------------------------------------

  inline TlsCertificate* New() const PROTOBUF_FINAL { return New(NULL); }

  TlsCertificate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TlsCertificate& from);
  void MergeFrom(const TlsCertificate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TlsCertificate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.DataSource signed_certificate_timestamp = 4;
  int signed_certificate_timestamp_size() const;
  void clear_signed_certificate_timestamp();
  static const int kSignedCertificateTimestampFieldNumber = 4;
  const ::envoy::api::v2::DataSource& signed_certificate_timestamp(int index) const;
  ::envoy::api::v2::DataSource* mutable_signed_certificate_timestamp(int index);
  ::envoy::api::v2::DataSource* add_signed_certificate_timestamp();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::DataSource >*
      mutable_signed_certificate_timestamp();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::DataSource >&
      signed_certificate_timestamp() const;

  // .envoy.api.v2.DataSource cert_chain = 1;
  bool has_cert_chain() const;
  void clear_cert_chain();
  static const int kCertChainFieldNumber = 1;
  const ::envoy::api::v2::DataSource& cert_chain() const;
  ::envoy::api::v2::DataSource* mutable_cert_chain();
  ::envoy::api::v2::DataSource* release_cert_chain();
  void set_allocated_cert_chain(::envoy::api::v2::DataSource* cert_chain);

  // .envoy.api.v2.DataSource private_key = 2;
  bool has_private_key() const;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 2;
  const ::envoy::api::v2::DataSource& private_key() const;
  ::envoy::api::v2::DataSource* mutable_private_key();
  ::envoy::api::v2::DataSource* release_private_key();
  void set_allocated_private_key(::envoy::api::v2::DataSource* private_key);

  // .envoy.api.v2.DataSource ocsp_staple = 3;
  bool has_ocsp_staple() const;
  void clear_ocsp_staple();
  static const int kOcspStapleFieldNumber = 3;
  const ::envoy::api::v2::DataSource& ocsp_staple() const;
  ::envoy::api::v2::DataSource* mutable_ocsp_staple();
  ::envoy::api::v2::DataSource* release_ocsp_staple();
  void set_allocated_ocsp_staple(::envoy::api::v2::DataSource* ocsp_staple);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.TlsCertificate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::DataSource > signed_certificate_timestamp_;
  ::envoy::api::v2::DataSource* cert_chain_;
  ::envoy::api::v2::DataSource* private_key_;
  ::envoy::api::v2::DataSource* ocsp_staple_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ftls_5fcontext_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CertificateValidationContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.CertificateValidationContext) */ {
 public:
  CertificateValidationContext();
  virtual ~CertificateValidationContext();

  CertificateValidationContext(const CertificateValidationContext& from);

  inline CertificateValidationContext& operator=(const CertificateValidationContext& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CertificateValidationContext& default_instance();

  static inline const CertificateValidationContext* internal_default_instance() {
    return reinterpret_cast<const CertificateValidationContext*>(
               &_CertificateValidationContext_default_instance_);
  }

  void Swap(CertificateValidationContext* other);

  // implements Message ----------------------------------------------

  inline CertificateValidationContext* New() const PROTOBUF_FINAL { return New(NULL); }

  CertificateValidationContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CertificateValidationContext& from);
  void MergeFrom(const CertificateValidationContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CertificateValidationContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string verify_certificate_hash = 2;
  int verify_certificate_hash_size() const;
  void clear_verify_certificate_hash();
  static const int kVerifyCertificateHashFieldNumber = 2;
  const ::std::string& verify_certificate_hash(int index) const;
  ::std::string* mutable_verify_certificate_hash(int index);
  void set_verify_certificate_hash(int index, const ::std::string& value);
  void set_verify_certificate_hash(int index, const char* value);
  void set_verify_certificate_hash(int index, const char* value, size_t size);
  ::std::string* add_verify_certificate_hash();
  void add_verify_certificate_hash(const ::std::string& value);
  void add_verify_certificate_hash(const char* value);
  void add_verify_certificate_hash(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& verify_certificate_hash() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_verify_certificate_hash();

  // repeated string verify_spki_sha256 = 3;
  int verify_spki_sha256_size() const;
  void clear_verify_spki_sha256();
  static const int kVerifySpkiSha256FieldNumber = 3;
  const ::std::string& verify_spki_sha256(int index) const;
  ::std::string* mutable_verify_spki_sha256(int index);
  void set_verify_spki_sha256(int index, const ::std::string& value);
  void set_verify_spki_sha256(int index, const char* value);
  void set_verify_spki_sha256(int index, const char* value, size_t size);
  ::std::string* add_verify_spki_sha256();
  void add_verify_spki_sha256(const ::std::string& value);
  void add_verify_spki_sha256(const char* value);
  void add_verify_spki_sha256(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& verify_spki_sha256() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_verify_spki_sha256();

  // repeated string verify_subject_alt_name = 4;
  int verify_subject_alt_name_size() const;
  void clear_verify_subject_alt_name();
  static const int kVerifySubjectAltNameFieldNumber = 4;
  const ::std::string& verify_subject_alt_name(int index) const;
  ::std::string* mutable_verify_subject_alt_name(int index);
  void set_verify_subject_alt_name(int index, const ::std::string& value);
  void set_verify_subject_alt_name(int index, const char* value);
  void set_verify_subject_alt_name(int index, const char* value, size_t size);
  ::std::string* add_verify_subject_alt_name();
  void add_verify_subject_alt_name(const ::std::string& value);
  void add_verify_subject_alt_name(const char* value);
  void add_verify_subject_alt_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& verify_subject_alt_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_verify_subject_alt_name();

  // .envoy.api.v2.DataSource ca_cert = 1;
  bool has_ca_cert() const;
  void clear_ca_cert();
  static const int kCaCertFieldNumber = 1;
  const ::envoy::api::v2::DataSource& ca_cert() const;
  ::envoy::api::v2::DataSource* mutable_ca_cert();
  ::envoy::api::v2::DataSource* release_ca_cert();
  void set_allocated_ca_cert(::envoy::api::v2::DataSource* ca_cert);

  // .google.protobuf.BoolValue require_ocsp_staple = 5;
  bool has_require_ocsp_staple() const;
  void clear_require_ocsp_staple();
  static const int kRequireOcspStapleFieldNumber = 5;
  const ::google::protobuf::BoolValue& require_ocsp_staple() const;
  ::google::protobuf::BoolValue* mutable_require_ocsp_staple();
  ::google::protobuf::BoolValue* release_require_ocsp_staple();
  void set_allocated_require_ocsp_staple(::google::protobuf::BoolValue* require_ocsp_staple);

  // .google.protobuf.BoolValue require_signed_certificate_timestamp = 6;
  bool has_require_signed_certificate_timestamp() const;
  void clear_require_signed_certificate_timestamp();
  static const int kRequireSignedCertificateTimestampFieldNumber = 6;
  const ::google::protobuf::BoolValue& require_signed_certificate_timestamp() const;
  ::google::protobuf::BoolValue* mutable_require_signed_certificate_timestamp();
  ::google::protobuf::BoolValue* release_require_signed_certificate_timestamp();
  void set_allocated_require_signed_certificate_timestamp(::google::protobuf::BoolValue* require_signed_certificate_timestamp);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.CertificateValidationContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> verify_certificate_hash_;
  ::google::protobuf::RepeatedPtrField< ::std::string> verify_spki_sha256_;
  ::google::protobuf::RepeatedPtrField< ::std::string> verify_subject_alt_name_;
  ::envoy::api::v2::DataSource* ca_cert_;
  ::google::protobuf::BoolValue* require_ocsp_staple_;
  ::google::protobuf::BoolValue* require_signed_certificate_timestamp_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ftls_5fcontext_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpstreamTlsContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.UpstreamTlsContext) */ {
 public:
  UpstreamTlsContext();
  virtual ~UpstreamTlsContext();

  UpstreamTlsContext(const UpstreamTlsContext& from);

  inline UpstreamTlsContext& operator=(const UpstreamTlsContext& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpstreamTlsContext& default_instance();

  static inline const UpstreamTlsContext* internal_default_instance() {
    return reinterpret_cast<const UpstreamTlsContext*>(
               &_UpstreamTlsContext_default_instance_);
  }

  void Swap(UpstreamTlsContext* other);

  // implements Message ----------------------------------------------

  inline UpstreamTlsContext* New() const PROTOBUF_FINAL { return New(NULL); }

  UpstreamTlsContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpstreamTlsContext& from);
  void MergeFrom(const UpstreamTlsContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpstreamTlsContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string alpn_protocols = 4;
  int alpn_protocols_size() const;
  void clear_alpn_protocols();
  static const int kAlpnProtocolsFieldNumber = 4;
  const ::std::string& alpn_protocols(int index) const;
  ::std::string* mutable_alpn_protocols(int index);
  void set_alpn_protocols(int index, const ::std::string& value);
  void set_alpn_protocols(int index, const char* value);
  void set_alpn_protocols(int index, const char* value, size_t size);
  ::std::string* add_alpn_protocols();
  void add_alpn_protocols(const ::std::string& value);
  void add_alpn_protocols(const char* value);
  void add_alpn_protocols(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& alpn_protocols() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alpn_protocols();

  // string sni = 3;
  void clear_sni();
  static const int kSniFieldNumber = 3;
  const ::std::string& sni() const;
  void set_sni(const ::std::string& value);
  #if LANG_CXX11
  void set_sni(::std::string&& value);
  #endif
  void set_sni(const char* value);
  void set_sni(const char* value, size_t size);
  ::std::string* mutable_sni();
  ::std::string* release_sni();
  void set_allocated_sni(::std::string* sni);

  // .envoy.api.v2.TlsParameters tls_params = 1;
  bool has_tls_params() const;
  void clear_tls_params();
  static const int kTlsParamsFieldNumber = 1;
  const ::envoy::api::v2::TlsParameters& tls_params() const;
  ::envoy::api::v2::TlsParameters* mutable_tls_params();
  ::envoy::api::v2::TlsParameters* release_tls_params();
  void set_allocated_tls_params(::envoy::api::v2::TlsParameters* tls_params);

  // .envoy.api.v2.TlsCertificate client_certificate = 2;
  bool has_client_certificate() const;
  void clear_client_certificate();
  static const int kClientCertificateFieldNumber = 2;
  const ::envoy::api::v2::TlsCertificate& client_certificate() const;
  ::envoy::api::v2::TlsCertificate* mutable_client_certificate();
  ::envoy::api::v2::TlsCertificate* release_client_certificate();
  void set_allocated_client_certificate(::envoy::api::v2::TlsCertificate* client_certificate);

  // .envoy.api.v2.CertificateValidationContext server_validation_context = 5;
  bool has_server_validation_context() const;
  void clear_server_validation_context();
  static const int kServerValidationContextFieldNumber = 5;
  const ::envoy::api::v2::CertificateValidationContext& server_validation_context() const;
  ::envoy::api::v2::CertificateValidationContext* mutable_server_validation_context();
  ::envoy::api::v2::CertificateValidationContext* release_server_validation_context();
  void set_allocated_server_validation_context(::envoy::api::v2::CertificateValidationContext* server_validation_context);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.UpstreamTlsContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alpn_protocols_;
  ::google::protobuf::internal::ArenaStringPtr sni_;
  ::envoy::api::v2::TlsParameters* tls_params_;
  ::envoy::api::v2::TlsCertificate* client_certificate_;
  ::envoy::api::v2::CertificateValidationContext* server_validation_context_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ftls_5fcontext_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DownstreamTlsContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.DownstreamTlsContext) */ {
 public:
  DownstreamTlsContext();
  virtual ~DownstreamTlsContext();

  DownstreamTlsContext(const DownstreamTlsContext& from);

  inline DownstreamTlsContext& operator=(const DownstreamTlsContext& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownstreamTlsContext& default_instance();

  static inline const DownstreamTlsContext* internal_default_instance() {
    return reinterpret_cast<const DownstreamTlsContext*>(
               &_DownstreamTlsContext_default_instance_);
  }

  void Swap(DownstreamTlsContext* other);

  // implements Message ----------------------------------------------

  inline DownstreamTlsContext* New() const PROTOBUF_FINAL { return New(NULL); }

  DownstreamTlsContext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DownstreamTlsContext& from);
  void MergeFrom(const DownstreamTlsContext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DownstreamTlsContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.TlsCertificate tls_certificates = 2;
  int tls_certificates_size() const;
  void clear_tls_certificates();
  static const int kTlsCertificatesFieldNumber = 2;
  const ::envoy::api::v2::TlsCertificate& tls_certificates(int index) const;
  ::envoy::api::v2::TlsCertificate* mutable_tls_certificates(int index);
  ::envoy::api::v2::TlsCertificate* add_tls_certificates();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::TlsCertificate >*
      mutable_tls_certificates();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::TlsCertificate >&
      tls_certificates() const;

  // repeated string alpn_protocols = 3;
  int alpn_protocols_size() const;
  void clear_alpn_protocols();
  static const int kAlpnProtocolsFieldNumber = 3;
  const ::std::string& alpn_protocols(int index) const;
  ::std::string* mutable_alpn_protocols(int index);
  void set_alpn_protocols(int index, const ::std::string& value);
  void set_alpn_protocols(int index, const char* value);
  void set_alpn_protocols(int index, const char* value, size_t size);
  ::std::string* add_alpn_protocols();
  void add_alpn_protocols(const ::std::string& value);
  void add_alpn_protocols(const char* value);
  void add_alpn_protocols(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& alpn_protocols() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alpn_protocols();

  // .envoy.api.v2.TlsParameters tls_params = 1;
  bool has_tls_params() const;
  void clear_tls_params();
  static const int kTlsParamsFieldNumber = 1;
  const ::envoy::api::v2::TlsParameters& tls_params() const;
  ::envoy::api::v2::TlsParameters* mutable_tls_params();
  ::envoy::api::v2::TlsParameters* release_tls_params();
  void set_allocated_tls_params(::envoy::api::v2::TlsParameters* tls_params);

  // .envoy.api.v2.CertificateValidationContext client_validation_context = 4;
  bool has_client_validation_context() const;
  void clear_client_validation_context();
  static const int kClientValidationContextFieldNumber = 4;
  const ::envoy::api::v2::CertificateValidationContext& client_validation_context() const;
  ::envoy::api::v2::CertificateValidationContext* mutable_client_validation_context();
  ::envoy::api::v2::CertificateValidationContext* release_client_validation_context();
  void set_allocated_client_validation_context(::envoy::api::v2::CertificateValidationContext* client_validation_context);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.DownstreamTlsContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::TlsCertificate > tls_certificates_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alpn_protocols_;
  ::envoy::api::v2::TlsParameters* tls_params_;
  ::envoy::api::v2::CertificateValidationContext* client_validation_context_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2ftls_5fcontext_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DataSource

// string filename = 1;
inline bool DataSource::has_filename() const {
  return specifier_case() == kFilename;
}
inline void DataSource::set_has_filename() {
  _oneof_case_[0] = kFilename;
}
inline void DataSource::clear_filename() {
  if (has_filename()) {
    specifier_.filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_specifier();
  }
}
inline const ::std::string& DataSource::filename() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DataSource.filename)
  if (has_filename()) {
    return specifier_.filename_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DataSource::set_filename(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.DataSource.filename)
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.DataSource.filename)
}
#if LANG_CXX11
inline void DataSource::set_filename(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.DataSource.filename)
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.DataSource.filename)
}
#endif
inline void DataSource::set_filename(const char* value) {
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.DataSource.filename)
}
inline void DataSource::set_filename(const char* value, size_t size) {
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.DataSource.filename)
}
inline ::std::string* DataSource::mutable_filename() {
  if (!has_filename()) {
    clear_specifier();
    set_has_filename();
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DataSource.filename)
  return specifier_.filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_filename() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DataSource.filename)
  if (has_filename()) {
    clear_has_specifier();
    return specifier_.filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void DataSource::set_allocated_filename(::std::string* filename) {
  if (!has_filename()) {
    specifier_.filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_specifier();
  if (filename != NULL) {
    set_has_filename();
    specifier_.filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        filename);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DataSource.filename)
}

// bytes inline = 2;
inline bool DataSource::has_inline_() const {
  return specifier_case() == kInline;
}
inline void DataSource::set_has_inline_() {
  _oneof_case_[0] = kInline;
}
inline void DataSource::clear_inline_() {
  if (has_inline_()) {
    specifier_.inline__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_specifier();
  }
}
inline const ::std::string& DataSource::inline_() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DataSource.inline)
  if (has_inline_()) {
    return specifier_.inline__.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DataSource::set_inline_(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.DataSource.inline)
  if (!has_inline_()) {
    clear_specifier();
    set_has_inline_();
    specifier_.inline__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.DataSource.inline)
}
#if LANG_CXX11
inline void DataSource::set_inline_(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.DataSource.inline)
  if (!has_inline_()) {
    clear_specifier();
    set_has_inline_();
    specifier_.inline__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.DataSource.inline)
}
#endif
inline void DataSource::set_inline_(const char* value) {
  if (!has_inline_()) {
    clear_specifier();
    set_has_inline_();
    specifier_.inline__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.DataSource.inline)
}
inline void DataSource::set_inline_(const void* value, size_t size) {
  if (!has_inline_()) {
    clear_specifier();
    set_has_inline_();
    specifier_.inline__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  specifier_.inline__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.DataSource.inline)
}
inline ::std::string* DataSource::mutable_inline_() {
  if (!has_inline_()) {
    clear_specifier();
    set_has_inline_();
    specifier_.inline__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DataSource.inline)
  return specifier_.inline__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_inline_() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DataSource.inline)
  if (has_inline_()) {
    clear_has_specifier();
    return specifier_.inline__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void DataSource::set_allocated_inline_(::std::string* inline_) {
  if (!has_inline_()) {
    specifier_.inline__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_specifier();
  if (inline_ != NULL) {
    set_has_inline_();
    specifier_.inline__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        inline_);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DataSource.inline)
}

inline bool DataSource::has_specifier() const {
  return specifier_case() != SPECIFIER_NOT_SET;
}
inline void DataSource::clear_has_specifier() {
  _oneof_case_[0] = SPECIFIER_NOT_SET;
}
inline DataSource::SpecifierCase DataSource::specifier_case() const {
  return DataSource::SpecifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TlsParameters

// .envoy.api.v2.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;
inline void TlsParameters::clear_tls_minimum_protocol_version() {
  tls_minimum_protocol_version_ = 0;
}
inline ::envoy::api::v2::TlsParameters_TlsProtocol TlsParameters::tls_minimum_protocol_version() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsParameters.tls_minimum_protocol_version)
  return static_cast< ::envoy::api::v2::TlsParameters_TlsProtocol >(tls_minimum_protocol_version_);
}
inline void TlsParameters::set_tls_minimum_protocol_version(::envoy::api::v2::TlsParameters_TlsProtocol value) {
  
  tls_minimum_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.TlsParameters.tls_minimum_protocol_version)
}

// .envoy.api.v2.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;
inline void TlsParameters::clear_tls_maximum_protocol_version() {
  tls_maximum_protocol_version_ = 0;
}
inline ::envoy::api::v2::TlsParameters_TlsProtocol TlsParameters::tls_maximum_protocol_version() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsParameters.tls_maximum_protocol_version)
  return static_cast< ::envoy::api::v2::TlsParameters_TlsProtocol >(tls_maximum_protocol_version_);
}
inline void TlsParameters::set_tls_maximum_protocol_version(::envoy::api::v2::TlsParameters_TlsProtocol value) {
  
  tls_maximum_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.TlsParameters.tls_maximum_protocol_version)
}

// repeated string cipher_suites = 3;
inline int TlsParameters::cipher_suites_size() const {
  return cipher_suites_.size();
}
inline void TlsParameters::clear_cipher_suites() {
  cipher_suites_.Clear();
}
inline const ::std::string& TlsParameters::cipher_suites(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsParameters.cipher_suites)
  return cipher_suites_.Get(index);
}
inline ::std::string* TlsParameters::mutable_cipher_suites(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.TlsParameters.cipher_suites)
  return cipher_suites_.Mutable(index);
}
inline void TlsParameters::set_cipher_suites(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.TlsParameters.cipher_suites)
  cipher_suites_.Mutable(index)->assign(value);
}
inline void TlsParameters::set_cipher_suites(int index, const char* value) {
  cipher_suites_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.TlsParameters.cipher_suites)
}
inline void TlsParameters::set_cipher_suites(int index, const char* value, size_t size) {
  cipher_suites_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.TlsParameters.cipher_suites)
}
inline ::std::string* TlsParameters::add_cipher_suites() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.TlsParameters.cipher_suites)
  return cipher_suites_.Add();
}
inline void TlsParameters::add_cipher_suites(const ::std::string& value) {
  cipher_suites_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.TlsParameters.cipher_suites)
}
inline void TlsParameters::add_cipher_suites(const char* value) {
  cipher_suites_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.TlsParameters.cipher_suites)
}
inline void TlsParameters::add_cipher_suites(const char* value, size_t size) {
  cipher_suites_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.TlsParameters.cipher_suites)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TlsParameters::cipher_suites() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.TlsParameters.cipher_suites)
  return cipher_suites_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TlsParameters::mutable_cipher_suites() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.TlsParameters.cipher_suites)
  return &cipher_suites_;
}

// repeated string ecdh_curves = 4;
inline int TlsParameters::ecdh_curves_size() const {
  return ecdh_curves_.size();
}
inline void TlsParameters::clear_ecdh_curves() {
  ecdh_curves_.Clear();
}
inline const ::std::string& TlsParameters::ecdh_curves(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsParameters.ecdh_curves)
  return ecdh_curves_.Get(index);
}
inline ::std::string* TlsParameters::mutable_ecdh_curves(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.TlsParameters.ecdh_curves)
  return ecdh_curves_.Mutable(index);
}
inline void TlsParameters::set_ecdh_curves(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.TlsParameters.ecdh_curves)
  ecdh_curves_.Mutable(index)->assign(value);
}
inline void TlsParameters::set_ecdh_curves(int index, const char* value) {
  ecdh_curves_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.TlsParameters.ecdh_curves)
}
inline void TlsParameters::set_ecdh_curves(int index, const char* value, size_t size) {
  ecdh_curves_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.TlsParameters.ecdh_curves)
}
inline ::std::string* TlsParameters::add_ecdh_curves() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.TlsParameters.ecdh_curves)
  return ecdh_curves_.Add();
}
inline void TlsParameters::add_ecdh_curves(const ::std::string& value) {
  ecdh_curves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.TlsParameters.ecdh_curves)
}
inline void TlsParameters::add_ecdh_curves(const char* value) {
  ecdh_curves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.TlsParameters.ecdh_curves)
}
inline void TlsParameters::add_ecdh_curves(const char* value, size_t size) {
  ecdh_curves_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.TlsParameters.ecdh_curves)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TlsParameters::ecdh_curves() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.TlsParameters.ecdh_curves)
  return ecdh_curves_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TlsParameters::mutable_ecdh_curves() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.TlsParameters.ecdh_curves)
  return &ecdh_curves_;
}

// -------------------------------------------------------------------

// TlsCertificate

// .envoy.api.v2.DataSource cert_chain = 1;
inline bool TlsCertificate::has_cert_chain() const {
  return this != internal_default_instance() && cert_chain_ != NULL;
}
inline void TlsCertificate::clear_cert_chain() {
  if (GetArenaNoVirtual() == NULL && cert_chain_ != NULL) delete cert_chain_;
  cert_chain_ = NULL;
}
inline const ::envoy::api::v2::DataSource& TlsCertificate::cert_chain() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsCertificate.cert_chain)
  return cert_chain_ != NULL ? *cert_chain_
                         : *::envoy::api::v2::DataSource::internal_default_instance();
}
inline ::envoy::api::v2::DataSource* TlsCertificate::mutable_cert_chain() {
  
  if (cert_chain_ == NULL) {
    cert_chain_ = new ::envoy::api::v2::DataSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.TlsCertificate.cert_chain)
  return cert_chain_;
}
inline ::envoy::api::v2::DataSource* TlsCertificate::release_cert_chain() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.TlsCertificate.cert_chain)
  
  ::envoy::api::v2::DataSource* temp = cert_chain_;
  cert_chain_ = NULL;
  return temp;
}
inline void TlsCertificate::set_allocated_cert_chain(::envoy::api::v2::DataSource* cert_chain) {
  delete cert_chain_;
  cert_chain_ = cert_chain;
  if (cert_chain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.TlsCertificate.cert_chain)
}

// .envoy.api.v2.DataSource private_key = 2;
inline bool TlsCertificate::has_private_key() const {
  return this != internal_default_instance() && private_key_ != NULL;
}
inline void TlsCertificate::clear_private_key() {
  if (GetArenaNoVirtual() == NULL && private_key_ != NULL) delete private_key_;
  private_key_ = NULL;
}
inline const ::envoy::api::v2::DataSource& TlsCertificate::private_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsCertificate.private_key)
  return private_key_ != NULL ? *private_key_
                         : *::envoy::api::v2::DataSource::internal_default_instance();
}
inline ::envoy::api::v2::DataSource* TlsCertificate::mutable_private_key() {
  
  if (private_key_ == NULL) {
    private_key_ = new ::envoy::api::v2::DataSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.TlsCertificate.private_key)
  return private_key_;
}
inline ::envoy::api::v2::DataSource* TlsCertificate::release_private_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.TlsCertificate.private_key)
  
  ::envoy::api::v2::DataSource* temp = private_key_;
  private_key_ = NULL;
  return temp;
}
inline void TlsCertificate::set_allocated_private_key(::envoy::api::v2::DataSource* private_key) {
  delete private_key_;
  private_key_ = private_key;
  if (private_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.TlsCertificate.private_key)
}

// .envoy.api.v2.DataSource ocsp_staple = 3;
inline bool TlsCertificate::has_ocsp_staple() const {
  return this != internal_default_instance() && ocsp_staple_ != NULL;
}
inline void TlsCertificate::clear_ocsp_staple() {
  if (GetArenaNoVirtual() == NULL && ocsp_staple_ != NULL) delete ocsp_staple_;
  ocsp_staple_ = NULL;
}
inline const ::envoy::api::v2::DataSource& TlsCertificate::ocsp_staple() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsCertificate.ocsp_staple)
  return ocsp_staple_ != NULL ? *ocsp_staple_
                         : *::envoy::api::v2::DataSource::internal_default_instance();
}
inline ::envoy::api::v2::DataSource* TlsCertificate::mutable_ocsp_staple() {
  
  if (ocsp_staple_ == NULL) {
    ocsp_staple_ = new ::envoy::api::v2::DataSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.TlsCertificate.ocsp_staple)
  return ocsp_staple_;
}
inline ::envoy::api::v2::DataSource* TlsCertificate::release_ocsp_staple() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.TlsCertificate.ocsp_staple)
  
  ::envoy::api::v2::DataSource* temp = ocsp_staple_;
  ocsp_staple_ = NULL;
  return temp;
}
inline void TlsCertificate::set_allocated_ocsp_staple(::envoy::api::v2::DataSource* ocsp_staple) {
  delete ocsp_staple_;
  ocsp_staple_ = ocsp_staple;
  if (ocsp_staple) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.TlsCertificate.ocsp_staple)
}

// repeated .envoy.api.v2.DataSource signed_certificate_timestamp = 4;
inline int TlsCertificate::signed_certificate_timestamp_size() const {
  return signed_certificate_timestamp_.size();
}
inline void TlsCertificate::clear_signed_certificate_timestamp() {
  signed_certificate_timestamp_.Clear();
}
inline const ::envoy::api::v2::DataSource& TlsCertificate::signed_certificate_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.TlsCertificate.signed_certificate_timestamp)
  return signed_certificate_timestamp_.Get(index);
}
inline ::envoy::api::v2::DataSource* TlsCertificate::mutable_signed_certificate_timestamp(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.TlsCertificate.signed_certificate_timestamp)
  return signed_certificate_timestamp_.Mutable(index);
}
inline ::envoy::api::v2::DataSource* TlsCertificate::add_signed_certificate_timestamp() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.TlsCertificate.signed_certificate_timestamp)
  return signed_certificate_timestamp_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::DataSource >*
TlsCertificate::mutable_signed_certificate_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.TlsCertificate.signed_certificate_timestamp)
  return &signed_certificate_timestamp_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::DataSource >&
TlsCertificate::signed_certificate_timestamp() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.TlsCertificate.signed_certificate_timestamp)
  return signed_certificate_timestamp_;
}

// -------------------------------------------------------------------

// CertificateValidationContext

// .envoy.api.v2.DataSource ca_cert = 1;
inline bool CertificateValidationContext::has_ca_cert() const {
  return this != internal_default_instance() && ca_cert_ != NULL;
}
inline void CertificateValidationContext::clear_ca_cert() {
  if (GetArenaNoVirtual() == NULL && ca_cert_ != NULL) delete ca_cert_;
  ca_cert_ = NULL;
}
inline const ::envoy::api::v2::DataSource& CertificateValidationContext::ca_cert() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CertificateValidationContext.ca_cert)
  return ca_cert_ != NULL ? *ca_cert_
                         : *::envoy::api::v2::DataSource::internal_default_instance();
}
inline ::envoy::api::v2::DataSource* CertificateValidationContext::mutable_ca_cert() {
  
  if (ca_cert_ == NULL) {
    ca_cert_ = new ::envoy::api::v2::DataSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CertificateValidationContext.ca_cert)
  return ca_cert_;
}
inline ::envoy::api::v2::DataSource* CertificateValidationContext::release_ca_cert() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CertificateValidationContext.ca_cert)
  
  ::envoy::api::v2::DataSource* temp = ca_cert_;
  ca_cert_ = NULL;
  return temp;
}
inline void CertificateValidationContext::set_allocated_ca_cert(::envoy::api::v2::DataSource* ca_cert) {
  delete ca_cert_;
  ca_cert_ = ca_cert;
  if (ca_cert) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CertificateValidationContext.ca_cert)
}

// repeated string verify_certificate_hash = 2;
inline int CertificateValidationContext::verify_certificate_hash_size() const {
  return verify_certificate_hash_.size();
}
inline void CertificateValidationContext::clear_verify_certificate_hash() {
  verify_certificate_hash_.Clear();
}
inline const ::std::string& CertificateValidationContext::verify_certificate_hash(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
  return verify_certificate_hash_.Get(index);
}
inline ::std::string* CertificateValidationContext::mutable_verify_certificate_hash(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
  return verify_certificate_hash_.Mutable(index);
}
inline void CertificateValidationContext::set_verify_certificate_hash(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
  verify_certificate_hash_.Mutable(index)->assign(value);
}
inline void CertificateValidationContext::set_verify_certificate_hash(int index, const char* value) {
  verify_certificate_hash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
}
inline void CertificateValidationContext::set_verify_certificate_hash(int index, const char* value, size_t size) {
  verify_certificate_hash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
}
inline ::std::string* CertificateValidationContext::add_verify_certificate_hash() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
  return verify_certificate_hash_.Add();
}
inline void CertificateValidationContext::add_verify_certificate_hash(const ::std::string& value) {
  verify_certificate_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
}
inline void CertificateValidationContext::add_verify_certificate_hash(const char* value) {
  verify_certificate_hash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
}
inline void CertificateValidationContext::add_verify_certificate_hash(const char* value, size_t size) {
  verify_certificate_hash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertificateValidationContext::verify_certificate_hash() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
  return verify_certificate_hash_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CertificateValidationContext::mutable_verify_certificate_hash() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.CertificateValidationContext.verify_certificate_hash)
  return &verify_certificate_hash_;
}

// repeated string verify_spki_sha256 = 3;
inline int CertificateValidationContext::verify_spki_sha256_size() const {
  return verify_spki_sha256_.size();
}
inline void CertificateValidationContext::clear_verify_spki_sha256() {
  verify_spki_sha256_.Clear();
}
inline const ::std::string& CertificateValidationContext::verify_spki_sha256(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
  return verify_spki_sha256_.Get(index);
}
inline ::std::string* CertificateValidationContext::mutable_verify_spki_sha256(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
  return verify_spki_sha256_.Mutable(index);
}
inline void CertificateValidationContext::set_verify_spki_sha256(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
  verify_spki_sha256_.Mutable(index)->assign(value);
}
inline void CertificateValidationContext::set_verify_spki_sha256(int index, const char* value) {
  verify_spki_sha256_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
}
inline void CertificateValidationContext::set_verify_spki_sha256(int index, const char* value, size_t size) {
  verify_spki_sha256_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
}
inline ::std::string* CertificateValidationContext::add_verify_spki_sha256() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
  return verify_spki_sha256_.Add();
}
inline void CertificateValidationContext::add_verify_spki_sha256(const ::std::string& value) {
  verify_spki_sha256_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
}
inline void CertificateValidationContext::add_verify_spki_sha256(const char* value) {
  verify_spki_sha256_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
}
inline void CertificateValidationContext::add_verify_spki_sha256(const char* value, size_t size) {
  verify_spki_sha256_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertificateValidationContext::verify_spki_sha256() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
  return verify_spki_sha256_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CertificateValidationContext::mutable_verify_spki_sha256() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.CertificateValidationContext.verify_spki_sha256)
  return &verify_spki_sha256_;
}

// repeated string verify_subject_alt_name = 4;
inline int CertificateValidationContext::verify_subject_alt_name_size() const {
  return verify_subject_alt_name_.size();
}
inline void CertificateValidationContext::clear_verify_subject_alt_name() {
  verify_subject_alt_name_.Clear();
}
inline const ::std::string& CertificateValidationContext::verify_subject_alt_name(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
  return verify_subject_alt_name_.Get(index);
}
inline ::std::string* CertificateValidationContext::mutable_verify_subject_alt_name(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
  return verify_subject_alt_name_.Mutable(index);
}
inline void CertificateValidationContext::set_verify_subject_alt_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
  verify_subject_alt_name_.Mutable(index)->assign(value);
}
inline void CertificateValidationContext::set_verify_subject_alt_name(int index, const char* value) {
  verify_subject_alt_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
}
inline void CertificateValidationContext::set_verify_subject_alt_name(int index, const char* value, size_t size) {
  verify_subject_alt_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
}
inline ::std::string* CertificateValidationContext::add_verify_subject_alt_name() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
  return verify_subject_alt_name_.Add();
}
inline void CertificateValidationContext::add_verify_subject_alt_name(const ::std::string& value) {
  verify_subject_alt_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
}
inline void CertificateValidationContext::add_verify_subject_alt_name(const char* value) {
  verify_subject_alt_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
}
inline void CertificateValidationContext::add_verify_subject_alt_name(const char* value, size_t size) {
  verify_subject_alt_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CertificateValidationContext::verify_subject_alt_name() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
  return verify_subject_alt_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CertificateValidationContext::mutable_verify_subject_alt_name() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.CertificateValidationContext.verify_subject_alt_name)
  return &verify_subject_alt_name_;
}

// .google.protobuf.BoolValue require_ocsp_staple = 5;
inline bool CertificateValidationContext::has_require_ocsp_staple() const {
  return this != internal_default_instance() && require_ocsp_staple_ != NULL;
}
inline void CertificateValidationContext::clear_require_ocsp_staple() {
  if (GetArenaNoVirtual() == NULL && require_ocsp_staple_ != NULL) delete require_ocsp_staple_;
  require_ocsp_staple_ = NULL;
}
inline const ::google::protobuf::BoolValue& CertificateValidationContext::require_ocsp_staple() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CertificateValidationContext.require_ocsp_staple)
  return require_ocsp_staple_ != NULL ? *require_ocsp_staple_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
inline ::google::protobuf::BoolValue* CertificateValidationContext::mutable_require_ocsp_staple() {
  
  if (require_ocsp_staple_ == NULL) {
    require_ocsp_staple_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CertificateValidationContext.require_ocsp_staple)
  return require_ocsp_staple_;
}
inline ::google::protobuf::BoolValue* CertificateValidationContext::release_require_ocsp_staple() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CertificateValidationContext.require_ocsp_staple)
  
  ::google::protobuf::BoolValue* temp = require_ocsp_staple_;
  require_ocsp_staple_ = NULL;
  return temp;
}
inline void CertificateValidationContext::set_allocated_require_ocsp_staple(::google::protobuf::BoolValue* require_ocsp_staple) {
  delete require_ocsp_staple_;
  if (require_ocsp_staple != NULL && require_ocsp_staple->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_require_ocsp_staple = new ::google::protobuf::BoolValue;
    new_require_ocsp_staple->CopyFrom(*require_ocsp_staple);
    require_ocsp_staple = new_require_ocsp_staple;
  }
  require_ocsp_staple_ = require_ocsp_staple;
  if (require_ocsp_staple) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CertificateValidationContext.require_ocsp_staple)
}

// .google.protobuf.BoolValue require_signed_certificate_timestamp = 6;
inline bool CertificateValidationContext::has_require_signed_certificate_timestamp() const {
  return this != internal_default_instance() && require_signed_certificate_timestamp_ != NULL;
}
inline void CertificateValidationContext::clear_require_signed_certificate_timestamp() {
  if (GetArenaNoVirtual() == NULL && require_signed_certificate_timestamp_ != NULL) delete require_signed_certificate_timestamp_;
  require_signed_certificate_timestamp_ = NULL;
}
inline const ::google::protobuf::BoolValue& CertificateValidationContext::require_signed_certificate_timestamp() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CertificateValidationContext.require_signed_certificate_timestamp)
  return require_signed_certificate_timestamp_ != NULL ? *require_signed_certificate_timestamp_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
inline ::google::protobuf::BoolValue* CertificateValidationContext::mutable_require_signed_certificate_timestamp() {
  
  if (require_signed_certificate_timestamp_ == NULL) {
    require_signed_certificate_timestamp_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CertificateValidationContext.require_signed_certificate_timestamp)
  return require_signed_certificate_timestamp_;
}
inline ::google::protobuf::BoolValue* CertificateValidationContext::release_require_signed_certificate_timestamp() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CertificateValidationContext.require_signed_certificate_timestamp)
  
  ::google::protobuf::BoolValue* temp = require_signed_certificate_timestamp_;
  require_signed_certificate_timestamp_ = NULL;
  return temp;
}
inline void CertificateValidationContext::set_allocated_require_signed_certificate_timestamp(::google::protobuf::BoolValue* require_signed_certificate_timestamp) {
  delete require_signed_certificate_timestamp_;
  if (require_signed_certificate_timestamp != NULL && require_signed_certificate_timestamp->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_require_signed_certificate_timestamp = new ::google::protobuf::BoolValue;
    new_require_signed_certificate_timestamp->CopyFrom(*require_signed_certificate_timestamp);
    require_signed_certificate_timestamp = new_require_signed_certificate_timestamp;
  }
  require_signed_certificate_timestamp_ = require_signed_certificate_timestamp;
  if (require_signed_certificate_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CertificateValidationContext.require_signed_certificate_timestamp)
}

// -------------------------------------------------------------------

// UpstreamTlsContext

// .envoy.api.v2.TlsParameters tls_params = 1;
inline bool UpstreamTlsContext::has_tls_params() const {
  return this != internal_default_instance() && tls_params_ != NULL;
}
inline void UpstreamTlsContext::clear_tls_params() {
  if (GetArenaNoVirtual() == NULL && tls_params_ != NULL) delete tls_params_;
  tls_params_ = NULL;
}
inline const ::envoy::api::v2::TlsParameters& UpstreamTlsContext::tls_params() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UpstreamTlsContext.tls_params)
  return tls_params_ != NULL ? *tls_params_
                         : *::envoy::api::v2::TlsParameters::internal_default_instance();
}
inline ::envoy::api::v2::TlsParameters* UpstreamTlsContext::mutable_tls_params() {
  
  if (tls_params_ == NULL) {
    tls_params_ = new ::envoy::api::v2::TlsParameters;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UpstreamTlsContext.tls_params)
  return tls_params_;
}
inline ::envoy::api::v2::TlsParameters* UpstreamTlsContext::release_tls_params() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UpstreamTlsContext.tls_params)
  
  ::envoy::api::v2::TlsParameters* temp = tls_params_;
  tls_params_ = NULL;
  return temp;
}
inline void UpstreamTlsContext::set_allocated_tls_params(::envoy::api::v2::TlsParameters* tls_params) {
  delete tls_params_;
  tls_params_ = tls_params;
  if (tls_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UpstreamTlsContext.tls_params)
}

// .envoy.api.v2.TlsCertificate client_certificate = 2;
inline bool UpstreamTlsContext::has_client_certificate() const {
  return this != internal_default_instance() && client_certificate_ != NULL;
}
inline void UpstreamTlsContext::clear_client_certificate() {
  if (GetArenaNoVirtual() == NULL && client_certificate_ != NULL) delete client_certificate_;
  client_certificate_ = NULL;
}
inline const ::envoy::api::v2::TlsCertificate& UpstreamTlsContext::client_certificate() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UpstreamTlsContext.client_certificate)
  return client_certificate_ != NULL ? *client_certificate_
                         : *::envoy::api::v2::TlsCertificate::internal_default_instance();
}
inline ::envoy::api::v2::TlsCertificate* UpstreamTlsContext::mutable_client_certificate() {
  
  if (client_certificate_ == NULL) {
    client_certificate_ = new ::envoy::api::v2::TlsCertificate;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UpstreamTlsContext.client_certificate)
  return client_certificate_;
}
inline ::envoy::api::v2::TlsCertificate* UpstreamTlsContext::release_client_certificate() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UpstreamTlsContext.client_certificate)
  
  ::envoy::api::v2::TlsCertificate* temp = client_certificate_;
  client_certificate_ = NULL;
  return temp;
}
inline void UpstreamTlsContext::set_allocated_client_certificate(::envoy::api::v2::TlsCertificate* client_certificate) {
  delete client_certificate_;
  client_certificate_ = client_certificate;
  if (client_certificate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UpstreamTlsContext.client_certificate)
}

// string sni = 3;
inline void UpstreamTlsContext::clear_sni() {
  sni_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpstreamTlsContext::sni() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UpstreamTlsContext.sni)
  return sni_.GetNoArena();
}
inline void UpstreamTlsContext::set_sni(const ::std::string& value) {
  
  sni_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.UpstreamTlsContext.sni)
}
#if LANG_CXX11
inline void UpstreamTlsContext::set_sni(::std::string&& value) {
  
  sni_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.UpstreamTlsContext.sni)
}
#endif
inline void UpstreamTlsContext::set_sni(const char* value) {
  
  sni_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.UpstreamTlsContext.sni)
}
inline void UpstreamTlsContext::set_sni(const char* value, size_t size) {
  
  sni_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.UpstreamTlsContext.sni)
}
inline ::std::string* UpstreamTlsContext::mutable_sni() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UpstreamTlsContext.sni)
  return sni_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpstreamTlsContext::release_sni() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UpstreamTlsContext.sni)
  
  return sni_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpstreamTlsContext::set_allocated_sni(::std::string* sni) {
  if (sni != NULL) {
    
  } else {
    
  }
  sni_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sni);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UpstreamTlsContext.sni)
}

// repeated string alpn_protocols = 4;
inline int UpstreamTlsContext::alpn_protocols_size() const {
  return alpn_protocols_.size();
}
inline void UpstreamTlsContext::clear_alpn_protocols() {
  alpn_protocols_.Clear();
}
inline const ::std::string& UpstreamTlsContext::alpn_protocols(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
  return alpn_protocols_.Get(index);
}
inline ::std::string* UpstreamTlsContext::mutable_alpn_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
  return alpn_protocols_.Mutable(index);
}
inline void UpstreamTlsContext::set_alpn_protocols(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
  alpn_protocols_.Mutable(index)->assign(value);
}
inline void UpstreamTlsContext::set_alpn_protocols(int index, const char* value) {
  alpn_protocols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
}
inline void UpstreamTlsContext::set_alpn_protocols(int index, const char* value, size_t size) {
  alpn_protocols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
}
inline ::std::string* UpstreamTlsContext::add_alpn_protocols() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
  return alpn_protocols_.Add();
}
inline void UpstreamTlsContext::add_alpn_protocols(const ::std::string& value) {
  alpn_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
}
inline void UpstreamTlsContext::add_alpn_protocols(const char* value) {
  alpn_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
}
inline void UpstreamTlsContext::add_alpn_protocols(const char* value, size_t size) {
  alpn_protocols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpstreamTlsContext::alpn_protocols() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
  return alpn_protocols_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpstreamTlsContext::mutable_alpn_protocols() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.UpstreamTlsContext.alpn_protocols)
  return &alpn_protocols_;
}

// .envoy.api.v2.CertificateValidationContext server_validation_context = 5;
inline bool UpstreamTlsContext::has_server_validation_context() const {
  return this != internal_default_instance() && server_validation_context_ != NULL;
}
inline void UpstreamTlsContext::clear_server_validation_context() {
  if (GetArenaNoVirtual() == NULL && server_validation_context_ != NULL) delete server_validation_context_;
  server_validation_context_ = NULL;
}
inline const ::envoy::api::v2::CertificateValidationContext& UpstreamTlsContext::server_validation_context() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.UpstreamTlsContext.server_validation_context)
  return server_validation_context_ != NULL ? *server_validation_context_
                         : *::envoy::api::v2::CertificateValidationContext::internal_default_instance();
}
inline ::envoy::api::v2::CertificateValidationContext* UpstreamTlsContext::mutable_server_validation_context() {
  
  if (server_validation_context_ == NULL) {
    server_validation_context_ = new ::envoy::api::v2::CertificateValidationContext;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UpstreamTlsContext.server_validation_context)
  return server_validation_context_;
}
inline ::envoy::api::v2::CertificateValidationContext* UpstreamTlsContext::release_server_validation_context() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UpstreamTlsContext.server_validation_context)
  
  ::envoy::api::v2::CertificateValidationContext* temp = server_validation_context_;
  server_validation_context_ = NULL;
  return temp;
}
inline void UpstreamTlsContext::set_allocated_server_validation_context(::envoy::api::v2::CertificateValidationContext* server_validation_context) {
  delete server_validation_context_;
  server_validation_context_ = server_validation_context;
  if (server_validation_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UpstreamTlsContext.server_validation_context)
}

// -------------------------------------------------------------------

// DownstreamTlsContext

// .envoy.api.v2.TlsParameters tls_params = 1;
inline bool DownstreamTlsContext::has_tls_params() const {
  return this != internal_default_instance() && tls_params_ != NULL;
}
inline void DownstreamTlsContext::clear_tls_params() {
  if (GetArenaNoVirtual() == NULL && tls_params_ != NULL) delete tls_params_;
  tls_params_ = NULL;
}
inline const ::envoy::api::v2::TlsParameters& DownstreamTlsContext::tls_params() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DownstreamTlsContext.tls_params)
  return tls_params_ != NULL ? *tls_params_
                         : *::envoy::api::v2::TlsParameters::internal_default_instance();
}
inline ::envoy::api::v2::TlsParameters* DownstreamTlsContext::mutable_tls_params() {
  
  if (tls_params_ == NULL) {
    tls_params_ = new ::envoy::api::v2::TlsParameters;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DownstreamTlsContext.tls_params)
  return tls_params_;
}
inline ::envoy::api::v2::TlsParameters* DownstreamTlsContext::release_tls_params() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DownstreamTlsContext.tls_params)
  
  ::envoy::api::v2::TlsParameters* temp = tls_params_;
  tls_params_ = NULL;
  return temp;
}
inline void DownstreamTlsContext::set_allocated_tls_params(::envoy::api::v2::TlsParameters* tls_params) {
  delete tls_params_;
  tls_params_ = tls_params;
  if (tls_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DownstreamTlsContext.tls_params)
}

// repeated .envoy.api.v2.TlsCertificate tls_certificates = 2;
inline int DownstreamTlsContext::tls_certificates_size() const {
  return tls_certificates_.size();
}
inline void DownstreamTlsContext::clear_tls_certificates() {
  tls_certificates_.Clear();
}
inline const ::envoy::api::v2::TlsCertificate& DownstreamTlsContext::tls_certificates(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DownstreamTlsContext.tls_certificates)
  return tls_certificates_.Get(index);
}
inline ::envoy::api::v2::TlsCertificate* DownstreamTlsContext::mutable_tls_certificates(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DownstreamTlsContext.tls_certificates)
  return tls_certificates_.Mutable(index);
}
inline ::envoy::api::v2::TlsCertificate* DownstreamTlsContext::add_tls_certificates() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.DownstreamTlsContext.tls_certificates)
  return tls_certificates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::TlsCertificate >*
DownstreamTlsContext::mutable_tls_certificates() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.DownstreamTlsContext.tls_certificates)
  return &tls_certificates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::TlsCertificate >&
DownstreamTlsContext::tls_certificates() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.DownstreamTlsContext.tls_certificates)
  return tls_certificates_;
}

// repeated string alpn_protocols = 3;
inline int DownstreamTlsContext::alpn_protocols_size() const {
  return alpn_protocols_.size();
}
inline void DownstreamTlsContext::clear_alpn_protocols() {
  alpn_protocols_.Clear();
}
inline const ::std::string& DownstreamTlsContext::alpn_protocols(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
  return alpn_protocols_.Get(index);
}
inline ::std::string* DownstreamTlsContext::mutable_alpn_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
  return alpn_protocols_.Mutable(index);
}
inline void DownstreamTlsContext::set_alpn_protocols(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
  alpn_protocols_.Mutable(index)->assign(value);
}
inline void DownstreamTlsContext::set_alpn_protocols(int index, const char* value) {
  alpn_protocols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
}
inline void DownstreamTlsContext::set_alpn_protocols(int index, const char* value, size_t size) {
  alpn_protocols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
}
inline ::std::string* DownstreamTlsContext::add_alpn_protocols() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
  return alpn_protocols_.Add();
}
inline void DownstreamTlsContext::add_alpn_protocols(const ::std::string& value) {
  alpn_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
}
inline void DownstreamTlsContext::add_alpn_protocols(const char* value) {
  alpn_protocols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
}
inline void DownstreamTlsContext::add_alpn_protocols(const char* value, size_t size) {
  alpn_protocols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DownstreamTlsContext::alpn_protocols() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
  return alpn_protocols_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DownstreamTlsContext::mutable_alpn_protocols() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.DownstreamTlsContext.alpn_protocols)
  return &alpn_protocols_;
}

// .envoy.api.v2.CertificateValidationContext client_validation_context = 4;
inline bool DownstreamTlsContext::has_client_validation_context() const {
  return this != internal_default_instance() && client_validation_context_ != NULL;
}
inline void DownstreamTlsContext::clear_client_validation_context() {
  if (GetArenaNoVirtual() == NULL && client_validation_context_ != NULL) delete client_validation_context_;
  client_validation_context_ = NULL;
}
inline const ::envoy::api::v2::CertificateValidationContext& DownstreamTlsContext::client_validation_context() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DownstreamTlsContext.client_validation_context)
  return client_validation_context_ != NULL ? *client_validation_context_
                         : *::envoy::api::v2::CertificateValidationContext::internal_default_instance();
}
inline ::envoy::api::v2::CertificateValidationContext* DownstreamTlsContext::mutable_client_validation_context() {
  
  if (client_validation_context_ == NULL) {
    client_validation_context_ = new ::envoy::api::v2::CertificateValidationContext;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DownstreamTlsContext.client_validation_context)
  return client_validation_context_;
}
inline ::envoy::api::v2::CertificateValidationContext* DownstreamTlsContext::release_client_validation_context() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DownstreamTlsContext.client_validation_context)
  
  ::envoy::api::v2::CertificateValidationContext* temp = client_validation_context_;
  client_validation_context_ = NULL;
  return temp;
}
inline void DownstreamTlsContext::set_allocated_client_validation_context(::envoy::api::v2::CertificateValidationContext* client_validation_context) {
  delete client_validation_context_;
  client_validation_context_ = client_validation_context;
  if (client_validation_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DownstreamTlsContext.client_validation_context)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v2
}  // namespace api
}  // namespace envoy

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::envoy::api::v2::TlsParameters_TlsProtocol> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::TlsParameters_TlsProtocol>() {
  return ::envoy::api::v2::TlsParameters_TlsProtocol_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2ftls_5fcontext_2eproto__INCLUDED
