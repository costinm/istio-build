// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
class TcpProtocolOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TcpProtocolOptions> {
} _TcpProtocolOptions_default_instance_;
class Http1ProtocolOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Http1ProtocolOptions> {
} _Http1ProtocolOptions_default_instance_;
class Http2ProtocolOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Http2ProtocolOptions> {
} _Http2ProtocolOptions_default_instance_;
class GrpcProtocolOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GrpcProtocolOptions> {
} _GrpcProtocolOptions_default_instance_;

namespace protobuf_api_2fprotocol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpProtocolOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Http1ProtocolOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Http2ProtocolOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Http2ProtocolOptions, per_stream_buffer_limit_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Http2ProtocolOptions, hpack_table_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Http2ProtocolOptions, max_concurrent_streams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Http2ProtocolOptions, initial_stream_window_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Http2ProtocolOptions, initial_connection_window_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrpcProtocolOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrpcProtocolOptions, http2_protocol_options_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TcpProtocolOptions)},
  { 5, -1, sizeof(Http1ProtocolOptions)},
  { 10, -1, sizeof(Http2ProtocolOptions)},
  { 20, -1, sizeof(GrpcProtocolOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TcpProtocolOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Http1ProtocolOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Http2ProtocolOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GrpcProtocolOptions_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/protocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _TcpProtocolOptions_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Http1ProtocolOptions_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Http2ProtocolOptions_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _GrpcProtocolOptions_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  _TcpProtocolOptions_default_instance_.DefaultConstruct();
  _Http1ProtocolOptions_default_instance_.DefaultConstruct();
  _Http2ProtocolOptions_default_instance_.DefaultConstruct();
  _GrpcProtocolOptions_default_instance_.DefaultConstruct();
  _Http2ProtocolOptions_default_instance_.get_mutable()->per_stream_buffer_limit_bytes_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Http2ProtocolOptions_default_instance_.get_mutable()->hpack_table_size_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Http2ProtocolOptions_default_instance_.get_mutable()->max_concurrent_streams_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Http2ProtocolOptions_default_instance_.get_mutable()->initial_stream_window_size_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Http2ProtocolOptions_default_instance_.get_mutable()->initial_connection_window_size_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _GrpcProtocolOptions_default_instance_.get_mutable()->http2_protocol_options_ = const_cast< ::envoy::api::v2::Http2ProtocolOptions*>(
      ::envoy::api::v2::Http2ProtocolOptions::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022api/protocol.proto\022\014envoy.api.v2\032\036goog"
      "le/protobuf/wrappers.proto\"\024\n\022TcpProtoco"
      "lOptions\"\026\n\024Http1ProtocolOptions\"\331\002\n\024Htt"
      "p2ProtocolOptions\022C\n\035per_stream_buffer_l"
      "imit_bytes\030\001 \001(\0132\034.google.protobuf.UInt3"
      "2Value\0226\n\020hpack_table_size\030\002 \001(\0132\034.googl"
      "e.protobuf.UInt32Value\022<\n\026max_concurrent"
      "_streams\030\003 \001(\0132\034.google.protobuf.UInt32V"
      "alue\022@\n\032initial_stream_window_size\030\004 \001(\013"
      "2\034.google.protobuf.UInt32Value\022D\n\036initia"
      "l_connection_window_size\030\005 \001(\0132\034.google."
      "protobuf.UInt32Value\"Y\n\023GrpcProtocolOpti"
      "ons\022B\n\026http2_protocol_options\030\001 \001(\0132\".en"
      "voy.api.v2.Http2ProtocolOptionsb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 559);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2fprotocol_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TcpProtocolOptions::TcpProtocolOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.TcpProtocolOptions)
}
TcpProtocolOptions::TcpProtocolOptions(const TcpProtocolOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.TcpProtocolOptions)
}

void TcpProtocolOptions::SharedCtor() {
  _cached_size_ = 0;
}

TcpProtocolOptions::~TcpProtocolOptions() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.TcpProtocolOptions)
  SharedDtor();
}

void TcpProtocolOptions::SharedDtor() {
}

void TcpProtocolOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TcpProtocolOptions::descriptor() {
  protobuf_api_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TcpProtocolOptions& TcpProtocolOptions::default_instance() {
  protobuf_api_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

TcpProtocolOptions* TcpProtocolOptions::New(::google::protobuf::Arena* arena) const {
  TcpProtocolOptions* n = new TcpProtocolOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TcpProtocolOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.TcpProtocolOptions)
}

bool TcpProtocolOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.TcpProtocolOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.TcpProtocolOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.TcpProtocolOptions)
  return false;
#undef DO_
}

void TcpProtocolOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.TcpProtocolOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.TcpProtocolOptions)
}

::google::protobuf::uint8* TcpProtocolOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.TcpProtocolOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.TcpProtocolOptions)
  return target;
}

size_t TcpProtocolOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.TcpProtocolOptions)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpProtocolOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.TcpProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TcpProtocolOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TcpProtocolOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.TcpProtocolOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.TcpProtocolOptions)
    MergeFrom(*source);
  }
}

void TcpProtocolOptions::MergeFrom(const TcpProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.TcpProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TcpProtocolOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.TcpProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TcpProtocolOptions::CopyFrom(const TcpProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.TcpProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpProtocolOptions::IsInitialized() const {
  return true;
}

void TcpProtocolOptions::Swap(TcpProtocolOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TcpProtocolOptions::InternalSwap(TcpProtocolOptions* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TcpProtocolOptions::GetMetadata() const {
  protobuf_api_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TcpProtocolOptions

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Http1ProtocolOptions::Http1ProtocolOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Http1ProtocolOptions)
}
Http1ProtocolOptions::Http1ProtocolOptions(const Http1ProtocolOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Http1ProtocolOptions)
}

void Http1ProtocolOptions::SharedCtor() {
  _cached_size_ = 0;
}

Http1ProtocolOptions::~Http1ProtocolOptions() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Http1ProtocolOptions)
  SharedDtor();
}

void Http1ProtocolOptions::SharedDtor() {
}

void Http1ProtocolOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Http1ProtocolOptions::descriptor() {
  protobuf_api_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Http1ProtocolOptions& Http1ProtocolOptions::default_instance() {
  protobuf_api_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Http1ProtocolOptions* Http1ProtocolOptions::New(::google::protobuf::Arena* arena) const {
  Http1ProtocolOptions* n = new Http1ProtocolOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Http1ProtocolOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Http1ProtocolOptions)
}

bool Http1ProtocolOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Http1ProtocolOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Http1ProtocolOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Http1ProtocolOptions)
  return false;
#undef DO_
}

void Http1ProtocolOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Http1ProtocolOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Http1ProtocolOptions)
}

::google::protobuf::uint8* Http1ProtocolOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Http1ProtocolOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Http1ProtocolOptions)
  return target;
}

size_t Http1ProtocolOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Http1ProtocolOptions)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Http1ProtocolOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Http1ProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const Http1ProtocolOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Http1ProtocolOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Http1ProtocolOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Http1ProtocolOptions)
    MergeFrom(*source);
  }
}

void Http1ProtocolOptions::MergeFrom(const Http1ProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Http1ProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Http1ProtocolOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Http1ProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Http1ProtocolOptions::CopyFrom(const Http1ProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Http1ProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Http1ProtocolOptions::IsInitialized() const {
  return true;
}

void Http1ProtocolOptions::Swap(Http1ProtocolOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Http1ProtocolOptions::InternalSwap(Http1ProtocolOptions* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Http1ProtocolOptions::GetMetadata() const {
  protobuf_api_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Http1ProtocolOptions

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Http2ProtocolOptions::kPerStreamBufferLimitBytesFieldNumber;
const int Http2ProtocolOptions::kHpackTableSizeFieldNumber;
const int Http2ProtocolOptions::kMaxConcurrentStreamsFieldNumber;
const int Http2ProtocolOptions::kInitialStreamWindowSizeFieldNumber;
const int Http2ProtocolOptions::kInitialConnectionWindowSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Http2ProtocolOptions::Http2ProtocolOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Http2ProtocolOptions)
}
Http2ProtocolOptions::Http2ProtocolOptions(const Http2ProtocolOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_per_stream_buffer_limit_bytes()) {
    per_stream_buffer_limit_bytes_ = new ::google::protobuf::UInt32Value(*from.per_stream_buffer_limit_bytes_);
  } else {
    per_stream_buffer_limit_bytes_ = NULL;
  }
  if (from.has_hpack_table_size()) {
    hpack_table_size_ = new ::google::protobuf::UInt32Value(*from.hpack_table_size_);
  } else {
    hpack_table_size_ = NULL;
  }
  if (from.has_max_concurrent_streams()) {
    max_concurrent_streams_ = new ::google::protobuf::UInt32Value(*from.max_concurrent_streams_);
  } else {
    max_concurrent_streams_ = NULL;
  }
  if (from.has_initial_stream_window_size()) {
    initial_stream_window_size_ = new ::google::protobuf::UInt32Value(*from.initial_stream_window_size_);
  } else {
    initial_stream_window_size_ = NULL;
  }
  if (from.has_initial_connection_window_size()) {
    initial_connection_window_size_ = new ::google::protobuf::UInt32Value(*from.initial_connection_window_size_);
  } else {
    initial_connection_window_size_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Http2ProtocolOptions)
}

void Http2ProtocolOptions::SharedCtor() {
  ::memset(&per_stream_buffer_limit_bytes_, 0, reinterpret_cast<char*>(&initial_connection_window_size_) -
    reinterpret_cast<char*>(&per_stream_buffer_limit_bytes_) + sizeof(initial_connection_window_size_));
  _cached_size_ = 0;
}

Http2ProtocolOptions::~Http2ProtocolOptions() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Http2ProtocolOptions)
  SharedDtor();
}

void Http2ProtocolOptions::SharedDtor() {
  if (this != internal_default_instance()) {
    delete per_stream_buffer_limit_bytes_;
  }
  if (this != internal_default_instance()) {
    delete hpack_table_size_;
  }
  if (this != internal_default_instance()) {
    delete max_concurrent_streams_;
  }
  if (this != internal_default_instance()) {
    delete initial_stream_window_size_;
  }
  if (this != internal_default_instance()) {
    delete initial_connection_window_size_;
  }
}

void Http2ProtocolOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Http2ProtocolOptions::descriptor() {
  protobuf_api_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Http2ProtocolOptions& Http2ProtocolOptions::default_instance() {
  protobuf_api_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Http2ProtocolOptions* Http2ProtocolOptions::New(::google::protobuf::Arena* arena) const {
  Http2ProtocolOptions* n = new Http2ProtocolOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Http2ProtocolOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Http2ProtocolOptions)
  if (GetArenaNoVirtual() == NULL && per_stream_buffer_limit_bytes_ != NULL) {
    delete per_stream_buffer_limit_bytes_;
  }
  per_stream_buffer_limit_bytes_ = NULL;
  if (GetArenaNoVirtual() == NULL && hpack_table_size_ != NULL) {
    delete hpack_table_size_;
  }
  hpack_table_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_concurrent_streams_ != NULL) {
    delete max_concurrent_streams_;
  }
  max_concurrent_streams_ = NULL;
  if (GetArenaNoVirtual() == NULL && initial_stream_window_size_ != NULL) {
    delete initial_stream_window_size_;
  }
  initial_stream_window_size_ = NULL;
  if (GetArenaNoVirtual() == NULL && initial_connection_window_size_ != NULL) {
    delete initial_connection_window_size_;
  }
  initial_connection_window_size_ = NULL;
}

bool Http2ProtocolOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Http2ProtocolOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.UInt32Value per_stream_buffer_limit_bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_per_stream_buffer_limit_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value hpack_table_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hpack_table_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value max_concurrent_streams = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_concurrent_streams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value initial_stream_window_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial_stream_window_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value initial_connection_window_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial_connection_window_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Http2ProtocolOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Http2ProtocolOptions)
  return false;
#undef DO_
}

void Http2ProtocolOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Http2ProtocolOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value per_stream_buffer_limit_bytes = 1;
  if (this->has_per_stream_buffer_limit_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->per_stream_buffer_limit_bytes_, output);
  }

  // .google.protobuf.UInt32Value hpack_table_size = 2;
  if (this->has_hpack_table_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->hpack_table_size_, output);
  }

  // .google.protobuf.UInt32Value max_concurrent_streams = 3;
  if (this->has_max_concurrent_streams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->max_concurrent_streams_, output);
  }

  // .google.protobuf.UInt32Value initial_stream_window_size = 4;
  if (this->has_initial_stream_window_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->initial_stream_window_size_, output);
  }

  // .google.protobuf.UInt32Value initial_connection_window_size = 5;
  if (this->has_initial_connection_window_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->initial_connection_window_size_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Http2ProtocolOptions)
}

::google::protobuf::uint8* Http2ProtocolOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Http2ProtocolOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value per_stream_buffer_limit_bytes = 1;
  if (this->has_per_stream_buffer_limit_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->per_stream_buffer_limit_bytes_, deterministic, target);
  }

  // .google.protobuf.UInt32Value hpack_table_size = 2;
  if (this->has_hpack_table_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->hpack_table_size_, deterministic, target);
  }

  // .google.protobuf.UInt32Value max_concurrent_streams = 3;
  if (this->has_max_concurrent_streams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->max_concurrent_streams_, deterministic, target);
  }

  // .google.protobuf.UInt32Value initial_stream_window_size = 4;
  if (this->has_initial_stream_window_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->initial_stream_window_size_, deterministic, target);
  }

  // .google.protobuf.UInt32Value initial_connection_window_size = 5;
  if (this->has_initial_connection_window_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->initial_connection_window_size_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Http2ProtocolOptions)
  return target;
}

size_t Http2ProtocolOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Http2ProtocolOptions)
  size_t total_size = 0;

  // .google.protobuf.UInt32Value per_stream_buffer_limit_bytes = 1;
  if (this->has_per_stream_buffer_limit_bytes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->per_stream_buffer_limit_bytes_);
  }

  // .google.protobuf.UInt32Value hpack_table_size = 2;
  if (this->has_hpack_table_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hpack_table_size_);
  }

  // .google.protobuf.UInt32Value max_concurrent_streams = 3;
  if (this->has_max_concurrent_streams()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_concurrent_streams_);
  }

  // .google.protobuf.UInt32Value initial_stream_window_size = 4;
  if (this->has_initial_stream_window_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->initial_stream_window_size_);
  }

  // .google.protobuf.UInt32Value initial_connection_window_size = 5;
  if (this->has_initial_connection_window_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->initial_connection_window_size_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Http2ProtocolOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Http2ProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const Http2ProtocolOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Http2ProtocolOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Http2ProtocolOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Http2ProtocolOptions)
    MergeFrom(*source);
  }
}

void Http2ProtocolOptions::MergeFrom(const Http2ProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Http2ProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_per_stream_buffer_limit_bytes()) {
    mutable_per_stream_buffer_limit_bytes()->::google::protobuf::UInt32Value::MergeFrom(from.per_stream_buffer_limit_bytes());
  }
  if (from.has_hpack_table_size()) {
    mutable_hpack_table_size()->::google::protobuf::UInt32Value::MergeFrom(from.hpack_table_size());
  }
  if (from.has_max_concurrent_streams()) {
    mutable_max_concurrent_streams()->::google::protobuf::UInt32Value::MergeFrom(from.max_concurrent_streams());
  }
  if (from.has_initial_stream_window_size()) {
    mutable_initial_stream_window_size()->::google::protobuf::UInt32Value::MergeFrom(from.initial_stream_window_size());
  }
  if (from.has_initial_connection_window_size()) {
    mutable_initial_connection_window_size()->::google::protobuf::UInt32Value::MergeFrom(from.initial_connection_window_size());
  }
}

void Http2ProtocolOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Http2ProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Http2ProtocolOptions::CopyFrom(const Http2ProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Http2ProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Http2ProtocolOptions::IsInitialized() const {
  return true;
}

void Http2ProtocolOptions::Swap(Http2ProtocolOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Http2ProtocolOptions::InternalSwap(Http2ProtocolOptions* other) {
  std::swap(per_stream_buffer_limit_bytes_, other->per_stream_buffer_limit_bytes_);
  std::swap(hpack_table_size_, other->hpack_table_size_);
  std::swap(max_concurrent_streams_, other->max_concurrent_streams_);
  std::swap(initial_stream_window_size_, other->initial_stream_window_size_);
  std::swap(initial_connection_window_size_, other->initial_connection_window_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Http2ProtocolOptions::GetMetadata() const {
  protobuf_api_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Http2ProtocolOptions

// .google.protobuf.UInt32Value per_stream_buffer_limit_bytes = 1;
bool Http2ProtocolOptions::has_per_stream_buffer_limit_bytes() const {
  return this != internal_default_instance() && per_stream_buffer_limit_bytes_ != NULL;
}
void Http2ProtocolOptions::clear_per_stream_buffer_limit_bytes() {
  if (GetArenaNoVirtual() == NULL && per_stream_buffer_limit_bytes_ != NULL) delete per_stream_buffer_limit_bytes_;
  per_stream_buffer_limit_bytes_ = NULL;
}
const ::google::protobuf::UInt32Value& Http2ProtocolOptions::per_stream_buffer_limit_bytes() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Http2ProtocolOptions.per_stream_buffer_limit_bytes)
  return per_stream_buffer_limit_bytes_ != NULL ? *per_stream_buffer_limit_bytes_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::mutable_per_stream_buffer_limit_bytes() {
  
  if (per_stream_buffer_limit_bytes_ == NULL) {
    per_stream_buffer_limit_bytes_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Http2ProtocolOptions.per_stream_buffer_limit_bytes)
  return per_stream_buffer_limit_bytes_;
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::release_per_stream_buffer_limit_bytes() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Http2ProtocolOptions.per_stream_buffer_limit_bytes)
  
  ::google::protobuf::UInt32Value* temp = per_stream_buffer_limit_bytes_;
  per_stream_buffer_limit_bytes_ = NULL;
  return temp;
}
void Http2ProtocolOptions::set_allocated_per_stream_buffer_limit_bytes(::google::protobuf::UInt32Value* per_stream_buffer_limit_bytes) {
  delete per_stream_buffer_limit_bytes_;
  if (per_stream_buffer_limit_bytes != NULL && per_stream_buffer_limit_bytes->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_per_stream_buffer_limit_bytes = new ::google::protobuf::UInt32Value;
    new_per_stream_buffer_limit_bytes->CopyFrom(*per_stream_buffer_limit_bytes);
    per_stream_buffer_limit_bytes = new_per_stream_buffer_limit_bytes;
  }
  per_stream_buffer_limit_bytes_ = per_stream_buffer_limit_bytes;
  if (per_stream_buffer_limit_bytes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Http2ProtocolOptions.per_stream_buffer_limit_bytes)
}

// .google.protobuf.UInt32Value hpack_table_size = 2;
bool Http2ProtocolOptions::has_hpack_table_size() const {
  return this != internal_default_instance() && hpack_table_size_ != NULL;
}
void Http2ProtocolOptions::clear_hpack_table_size() {
  if (GetArenaNoVirtual() == NULL && hpack_table_size_ != NULL) delete hpack_table_size_;
  hpack_table_size_ = NULL;
}
const ::google::protobuf::UInt32Value& Http2ProtocolOptions::hpack_table_size() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Http2ProtocolOptions.hpack_table_size)
  return hpack_table_size_ != NULL ? *hpack_table_size_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::mutable_hpack_table_size() {
  
  if (hpack_table_size_ == NULL) {
    hpack_table_size_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Http2ProtocolOptions.hpack_table_size)
  return hpack_table_size_;
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::release_hpack_table_size() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Http2ProtocolOptions.hpack_table_size)
  
  ::google::protobuf::UInt32Value* temp = hpack_table_size_;
  hpack_table_size_ = NULL;
  return temp;
}
void Http2ProtocolOptions::set_allocated_hpack_table_size(::google::protobuf::UInt32Value* hpack_table_size) {
  delete hpack_table_size_;
  if (hpack_table_size != NULL && hpack_table_size->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_hpack_table_size = new ::google::protobuf::UInt32Value;
    new_hpack_table_size->CopyFrom(*hpack_table_size);
    hpack_table_size = new_hpack_table_size;
  }
  hpack_table_size_ = hpack_table_size;
  if (hpack_table_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Http2ProtocolOptions.hpack_table_size)
}

// .google.protobuf.UInt32Value max_concurrent_streams = 3;
bool Http2ProtocolOptions::has_max_concurrent_streams() const {
  return this != internal_default_instance() && max_concurrent_streams_ != NULL;
}
void Http2ProtocolOptions::clear_max_concurrent_streams() {
  if (GetArenaNoVirtual() == NULL && max_concurrent_streams_ != NULL) delete max_concurrent_streams_;
  max_concurrent_streams_ = NULL;
}
const ::google::protobuf::UInt32Value& Http2ProtocolOptions::max_concurrent_streams() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Http2ProtocolOptions.max_concurrent_streams)
  return max_concurrent_streams_ != NULL ? *max_concurrent_streams_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::mutable_max_concurrent_streams() {
  
  if (max_concurrent_streams_ == NULL) {
    max_concurrent_streams_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Http2ProtocolOptions.max_concurrent_streams)
  return max_concurrent_streams_;
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::release_max_concurrent_streams() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Http2ProtocolOptions.max_concurrent_streams)
  
  ::google::protobuf::UInt32Value* temp = max_concurrent_streams_;
  max_concurrent_streams_ = NULL;
  return temp;
}
void Http2ProtocolOptions::set_allocated_max_concurrent_streams(::google::protobuf::UInt32Value* max_concurrent_streams) {
  delete max_concurrent_streams_;
  if (max_concurrent_streams != NULL && max_concurrent_streams->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_concurrent_streams = new ::google::protobuf::UInt32Value;
    new_max_concurrent_streams->CopyFrom(*max_concurrent_streams);
    max_concurrent_streams = new_max_concurrent_streams;
  }
  max_concurrent_streams_ = max_concurrent_streams;
  if (max_concurrent_streams) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Http2ProtocolOptions.max_concurrent_streams)
}

// .google.protobuf.UInt32Value initial_stream_window_size = 4;
bool Http2ProtocolOptions::has_initial_stream_window_size() const {
  return this != internal_default_instance() && initial_stream_window_size_ != NULL;
}
void Http2ProtocolOptions::clear_initial_stream_window_size() {
  if (GetArenaNoVirtual() == NULL && initial_stream_window_size_ != NULL) delete initial_stream_window_size_;
  initial_stream_window_size_ = NULL;
}
const ::google::protobuf::UInt32Value& Http2ProtocolOptions::initial_stream_window_size() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Http2ProtocolOptions.initial_stream_window_size)
  return initial_stream_window_size_ != NULL ? *initial_stream_window_size_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::mutable_initial_stream_window_size() {
  
  if (initial_stream_window_size_ == NULL) {
    initial_stream_window_size_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Http2ProtocolOptions.initial_stream_window_size)
  return initial_stream_window_size_;
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::release_initial_stream_window_size() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Http2ProtocolOptions.initial_stream_window_size)
  
  ::google::protobuf::UInt32Value* temp = initial_stream_window_size_;
  initial_stream_window_size_ = NULL;
  return temp;
}
void Http2ProtocolOptions::set_allocated_initial_stream_window_size(::google::protobuf::UInt32Value* initial_stream_window_size) {
  delete initial_stream_window_size_;
  if (initial_stream_window_size != NULL && initial_stream_window_size->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_initial_stream_window_size = new ::google::protobuf::UInt32Value;
    new_initial_stream_window_size->CopyFrom(*initial_stream_window_size);
    initial_stream_window_size = new_initial_stream_window_size;
  }
  initial_stream_window_size_ = initial_stream_window_size;
  if (initial_stream_window_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Http2ProtocolOptions.initial_stream_window_size)
}

// .google.protobuf.UInt32Value initial_connection_window_size = 5;
bool Http2ProtocolOptions::has_initial_connection_window_size() const {
  return this != internal_default_instance() && initial_connection_window_size_ != NULL;
}
void Http2ProtocolOptions::clear_initial_connection_window_size() {
  if (GetArenaNoVirtual() == NULL && initial_connection_window_size_ != NULL) delete initial_connection_window_size_;
  initial_connection_window_size_ = NULL;
}
const ::google::protobuf::UInt32Value& Http2ProtocolOptions::initial_connection_window_size() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Http2ProtocolOptions.initial_connection_window_size)
  return initial_connection_window_size_ != NULL ? *initial_connection_window_size_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::mutable_initial_connection_window_size() {
  
  if (initial_connection_window_size_ == NULL) {
    initial_connection_window_size_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Http2ProtocolOptions.initial_connection_window_size)
  return initial_connection_window_size_;
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::release_initial_connection_window_size() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Http2ProtocolOptions.initial_connection_window_size)
  
  ::google::protobuf::UInt32Value* temp = initial_connection_window_size_;
  initial_connection_window_size_ = NULL;
  return temp;
}
void Http2ProtocolOptions::set_allocated_initial_connection_window_size(::google::protobuf::UInt32Value* initial_connection_window_size) {
  delete initial_connection_window_size_;
  if (initial_connection_window_size != NULL && initial_connection_window_size->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_initial_connection_window_size = new ::google::protobuf::UInt32Value;
    new_initial_connection_window_size->CopyFrom(*initial_connection_window_size);
    initial_connection_window_size = new_initial_connection_window_size;
  }
  initial_connection_window_size_ = initial_connection_window_size;
  if (initial_connection_window_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Http2ProtocolOptions.initial_connection_window_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GrpcProtocolOptions::kHttp2ProtocolOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GrpcProtocolOptions::GrpcProtocolOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.GrpcProtocolOptions)
}
GrpcProtocolOptions::GrpcProtocolOptions(const GrpcProtocolOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_http2_protocol_options()) {
    http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions(*from.http2_protocol_options_);
  } else {
    http2_protocol_options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.GrpcProtocolOptions)
}

void GrpcProtocolOptions::SharedCtor() {
  http2_protocol_options_ = NULL;
  _cached_size_ = 0;
}

GrpcProtocolOptions::~GrpcProtocolOptions() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.GrpcProtocolOptions)
  SharedDtor();
}

void GrpcProtocolOptions::SharedDtor() {
  if (this != internal_default_instance()) {
    delete http2_protocol_options_;
  }
}

void GrpcProtocolOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrpcProtocolOptions::descriptor() {
  protobuf_api_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GrpcProtocolOptions& GrpcProtocolOptions::default_instance() {
  protobuf_api_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

GrpcProtocolOptions* GrpcProtocolOptions::New(::google::protobuf::Arena* arena) const {
  GrpcProtocolOptions* n = new GrpcProtocolOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GrpcProtocolOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.GrpcProtocolOptions)
  if (GetArenaNoVirtual() == NULL && http2_protocol_options_ != NULL) {
    delete http2_protocol_options_;
  }
  http2_protocol_options_ = NULL;
}

bool GrpcProtocolOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.GrpcProtocolOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http2_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.GrpcProtocolOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.GrpcProtocolOptions)
  return false;
#undef DO_
}

void GrpcProtocolOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.GrpcProtocolOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 1;
  if (this->has_http2_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->http2_protocol_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.GrpcProtocolOptions)
}

::google::protobuf::uint8* GrpcProtocolOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.GrpcProtocolOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 1;
  if (this->has_http2_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->http2_protocol_options_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.GrpcProtocolOptions)
  return target;
}

size_t GrpcProtocolOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.GrpcProtocolOptions)
  size_t total_size = 0;

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 1;
  if (this->has_http2_protocol_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->http2_protocol_options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrpcProtocolOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.GrpcProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GrpcProtocolOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GrpcProtocolOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.GrpcProtocolOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.GrpcProtocolOptions)
    MergeFrom(*source);
  }
}

void GrpcProtocolOptions::MergeFrom(const GrpcProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.GrpcProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_http2_protocol_options()) {
    mutable_http2_protocol_options()->::envoy::api::v2::Http2ProtocolOptions::MergeFrom(from.http2_protocol_options());
  }
}

void GrpcProtocolOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.GrpcProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrpcProtocolOptions::CopyFrom(const GrpcProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.GrpcProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrpcProtocolOptions::IsInitialized() const {
  return true;
}

void GrpcProtocolOptions::Swap(GrpcProtocolOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GrpcProtocolOptions::InternalSwap(GrpcProtocolOptions* other) {
  std::swap(http2_protocol_options_, other->http2_protocol_options_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GrpcProtocolOptions::GetMetadata() const {
  protobuf_api_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GrpcProtocolOptions

// .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 1;
bool GrpcProtocolOptions::has_http2_protocol_options() const {
  return this != internal_default_instance() && http2_protocol_options_ != NULL;
}
void GrpcProtocolOptions::clear_http2_protocol_options() {
  if (GetArenaNoVirtual() == NULL && http2_protocol_options_ != NULL) delete http2_protocol_options_;
  http2_protocol_options_ = NULL;
}
const ::envoy::api::v2::Http2ProtocolOptions& GrpcProtocolOptions::http2_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.GrpcProtocolOptions.http2_protocol_options)
  return http2_protocol_options_ != NULL ? *http2_protocol_options_
                         : *::envoy::api::v2::Http2ProtocolOptions::internal_default_instance();
}
::envoy::api::v2::Http2ProtocolOptions* GrpcProtocolOptions::mutable_http2_protocol_options() {
  
  if (http2_protocol_options_ == NULL) {
    http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.GrpcProtocolOptions.http2_protocol_options)
  return http2_protocol_options_;
}
::envoy::api::v2::Http2ProtocolOptions* GrpcProtocolOptions::release_http2_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.GrpcProtocolOptions.http2_protocol_options)
  
  ::envoy::api::v2::Http2ProtocolOptions* temp = http2_protocol_options_;
  http2_protocol_options_ = NULL;
  return temp;
}
void GrpcProtocolOptions::set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options) {
  delete http2_protocol_options_;
  http2_protocol_options_ = http2_protocol_options;
  if (http2_protocol_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.GrpcProtocolOptions.http2_protocol_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
