// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/base.proto

#ifndef PROTOBUF_api_2fbase_2eproto__INCLUDED
#define PROTOBUF_api_2fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "api/address.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
class AggregatedConfigSource;
class AggregatedConfigSourceDefaultTypeInternal;
extern AggregatedConfigSourceDefaultTypeInternal _AggregatedConfigSource_default_instance_;
class ApiConfigSource;
class ApiConfigSourceDefaultTypeInternal;
extern ApiConfigSourceDefaultTypeInternal _ApiConfigSource_default_instance_;
class ConfigSource;
class ConfigSourceDefaultTypeInternal;
extern ConfigSourceDefaultTypeInternal _ConfigSource_default_instance_;
class Endpoint;
class EndpointDefaultTypeInternal;
extern EndpointDefaultTypeInternal _Endpoint_default_instance_;
class HeaderValue;
class HeaderValueDefaultTypeInternal;
extern HeaderValueDefaultTypeInternal _HeaderValue_default_instance_;
class HeaderValueOption;
class HeaderValueOptionDefaultTypeInternal;
extern HeaderValueOptionDefaultTypeInternal _HeaderValueOption_default_instance_;
class Locality;
class LocalityDefaultTypeInternal;
extern LocalityDefaultTypeInternal _Locality_default_instance_;
class Metadata;
class MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Metadata_FilterMetadataEntry;
class Metadata_FilterMetadataEntryDefaultTypeInternal;
extern Metadata_FilterMetadataEntryDefaultTypeInternal _Metadata_FilterMetadataEntry_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class RuntimeUInt32;
class RuntimeUInt32DefaultTypeInternal;
extern RuntimeUInt32DefaultTypeInternal _RuntimeUInt32_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace envoy

namespace envoy {
namespace api {
namespace v2 {

namespace protobuf_api_2fbase_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_api_2fbase_2eproto

enum ApiConfigSource_ApiType {
  ApiConfigSource_ApiType_REST_LEGACY = 0,
  ApiConfigSource_ApiType_REST = 1,
  ApiConfigSource_ApiType_GRPC = 2,
  ApiConfigSource_ApiType_ApiConfigSource_ApiType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ApiConfigSource_ApiType_ApiConfigSource_ApiType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ApiConfigSource_ApiType_IsValid(int value);
const ApiConfigSource_ApiType ApiConfigSource_ApiType_ApiType_MIN = ApiConfigSource_ApiType_REST_LEGACY;
const ApiConfigSource_ApiType ApiConfigSource_ApiType_ApiType_MAX = ApiConfigSource_ApiType_GRPC;
const int ApiConfigSource_ApiType_ApiType_ARRAYSIZE = ApiConfigSource_ApiType_ApiType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ApiConfigSource_ApiType_descriptor();
inline const ::std::string& ApiConfigSource_ApiType_Name(ApiConfigSource_ApiType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ApiConfigSource_ApiType_descriptor(), value);
}
inline bool ApiConfigSource_ApiType_Parse(
    const ::std::string& name, ApiConfigSource_ApiType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ApiConfigSource_ApiType>(
    ApiConfigSource_ApiType_descriptor(), name, value);
}
enum RoutingPriority {
  DEFAULT = 0,
  HIGH = 1,
  RoutingPriority_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RoutingPriority_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RoutingPriority_IsValid(int value);
const RoutingPriority RoutingPriority_MIN = DEFAULT;
const RoutingPriority RoutingPriority_MAX = HIGH;
const int RoutingPriority_ARRAYSIZE = RoutingPriority_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoutingPriority_descriptor();
inline const ::std::string& RoutingPriority_Name(RoutingPriority value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoutingPriority_descriptor(), value);
}
inline bool RoutingPriority_Parse(
    const ::std::string& name, RoutingPriority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoutingPriority>(
    RoutingPriority_descriptor(), name, value);
}
enum RequestMethod {
  METHOD_UNSPECIFIED = 0,
  GET = 1,
  HEAD = 2,
  POST = 3,
  PUT = 4,
  DELETE = 5,
  CONNECT = 6,
  OPTIONS = 7,
  TRACE = 8,
  RequestMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RequestMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RequestMethod_IsValid(int value);
const RequestMethod RequestMethod_MIN = METHOD_UNSPECIFIED;
const RequestMethod RequestMethod_MAX = TRACE;
const int RequestMethod_ARRAYSIZE = RequestMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestMethod_descriptor();
inline const ::std::string& RequestMethod_Name(RequestMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestMethod_descriptor(), value);
}
inline bool RequestMethod_Parse(
    const ::std::string& name, RequestMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestMethod>(
    RequestMethod_descriptor(), name, value);
}
// ===================================================================

class Locality : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.Locality) */ {
 public:
  Locality();
  virtual ~Locality();

  Locality(const Locality& from);

  inline Locality& operator=(const Locality& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Locality(Locality&& from) noexcept
    : Locality() {
    *this = ::std::move(from);
  }

  inline Locality& operator=(Locality&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Locality& default_instance();

  static inline const Locality* internal_default_instance() {
    return reinterpret_cast<const Locality*>(
               &_Locality_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Locality* other);
  friend void swap(Locality& a, Locality& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Locality* New() const PROTOBUF_FINAL { return New(NULL); }

  Locality* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Locality& from);
  void MergeFrom(const Locality& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Locality* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string region = 1;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string sub_zone = 3;
  void clear_sub_zone();
  static const int kSubZoneFieldNumber = 3;
  const ::std::string& sub_zone() const;
  void set_sub_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_sub_zone(::std::string&& value);
  #endif
  void set_sub_zone(const char* value);
  void set_sub_zone(const char* value, size_t size);
  ::std::string* mutable_sub_zone();
  ::std::string* release_sub_zone();
  void set_allocated_sub_zone(::std::string* sub_zone);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.Locality)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr sub_zone_;
  mutable int _cached_size_;
  friend struct protobuf_api_2fbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string cluster = 2;
  void clear_cluster();
  static const int kClusterFieldNumber = 2;
  const ::std::string& cluster() const;
  void set_cluster(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster(::std::string&& value);
  #endif
  void set_cluster(const char* value);
  void set_cluster(const char* value, size_t size);
  ::std::string* mutable_cluster();
  ::std::string* release_cluster();
  void set_allocated_cluster(::std::string* cluster);

  // string build_version = 5;
  void clear_build_version();
  static const int kBuildVersionFieldNumber = 5;
  const ::std::string& build_version() const;
  void set_build_version(const ::std::string& value);
  #if LANG_CXX11
  void set_build_version(::std::string&& value);
  #endif
  void set_build_version(const char* value);
  void set_build_version(const char* value, size_t size);
  ::std::string* mutable_build_version();
  ::std::string* release_build_version();
  void set_allocated_build_version(::std::string* build_version);

  // .google.protobuf.Struct metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::google::protobuf::Struct& metadata() const;
  ::google::protobuf::Struct* mutable_metadata();
  ::google::protobuf::Struct* release_metadata();
  void set_allocated_metadata(::google::protobuf::Struct* metadata);

  // .envoy.api.v2.Locality locality = 4;
  bool has_locality() const;
  void clear_locality();
  static const int kLocalityFieldNumber = 4;
  const ::envoy::api::v2::Locality& locality() const;
  ::envoy::api::v2::Locality* mutable_locality();
  ::envoy::api::v2::Locality* release_locality();
  void set_allocated_locality(::envoy::api::v2::Locality* locality);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr cluster_;
  ::google::protobuf::internal::ArenaStringPtr build_version_;
  ::google::protobuf::Struct* metadata_;
  ::envoy::api::v2::Locality* locality_;
  mutable int _cached_size_;
  friend struct protobuf_api_2fbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Endpoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.Endpoint) */ {
 public:
  Endpoint();
  virtual ~Endpoint();

  Endpoint(const Endpoint& from);

  inline Endpoint& operator=(const Endpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Endpoint(Endpoint&& from) noexcept
    : Endpoint() {
    *this = ::std::move(from);
  }

  inline Endpoint& operator=(Endpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Endpoint& default_instance();

  static inline const Endpoint* internal_default_instance() {
    return reinterpret_cast<const Endpoint*>(
               &_Endpoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Endpoint* other);
  friend void swap(Endpoint& a, Endpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Endpoint* New() const PROTOBUF_FINAL { return New(NULL); }

  Endpoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Endpoint& from);
  void MergeFrom(const Endpoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Endpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .envoy.api.v2.Address address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::envoy::api::v2::Address& address() const;
  ::envoy::api::v2::Address* mutable_address();
  ::envoy::api::v2::Address* release_address();
  void set_allocated_address(::envoy::api::v2::Address* address);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.Endpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::envoy::api::v2::Address* address_;
  mutable int _cached_size_;
  friend struct protobuf_api_2fbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Metadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.Metadata) */ {
 public:
  Metadata();
  virtual ~Metadata();

  Metadata(const Metadata& from);

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(Metadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Metadata& default_instance();

  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Metadata* other);
  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const PROTOBUF_FINAL { return New(NULL); }

  Metadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Metadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .google.protobuf.Struct> filter_metadata = 1;
  int filter_metadata_size() const;
  void clear_filter_metadata();
  static const int kFilterMetadataFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::Struct >&
      filter_metadata() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::Struct >*
      mutable_filter_metadata();

  // @@protoc_insertion_point(class_scope:envoy.api.v2.Metadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class Metadata_FilterMetadataEntry : public ::google::protobuf::internal::MapEntry<Metadata_FilterMetadataEntry, 
      ::std::string, ::google::protobuf::Struct,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Metadata_FilterMetadataEntry, 
      ::std::string, ::google::protobuf::Struct,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    Metadata_FilterMetadataEntry();
    Metadata_FilterMetadataEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Metadata_FilterMetadataEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Metadata_FilterMetadataEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      Metadata_FilterMetadataEntry,
      ::std::string, ::google::protobuf::Struct,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > filter_metadata_;
  private:
  mutable int _cached_size_;
  friend struct protobuf_api_2fbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RuntimeUInt32 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.RuntimeUInt32) */ {
 public:
  RuntimeUInt32();
  virtual ~RuntimeUInt32();

  RuntimeUInt32(const RuntimeUInt32& from);

  inline RuntimeUInt32& operator=(const RuntimeUInt32& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RuntimeUInt32(RuntimeUInt32&& from) noexcept
    : RuntimeUInt32() {
    *this = ::std::move(from);
  }

  inline RuntimeUInt32& operator=(RuntimeUInt32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RuntimeUInt32& default_instance();

  static inline const RuntimeUInt32* internal_default_instance() {
    return reinterpret_cast<const RuntimeUInt32*>(
               &_RuntimeUInt32_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RuntimeUInt32* other);
  friend void swap(RuntimeUInt32& a, RuntimeUInt32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RuntimeUInt32* New() const PROTOBUF_FINAL { return New(NULL); }

  RuntimeUInt32* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RuntimeUInt32& from);
  void MergeFrom(const RuntimeUInt32& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RuntimeUInt32* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string runtime_key = 3;
  void clear_runtime_key();
  static const int kRuntimeKeyFieldNumber = 3;
  const ::std::string& runtime_key() const;
  void set_runtime_key(const ::std::string& value);
  #if LANG_CXX11
  void set_runtime_key(::std::string&& value);
  #endif
  void set_runtime_key(const char* value);
  void set_runtime_key(const char* value, size_t size);
  ::std::string* mutable_runtime_key();
  ::std::string* release_runtime_key();
  void set_allocated_runtime_key(::std::string* runtime_key);

  // uint32 default_value = 2;
  void clear_default_value();
  static const int kDefaultValueFieldNumber = 2;
  ::google::protobuf::uint32 default_value() const;
  void set_default_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.RuntimeUInt32)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr runtime_key_;
  ::google::protobuf::uint32 default_value_;
  mutable int _cached_size_;
  friend struct protobuf_api_2fbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeaderValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.HeaderValue) */ {
 public:
  HeaderValue();
  virtual ~HeaderValue();

  HeaderValue(const HeaderValue& from);

  inline HeaderValue& operator=(const HeaderValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeaderValue(HeaderValue&& from) noexcept
    : HeaderValue() {
    *this = ::std::move(from);
  }

  inline HeaderValue& operator=(HeaderValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeaderValue& default_instance();

  static inline const HeaderValue* internal_default_instance() {
    return reinterpret_cast<const HeaderValue*>(
               &_HeaderValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(HeaderValue* other);
  friend void swap(HeaderValue& a, HeaderValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeaderValue* New() const PROTOBUF_FINAL { return New(NULL); }

  HeaderValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeaderValue& from);
  void MergeFrom(const HeaderValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeaderValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.HeaderValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct protobuf_api_2fbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeaderValueOption : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.HeaderValueOption) */ {
 public:
  HeaderValueOption();
  virtual ~HeaderValueOption();

  HeaderValueOption(const HeaderValueOption& from);

  inline HeaderValueOption& operator=(const HeaderValueOption& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeaderValueOption(HeaderValueOption&& from) noexcept
    : HeaderValueOption() {
    *this = ::std::move(from);
  }

  inline HeaderValueOption& operator=(HeaderValueOption&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeaderValueOption& default_instance();

  static inline const HeaderValueOption* internal_default_instance() {
    return reinterpret_cast<const HeaderValueOption*>(
               &_HeaderValueOption_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(HeaderValueOption* other);
  friend void swap(HeaderValueOption& a, HeaderValueOption& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeaderValueOption* New() const PROTOBUF_FINAL { return New(NULL); }

  HeaderValueOption* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeaderValueOption& from);
  void MergeFrom(const HeaderValueOption& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeaderValueOption* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .envoy.api.v2.HeaderValue header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::envoy::api::v2::HeaderValue& header() const;
  ::envoy::api::v2::HeaderValue* mutable_header();
  ::envoy::api::v2::HeaderValue* release_header();
  void set_allocated_header(::envoy::api::v2::HeaderValue* header);

  // .google.protobuf.BoolValue append = 2;
  bool has_append() const;
  void clear_append();
  static const int kAppendFieldNumber = 2;
  const ::google::protobuf::BoolValue& append() const;
  ::google::protobuf::BoolValue* mutable_append();
  ::google::protobuf::BoolValue* release_append();
  void set_allocated_append(::google::protobuf::BoolValue* append);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.HeaderValueOption)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::envoy::api::v2::HeaderValue* header_;
  ::google::protobuf::BoolValue* append_;
  mutable int _cached_size_;
  friend struct protobuf_api_2fbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ApiConfigSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.ApiConfigSource) */ {
 public:
  ApiConfigSource();
  virtual ~ApiConfigSource();

  ApiConfigSource(const ApiConfigSource& from);

  inline ApiConfigSource& operator=(const ApiConfigSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ApiConfigSource(ApiConfigSource&& from) noexcept
    : ApiConfigSource() {
    *this = ::std::move(from);
  }

  inline ApiConfigSource& operator=(ApiConfigSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ApiConfigSource& default_instance();

  static inline const ApiConfigSource* internal_default_instance() {
    return reinterpret_cast<const ApiConfigSource*>(
               &_ApiConfigSource_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ApiConfigSource* other);
  friend void swap(ApiConfigSource& a, ApiConfigSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ApiConfigSource* New() const PROTOBUF_FINAL { return New(NULL); }

  ApiConfigSource* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ApiConfigSource& from);
  void MergeFrom(const ApiConfigSource& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ApiConfigSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ApiConfigSource_ApiType ApiType;
  static const ApiType REST_LEGACY =
    ApiConfigSource_ApiType_REST_LEGACY;
  static const ApiType REST =
    ApiConfigSource_ApiType_REST;
  static const ApiType GRPC =
    ApiConfigSource_ApiType_GRPC;
  static inline bool ApiType_IsValid(int value) {
    return ApiConfigSource_ApiType_IsValid(value);
  }
  static const ApiType ApiType_MIN =
    ApiConfigSource_ApiType_ApiType_MIN;
  static const ApiType ApiType_MAX =
    ApiConfigSource_ApiType_ApiType_MAX;
  static const int ApiType_ARRAYSIZE =
    ApiConfigSource_ApiType_ApiType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ApiType_descriptor() {
    return ApiConfigSource_ApiType_descriptor();
  }
  static inline const ::std::string& ApiType_Name(ApiType value) {
    return ApiConfigSource_ApiType_Name(value);
  }
  static inline bool ApiType_Parse(const ::std::string& name,
      ApiType* value) {
    return ApiConfigSource_ApiType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string cluster_name = 2;
  int cluster_name_size() const;
  void clear_cluster_name();
  static const int kClusterNameFieldNumber = 2;
  const ::std::string& cluster_name(int index) const;
  ::std::string* mutable_cluster_name(int index);
  void set_cluster_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_name(int index, ::std::string&& value);
  #endif
  void set_cluster_name(int index, const char* value);
  void set_cluster_name(int index, const char* value, size_t size);
  ::std::string* add_cluster_name();
  void add_cluster_name(const ::std::string& value);
  #if LANG_CXX11
  void add_cluster_name(::std::string&& value);
  #endif
  void add_cluster_name(const char* value);
  void add_cluster_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& cluster_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cluster_name();

  // .google.protobuf.Duration refresh_delay = 3;
  bool has_refresh_delay() const;
  void clear_refresh_delay();
  static const int kRefreshDelayFieldNumber = 3;
  const ::google::protobuf::Duration& refresh_delay() const;
  ::google::protobuf::Duration* mutable_refresh_delay();
  ::google::protobuf::Duration* release_refresh_delay();
  void set_allocated_refresh_delay(::google::protobuf::Duration* refresh_delay);

  // .envoy.api.v2.ApiConfigSource.ApiType api_type = 1;
  void clear_api_type();
  static const int kApiTypeFieldNumber = 1;
  ::envoy::api::v2::ApiConfigSource_ApiType api_type() const;
  void set_api_type(::envoy::api::v2::ApiConfigSource_ApiType value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.ApiConfigSource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cluster_name_;
  ::google::protobuf::Duration* refresh_delay_;
  int api_type_;
  mutable int _cached_size_;
  friend struct protobuf_api_2fbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AggregatedConfigSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.AggregatedConfigSource) */ {
 public:
  AggregatedConfigSource();
  virtual ~AggregatedConfigSource();

  AggregatedConfigSource(const AggregatedConfigSource& from);

  inline AggregatedConfigSource& operator=(const AggregatedConfigSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AggregatedConfigSource(AggregatedConfigSource&& from) noexcept
    : AggregatedConfigSource() {
    *this = ::std::move(from);
  }

  inline AggregatedConfigSource& operator=(AggregatedConfigSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AggregatedConfigSource& default_instance();

  static inline const AggregatedConfigSource* internal_default_instance() {
    return reinterpret_cast<const AggregatedConfigSource*>(
               &_AggregatedConfigSource_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(AggregatedConfigSource* other);
  friend void swap(AggregatedConfigSource& a, AggregatedConfigSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AggregatedConfigSource* New() const PROTOBUF_FINAL { return New(NULL); }

  AggregatedConfigSource* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AggregatedConfigSource& from);
  void MergeFrom(const AggregatedConfigSource& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AggregatedConfigSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:envoy.api.v2.AggregatedConfigSource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_api_2fbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.ConfigSource) */ {
 public:
  ConfigSource();
  virtual ~ConfigSource();

  ConfigSource(const ConfigSource& from);

  inline ConfigSource& operator=(const ConfigSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigSource(ConfigSource&& from) noexcept
    : ConfigSource() {
    *this = ::std::move(from);
  }

  inline ConfigSource& operator=(ConfigSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigSource& default_instance();

  enum ConfigSourceSpecifierCase {
    kPath = 1,
    kApiConfigSource = 2,
    kAds = 3,
    CONFIG_SOURCE_SPECIFIER_NOT_SET = 0,
  };

  static inline const ConfigSource* internal_default_instance() {
    return reinterpret_cast<const ConfigSource*>(
               &_ConfigSource_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ConfigSource* other);
  friend void swap(ConfigSource& a, ConfigSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigSource* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigSource* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigSource& from);
  void MergeFrom(const ConfigSource& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  private:
  bool has_path() const;
  public:
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .envoy.api.v2.ApiConfigSource api_config_source = 2;
  bool has_api_config_source() const;
  void clear_api_config_source();
  static const int kApiConfigSourceFieldNumber = 2;
  const ::envoy::api::v2::ApiConfigSource& api_config_source() const;
  ::envoy::api::v2::ApiConfigSource* mutable_api_config_source();
  ::envoy::api::v2::ApiConfigSource* release_api_config_source();
  void set_allocated_api_config_source(::envoy::api::v2::ApiConfigSource* api_config_source);

  // .envoy.api.v2.AggregatedConfigSource ads = 3;
  bool has_ads() const;
  void clear_ads();
  static const int kAdsFieldNumber = 3;
  const ::envoy::api::v2::AggregatedConfigSource& ads() const;
  ::envoy::api::v2::AggregatedConfigSource* mutable_ads();
  ::envoy::api::v2::AggregatedConfigSource* release_ads();
  void set_allocated_ads(::envoy::api::v2::AggregatedConfigSource* ads);

  ConfigSourceSpecifierCase config_source_specifier_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.ConfigSource)
 private:
  void set_has_path();
  void set_has_api_config_source();
  void set_has_ads();

  inline bool has_config_source_specifier() const;
  void clear_config_source_specifier();
  inline void clear_has_config_source_specifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ConfigSourceSpecifierUnion {
    ConfigSourceSpecifierUnion() {}
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::envoy::api::v2::ApiConfigSource* api_config_source_;
    ::envoy::api::v2::AggregatedConfigSource* ads_;
  } config_source_specifier_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_api_2fbase_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Locality

// string region = 1;
inline void Locality::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Locality::region() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Locality.region)
  return region_.GetNoArena();
}
inline void Locality::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Locality.region)
}
#if LANG_CXX11
inline void Locality::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Locality.region)
}
#endif
inline void Locality::set_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Locality.region)
}
inline void Locality::set_region(const char* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Locality.region)
}
inline ::std::string* Locality::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Locality.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Locality::release_region() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Locality.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Locality::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Locality.region)
}

// string zone = 2;
inline void Locality::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Locality::zone() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Locality.zone)
  return zone_.GetNoArena();
}
inline void Locality::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Locality.zone)
}
#if LANG_CXX11
inline void Locality::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Locality.zone)
}
#endif
inline void Locality::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Locality.zone)
}
inline void Locality::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Locality.zone)
}
inline ::std::string* Locality::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Locality.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Locality::release_zone() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Locality.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Locality::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Locality.zone)
}

// string sub_zone = 3;
inline void Locality::clear_sub_zone() {
  sub_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Locality::sub_zone() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Locality.sub_zone)
  return sub_zone_.GetNoArena();
}
inline void Locality::set_sub_zone(const ::std::string& value) {
  
  sub_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Locality.sub_zone)
}
#if LANG_CXX11
inline void Locality::set_sub_zone(::std::string&& value) {
  
  sub_zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Locality.sub_zone)
}
#endif
inline void Locality::set_sub_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sub_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Locality.sub_zone)
}
inline void Locality::set_sub_zone(const char* value, size_t size) {
  
  sub_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Locality.sub_zone)
}
inline ::std::string* Locality::mutable_sub_zone() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Locality.sub_zone)
  return sub_zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Locality::release_sub_zone() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Locality.sub_zone)
  
  return sub_zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Locality::set_allocated_sub_zone(::std::string* sub_zone) {
  if (sub_zone != NULL) {
    
  } else {
    
  }
  sub_zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_zone);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Locality.sub_zone)
}

// -------------------------------------------------------------------

// Node

// string id = 1;
inline void Node::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Node.id)
  return id_.GetNoArena();
}
inline void Node::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Node.id)
}
#if LANG_CXX11
inline void Node::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Node.id)
}
#endif
inline void Node::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Node.id)
}
inline void Node::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Node.id)
}
inline ::std::string* Node::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Node.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_id() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Node.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Node.id)
}

// string cluster = 2;
inline void Node::clear_cluster() {
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Node.cluster)
  return cluster_.GetNoArena();
}
inline void Node::set_cluster(const ::std::string& value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Node.cluster)
}
#if LANG_CXX11
inline void Node::set_cluster(::std::string&& value) {
  
  cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Node.cluster)
}
#endif
inline void Node::set_cluster(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Node.cluster)
}
inline void Node::set_cluster(const char* value, size_t size) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Node.cluster)
}
inline ::std::string* Node::mutable_cluster() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Node.cluster)
  return cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Node.cluster)
  
  return cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_cluster(::std::string* cluster) {
  if (cluster != NULL) {
    
  } else {
    
  }
  cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Node.cluster)
}

// .google.protobuf.Struct metadata = 3;
inline bool Node::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline void Node::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::google::protobuf::Struct& Node::metadata() const {
  const ::google::protobuf::Struct* p = metadata_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Node.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* Node::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Node.metadata)
  return metadata_;
}
inline ::google::protobuf::Struct* Node::release_metadata() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Node.metadata)
  
  ::google::protobuf::Struct* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void Node::set_allocated_metadata(::google::protobuf::Struct* metadata) {
  delete metadata_;
  if (metadata != NULL && metadata->GetArena() != NULL) {
    ::google::protobuf::Struct* new_metadata = new ::google::protobuf::Struct;
    new_metadata->CopyFrom(*metadata);
    metadata = new_metadata;
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Node.metadata)
}

// .envoy.api.v2.Locality locality = 4;
inline bool Node::has_locality() const {
  return this != internal_default_instance() && locality_ != NULL;
}
inline void Node::clear_locality() {
  if (GetArenaNoVirtual() == NULL && locality_ != NULL) delete locality_;
  locality_ = NULL;
}
inline const ::envoy::api::v2::Locality& Node::locality() const {
  const ::envoy::api::v2::Locality* p = locality_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Node.locality)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Locality*>(
      &::envoy::api::v2::_Locality_default_instance_);
}
inline ::envoy::api::v2::Locality* Node::mutable_locality() {
  
  if (locality_ == NULL) {
    locality_ = new ::envoy::api::v2::Locality;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Node.locality)
  return locality_;
}
inline ::envoy::api::v2::Locality* Node::release_locality() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Node.locality)
  
  ::envoy::api::v2::Locality* temp = locality_;
  locality_ = NULL;
  return temp;
}
inline void Node::set_allocated_locality(::envoy::api::v2::Locality* locality) {
  delete locality_;
  locality_ = locality;
  if (locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Node.locality)
}

// string build_version = 5;
inline void Node::clear_build_version() {
  build_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::build_version() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Node.build_version)
  return build_version_.GetNoArena();
}
inline void Node::set_build_version(const ::std::string& value) {
  
  build_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Node.build_version)
}
#if LANG_CXX11
inline void Node::set_build_version(::std::string&& value) {
  
  build_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Node.build_version)
}
#endif
inline void Node::set_build_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  build_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Node.build_version)
}
inline void Node::set_build_version(const char* value, size_t size) {
  
  build_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Node.build_version)
}
inline ::std::string* Node::mutable_build_version() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Node.build_version)
  return build_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_build_version() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Node.build_version)
  
  return build_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_build_version(::std::string* build_version) {
  if (build_version != NULL) {
    
  } else {
    
  }
  build_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build_version);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Node.build_version)
}

// -------------------------------------------------------------------

// Endpoint

// .envoy.api.v2.Address address = 1;
inline bool Endpoint::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
inline void Endpoint::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) delete address_;
  address_ = NULL;
}
inline const ::envoy::api::v2::Address& Endpoint::address() const {
  const ::envoy::api::v2::Address* p = address_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Endpoint.address)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Address*>(
      &::envoy::api::v2::_Address_default_instance_);
}
inline ::envoy::api::v2::Address* Endpoint::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::envoy::api::v2::Address;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Endpoint.address)
  return address_;
}
inline ::envoy::api::v2::Address* Endpoint::release_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Endpoint.address)
  
  ::envoy::api::v2::Address* temp = address_;
  address_ = NULL;
  return temp;
}
inline void Endpoint::set_allocated_address(::envoy::api::v2::Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Endpoint.address)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Metadata

// map<string, .google.protobuf.Struct> filter_metadata = 1;
inline int Metadata::filter_metadata_size() const {
  return filter_metadata_.size();
}
inline void Metadata::clear_filter_metadata() {
  filter_metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::Struct >&
Metadata::filter_metadata() const {
  // @@protoc_insertion_point(field_map:envoy.api.v2.Metadata.filter_metadata)
  return filter_metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::Struct >*
Metadata::mutable_filter_metadata() {
  // @@protoc_insertion_point(field_mutable_map:envoy.api.v2.Metadata.filter_metadata)
  return filter_metadata_.MutableMap();
}

// -------------------------------------------------------------------

// RuntimeUInt32

// uint32 default_value = 2;
inline void RuntimeUInt32::clear_default_value() {
  default_value_ = 0u;
}
inline ::google::protobuf::uint32 RuntimeUInt32::default_value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RuntimeUInt32.default_value)
  return default_value_;
}
inline void RuntimeUInt32::set_default_value(::google::protobuf::uint32 value) {
  
  default_value_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.RuntimeUInt32.default_value)
}

// string runtime_key = 3;
inline void RuntimeUInt32::clear_runtime_key() {
  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RuntimeUInt32::runtime_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RuntimeUInt32.runtime_key)
  return runtime_key_.GetNoArena();
}
inline void RuntimeUInt32::set_runtime_key(const ::std::string& value) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RuntimeUInt32.runtime_key)
}
#if LANG_CXX11
inline void RuntimeUInt32::set_runtime_key(::std::string&& value) {
  
  runtime_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RuntimeUInt32.runtime_key)
}
#endif
inline void RuntimeUInt32::set_runtime_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RuntimeUInt32.runtime_key)
}
inline void RuntimeUInt32::set_runtime_key(const char* value, size_t size) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RuntimeUInt32.runtime_key)
}
inline ::std::string* RuntimeUInt32::mutable_runtime_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RuntimeUInt32.runtime_key)
  return runtime_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RuntimeUInt32::release_runtime_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RuntimeUInt32.runtime_key)
  
  return runtime_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RuntimeUInt32::set_allocated_runtime_key(::std::string* runtime_key) {
  if (runtime_key != NULL) {
    
  } else {
    
  }
  runtime_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RuntimeUInt32.runtime_key)
}

// -------------------------------------------------------------------

// HeaderValue

// string key = 1;
inline void HeaderValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderValue::key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HeaderValue.key)
  return key_.GetNoArena();
}
inline void HeaderValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HeaderValue.key)
}
#if LANG_CXX11
inline void HeaderValue::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HeaderValue.key)
}
#endif
inline void HeaderValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HeaderValue.key)
}
inline void HeaderValue::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HeaderValue.key)
}
inline ::std::string* HeaderValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HeaderValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderValue::release_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HeaderValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HeaderValue.key)
}

// string value = 2;
inline void HeaderValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderValue::value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HeaderValue.value)
  return value_.GetNoArena();
}
inline void HeaderValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HeaderValue.value)
}
#if LANG_CXX11
inline void HeaderValue::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HeaderValue.value)
}
#endif
inline void HeaderValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HeaderValue.value)
}
inline void HeaderValue::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HeaderValue.value)
}
inline ::std::string* HeaderValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HeaderValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderValue::release_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HeaderValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HeaderValue.value)
}

// -------------------------------------------------------------------

// HeaderValueOption

// .envoy.api.v2.HeaderValue header = 1;
inline bool HeaderValueOption::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void HeaderValueOption::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::envoy::api::v2::HeaderValue& HeaderValueOption::header() const {
  const ::envoy::api::v2::HeaderValue* p = header_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.HeaderValueOption.header)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::HeaderValue*>(
      &::envoy::api::v2::_HeaderValue_default_instance_);
}
inline ::envoy::api::v2::HeaderValue* HeaderValueOption::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::envoy::api::v2::HeaderValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HeaderValueOption.header)
  return header_;
}
inline ::envoy::api::v2::HeaderValue* HeaderValueOption::release_header() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HeaderValueOption.header)
  
  ::envoy::api::v2::HeaderValue* temp = header_;
  header_ = NULL;
  return temp;
}
inline void HeaderValueOption::set_allocated_header(::envoy::api::v2::HeaderValue* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HeaderValueOption.header)
}

// .google.protobuf.BoolValue append = 2;
inline bool HeaderValueOption::has_append() const {
  return this != internal_default_instance() && append_ != NULL;
}
inline void HeaderValueOption::clear_append() {
  if (GetArenaNoVirtual() == NULL && append_ != NULL) delete append_;
  append_ = NULL;
}
inline const ::google::protobuf::BoolValue& HeaderValueOption::append() const {
  const ::google::protobuf::BoolValue* p = append_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.HeaderValueOption.append)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* HeaderValueOption::mutable_append() {
  
  if (append_ == NULL) {
    append_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HeaderValueOption.append)
  return append_;
}
inline ::google::protobuf::BoolValue* HeaderValueOption::release_append() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HeaderValueOption.append)
  
  ::google::protobuf::BoolValue* temp = append_;
  append_ = NULL;
  return temp;
}
inline void HeaderValueOption::set_allocated_append(::google::protobuf::BoolValue* append) {
  delete append_;
  if (append != NULL && append->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_append = new ::google::protobuf::BoolValue;
    new_append->CopyFrom(*append);
    append = new_append;
  }
  append_ = append;
  if (append) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HeaderValueOption.append)
}

// -------------------------------------------------------------------

// ApiConfigSource

// .envoy.api.v2.ApiConfigSource.ApiType api_type = 1;
inline void ApiConfigSource::clear_api_type() {
  api_type_ = 0;
}
inline ::envoy::api::v2::ApiConfigSource_ApiType ApiConfigSource::api_type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ApiConfigSource.api_type)
  return static_cast< ::envoy::api::v2::ApiConfigSource_ApiType >(api_type_);
}
inline void ApiConfigSource::set_api_type(::envoy::api::v2::ApiConfigSource_ApiType value) {
  
  api_type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.ApiConfigSource.api_type)
}

// repeated string cluster_name = 2;
inline int ApiConfigSource::cluster_name_size() const {
  return cluster_name_.size();
}
inline void ApiConfigSource::clear_cluster_name() {
  cluster_name_.Clear();
}
inline const ::std::string& ApiConfigSource::cluster_name(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ApiConfigSource.cluster_name)
  return cluster_name_.Get(index);
}
inline ::std::string* ApiConfigSource::mutable_cluster_name(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ApiConfigSource.cluster_name)
  return cluster_name_.Mutable(index);
}
inline void ApiConfigSource::set_cluster_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ApiConfigSource.cluster_name)
  cluster_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ApiConfigSource::set_cluster_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ApiConfigSource.cluster_name)
  cluster_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ApiConfigSource::set_cluster_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cluster_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ApiConfigSource.cluster_name)
}
inline void ApiConfigSource::set_cluster_name(int index, const char* value, size_t size) {
  cluster_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ApiConfigSource.cluster_name)
}
inline ::std::string* ApiConfigSource::add_cluster_name() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.ApiConfigSource.cluster_name)
  return cluster_name_.Add();
}
inline void ApiConfigSource::add_cluster_name(const ::std::string& value) {
  cluster_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.ApiConfigSource.cluster_name)
}
#if LANG_CXX11
inline void ApiConfigSource::add_cluster_name(::std::string&& value) {
  cluster_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:envoy.api.v2.ApiConfigSource.cluster_name)
}
#endif
inline void ApiConfigSource::add_cluster_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  cluster_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.ApiConfigSource.cluster_name)
}
inline void ApiConfigSource::add_cluster_name(const char* value, size_t size) {
  cluster_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.ApiConfigSource.cluster_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ApiConfigSource::cluster_name() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.ApiConfigSource.cluster_name)
  return cluster_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ApiConfigSource::mutable_cluster_name() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.ApiConfigSource.cluster_name)
  return &cluster_name_;
}

// .google.protobuf.Duration refresh_delay = 3;
inline bool ApiConfigSource::has_refresh_delay() const {
  return this != internal_default_instance() && refresh_delay_ != NULL;
}
inline void ApiConfigSource::clear_refresh_delay() {
  if (GetArenaNoVirtual() == NULL && refresh_delay_ != NULL) delete refresh_delay_;
  refresh_delay_ = NULL;
}
inline const ::google::protobuf::Duration& ApiConfigSource::refresh_delay() const {
  const ::google::protobuf::Duration* p = refresh_delay_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.ApiConfigSource.refresh_delay)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* ApiConfigSource::mutable_refresh_delay() {
  
  if (refresh_delay_ == NULL) {
    refresh_delay_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ApiConfigSource.refresh_delay)
  return refresh_delay_;
}
inline ::google::protobuf::Duration* ApiConfigSource::release_refresh_delay() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ApiConfigSource.refresh_delay)
  
  ::google::protobuf::Duration* temp = refresh_delay_;
  refresh_delay_ = NULL;
  return temp;
}
inline void ApiConfigSource::set_allocated_refresh_delay(::google::protobuf::Duration* refresh_delay) {
  delete refresh_delay_;
  if (refresh_delay != NULL && refresh_delay->GetArena() != NULL) {
    ::google::protobuf::Duration* new_refresh_delay = new ::google::protobuf::Duration;
    new_refresh_delay->CopyFrom(*refresh_delay);
    refresh_delay = new_refresh_delay;
  }
  refresh_delay_ = refresh_delay;
  if (refresh_delay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ApiConfigSource.refresh_delay)
}

// -------------------------------------------------------------------

// AggregatedConfigSource

// -------------------------------------------------------------------

// ConfigSource

// string path = 1;
inline bool ConfigSource::has_path() const {
  return config_source_specifier_case() == kPath;
}
inline void ConfigSource::set_has_path() {
  _oneof_case_[0] = kPath;
}
inline void ConfigSource::clear_path() {
  if (has_path()) {
    config_source_specifier_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_config_source_specifier();
  }
}
inline const ::std::string& ConfigSource::path() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ConfigSource.path)
  if (has_path()) {
    return config_source_specifier_.path_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ConfigSource::set_path(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ConfigSource.path)
  if (!has_path()) {
    clear_config_source_specifier();
    set_has_path();
    config_source_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  config_source_specifier_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ConfigSource.path)
}
#if LANG_CXX11
inline void ConfigSource::set_path(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ConfigSource.path)
  if (!has_path()) {
    clear_config_source_specifier();
    set_has_path();
    config_source_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  config_source_specifier_.path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ConfigSource.path)
}
#endif
inline void ConfigSource::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_path()) {
    clear_config_source_specifier();
    set_has_path();
    config_source_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  config_source_specifier_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ConfigSource.path)
}
inline void ConfigSource::set_path(const char* value, size_t size) {
  if (!has_path()) {
    clear_config_source_specifier();
    set_has_path();
    config_source_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  config_source_specifier_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ConfigSource.path)
}
inline ::std::string* ConfigSource::mutable_path() {
  if (!has_path()) {
    clear_config_source_specifier();
    set_has_path();
    config_source_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ConfigSource.path)
  return config_source_specifier_.path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigSource::release_path() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ConfigSource.path)
  if (has_path()) {
    clear_has_config_source_specifier();
    return config_source_specifier_.path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ConfigSource::set_allocated_path(::std::string* path) {
  if (!has_path()) {
    config_source_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_config_source_specifier();
  if (path != NULL) {
    set_has_path();
    config_source_specifier_.path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        path);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ConfigSource.path)
}

// .envoy.api.v2.ApiConfigSource api_config_source = 2;
inline bool ConfigSource::has_api_config_source() const {
  return config_source_specifier_case() == kApiConfigSource;
}
inline void ConfigSource::set_has_api_config_source() {
  _oneof_case_[0] = kApiConfigSource;
}
inline void ConfigSource::clear_api_config_source() {
  if (has_api_config_source()) {
    delete config_source_specifier_.api_config_source_;
    clear_has_config_source_specifier();
  }
}
inline  const ::envoy::api::v2::ApiConfigSource& ConfigSource::api_config_source() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ConfigSource.api_config_source)
  return has_api_config_source()
      ? *config_source_specifier_.api_config_source_
      : ::envoy::api::v2::ApiConfigSource::default_instance();
}
inline ::envoy::api::v2::ApiConfigSource* ConfigSource::mutable_api_config_source() {
  if (!has_api_config_source()) {
    clear_config_source_specifier();
    set_has_api_config_source();
    config_source_specifier_.api_config_source_ = new ::envoy::api::v2::ApiConfigSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ConfigSource.api_config_source)
  return config_source_specifier_.api_config_source_;
}
inline ::envoy::api::v2::ApiConfigSource* ConfigSource::release_api_config_source() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ConfigSource.api_config_source)
  if (has_api_config_source()) {
    clear_has_config_source_specifier();
    ::envoy::api::v2::ApiConfigSource* temp = config_source_specifier_.api_config_source_;
    config_source_specifier_.api_config_source_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ConfigSource::set_allocated_api_config_source(::envoy::api::v2::ApiConfigSource* api_config_source) {
  clear_config_source_specifier();
  if (api_config_source) {
    set_has_api_config_source();
    config_source_specifier_.api_config_source_ = api_config_source;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ConfigSource.api_config_source)
}

// .envoy.api.v2.AggregatedConfigSource ads = 3;
inline bool ConfigSource::has_ads() const {
  return config_source_specifier_case() == kAds;
}
inline void ConfigSource::set_has_ads() {
  _oneof_case_[0] = kAds;
}
inline void ConfigSource::clear_ads() {
  if (has_ads()) {
    delete config_source_specifier_.ads_;
    clear_has_config_source_specifier();
  }
}
inline  const ::envoy::api::v2::AggregatedConfigSource& ConfigSource::ads() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ConfigSource.ads)
  return has_ads()
      ? *config_source_specifier_.ads_
      : ::envoy::api::v2::AggregatedConfigSource::default_instance();
}
inline ::envoy::api::v2::AggregatedConfigSource* ConfigSource::mutable_ads() {
  if (!has_ads()) {
    clear_config_source_specifier();
    set_has_ads();
    config_source_specifier_.ads_ = new ::envoy::api::v2::AggregatedConfigSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ConfigSource.ads)
  return config_source_specifier_.ads_;
}
inline ::envoy::api::v2::AggregatedConfigSource* ConfigSource::release_ads() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ConfigSource.ads)
  if (has_ads()) {
    clear_has_config_source_specifier();
    ::envoy::api::v2::AggregatedConfigSource* temp = config_source_specifier_.ads_;
    config_source_specifier_.ads_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ConfigSource::set_allocated_ads(::envoy::api::v2::AggregatedConfigSource* ads) {
  clear_config_source_specifier();
  if (ads) {
    set_has_ads();
    config_source_specifier_.ads_ = ads;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ConfigSource.ads)
}

inline bool ConfigSource::has_config_source_specifier() const {
  return config_source_specifier_case() != CONFIG_SOURCE_SPECIFIER_NOT_SET;
}
inline void ConfigSource::clear_has_config_source_specifier() {
  _oneof_case_[0] = CONFIG_SOURCE_SPECIFIER_NOT_SET;
}
inline ConfigSource::ConfigSourceSpecifierCase ConfigSource::config_source_specifier_case() const {
  return ConfigSource::ConfigSourceSpecifierCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v2
}  // namespace api
}  // namespace envoy

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::envoy::api::v2::ApiConfigSource_ApiType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::ApiConfigSource_ApiType>() {
  return ::envoy::api::v2::ApiConfigSource_ApiType_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::RoutingPriority> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::RoutingPriority>() {
  return ::envoy::api::v2::RoutingPriority_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::RequestMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::RequestMethod>() {
  return ::envoy::api::v2::RequestMethod_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2fbase_2eproto__INCLUDED
