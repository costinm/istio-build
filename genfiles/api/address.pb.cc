// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/address.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/address.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
class PipeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Pipe>
     _instance;
} _Pipe_default_instance_;
class SocketAddressDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SocketAddress>
     _instance;
  ::google::protobuf::uint32 port_value_;
  ::google::protobuf::internal::ArenaStringPtr named_port_;
} _SocketAddress_default_instance_;
class BindConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BindConfig>
     _instance;
} _BindConfig_default_instance_;
class AddressDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Address>
     _instance;
  const ::envoy::api::v2::SocketAddress* socket_address_;
  const ::envoy::api::v2::Pipe* pipe_;
} _Address_default_instance_;

namespace protobuf_api_2faddress_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pipe, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketAddress, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketAddress, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketAddress, address_),
  offsetof(SocketAddressDefaultTypeInternal, port_value_),
  offsetof(SocketAddressDefaultTypeInternal, named_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketAddress, resolver_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketAddress, port_specifier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindConfig, source_address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(AddressDefaultTypeInternal, socket_address_),
  offsetof(AddressDefaultTypeInternal, pipe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, address_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Pipe)},
  { 6, -1, sizeof(SocketAddress)},
  { 17, -1, sizeof(BindConfig)},
  { 23, -1, sizeof(Address)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pipe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SocketAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BindConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Address_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/address.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  _Pipe_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Pipe_default_instance_);_SocketAddress_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SocketAddress_default_instance_);_BindConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BindConfig_default_instance_);_Address_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Address_default_instance_);_SocketAddress_default_instance_.port_value_ = 0u;
  _SocketAddress_default_instance_.named_port_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _BindConfig_default_instance_._instance.get_mutable()->source_address_ = const_cast< ::envoy::api::v2::SocketAddress*>(
      ::envoy::api::v2::SocketAddress::internal_default_instance());
  _Address_default_instance_.socket_address_ = const_cast< ::envoy::api::v2::SocketAddress*>(
      ::envoy::api::v2::SocketAddress::internal_default_instance());
  _Address_default_instance_.pipe_ = const_cast< ::envoy::api::v2::Pipe*>(
      ::envoy::api::v2::Pipe::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021api/address.proto\022\014envoy.api.v2\032\036googl"
      "e/protobuf/wrappers.proto\"\024\n\004Pipe\022\014\n\004pat"
      "h\030\001 \001(\t\"\313\001\n\rSocketAddress\0226\n\010protocol\030\001 "
      "\001(\0162$.envoy.api.v2.SocketAddress.Protoco"
      "l\022\017\n\007address\030\002 \001(\t\022\024\n\nport_value\030\003 \001(\rH\000"
      "\022\024\n\nnamed_port\030\004 \001(\tH\000\022\025\n\rresolver_name\030"
      "\005 \001(\t\"\034\n\010Protocol\022\007\n\003TCP\020\000\022\007\n\003UDP\020\001B\020\n\016p"
      "ort_specifier\"A\n\nBindConfig\0223\n\016source_ad"
      "dress\030\001 \001(\0132\033.envoy.api.v2.SocketAddress"
      "\"o\n\007Address\0225\n\016socket_address\030\001 \001(\0132\033.en"
      "voy.api.v2.SocketAddressH\000\022\"\n\004pipe\030\002 \001(\013"
      "2\022.envoy.api.v2.PipeH\000B\t\n\007addressb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 481);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/address.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2faddress_2eproto

const ::google::protobuf::EnumDescriptor* SocketAddress_Protocol_descriptor() {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2faddress_2eproto::file_level_enum_descriptors[0];
}
bool SocketAddress_Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SocketAddress_Protocol SocketAddress::TCP;
const SocketAddress_Protocol SocketAddress::UDP;
const SocketAddress_Protocol SocketAddress::Protocol_MIN;
const SocketAddress_Protocol SocketAddress::Protocol_MAX;
const int SocketAddress::Protocol_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pipe::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pipe::Pipe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2faddress_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Pipe)
}
Pipe::Pipe(const Pipe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Pipe)
}

void Pipe::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Pipe::~Pipe() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Pipe)
  SharedDtor();
}

void Pipe::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Pipe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pipe::descriptor() {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pipe& Pipe::default_instance() {
  protobuf_api_2faddress_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pipe* Pipe::New(::google::protobuf::Arena* arena) const {
  Pipe* n = new Pipe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pipe::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Pipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Pipe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Pipe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.Pipe.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Pipe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Pipe)
  return false;
#undef DO_
}

void Pipe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Pipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Pipe.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Pipe)
}

::google::protobuf::uint8* Pipe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Pipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Pipe.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Pipe)
  return target;
}

size_t Pipe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Pipe)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pipe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Pipe)
  GOOGLE_DCHECK_NE(&from, this);
  const Pipe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pipe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Pipe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Pipe)
    MergeFrom(*source);
  }
}

void Pipe::MergeFrom(const Pipe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Pipe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void Pipe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Pipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pipe::CopyFrom(const Pipe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Pipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pipe::IsInitialized() const {
  return true;
}

void Pipe::Swap(Pipe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pipe::InternalSwap(Pipe* other) {
  using std::swap;
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pipe::GetMetadata() const {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pipe

// string path = 1;
void Pipe::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Pipe::path() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Pipe.path)
  return path_.GetNoArena();
}
void Pipe::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Pipe.path)
}
#if LANG_CXX11
void Pipe::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Pipe.path)
}
#endif
void Pipe::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Pipe.path)
}
void Pipe::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Pipe.path)
}
::std::string* Pipe::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Pipe.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Pipe::release_path() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Pipe.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pipe::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Pipe.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SocketAddress::kProtocolFieldNumber;
const int SocketAddress::kAddressFieldNumber;
const int SocketAddress::kPortValueFieldNumber;
const int SocketAddress::kNamedPortFieldNumber;
const int SocketAddress::kResolverNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SocketAddress::SocketAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2faddress_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.SocketAddress)
}
SocketAddress::SocketAddress(const SocketAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  resolver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resolver_name().size() > 0) {
    resolver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resolver_name_);
  }
  protocol_ = from.protocol_;
  clear_has_port_specifier();
  switch (from.port_specifier_case()) {
    case kPortValue: {
      set_port_value(from.port_value());
      break;
    }
    case kNamedPort: {
      set_named_port(from.named_port());
      break;
    }
    case PORT_SPECIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.SocketAddress)
}

void SocketAddress::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resolver_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_ = 0;
  clear_has_port_specifier();
  _cached_size_ = 0;
}

SocketAddress::~SocketAddress() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.SocketAddress)
  SharedDtor();
}

void SocketAddress::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resolver_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_port_specifier()) {
    clear_port_specifier();
  }
}

void SocketAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocketAddress::descriptor() {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SocketAddress& SocketAddress::default_instance() {
  protobuf_api_2faddress_2eproto::InitDefaults();
  return *internal_default_instance();
}

SocketAddress* SocketAddress::New(::google::protobuf::Arena* arena) const {
  SocketAddress* n = new SocketAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SocketAddress::clear_port_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.SocketAddress)
  switch (port_specifier_case()) {
    case kPortValue: {
      // No need to clear
      break;
    }
    case kNamedPort: {
      port_specifier_.named_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PORT_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PORT_SPECIFIER_NOT_SET;
}


void SocketAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.SocketAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resolver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_ = 0;
  clear_port_specifier();
  _internal_metadata_.Clear();
}

bool SocketAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.SocketAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.SocketAddress.Protocol protocol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protocol(static_cast< ::envoy::api::v2::SocketAddress_Protocol >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.SocketAddress.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_port_specifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_specifier_.port_value_)));
          set_has_port_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string named_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_named_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->named_port().data(), static_cast<int>(this->named_port().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.SocketAddress.named_port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string resolver_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolver_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resolver_name().data(), static_cast<int>(this->resolver_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.SocketAddress.resolver_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.SocketAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.SocketAddress)
  return false;
#undef DO_
}

void SocketAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.SocketAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.SocketAddress.Protocol protocol = 1;
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protocol(), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SocketAddress.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // uint32 port_value = 3;
  if (has_port_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port_value(), output);
  }

  // string named_port = 4;
  if (has_named_port()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->named_port().data(), static_cast<int>(this->named_port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SocketAddress.named_port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->named_port(), output);
  }

  // string resolver_name = 5;
  if (this->resolver_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resolver_name().data(), static_cast<int>(this->resolver_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SocketAddress.resolver_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->resolver_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.SocketAddress)
}

::google::protobuf::uint8* SocketAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.SocketAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.SocketAddress.Protocol protocol = 1;
  if (this->protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protocol(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SocketAddress.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // uint32 port_value = 3;
  if (has_port_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port_value(), target);
  }

  // string named_port = 4;
  if (has_named_port()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->named_port().data(), static_cast<int>(this->named_port().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SocketAddress.named_port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->named_port(), target);
  }

  // string resolver_name = 5;
  if (this->resolver_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resolver_name().data(), static_cast<int>(this->resolver_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.SocketAddress.resolver_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->resolver_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.SocketAddress)
  return target;
}

size_t SocketAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.SocketAddress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string resolver_name = 5;
  if (this->resolver_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resolver_name());
  }

  // .envoy.api.v2.SocketAddress.Protocol protocol = 1;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
  }

  switch (port_specifier_case()) {
    // uint32 port_value = 3;
    case kPortValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port_value());
      break;
    }
    // string named_port = 4;
    case kNamedPort: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->named_port());
      break;
    }
    case PORT_SPECIFIER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.SocketAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SocketAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.SocketAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.SocketAddress)
    MergeFrom(*source);
  }
}

void SocketAddress::MergeFrom(const SocketAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.SocketAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.resolver_name().size() > 0) {

    resolver_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resolver_name_);
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
  switch (from.port_specifier_case()) {
    case kPortValue: {
      set_port_value(from.port_value());
      break;
    }
    case kNamedPort: {
      set_named_port(from.named_port());
      break;
    }
    case PORT_SPECIFIER_NOT_SET: {
      break;
    }
  }
}

void SocketAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.SocketAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketAddress::CopyFrom(const SocketAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.SocketAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketAddress::IsInitialized() const {
  return true;
}

void SocketAddress::Swap(SocketAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SocketAddress::InternalSwap(SocketAddress* other) {
  using std::swap;
  address_.Swap(&other->address_);
  resolver_name_.Swap(&other->resolver_name_);
  swap(protocol_, other->protocol_);
  swap(port_specifier_, other->port_specifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SocketAddress::GetMetadata() const {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SocketAddress

// .envoy.api.v2.SocketAddress.Protocol protocol = 1;
void SocketAddress::clear_protocol() {
  protocol_ = 0;
}
::envoy::api::v2::SocketAddress_Protocol SocketAddress::protocol() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.SocketAddress.protocol)
  return static_cast< ::envoy::api::v2::SocketAddress_Protocol >(protocol_);
}
void SocketAddress::set_protocol(::envoy::api::v2::SocketAddress_Protocol value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.protocol)
}

// string address = 2;
void SocketAddress::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SocketAddress::address() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.SocketAddress.address)
  return address_.GetNoArena();
}
void SocketAddress::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.address)
}
#if LANG_CXX11
void SocketAddress::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.SocketAddress.address)
}
#endif
void SocketAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.SocketAddress.address)
}
void SocketAddress::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.SocketAddress.address)
}
::std::string* SocketAddress::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.SocketAddress.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SocketAddress::release_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.SocketAddress.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SocketAddress::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.SocketAddress.address)
}

// uint32 port_value = 3;
bool SocketAddress::has_port_value() const {
  return port_specifier_case() == kPortValue;
}
void SocketAddress::set_has_port_value() {
  _oneof_case_[0] = kPortValue;
}
void SocketAddress::clear_port_value() {
  if (has_port_value()) {
    port_specifier_.port_value_ = 0u;
    clear_has_port_specifier();
  }
}
::google::protobuf::uint32 SocketAddress::port_value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.SocketAddress.port_value)
  if (has_port_value()) {
    return port_specifier_.port_value_;
  }
  return 0u;
}
void SocketAddress::set_port_value(::google::protobuf::uint32 value) {
  if (!has_port_value()) {
    clear_port_specifier();
    set_has_port_value();
  }
  port_specifier_.port_value_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.port_value)
}

// string named_port = 4;
bool SocketAddress::has_named_port() const {
  return port_specifier_case() == kNamedPort;
}
void SocketAddress::set_has_named_port() {
  _oneof_case_[0] = kNamedPort;
}
void SocketAddress::clear_named_port() {
  if (has_named_port()) {
    port_specifier_.named_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_port_specifier();
  }
}
const ::std::string& SocketAddress::named_port() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.SocketAddress.named_port)
  if (has_named_port()) {
    return port_specifier_.named_port_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void SocketAddress::set_named_port(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.named_port)
  if (!has_named_port()) {
    clear_port_specifier();
    set_has_named_port();
    port_specifier_.named_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_specifier_.named_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.named_port)
}
#if LANG_CXX11
void SocketAddress::set_named_port(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.named_port)
  if (!has_named_port()) {
    clear_port_specifier();
    set_has_named_port();
    port_specifier_.named_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_specifier_.named_port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.SocketAddress.named_port)
}
#endif
void SocketAddress::set_named_port(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_named_port()) {
    clear_port_specifier();
    set_has_named_port();
    port_specifier_.named_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_specifier_.named_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.SocketAddress.named_port)
}
void SocketAddress::set_named_port(const char* value, size_t size) {
  if (!has_named_port()) {
    clear_port_specifier();
    set_has_named_port();
    port_specifier_.named_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  port_specifier_.named_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.SocketAddress.named_port)
}
::std::string* SocketAddress::mutable_named_port() {
  if (!has_named_port()) {
    clear_port_specifier();
    set_has_named_port();
    port_specifier_.named_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.SocketAddress.named_port)
  return port_specifier_.named_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SocketAddress::release_named_port() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.SocketAddress.named_port)
  if (has_named_port()) {
    clear_has_port_specifier();
    return port_specifier_.named_port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void SocketAddress::set_allocated_named_port(::std::string* named_port) {
  if (!has_named_port()) {
    port_specifier_.named_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_port_specifier();
  if (named_port != NULL) {
    set_has_named_port();
    port_specifier_.named_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        named_port);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.SocketAddress.named_port)
}

// string resolver_name = 5;
void SocketAddress::clear_resolver_name() {
  resolver_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SocketAddress::resolver_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.SocketAddress.resolver_name)
  return resolver_name_.GetNoArena();
}
void SocketAddress::set_resolver_name(const ::std::string& value) {
  
  resolver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.SocketAddress.resolver_name)
}
#if LANG_CXX11
void SocketAddress::set_resolver_name(::std::string&& value) {
  
  resolver_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.SocketAddress.resolver_name)
}
#endif
void SocketAddress::set_resolver_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resolver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.SocketAddress.resolver_name)
}
void SocketAddress::set_resolver_name(const char* value, size_t size) {
  
  resolver_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.SocketAddress.resolver_name)
}
::std::string* SocketAddress::mutable_resolver_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.SocketAddress.resolver_name)
  return resolver_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SocketAddress::release_resolver_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.SocketAddress.resolver_name)
  
  return resolver_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SocketAddress::set_allocated_resolver_name(::std::string* resolver_name) {
  if (resolver_name != NULL) {
    
  } else {
    
  }
  resolver_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resolver_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.SocketAddress.resolver_name)
}

bool SocketAddress::has_port_specifier() const {
  return port_specifier_case() != PORT_SPECIFIER_NOT_SET;
}
void SocketAddress::clear_has_port_specifier() {
  _oneof_case_[0] = PORT_SPECIFIER_NOT_SET;
}
SocketAddress::PortSpecifierCase SocketAddress::port_specifier_case() const {
  return SocketAddress::PortSpecifierCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BindConfig::kSourceAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BindConfig::BindConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2faddress_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.BindConfig)
}
BindConfig::BindConfig(const BindConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_address()) {
    source_address_ = new ::envoy::api::v2::SocketAddress(*from.source_address_);
  } else {
    source_address_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.BindConfig)
}

void BindConfig::SharedCtor() {
  source_address_ = NULL;
  _cached_size_ = 0;
}

BindConfig::~BindConfig() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.BindConfig)
  SharedDtor();
}

void BindConfig::SharedDtor() {
  if (this != internal_default_instance()) delete source_address_;
}

void BindConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindConfig::descriptor() {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BindConfig& BindConfig::default_instance() {
  protobuf_api_2faddress_2eproto::InitDefaults();
  return *internal_default_instance();
}

BindConfig* BindConfig::New(::google::protobuf::Arena* arena) const {
  BindConfig* n = new BindConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BindConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.BindConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) {
    delete source_address_;
  }
  source_address_ = NULL;
  _internal_metadata_.Clear();
}

bool BindConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.BindConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.SocketAddress source_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.BindConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.BindConfig)
  return false;
#undef DO_
}

void BindConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.BindConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.SocketAddress source_address = 1;
  if (this->has_source_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->source_address_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.BindConfig)
}

::google::protobuf::uint8* BindConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.BindConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.SocketAddress source_address = 1;
  if (this->has_source_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->source_address_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.BindConfig)
  return target;
}

size_t BindConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.BindConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.SocketAddress source_address = 1;
  if (this->has_source_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_address_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.BindConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BindConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BindConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.BindConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.BindConfig)
    MergeFrom(*source);
  }
}

void BindConfig::MergeFrom(const BindConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.BindConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_address()) {
    mutable_source_address()->::envoy::api::v2::SocketAddress::MergeFrom(from.source_address());
  }
}

void BindConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.BindConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindConfig::CopyFrom(const BindConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.BindConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindConfig::IsInitialized() const {
  return true;
}

void BindConfig::Swap(BindConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BindConfig::InternalSwap(BindConfig* other) {
  using std::swap;
  swap(source_address_, other->source_address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BindConfig::GetMetadata() const {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BindConfig

// .envoy.api.v2.SocketAddress source_address = 1;
bool BindConfig::has_source_address() const {
  return this != internal_default_instance() && source_address_ != NULL;
}
void BindConfig::clear_source_address() {
  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) delete source_address_;
  source_address_ = NULL;
}
const ::envoy::api::v2::SocketAddress& BindConfig::source_address() const {
  const ::envoy::api::v2::SocketAddress* p = source_address_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.BindConfig.source_address)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::SocketAddress*>(
      &::envoy::api::v2::_SocketAddress_default_instance_);
}
::envoy::api::v2::SocketAddress* BindConfig::mutable_source_address() {
  
  if (source_address_ == NULL) {
    source_address_ = new ::envoy::api::v2::SocketAddress;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.BindConfig.source_address)
  return source_address_;
}
::envoy::api::v2::SocketAddress* BindConfig::release_source_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.BindConfig.source_address)
  
  ::envoy::api::v2::SocketAddress* temp = source_address_;
  source_address_ = NULL;
  return temp;
}
void BindConfig::set_allocated_source_address(::envoy::api::v2::SocketAddress* source_address) {
  delete source_address_;
  source_address_ = source_address;
  if (source_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.BindConfig.source_address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address::kSocketAddressFieldNumber;
const int Address::kPipeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address::Address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2faddress_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Address)
}
Address::Address(const Address& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_address();
  switch (from.address_case()) {
    case kSocketAddress: {
      mutable_socket_address()->::envoy::api::v2::SocketAddress::MergeFrom(from.socket_address());
      break;
    }
    case kPipe: {
      mutable_pipe()->::envoy::api::v2::Pipe::MergeFrom(from.pipe());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Address)
}

void Address::SharedCtor() {
  clear_has_address();
  _cached_size_ = 0;
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  if (has_address()) {
    clear_address();
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Address& Address::default_instance() {
  protobuf_api_2faddress_2eproto::InitDefaults();
  return *internal_default_instance();
}

Address* Address::New(::google::protobuf::Arena* arena) const {
  Address* n = new Address;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Address::clear_address() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.Address)
  switch (address_case()) {
    case kSocketAddress: {
      delete address_.socket_address_;
      break;
    }
    case kPipe: {
      delete address_.pipe_;
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ADDRESS_NOT_SET;
}


void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_address();
  _internal_metadata_.Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.SocketAddress socket_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Pipe pipe = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pipe()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Address)
  return false;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.SocketAddress socket_address = 1;
  if (has_socket_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *address_.socket_address_, output);
  }

  // .envoy.api.v2.Pipe pipe = 2;
  if (has_pipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *address_.pipe_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Address)
}

::google::protobuf::uint8* Address::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.SocketAddress socket_address = 1;
  if (has_socket_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *address_.socket_address_, deterministic, target);
  }

  // .envoy.api.v2.Pipe pipe = 2;
  if (has_pipe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *address_.pipe_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Address)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (address_case()) {
    // .envoy.api.v2.SocketAddress socket_address = 1;
    case kSocketAddress: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *address_.socket_address_);
      break;
    }
    // .envoy.api.v2.Pipe pipe = 2;
    case kPipe: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *address_.pipe_);
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.address_case()) {
    case kSocketAddress: {
      mutable_socket_address()->::envoy::api::v2::SocketAddress::MergeFrom(from.socket_address());
      break;
    }
    case kPipe: {
      mutable_pipe()->::envoy::api::v2::Pipe::MergeFrom(from.pipe());
      break;
    }
    case ADDRESS_NOT_SET: {
      break;
    }
  }
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::Swap(Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address::InternalSwap(Address* other) {
  using std::swap;
  swap(address_, other->address_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_api_2faddress_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2faddress_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Address

// .envoy.api.v2.SocketAddress socket_address = 1;
bool Address::has_socket_address() const {
  return address_case() == kSocketAddress;
}
void Address::set_has_socket_address() {
  _oneof_case_[0] = kSocketAddress;
}
void Address::clear_socket_address() {
  if (has_socket_address()) {
    delete address_.socket_address_;
    clear_has_address();
  }
}
 const ::envoy::api::v2::SocketAddress& Address::socket_address() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Address.socket_address)
  return has_socket_address()
      ? *address_.socket_address_
      : ::envoy::api::v2::SocketAddress::default_instance();
}
::envoy::api::v2::SocketAddress* Address::mutable_socket_address() {
  if (!has_socket_address()) {
    clear_address();
    set_has_socket_address();
    address_.socket_address_ = new ::envoy::api::v2::SocketAddress;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Address.socket_address)
  return address_.socket_address_;
}
::envoy::api::v2::SocketAddress* Address::release_socket_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Address.socket_address)
  if (has_socket_address()) {
    clear_has_address();
    ::envoy::api::v2::SocketAddress* temp = address_.socket_address_;
    address_.socket_address_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Address::set_allocated_socket_address(::envoy::api::v2::SocketAddress* socket_address) {
  clear_address();
  if (socket_address) {
    set_has_socket_address();
    address_.socket_address_ = socket_address;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Address.socket_address)
}

// .envoy.api.v2.Pipe pipe = 2;
bool Address::has_pipe() const {
  return address_case() == kPipe;
}
void Address::set_has_pipe() {
  _oneof_case_[0] = kPipe;
}
void Address::clear_pipe() {
  if (has_pipe()) {
    delete address_.pipe_;
    clear_has_address();
  }
}
 const ::envoy::api::v2::Pipe& Address::pipe() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Address.pipe)
  return has_pipe()
      ? *address_.pipe_
      : ::envoy::api::v2::Pipe::default_instance();
}
::envoy::api::v2::Pipe* Address::mutable_pipe() {
  if (!has_pipe()) {
    clear_address();
    set_has_pipe();
    address_.pipe_ = new ::envoy::api::v2::Pipe;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Address.pipe)
  return address_.pipe_;
}
::envoy::api::v2::Pipe* Address::release_pipe() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Address.pipe)
  if (has_pipe()) {
    clear_has_address();
    ::envoy::api::v2::Pipe* temp = address_.pipe_;
    address_.pipe_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Address::set_allocated_pipe(::envoy::api::v2::Pipe* pipe) {
  clear_address();
  if (pipe) {
    set_has_pipe();
    address_.pipe_ = pipe;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Address.pipe)
}

bool Address::has_address() const {
  return address_case() != ADDRESS_NOT_SET;
}
void Address::clear_has_address() {
  _oneof_case_[0] = ADDRESS_NOT_SET;
}
Address::AddressCase Address::address_case() const {
  return Address::AddressCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
