// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/hds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/hds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
class CapabilityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Capability> {
} _Capability_default_instance_;
class HealthCheckRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HealthCheckRequest> {
} _HealthCheckRequest_default_instance_;
class EndpointHealthDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EndpointHealth> {
} _EndpointHealth_default_instance_;
class EndpointHealthResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EndpointHealthResponse> {
} _EndpointHealthResponse_default_instance_;
class HealthCheckRequestOrEndpointHealthResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HealthCheckRequestOrEndpointHealthResponse> {
  public:
  const ::envoy::api::v2::HealthCheckRequest* health_check_request_;
  const ::envoy::api::v2::EndpointHealthResponse* endpoint_health_response_;
} _HealthCheckRequestOrEndpointHealthResponse_default_instance_;
class LocalityEndpointsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LocalityEndpoints> {
} _LocalityEndpoints_default_instance_;
class ClusterHealthCheckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClusterHealthCheck> {
} _ClusterHealthCheck_default_instance_;
class HealthCheckSpecifierDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HealthCheckSpecifier> {
} _HealthCheckSpecifier_default_instance_;

namespace protobuf_api_2fhds_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Capability, health_check_protocol_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheckRequest, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheckRequest, capability_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndpointHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndpointHealth, endpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndpointHealth, health_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndpointHealthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndpointHealthResponse, endpoints_health_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheckRequestOrEndpointHealthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheckRequestOrEndpointHealthResponse, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HealthCheckRequestOrEndpointHealthResponse_default_instance_), health_check_request_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HealthCheckRequestOrEndpointHealthResponse_default_instance_), endpoint_health_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheckRequestOrEndpointHealthResponse, request_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalityEndpoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalityEndpoints, locality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalityEndpoints, endpoints_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterHealthCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterHealthCheck, cluster_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterHealthCheck, health_checks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterHealthCheck, endpoints_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheckSpecifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheckSpecifier, health_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheckSpecifier, interval_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Capability)},
  { 5, -1, sizeof(HealthCheckRequest)},
  { 11, -1, sizeof(EndpointHealth)},
  { 17, -1, sizeof(EndpointHealthResponse)},
  { 22, -1, sizeof(HealthCheckRequestOrEndpointHealthResponse)},
  { 29, -1, sizeof(LocalityEndpoints)},
  { 35, -1, sizeof(ClusterHealthCheck)},
  { 42, -1, sizeof(HealthCheckSpecifier)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Capability_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HealthCheckRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EndpointHealth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EndpointHealthResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HealthCheckRequestOrEndpointHealthResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LocalityEndpoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClusterHealthCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HealthCheckSpecifier_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/hds.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _Capability_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _HealthCheckRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _EndpointHealth_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _EndpointHealthResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _HealthCheckRequestOrEndpointHealthResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _LocalityEndpoints_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ClusterHealthCheck_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _HealthCheckSpecifier_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2fhealth_5fcheck_2eproto::InitDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  _Capability_default_instance_.DefaultConstruct();
  _HealthCheckRequest_default_instance_.DefaultConstruct();
  _EndpointHealth_default_instance_.DefaultConstruct();
  _EndpointHealthResponse_default_instance_.DefaultConstruct();
  _HealthCheckRequestOrEndpointHealthResponse_default_instance_.DefaultConstruct();
  _LocalityEndpoints_default_instance_.DefaultConstruct();
  _ClusterHealthCheck_default_instance_.DefaultConstruct();
  _HealthCheckSpecifier_default_instance_.DefaultConstruct();
  _HealthCheckRequest_default_instance_.get_mutable()->node_ = const_cast< ::envoy::api::v2::Node*>(
      ::envoy::api::v2::Node::internal_default_instance());
  _HealthCheckRequest_default_instance_.get_mutable()->capability_ = const_cast< ::envoy::api::v2::Capability*>(
      ::envoy::api::v2::Capability::internal_default_instance());
  _EndpointHealth_default_instance_.get_mutable()->endpoint_ = const_cast< ::envoy::api::v2::Endpoint*>(
      ::envoy::api::v2::Endpoint::internal_default_instance());
  _HealthCheckRequestOrEndpointHealthResponse_default_instance_.health_check_request_ = const_cast< ::envoy::api::v2::HealthCheckRequest*>(
      ::envoy::api::v2::HealthCheckRequest::internal_default_instance());
  _HealthCheckRequestOrEndpointHealthResponse_default_instance_.endpoint_health_response_ = const_cast< ::envoy::api::v2::EndpointHealthResponse*>(
      ::envoy::api::v2::EndpointHealthResponse::internal_default_instance());
  _LocalityEndpoints_default_instance_.get_mutable()->locality_ = const_cast< ::envoy::api::v2::Locality*>(
      ::envoy::api::v2::Locality::internal_default_instance());
  _HealthCheckSpecifier_default_instance_.get_mutable()->interval_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rapi/hds.proto\022\014envoy.api.v2\032\016api/base."
      "proto\032\026api/health_check.proto\032\034google/ap"
      "i/annotations.proto\032\036google/protobuf/dur"
      "ation.proto\"x\n\nCapability\022@\n\025health_chec"
      "k_protocol\030\001 \003(\0162!.envoy.api.v2.Capabili"
      "ty.Protocol\"(\n\010Protocol\022\010\n\004HTTP\020\000\022\007\n\003TCP"
      "\020\001\022\t\n\005REDIS\020\002\"d\n\022HealthCheckRequest\022 \n\004n"
      "ode\030\001 \001(\0132\022.envoy.api.v2.Node\022,\n\ncapabil"
      "ity\030\002 \001(\0132\030.envoy.api.v2.Capability\"m\n\016E"
      "ndpointHealth\022(\n\010endpoint\030\001 \001(\0132\026.envoy."
      "api.v2.Endpoint\0221\n\rhealth_status\030\002 \001(\0162\032"
      ".envoy.api.v2.HealthStatus\"P\n\026EndpointHe"
      "althResponse\0226\n\020endpoints_health\030\001 \003(\0132\034"
      ".envoy.api.v2.EndpointHealth\"\310\001\n*HealthC"
      "heckRequestOrEndpointHealthResponse\022@\n\024h"
      "ealth_check_request\030\001 \001(\0132 .envoy.api.v2"
      ".HealthCheckRequestH\000\022H\n\030endpoint_health"
      "_response\030\002 \001(\0132$.envoy.api.v2.EndpointH"
      "ealthResponseH\000B\016\n\014request_type\"h\n\021Local"
      "ityEndpoints\022(\n\010locality\030\001 \001(\0132\026.envoy.a"
      "pi.v2.Locality\022)\n\tendpoints\030\002 \003(\0132\026.envo"
      "y.api.v2.Endpoint\"\220\001\n\022ClusterHealthCheck"
      "\022\024\n\014cluster_name\030\001 \001(\t\0220\n\rhealth_checks\030"
      "\002 \003(\0132\031.envoy.api.v2.HealthCheck\0222\n\tendp"
      "oints\030\003 \003(\0132\037.envoy.api.v2.LocalityEndpo"
      "ints\"{\n\024HealthCheckSpecifier\0226\n\014health_c"
      "heck\030\001 \003(\0132 .envoy.api.v2.ClusterHealthC"
      "heck\022+\n\010interval\030\002 \001(\0132\031.google.protobuf"
      ".Duration2\253\002\n\026HealthDiscoveryService\022w\n\021"
      "StreamHealthCheck\0228.envoy.api.v2.HealthC"
      "heckRequestOrEndpointHealthResponse\032\".en"
      "voy.api.v2.HealthCheckSpecifier\"\000(\0010\001\022\227\001"
      "\n\020FetchHealthCheck\0228.envoy.api.v2.Health"
      "CheckRequestOrEndpointHealthResponse\032\".e"
      "nvoy.api.v2.HealthCheckSpecifier\"%\202\323\344\223\002\037"
      "\"\032/v2/discovery:health_check:\001*b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1439);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/hds.proto", &protobuf_RegisterTypes);
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2fhealth_5fcheck_2eproto::AddDescriptors();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2fhds_2eproto

const ::google::protobuf::EnumDescriptor* Capability_Protocol_descriptor() {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_enum_descriptors[0];
}
bool Capability_Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Capability_Protocol Capability::HTTP;
const Capability_Protocol Capability::TCP;
const Capability_Protocol Capability::REDIS;
const Capability_Protocol Capability::Protocol_MIN;
const Capability_Protocol Capability::Protocol_MAX;
const int Capability::Protocol_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Capability::kHealthCheckProtocolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Capability::Capability()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fhds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Capability)
}
Capability::Capability(const Capability& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      health_check_protocol_(from.health_check_protocol_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Capability)
}

void Capability::SharedCtor() {
  _cached_size_ = 0;
}

Capability::~Capability() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Capability)
  SharedDtor();
}

void Capability::SharedDtor() {
}

void Capability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Capability::descriptor() {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[0].descriptor;
}

const Capability& Capability::default_instance() {
  protobuf_api_2fhds_2eproto::InitDefaults();
  return *internal_default_instance();
}

Capability* Capability::New(::google::protobuf::Arena* arena) const {
  Capability* n = new Capability;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Capability::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Capability)
  health_check_protocol_.Clear();
}

bool Capability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Capability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.Capability.Protocol health_check_protocol = 1;
      case 1: {
        if (tag == 10u) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_health_check_protocol(static_cast< ::envoy::api::v2::Capability_Protocol >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_health_check_protocol(static_cast< ::envoy::api::v2::Capability_Protocol >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Capability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Capability)
  return false;
#undef DO_
}

void Capability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Capability)
  // repeated .envoy.api.v2.Capability.Protocol health_check_protocol = 1;
  if (this->health_check_protocol_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_health_check_protocol_cached_byte_size_);
  }
  for (int i = 0; i < this->health_check_protocol_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->health_check_protocol(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Capability)
}

::google::protobuf::uint8* Capability::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Capability)
  // repeated .envoy.api.v2.Capability.Protocol health_check_protocol = 1;
  if (this->health_check_protocol_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _health_check_protocol_cached_byte_size_, target);
  }
  for (int i = 0; i < this->health_check_protocol_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->health_check_protocol(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Capability)
  return target;
}

size_t Capability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Capability)
  size_t total_size = 0;

  // repeated .envoy.api.v2.Capability.Protocol health_check_protocol = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->health_check_protocol_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->health_check_protocol(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _health_check_protocol_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Capability::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Capability)
  GOOGLE_DCHECK_NE(&from, this);
  const Capability* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Capability>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Capability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Capability)
    MergeFrom(*source);
  }
}

void Capability::MergeFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Capability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  health_check_protocol_.MergeFrom(from.health_check_protocol_);
}

void Capability::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capability::CopyFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capability::IsInitialized() const {
  return true;
}

void Capability::Swap(Capability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Capability::InternalSwap(Capability* other) {
  health_check_protocol_.UnsafeArenaSwap(&other->health_check_protocol_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Capability::GetMetadata() const {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Capability

// repeated .envoy.api.v2.Capability.Protocol health_check_protocol = 1;
int Capability::health_check_protocol_size() const {
  return health_check_protocol_.size();
}
void Capability::clear_health_check_protocol() {
  health_check_protocol_.Clear();
}
::envoy::api::v2::Capability_Protocol Capability::health_check_protocol(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Capability.health_check_protocol)
  return static_cast< ::envoy::api::v2::Capability_Protocol >(health_check_protocol_.Get(index));
}
void Capability::set_health_check_protocol(int index, ::envoy::api::v2::Capability_Protocol value) {
  health_check_protocol_.Set(index, value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Capability.health_check_protocol)
}
void Capability::add_health_check_protocol(::envoy::api::v2::Capability_Protocol value) {
  health_check_protocol_.Add(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.Capability.health_check_protocol)
}
const ::google::protobuf::RepeatedField<int>&
Capability::health_check_protocol() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.Capability.health_check_protocol)
  return health_check_protocol_;
}
::google::protobuf::RepeatedField<int>*
Capability::mutable_health_check_protocol() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.Capability.health_check_protocol)
  return &health_check_protocol_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthCheckRequest::kNodeFieldNumber;
const int HealthCheckRequest::kCapabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthCheckRequest::HealthCheckRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fhds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HealthCheckRequest)
}
HealthCheckRequest::HealthCheckRequest(const HealthCheckRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node()) {
    node_ = new ::envoy::api::v2::Node(*from.node_);
  } else {
    node_ = NULL;
  }
  if (from.has_capability()) {
    capability_ = new ::envoy::api::v2::Capability(*from.capability_);
  } else {
    capability_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HealthCheckRequest)
}

void HealthCheckRequest::SharedCtor() {
  ::memset(&node_, 0, reinterpret_cast<char*>(&capability_) -
    reinterpret_cast<char*>(&node_) + sizeof(capability_));
  _cached_size_ = 0;
}

HealthCheckRequest::~HealthCheckRequest() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HealthCheckRequest)
  SharedDtor();
}

void HealthCheckRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete node_;
  }
  if (this != internal_default_instance()) {
    delete capability_;
  }
}

void HealthCheckRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheckRequest::descriptor() {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[1].descriptor;
}

const HealthCheckRequest& HealthCheckRequest::default_instance() {
  protobuf_api_2fhds_2eproto::InitDefaults();
  return *internal_default_instance();
}

HealthCheckRequest* HealthCheckRequest::New(::google::protobuf::Arena* arena) const {
  HealthCheckRequest* n = new HealthCheckRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HealthCheckRequest)
  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
  if (GetArenaNoVirtual() == NULL && capability_ != NULL) {
    delete capability_;
  }
  capability_ = NULL;
}

bool HealthCheckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HealthCheckRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.Node node = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Capability capability = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HealthCheckRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HealthCheckRequest)
  return false;
#undef DO_
}

void HealthCheckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HealthCheckRequest)
  // .envoy.api.v2.Node node = 1;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_, output);
  }

  // .envoy.api.v2.Capability capability = 2;
  if (this->has_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->capability_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HealthCheckRequest)
}

::google::protobuf::uint8* HealthCheckRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HealthCheckRequest)
  // .envoy.api.v2.Node node = 1;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->node_, false, target);
  }

  // .envoy.api.v2.Capability capability = 2;
  if (this->has_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->capability_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HealthCheckRequest)
  return target;
}

size_t HealthCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HealthCheckRequest)
  size_t total_size = 0;

  // .envoy.api.v2.Node node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  // .envoy.api.v2.Capability capability = 2;
  if (this->has_capability()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capability_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheckRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheckRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HealthCheckRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HealthCheckRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HealthCheckRequest)
    MergeFrom(*source);
  }
}

void HealthCheckRequest::MergeFrom(const HealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node()) {
    mutable_node()->::envoy::api::v2::Node::MergeFrom(from.node());
  }
  if (from.has_capability()) {
    mutable_capability()->::envoy::api::v2::Capability::MergeFrom(from.capability());
  }
}

void HealthCheckRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheckRequest::CopyFrom(const HealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckRequest::IsInitialized() const {
  return true;
}

void HealthCheckRequest::Swap(HealthCheckRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthCheckRequest::InternalSwap(HealthCheckRequest* other) {
  std::swap(node_, other->node_);
  std::swap(capability_, other->capability_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HealthCheckRequest::GetMetadata() const {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HealthCheckRequest

// .envoy.api.v2.Node node = 1;
bool HealthCheckRequest::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
void HealthCheckRequest::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::envoy::api::v2::Node& HealthCheckRequest::node() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheckRequest.node)
  return node_ != NULL ? *node_
                         : *::envoy::api::v2::Node::internal_default_instance();
}
::envoy::api::v2::Node* HealthCheckRequest::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::envoy::api::v2::Node;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheckRequest.node)
  return node_;
}
::envoy::api::v2::Node* HealthCheckRequest::release_node() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheckRequest.node)
  
  ::envoy::api::v2::Node* temp = node_;
  node_ = NULL;
  return temp;
}
void HealthCheckRequest::set_allocated_node(::envoy::api::v2::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheckRequest.node)
}

// .envoy.api.v2.Capability capability = 2;
bool HealthCheckRequest::has_capability() const {
  return this != internal_default_instance() && capability_ != NULL;
}
void HealthCheckRequest::clear_capability() {
  if (GetArenaNoVirtual() == NULL && capability_ != NULL) delete capability_;
  capability_ = NULL;
}
const ::envoy::api::v2::Capability& HealthCheckRequest::capability() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheckRequest.capability)
  return capability_ != NULL ? *capability_
                         : *::envoy::api::v2::Capability::internal_default_instance();
}
::envoy::api::v2::Capability* HealthCheckRequest::mutable_capability() {
  
  if (capability_ == NULL) {
    capability_ = new ::envoy::api::v2::Capability;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheckRequest.capability)
  return capability_;
}
::envoy::api::v2::Capability* HealthCheckRequest::release_capability() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheckRequest.capability)
  
  ::envoy::api::v2::Capability* temp = capability_;
  capability_ = NULL;
  return temp;
}
void HealthCheckRequest::set_allocated_capability(::envoy::api::v2::Capability* capability) {
  delete capability_;
  capability_ = capability;
  if (capability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheckRequest.capability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndpointHealth::kEndpointFieldNumber;
const int EndpointHealth::kHealthStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndpointHealth::EndpointHealth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fhds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.EndpointHealth)
}
EndpointHealth::EndpointHealth(const EndpointHealth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_endpoint()) {
    endpoint_ = new ::envoy::api::v2::Endpoint(*from.endpoint_);
  } else {
    endpoint_ = NULL;
  }
  health_status_ = from.health_status_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.EndpointHealth)
}

void EndpointHealth::SharedCtor() {
  ::memset(&endpoint_, 0, reinterpret_cast<char*>(&health_status_) -
    reinterpret_cast<char*>(&endpoint_) + sizeof(health_status_));
  _cached_size_ = 0;
}

EndpointHealth::~EndpointHealth() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.EndpointHealth)
  SharedDtor();
}

void EndpointHealth::SharedDtor() {
  if (this != internal_default_instance()) {
    delete endpoint_;
  }
}

void EndpointHealth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndpointHealth::descriptor() {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[2].descriptor;
}

const EndpointHealth& EndpointHealth::default_instance() {
  protobuf_api_2fhds_2eproto::InitDefaults();
  return *internal_default_instance();
}

EndpointHealth* EndpointHealth::New(::google::protobuf::Arena* arena) const {
  EndpointHealth* n = new EndpointHealth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndpointHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.EndpointHealth)
  if (GetArenaNoVirtual() == NULL && endpoint_ != NULL) {
    delete endpoint_;
  }
  endpoint_ = NULL;
  health_status_ = 0;
}

bool EndpointHealth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.EndpointHealth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.Endpoint endpoint = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.HealthStatus health_status = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_health_status(static_cast< ::envoy::api::v2::HealthStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.EndpointHealth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.EndpointHealth)
  return false;
#undef DO_
}

void EndpointHealth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.EndpointHealth)
  // .envoy.api.v2.Endpoint endpoint = 1;
  if (this->has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->endpoint_, output);
  }

  // .envoy.api.v2.HealthStatus health_status = 2;
  if (this->health_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->health_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.EndpointHealth)
}

::google::protobuf::uint8* EndpointHealth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.EndpointHealth)
  // .envoy.api.v2.Endpoint endpoint = 1;
  if (this->has_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->endpoint_, false, target);
  }

  // .envoy.api.v2.HealthStatus health_status = 2;
  if (this->health_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->health_status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.EndpointHealth)
  return target;
}

size_t EndpointHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.EndpointHealth)
  size_t total_size = 0;

  // .envoy.api.v2.Endpoint endpoint = 1;
  if (this->has_endpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->endpoint_);
  }

  // .envoy.api.v2.HealthStatus health_status = 2;
  if (this->health_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->health_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndpointHealth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.EndpointHealth)
  GOOGLE_DCHECK_NE(&from, this);
  const EndpointHealth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EndpointHealth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.EndpointHealth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.EndpointHealth)
    MergeFrom(*source);
  }
}

void EndpointHealth::MergeFrom(const EndpointHealth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.EndpointHealth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_endpoint()) {
    mutable_endpoint()->::envoy::api::v2::Endpoint::MergeFrom(from.endpoint());
  }
  if (from.health_status() != 0) {
    set_health_status(from.health_status());
  }
}

void EndpointHealth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.EndpointHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndpointHealth::CopyFrom(const EndpointHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.EndpointHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndpointHealth::IsInitialized() const {
  return true;
}

void EndpointHealth::Swap(EndpointHealth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndpointHealth::InternalSwap(EndpointHealth* other) {
  std::swap(endpoint_, other->endpoint_);
  std::swap(health_status_, other->health_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EndpointHealth::GetMetadata() const {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndpointHealth

// .envoy.api.v2.Endpoint endpoint = 1;
bool EndpointHealth::has_endpoint() const {
  return this != internal_default_instance() && endpoint_ != NULL;
}
void EndpointHealth::clear_endpoint() {
  if (GetArenaNoVirtual() == NULL && endpoint_ != NULL) delete endpoint_;
  endpoint_ = NULL;
}
const ::envoy::api::v2::Endpoint& EndpointHealth::endpoint() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.EndpointHealth.endpoint)
  return endpoint_ != NULL ? *endpoint_
                         : *::envoy::api::v2::Endpoint::internal_default_instance();
}
::envoy::api::v2::Endpoint* EndpointHealth::mutable_endpoint() {
  
  if (endpoint_ == NULL) {
    endpoint_ = new ::envoy::api::v2::Endpoint;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.EndpointHealth.endpoint)
  return endpoint_;
}
::envoy::api::v2::Endpoint* EndpointHealth::release_endpoint() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.EndpointHealth.endpoint)
  
  ::envoy::api::v2::Endpoint* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}
void EndpointHealth::set_allocated_endpoint(::envoy::api::v2::Endpoint* endpoint) {
  delete endpoint_;
  endpoint_ = endpoint;
  if (endpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.EndpointHealth.endpoint)
}

// .envoy.api.v2.HealthStatus health_status = 2;
void EndpointHealth::clear_health_status() {
  health_status_ = 0;
}
::envoy::api::v2::HealthStatus EndpointHealth::health_status() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.EndpointHealth.health_status)
  return static_cast< ::envoy::api::v2::HealthStatus >(health_status_);
}
void EndpointHealth::set_health_status(::envoy::api::v2::HealthStatus value) {
  
  health_status_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.EndpointHealth.health_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndpointHealthResponse::kEndpointsHealthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndpointHealthResponse::EndpointHealthResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fhds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.EndpointHealthResponse)
}
EndpointHealthResponse::EndpointHealthResponse(const EndpointHealthResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      endpoints_health_(from.endpoints_health_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.EndpointHealthResponse)
}

void EndpointHealthResponse::SharedCtor() {
  _cached_size_ = 0;
}

EndpointHealthResponse::~EndpointHealthResponse() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.EndpointHealthResponse)
  SharedDtor();
}

void EndpointHealthResponse::SharedDtor() {
}

void EndpointHealthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndpointHealthResponse::descriptor() {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[3].descriptor;
}

const EndpointHealthResponse& EndpointHealthResponse::default_instance() {
  protobuf_api_2fhds_2eproto::InitDefaults();
  return *internal_default_instance();
}

EndpointHealthResponse* EndpointHealthResponse::New(::google::protobuf::Arena* arena) const {
  EndpointHealthResponse* n = new EndpointHealthResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndpointHealthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.EndpointHealthResponse)
  endpoints_health_.Clear();
}

bool EndpointHealthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.EndpointHealthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.EndpointHealth endpoints_health = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_endpoints_health()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.EndpointHealthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.EndpointHealthResponse)
  return false;
#undef DO_
}

void EndpointHealthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.EndpointHealthResponse)
  // repeated .envoy.api.v2.EndpointHealth endpoints_health = 1;
  for (unsigned int i = 0, n = this->endpoints_health_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->endpoints_health(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.EndpointHealthResponse)
}

::google::protobuf::uint8* EndpointHealthResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.EndpointHealthResponse)
  // repeated .envoy.api.v2.EndpointHealth endpoints_health = 1;
  for (unsigned int i = 0, n = this->endpoints_health_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->endpoints_health(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.EndpointHealthResponse)
  return target;
}

size_t EndpointHealthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.EndpointHealthResponse)
  size_t total_size = 0;

  // repeated .envoy.api.v2.EndpointHealth endpoints_health = 1;
  {
    unsigned int count = this->endpoints_health_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoints_health(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndpointHealthResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.EndpointHealthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EndpointHealthResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EndpointHealthResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.EndpointHealthResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.EndpointHealthResponse)
    MergeFrom(*source);
  }
}

void EndpointHealthResponse::MergeFrom(const EndpointHealthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.EndpointHealthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpoints_health_.MergeFrom(from.endpoints_health_);
}

void EndpointHealthResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.EndpointHealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndpointHealthResponse::CopyFrom(const EndpointHealthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.EndpointHealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndpointHealthResponse::IsInitialized() const {
  return true;
}

void EndpointHealthResponse::Swap(EndpointHealthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndpointHealthResponse::InternalSwap(EndpointHealthResponse* other) {
  endpoints_health_.UnsafeArenaSwap(&other->endpoints_health_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EndpointHealthResponse::GetMetadata() const {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndpointHealthResponse

// repeated .envoy.api.v2.EndpointHealth endpoints_health = 1;
int EndpointHealthResponse::endpoints_health_size() const {
  return endpoints_health_.size();
}
void EndpointHealthResponse::clear_endpoints_health() {
  endpoints_health_.Clear();
}
const ::envoy::api::v2::EndpointHealth& EndpointHealthResponse::endpoints_health(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.EndpointHealthResponse.endpoints_health)
  return endpoints_health_.Get(index);
}
::envoy::api::v2::EndpointHealth* EndpointHealthResponse::mutable_endpoints_health(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.EndpointHealthResponse.endpoints_health)
  return endpoints_health_.Mutable(index);
}
::envoy::api::v2::EndpointHealth* EndpointHealthResponse::add_endpoints_health() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.EndpointHealthResponse.endpoints_health)
  return endpoints_health_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::EndpointHealth >*
EndpointHealthResponse::mutable_endpoints_health() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.EndpointHealthResponse.endpoints_health)
  return &endpoints_health_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::EndpointHealth >&
EndpointHealthResponse::endpoints_health() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.EndpointHealthResponse.endpoints_health)
  return endpoints_health_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthCheckRequestOrEndpointHealthResponse::kHealthCheckRequestFieldNumber;
const int HealthCheckRequestOrEndpointHealthResponse::kEndpointHealthResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthCheckRequestOrEndpointHealthResponse::HealthCheckRequestOrEndpointHealthResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fhds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
}
HealthCheckRequestOrEndpointHealthResponse::HealthCheckRequestOrEndpointHealthResponse(const HealthCheckRequestOrEndpointHealthResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_request_type();
  switch (from.request_type_case()) {
    case kHealthCheckRequest: {
      mutable_health_check_request()->::envoy::api::v2::HealthCheckRequest::MergeFrom(from.health_check_request());
      break;
    }
    case kEndpointHealthResponse: {
      mutable_endpoint_health_response()->::envoy::api::v2::EndpointHealthResponse::MergeFrom(from.endpoint_health_response());
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
}

void HealthCheckRequestOrEndpointHealthResponse::SharedCtor() {
  clear_has_request_type();
  _cached_size_ = 0;
}

HealthCheckRequestOrEndpointHealthResponse::~HealthCheckRequestOrEndpointHealthResponse() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  SharedDtor();
}

void HealthCheckRequestOrEndpointHealthResponse::SharedDtor() {
  if (has_request_type()) {
    clear_request_type();
  }
}

void HealthCheckRequestOrEndpointHealthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheckRequestOrEndpointHealthResponse::descriptor() {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[4].descriptor;
}

const HealthCheckRequestOrEndpointHealthResponse& HealthCheckRequestOrEndpointHealthResponse::default_instance() {
  protobuf_api_2fhds_2eproto::InitDefaults();
  return *internal_default_instance();
}

HealthCheckRequestOrEndpointHealthResponse* HealthCheckRequestOrEndpointHealthResponse::New(::google::protobuf::Arena* arena) const {
  HealthCheckRequestOrEndpointHealthResponse* n = new HealthCheckRequestOrEndpointHealthResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthCheckRequestOrEndpointHealthResponse::clear_request_type() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  switch (request_type_case()) {
    case kHealthCheckRequest: {
      delete request_type_.health_check_request_;
      break;
    }
    case kEndpointHealthResponse: {
      delete request_type_.endpoint_health_response_;
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}


void HealthCheckRequestOrEndpointHealthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  clear_request_type();
}

bool HealthCheckRequestOrEndpointHealthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.HealthCheckRequest health_check_request = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_health_check_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.EndpointHealthResponse endpoint_health_response = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint_health_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  return false;
#undef DO_
}

void HealthCheckRequestOrEndpointHealthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  // .envoy.api.v2.HealthCheckRequest health_check_request = 1;
  if (has_health_check_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *request_type_.health_check_request_, output);
  }

  // .envoy.api.v2.EndpointHealthResponse endpoint_health_response = 2;
  if (has_endpoint_health_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *request_type_.endpoint_health_response_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
}

::google::protobuf::uint8* HealthCheckRequestOrEndpointHealthResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  // .envoy.api.v2.HealthCheckRequest health_check_request = 1;
  if (has_health_check_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *request_type_.health_check_request_, false, target);
  }

  // .envoy.api.v2.EndpointHealthResponse endpoint_health_response = 2;
  if (has_endpoint_health_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *request_type_.endpoint_health_response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  return target;
}

size_t HealthCheckRequestOrEndpointHealthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  size_t total_size = 0;

  switch (request_type_case()) {
    // .envoy.api.v2.HealthCheckRequest health_check_request = 1;
    case kHealthCheckRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_type_.health_check_request_);
      break;
    }
    // .envoy.api.v2.EndpointHealthResponse endpoint_health_response = 2;
    case kEndpointHealthResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_type_.endpoint_health_response_);
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheckRequestOrEndpointHealthResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheckRequestOrEndpointHealthResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HealthCheckRequestOrEndpointHealthResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
    MergeFrom(*source);
  }
}

void HealthCheckRequestOrEndpointHealthResponse::MergeFrom(const HealthCheckRequestOrEndpointHealthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.request_type_case()) {
    case kHealthCheckRequest: {
      mutable_health_check_request()->::envoy::api::v2::HealthCheckRequest::MergeFrom(from.health_check_request());
      break;
    }
    case kEndpointHealthResponse: {
      mutable_endpoint_health_response()->::envoy::api::v2::EndpointHealthResponse::MergeFrom(from.endpoint_health_response());
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
}

void HealthCheckRequestOrEndpointHealthResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheckRequestOrEndpointHealthResponse::CopyFrom(const HealthCheckRequestOrEndpointHealthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckRequestOrEndpointHealthResponse::IsInitialized() const {
  return true;
}

void HealthCheckRequestOrEndpointHealthResponse::Swap(HealthCheckRequestOrEndpointHealthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthCheckRequestOrEndpointHealthResponse::InternalSwap(HealthCheckRequestOrEndpointHealthResponse* other) {
  std::swap(request_type_, other->request_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HealthCheckRequestOrEndpointHealthResponse::GetMetadata() const {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HealthCheckRequestOrEndpointHealthResponse

// .envoy.api.v2.HealthCheckRequest health_check_request = 1;
bool HealthCheckRequestOrEndpointHealthResponse::has_health_check_request() const {
  return request_type_case() == kHealthCheckRequest;
}
void HealthCheckRequestOrEndpointHealthResponse::set_has_health_check_request() {
  _oneof_case_[0] = kHealthCheckRequest;
}
void HealthCheckRequestOrEndpointHealthResponse::clear_health_check_request() {
  if (has_health_check_request()) {
    delete request_type_.health_check_request_;
    clear_has_request_type();
  }
}
 const ::envoy::api::v2::HealthCheckRequest& HealthCheckRequestOrEndpointHealthResponse::health_check_request() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse.health_check_request)
  return has_health_check_request()
      ? *request_type_.health_check_request_
      : ::envoy::api::v2::HealthCheckRequest::default_instance();
}
::envoy::api::v2::HealthCheckRequest* HealthCheckRequestOrEndpointHealthResponse::mutable_health_check_request() {
  if (!has_health_check_request()) {
    clear_request_type();
    set_has_health_check_request();
    request_type_.health_check_request_ = new ::envoy::api::v2::HealthCheckRequest;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse.health_check_request)
  return request_type_.health_check_request_;
}
::envoy::api::v2::HealthCheckRequest* HealthCheckRequestOrEndpointHealthResponse::release_health_check_request() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse.health_check_request)
  if (has_health_check_request()) {
    clear_has_request_type();
    ::envoy::api::v2::HealthCheckRequest* temp = request_type_.health_check_request_;
    request_type_.health_check_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HealthCheckRequestOrEndpointHealthResponse::set_allocated_health_check_request(::envoy::api::v2::HealthCheckRequest* health_check_request) {
  clear_request_type();
  if (health_check_request) {
    set_has_health_check_request();
    request_type_.health_check_request_ = health_check_request;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse.health_check_request)
}

// .envoy.api.v2.EndpointHealthResponse endpoint_health_response = 2;
bool HealthCheckRequestOrEndpointHealthResponse::has_endpoint_health_response() const {
  return request_type_case() == kEndpointHealthResponse;
}
void HealthCheckRequestOrEndpointHealthResponse::set_has_endpoint_health_response() {
  _oneof_case_[0] = kEndpointHealthResponse;
}
void HealthCheckRequestOrEndpointHealthResponse::clear_endpoint_health_response() {
  if (has_endpoint_health_response()) {
    delete request_type_.endpoint_health_response_;
    clear_has_request_type();
  }
}
 const ::envoy::api::v2::EndpointHealthResponse& HealthCheckRequestOrEndpointHealthResponse::endpoint_health_response() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse.endpoint_health_response)
  return has_endpoint_health_response()
      ? *request_type_.endpoint_health_response_
      : ::envoy::api::v2::EndpointHealthResponse::default_instance();
}
::envoy::api::v2::EndpointHealthResponse* HealthCheckRequestOrEndpointHealthResponse::mutable_endpoint_health_response() {
  if (!has_endpoint_health_response()) {
    clear_request_type();
    set_has_endpoint_health_response();
    request_type_.endpoint_health_response_ = new ::envoy::api::v2::EndpointHealthResponse;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse.endpoint_health_response)
  return request_type_.endpoint_health_response_;
}
::envoy::api::v2::EndpointHealthResponse* HealthCheckRequestOrEndpointHealthResponse::release_endpoint_health_response() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse.endpoint_health_response)
  if (has_endpoint_health_response()) {
    clear_has_request_type();
    ::envoy::api::v2::EndpointHealthResponse* temp = request_type_.endpoint_health_response_;
    request_type_.endpoint_health_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HealthCheckRequestOrEndpointHealthResponse::set_allocated_endpoint_health_response(::envoy::api::v2::EndpointHealthResponse* endpoint_health_response) {
  clear_request_type();
  if (endpoint_health_response) {
    set_has_endpoint_health_response();
    request_type_.endpoint_health_response_ = endpoint_health_response;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheckRequestOrEndpointHealthResponse.endpoint_health_response)
}

bool HealthCheckRequestOrEndpointHealthResponse::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
void HealthCheckRequestOrEndpointHealthResponse::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
HealthCheckRequestOrEndpointHealthResponse::RequestTypeCase HealthCheckRequestOrEndpointHealthResponse::request_type_case() const {
  return HealthCheckRequestOrEndpointHealthResponse::RequestTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalityEndpoints::kLocalityFieldNumber;
const int LocalityEndpoints::kEndpointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalityEndpoints::LocalityEndpoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fhds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.LocalityEndpoints)
}
LocalityEndpoints::LocalityEndpoints(const LocalityEndpoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      endpoints_(from.endpoints_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_locality()) {
    locality_ = new ::envoy::api::v2::Locality(*from.locality_);
  } else {
    locality_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.LocalityEndpoints)
}

void LocalityEndpoints::SharedCtor() {
  locality_ = NULL;
  _cached_size_ = 0;
}

LocalityEndpoints::~LocalityEndpoints() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.LocalityEndpoints)
  SharedDtor();
}

void LocalityEndpoints::SharedDtor() {
  if (this != internal_default_instance()) {
    delete locality_;
  }
}

void LocalityEndpoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalityEndpoints::descriptor() {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[5].descriptor;
}

const LocalityEndpoints& LocalityEndpoints::default_instance() {
  protobuf_api_2fhds_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocalityEndpoints* LocalityEndpoints::New(::google::protobuf::Arena* arena) const {
  LocalityEndpoints* n = new LocalityEndpoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalityEndpoints::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.LocalityEndpoints)
  endpoints_.Clear();
  if (GetArenaNoVirtual() == NULL && locality_ != NULL) {
    delete locality_;
  }
  locality_ = NULL;
}

bool LocalityEndpoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.LocalityEndpoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.Locality locality = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.Endpoint endpoints = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_endpoints()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.LocalityEndpoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.LocalityEndpoints)
  return false;
#undef DO_
}

void LocalityEndpoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.LocalityEndpoints)
  // .envoy.api.v2.Locality locality = 1;
  if (this->has_locality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->locality_, output);
  }

  // repeated .envoy.api.v2.Endpoint endpoints = 2;
  for (unsigned int i = 0, n = this->endpoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->endpoints(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.LocalityEndpoints)
}

::google::protobuf::uint8* LocalityEndpoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.LocalityEndpoints)
  // .envoy.api.v2.Locality locality = 1;
  if (this->has_locality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->locality_, false, target);
  }

  // repeated .envoy.api.v2.Endpoint endpoints = 2;
  for (unsigned int i = 0, n = this->endpoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->endpoints(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.LocalityEndpoints)
  return target;
}

size_t LocalityEndpoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.LocalityEndpoints)
  size_t total_size = 0;

  // repeated .envoy.api.v2.Endpoint endpoints = 2;
  {
    unsigned int count = this->endpoints_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoints(i));
    }
  }

  // .envoy.api.v2.Locality locality = 1;
  if (this->has_locality()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->locality_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalityEndpoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.LocalityEndpoints)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalityEndpoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalityEndpoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.LocalityEndpoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.LocalityEndpoints)
    MergeFrom(*source);
  }
}

void LocalityEndpoints::MergeFrom(const LocalityEndpoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.LocalityEndpoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpoints_.MergeFrom(from.endpoints_);
  if (from.has_locality()) {
    mutable_locality()->::envoy::api::v2::Locality::MergeFrom(from.locality());
  }
}

void LocalityEndpoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.LocalityEndpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalityEndpoints::CopyFrom(const LocalityEndpoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.LocalityEndpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalityEndpoints::IsInitialized() const {
  return true;
}

void LocalityEndpoints::Swap(LocalityEndpoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalityEndpoints::InternalSwap(LocalityEndpoints* other) {
  endpoints_.UnsafeArenaSwap(&other->endpoints_);
  std::swap(locality_, other->locality_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalityEndpoints::GetMetadata() const {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalityEndpoints

// .envoy.api.v2.Locality locality = 1;
bool LocalityEndpoints::has_locality() const {
  return this != internal_default_instance() && locality_ != NULL;
}
void LocalityEndpoints::clear_locality() {
  if (GetArenaNoVirtual() == NULL && locality_ != NULL) delete locality_;
  locality_ = NULL;
}
const ::envoy::api::v2::Locality& LocalityEndpoints::locality() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.LocalityEndpoints.locality)
  return locality_ != NULL ? *locality_
                         : *::envoy::api::v2::Locality::internal_default_instance();
}
::envoy::api::v2::Locality* LocalityEndpoints::mutable_locality() {
  
  if (locality_ == NULL) {
    locality_ = new ::envoy::api::v2::Locality;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.LocalityEndpoints.locality)
  return locality_;
}
::envoy::api::v2::Locality* LocalityEndpoints::release_locality() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.LocalityEndpoints.locality)
  
  ::envoy::api::v2::Locality* temp = locality_;
  locality_ = NULL;
  return temp;
}
void LocalityEndpoints::set_allocated_locality(::envoy::api::v2::Locality* locality) {
  delete locality_;
  locality_ = locality;
  if (locality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.LocalityEndpoints.locality)
}

// repeated .envoy.api.v2.Endpoint endpoints = 2;
int LocalityEndpoints::endpoints_size() const {
  return endpoints_.size();
}
void LocalityEndpoints::clear_endpoints() {
  endpoints_.Clear();
}
const ::envoy::api::v2::Endpoint& LocalityEndpoints::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.LocalityEndpoints.endpoints)
  return endpoints_.Get(index);
}
::envoy::api::v2::Endpoint* LocalityEndpoints::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.LocalityEndpoints.endpoints)
  return endpoints_.Mutable(index);
}
::envoy::api::v2::Endpoint* LocalityEndpoints::add_endpoints() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.LocalityEndpoints.endpoints)
  return endpoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Endpoint >*
LocalityEndpoints::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.LocalityEndpoints.endpoints)
  return &endpoints_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Endpoint >&
LocalityEndpoints::endpoints() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.LocalityEndpoints.endpoints)
  return endpoints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterHealthCheck::kClusterNameFieldNumber;
const int ClusterHealthCheck::kHealthChecksFieldNumber;
const int ClusterHealthCheck::kEndpointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterHealthCheck::ClusterHealthCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fhds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.ClusterHealthCheck)
}
ClusterHealthCheck::ClusterHealthCheck(const ClusterHealthCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      health_checks_(from.health_checks_),
      endpoints_(from.endpoints_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_name().size() > 0) {
    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.ClusterHealthCheck)
}

void ClusterHealthCheck::SharedCtor() {
  cluster_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ClusterHealthCheck::~ClusterHealthCheck() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.ClusterHealthCheck)
  SharedDtor();
}

void ClusterHealthCheck::SharedDtor() {
  cluster_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClusterHealthCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterHealthCheck::descriptor() {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[6].descriptor;
}

const ClusterHealthCheck& ClusterHealthCheck::default_instance() {
  protobuf_api_2fhds_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClusterHealthCheck* ClusterHealthCheck::New(::google::protobuf::Arena* arena) const {
  ClusterHealthCheck* n = new ClusterHealthCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClusterHealthCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.ClusterHealthCheck)
  health_checks_.Clear();
  endpoints_.Clear();
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClusterHealthCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.ClusterHealthCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cluster_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_name().data(), this->cluster_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.ClusterHealthCheck.cluster_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HealthCheck health_checks = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_health_checks()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .envoy.api.v2.LocalityEndpoints endpoints = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_endpoints()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.ClusterHealthCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.ClusterHealthCheck)
  return false;
#undef DO_
}

void ClusterHealthCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.ClusterHealthCheck)
  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ClusterHealthCheck.cluster_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_name(), output);
  }

  // repeated .envoy.api.v2.HealthCheck health_checks = 2;
  for (unsigned int i = 0, n = this->health_checks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->health_checks(i), output);
  }

  // repeated .envoy.api.v2.LocalityEndpoints endpoints = 3;
  for (unsigned int i = 0, n = this->endpoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->endpoints(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.ClusterHealthCheck)
}

::google::protobuf::uint8* ClusterHealthCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.ClusterHealthCheck)
  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_name().data(), this->cluster_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.ClusterHealthCheck.cluster_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_name(), target);
  }

  // repeated .envoy.api.v2.HealthCheck health_checks = 2;
  for (unsigned int i = 0, n = this->health_checks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->health_checks(i), false, target);
  }

  // repeated .envoy.api.v2.LocalityEndpoints endpoints = 3;
  for (unsigned int i = 0, n = this->endpoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->endpoints(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.ClusterHealthCheck)
  return target;
}

size_t ClusterHealthCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.ClusterHealthCheck)
  size_t total_size = 0;

  // repeated .envoy.api.v2.HealthCheck health_checks = 2;
  {
    unsigned int count = this->health_checks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->health_checks(i));
    }
  }

  // repeated .envoy.api.v2.LocalityEndpoints endpoints = 3;
  {
    unsigned int count = this->endpoints_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoints(i));
    }
  }

  // string cluster_name = 1;
  if (this->cluster_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterHealthCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.ClusterHealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterHealthCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClusterHealthCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.ClusterHealthCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.ClusterHealthCheck)
    MergeFrom(*source);
  }
}

void ClusterHealthCheck::MergeFrom(const ClusterHealthCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.ClusterHealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  health_checks_.MergeFrom(from.health_checks_);
  endpoints_.MergeFrom(from.endpoints_);
  if (from.cluster_name().size() > 0) {

    cluster_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_name_);
  }
}

void ClusterHealthCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.ClusterHealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterHealthCheck::CopyFrom(const ClusterHealthCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.ClusterHealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterHealthCheck::IsInitialized() const {
  return true;
}

void ClusterHealthCheck::Swap(ClusterHealthCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterHealthCheck::InternalSwap(ClusterHealthCheck* other) {
  health_checks_.UnsafeArenaSwap(&other->health_checks_);
  endpoints_.UnsafeArenaSwap(&other->endpoints_);
  cluster_name_.Swap(&other->cluster_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClusterHealthCheck::GetMetadata() const {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClusterHealthCheck

// string cluster_name = 1;
void ClusterHealthCheck::clear_cluster_name() {
  cluster_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClusterHealthCheck::cluster_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ClusterHealthCheck.cluster_name)
  return cluster_name_.GetNoArena();
}
void ClusterHealthCheck::set_cluster_name(const ::std::string& value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ClusterHealthCheck.cluster_name)
}
#if LANG_CXX11
void ClusterHealthCheck::set_cluster_name(::std::string&& value) {
  
  cluster_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ClusterHealthCheck.cluster_name)
}
#endif
void ClusterHealthCheck::set_cluster_name(const char* value) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ClusterHealthCheck.cluster_name)
}
void ClusterHealthCheck::set_cluster_name(const char* value, size_t size) {
  
  cluster_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ClusterHealthCheck.cluster_name)
}
::std::string* ClusterHealthCheck::mutable_cluster_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ClusterHealthCheck.cluster_name)
  return cluster_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClusterHealthCheck::release_cluster_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ClusterHealthCheck.cluster_name)
  
  return cluster_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClusterHealthCheck::set_allocated_cluster_name(::std::string* cluster_name) {
  if (cluster_name != NULL) {
    
  } else {
    
  }
  cluster_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ClusterHealthCheck.cluster_name)
}

// repeated .envoy.api.v2.HealthCheck health_checks = 2;
int ClusterHealthCheck::health_checks_size() const {
  return health_checks_.size();
}
void ClusterHealthCheck::clear_health_checks() {
  health_checks_.Clear();
}
const ::envoy::api::v2::HealthCheck& ClusterHealthCheck::health_checks(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ClusterHealthCheck.health_checks)
  return health_checks_.Get(index);
}
::envoy::api::v2::HealthCheck* ClusterHealthCheck::mutable_health_checks(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ClusterHealthCheck.health_checks)
  return health_checks_.Mutable(index);
}
::envoy::api::v2::HealthCheck* ClusterHealthCheck::add_health_checks() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.ClusterHealthCheck.health_checks)
  return health_checks_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck >*
ClusterHealthCheck::mutable_health_checks() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.ClusterHealthCheck.health_checks)
  return &health_checks_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck >&
ClusterHealthCheck::health_checks() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.ClusterHealthCheck.health_checks)
  return health_checks_;
}

// repeated .envoy.api.v2.LocalityEndpoints endpoints = 3;
int ClusterHealthCheck::endpoints_size() const {
  return endpoints_.size();
}
void ClusterHealthCheck::clear_endpoints() {
  endpoints_.Clear();
}
const ::envoy::api::v2::LocalityEndpoints& ClusterHealthCheck::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ClusterHealthCheck.endpoints)
  return endpoints_.Get(index);
}
::envoy::api::v2::LocalityEndpoints* ClusterHealthCheck::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ClusterHealthCheck.endpoints)
  return endpoints_.Mutable(index);
}
::envoy::api::v2::LocalityEndpoints* ClusterHealthCheck::add_endpoints() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.ClusterHealthCheck.endpoints)
  return endpoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::LocalityEndpoints >*
ClusterHealthCheck::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.ClusterHealthCheck.endpoints)
  return &endpoints_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::LocalityEndpoints >&
ClusterHealthCheck::endpoints() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.ClusterHealthCheck.endpoints)
  return endpoints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthCheckSpecifier::kHealthCheckFieldNumber;
const int HealthCheckSpecifier::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthCheckSpecifier::HealthCheckSpecifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fhds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HealthCheckSpecifier)
}
HealthCheckSpecifier::HealthCheckSpecifier(const HealthCheckSpecifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      health_check_(from.health_check_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interval()) {
    interval_ = new ::google::protobuf::Duration(*from.interval_);
  } else {
    interval_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HealthCheckSpecifier)
}

void HealthCheckSpecifier::SharedCtor() {
  interval_ = NULL;
  _cached_size_ = 0;
}

HealthCheckSpecifier::~HealthCheckSpecifier() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HealthCheckSpecifier)
  SharedDtor();
}

void HealthCheckSpecifier::SharedDtor() {
  if (this != internal_default_instance()) {
    delete interval_;
  }
}

void HealthCheckSpecifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheckSpecifier::descriptor() {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[7].descriptor;
}

const HealthCheckSpecifier& HealthCheckSpecifier::default_instance() {
  protobuf_api_2fhds_2eproto::InitDefaults();
  return *internal_default_instance();
}

HealthCheckSpecifier* HealthCheckSpecifier::New(::google::protobuf::Arena* arena) const {
  HealthCheckSpecifier* n = new HealthCheckSpecifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthCheckSpecifier::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HealthCheckSpecifier)
  health_check_.Clear();
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) {
    delete interval_;
  }
  interval_ = NULL;
}

bool HealthCheckSpecifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HealthCheckSpecifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.ClusterHealthCheck health_check = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_health_check()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .google.protobuf.Duration interval = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HealthCheckSpecifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HealthCheckSpecifier)
  return false;
#undef DO_
}

void HealthCheckSpecifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HealthCheckSpecifier)
  // repeated .envoy.api.v2.ClusterHealthCheck health_check = 1;
  for (unsigned int i = 0, n = this->health_check_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->health_check(i), output);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->interval_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HealthCheckSpecifier)
}

::google::protobuf::uint8* HealthCheckSpecifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HealthCheckSpecifier)
  // repeated .envoy.api.v2.ClusterHealthCheck health_check = 1;
  for (unsigned int i = 0, n = this->health_check_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->health_check(i), false, target);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->interval_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HealthCheckSpecifier)
  return target;
}

size_t HealthCheckSpecifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HealthCheckSpecifier)
  size_t total_size = 0;

  // repeated .envoy.api.v2.ClusterHealthCheck health_check = 1;
  {
    unsigned int count = this->health_check_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->health_check(i));
    }
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->interval_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheckSpecifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HealthCheckSpecifier)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheckSpecifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HealthCheckSpecifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HealthCheckSpecifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HealthCheckSpecifier)
    MergeFrom(*source);
  }
}

void HealthCheckSpecifier::MergeFrom(const HealthCheckSpecifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HealthCheckSpecifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  health_check_.MergeFrom(from.health_check_);
  if (from.has_interval()) {
    mutable_interval()->::google::protobuf::Duration::MergeFrom(from.interval());
  }
}

void HealthCheckSpecifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HealthCheckSpecifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheckSpecifier::CopyFrom(const HealthCheckSpecifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HealthCheckSpecifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckSpecifier::IsInitialized() const {
  return true;
}

void HealthCheckSpecifier::Swap(HealthCheckSpecifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthCheckSpecifier::InternalSwap(HealthCheckSpecifier* other) {
  health_check_.UnsafeArenaSwap(&other->health_check_);
  std::swap(interval_, other->interval_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HealthCheckSpecifier::GetMetadata() const {
  protobuf_api_2fhds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhds_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HealthCheckSpecifier

// repeated .envoy.api.v2.ClusterHealthCheck health_check = 1;
int HealthCheckSpecifier::health_check_size() const {
  return health_check_.size();
}
void HealthCheckSpecifier::clear_health_check() {
  health_check_.Clear();
}
const ::envoy::api::v2::ClusterHealthCheck& HealthCheckSpecifier::health_check(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheckSpecifier.health_check)
  return health_check_.Get(index);
}
::envoy::api::v2::ClusterHealthCheck* HealthCheckSpecifier::mutable_health_check(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheckSpecifier.health_check)
  return health_check_.Mutable(index);
}
::envoy::api::v2::ClusterHealthCheck* HealthCheckSpecifier::add_health_check() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.HealthCheckSpecifier.health_check)
  return health_check_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ClusterHealthCheck >*
HealthCheckSpecifier::mutable_health_check() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.HealthCheckSpecifier.health_check)
  return &health_check_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ClusterHealthCheck >&
HealthCheckSpecifier::health_check() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.HealthCheckSpecifier.health_check)
  return health_check_;
}

// .google.protobuf.Duration interval = 2;
bool HealthCheckSpecifier::has_interval() const {
  return this != internal_default_instance() && interval_ != NULL;
}
void HealthCheckSpecifier::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}
const ::google::protobuf::Duration& HealthCheckSpecifier::interval() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheckSpecifier.interval)
  return interval_ != NULL ? *interval_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* HealthCheckSpecifier::mutable_interval() {
  
  if (interval_ == NULL) {
    interval_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheckSpecifier.interval)
  return interval_;
}
::google::protobuf::Duration* HealthCheckSpecifier::release_interval() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheckSpecifier.interval)
  
  ::google::protobuf::Duration* temp = interval_;
  interval_ = NULL;
  return temp;
}
void HealthCheckSpecifier::set_allocated_interval(::google::protobuf::Duration* interval) {
  delete interval_;
  if (interval != NULL && interval->GetArena() != NULL) {
    ::google::protobuf::Duration* new_interval = new ::google::protobuf::Duration;
    new_interval->CopyFrom(*interval);
    interval = new_interval;
  }
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheckSpecifier.interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
