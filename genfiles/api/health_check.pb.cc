// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/health_check.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/health_check.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
class HealthCheck_PayloadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HealthCheck_Payload> {
  public:
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr binary_;
} _HealthCheck_Payload_default_instance_;
class HealthCheck_HttpHealthCheckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HealthCheck_HttpHealthCheck> {
} _HealthCheck_HttpHealthCheck_default_instance_;
class HealthCheck_TcpHealthCheckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HealthCheck_TcpHealthCheck> {
} _HealthCheck_TcpHealthCheck_default_instance_;
class HealthCheckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HealthCheck> {
  public:
  const ::envoy::api::v2::HealthCheck_HttpHealthCheck* http_health_check_;
  const ::envoy::api::v2::HealthCheck_TcpHealthCheck* tcp_health_check_;
} _HealthCheck_default_instance_;

namespace protobuf_api_2fhealth_5fcheck_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_Payload, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HealthCheck_Payload_default_instance_), text_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HealthCheck_Payload_default_instance_), binary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_Payload, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_HttpHealthCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_HttpHealthCheck, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_HttpHealthCheck, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_HttpHealthCheck, send_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_HttpHealthCheck, receive_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_TcpHealthCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_TcpHealthCheck, send_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_TcpHealthCheck, receive_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, interval_jitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, unhealthy_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, healthy_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, alt_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, reuse_connection_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HealthCheck_default_instance_), http_health_check_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_HealthCheck_default_instance_), tcp_health_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, health_checker_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(HealthCheck_Payload)},
  { 7, -1, sizeof(HealthCheck_HttpHealthCheck)},
  { 15, -1, sizeof(HealthCheck_TcpHealthCheck)},
  { 21, -1, sizeof(HealthCheck)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_HealthCheck_Payload_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HealthCheck_HttpHealthCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HealthCheck_TcpHealthCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HealthCheck_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/health_check.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _HealthCheck_Payload_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _HealthCheck_HttpHealthCheck_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _HealthCheck_TcpHealthCheck_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _HealthCheck_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  _HealthCheck_Payload_default_instance_.DefaultConstruct();
  _HealthCheck_HttpHealthCheck_default_instance_.DefaultConstruct();
  _HealthCheck_TcpHealthCheck_default_instance_.DefaultConstruct();
  _HealthCheck_default_instance_.DefaultConstruct();
  _HealthCheck_Payload_default_instance_.text_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _HealthCheck_Payload_default_instance_.binary_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _HealthCheck_HttpHealthCheck_default_instance_.get_mutable()->send_ = const_cast< ::envoy::api::v2::HealthCheck_Payload*>(
      ::envoy::api::v2::HealthCheck_Payload::internal_default_instance());
  _HealthCheck_HttpHealthCheck_default_instance_.get_mutable()->receive_ = const_cast< ::envoy::api::v2::HealthCheck_Payload*>(
      ::envoy::api::v2::HealthCheck_Payload::internal_default_instance());
  _HealthCheck_TcpHealthCheck_default_instance_.get_mutable()->send_ = const_cast< ::envoy::api::v2::HealthCheck_Payload*>(
      ::envoy::api::v2::HealthCheck_Payload::internal_default_instance());
  _HealthCheck_TcpHealthCheck_default_instance_.get_mutable()->receive_ = const_cast< ::envoy::api::v2::HealthCheck_Payload*>(
      ::envoy::api::v2::HealthCheck_Payload::internal_default_instance());
  _HealthCheck_default_instance_.get_mutable()->timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _HealthCheck_default_instance_.get_mutable()->interval_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _HealthCheck_default_instance_.get_mutable()->interval_jitter_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _HealthCheck_default_instance_.get_mutable()->unhealthy_threshold_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _HealthCheck_default_instance_.get_mutable()->healthy_threshold_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _HealthCheck_default_instance_.get_mutable()->alt_port_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _HealthCheck_default_instance_.get_mutable()->reuse_connection_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _HealthCheck_default_instance_.http_health_check_ = const_cast< ::envoy::api::v2::HealthCheck_HttpHealthCheck*>(
      ::envoy::api::v2::HealthCheck_HttpHealthCheck::internal_default_instance());
  _HealthCheck_default_instance_.tcp_health_check_ = const_cast< ::envoy::api::v2::HealthCheck_TcpHealthCheck*>(
      ::envoy::api::v2::HealthCheck_TcpHealthCheck::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026api/health_check.proto\022\014envoy.api.v2\032\036"
      "google/protobuf/duration.proto\032\036google/p"
      "rotobuf/wrappers.proto\"\330\006\n\013HealthCheck\022*"
      "\n\007timeout\030\001 \001(\0132\031.google.protobuf.Durati"
      "on\022+\n\010interval\030\002 \001(\0132\031.google.protobuf.D"
      "uration\0222\n\017interval_jitter\030\003 \001(\0132\031.googl"
      "e.protobuf.Duration\0229\n\023unhealthy_thresho"
      "ld\030\004 \001(\0132\034.google.protobuf.UInt32Value\0227"
      "\n\021healthy_threshold\030\005 \001(\0132\034.google.proto"
      "buf.UInt32Value\022.\n\010alt_port\030\006 \001(\0132\034.goog"
      "le.protobuf.UInt32Value\0224\n\020reuse_connect"
      "ion\030\007 \001(\0132\032.google.protobuf.BoolValue\022F\n"
      "\021http_health_check\030\010 \001(\0132).envoy.api.v2."
      "HealthCheck.HttpHealthCheckH\000\022D\n\020tcp_hea"
      "lth_check\030\t \001(\0132(.envoy.api.v2.HealthChe"
      "ck.TcpHealthCheckH\000\0326\n\007Payload\022\016\n\004text\030\001"
      " \001(\tH\000\022\020\n\006binary\030\002 \001(\014H\000B\t\n\007payload\032\222\001\n\017"
      "HttpHealthCheck\022\014\n\004host\030\001 \001(\t\022\014\n\004path\030\002 "
      "\001(\t\022/\n\004send\030\003 \001(\0132!.envoy.api.v2.HealthC"
      "heck.Payload\0222\n\007receive\030\004 \001(\0132!.envoy.ap"
      "i.v2.HealthCheck.Payload\032u\n\016TcpHealthChe"
      "ck\022/\n\004send\030\001 \001(\0132!.envoy.api.v2.HealthCh"
      "eck.Payload\0222\n\007receive\030\002 \001(\0132!.envoy.api"
      ".v2.HealthCheck.PayloadB\020\n\016health_checke"
      "r*R\n\014HealthStatus\022\013\n\007UNKNOWN\020\000\022\013\n\007HEALTH"
      "Y\020\001\022\r\n\tUNHEALTHY\020\002\022\014\n\010DRAINING\020\003\022\013\n\007TIME"
      "OUT\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1053);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/health_check.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2fhealth_5fcheck_2eproto

const ::google::protobuf::EnumDescriptor* HealthStatus_descriptor() {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhealth_5fcheck_2eproto::file_level_enum_descriptors[0];
}
bool HealthStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthCheck_Payload::kTextFieldNumber;
const int HealthCheck_Payload::kBinaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthCheck_Payload::HealthCheck_Payload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fhealth_5fcheck_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HealthCheck.Payload)
}
HealthCheck_Payload::HealthCheck_Payload(const HealthCheck_Payload& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kText: {
      set_text(from.text());
      break;
    }
    case kBinary: {
      set_binary(from.binary());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HealthCheck.Payload)
}

void HealthCheck_Payload::SharedCtor() {
  clear_has_payload();
  _cached_size_ = 0;
}

HealthCheck_Payload::~HealthCheck_Payload() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HealthCheck.Payload)
  SharedDtor();
}

void HealthCheck_Payload::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void HealthCheck_Payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheck_Payload::descriptor() {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[0].descriptor;
}

const HealthCheck_Payload& HealthCheck_Payload::default_instance() {
  protobuf_api_2fhealth_5fcheck_2eproto::InitDefaults();
  return *internal_default_instance();
}

HealthCheck_Payload* HealthCheck_Payload::New(::google::protobuf::Arena* arena) const {
  HealthCheck_Payload* n = new HealthCheck_Payload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthCheck_Payload::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.HealthCheck.Payload)
  switch (payload_case()) {
    case kText: {
      payload_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kBinary: {
      payload_.binary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void HealthCheck_Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HealthCheck.Payload)
  clear_payload();
}

bool HealthCheck_Payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HealthCheck.Payload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.HealthCheck.Payload.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes binary = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HealthCheck.Payload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HealthCheck.Payload)
  return false;
#undef DO_
}

void HealthCheck_Payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HealthCheck.Payload)
  // string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.Payload.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // bytes binary = 2;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->binary(), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HealthCheck.Payload)
}

::google::protobuf::uint8* HealthCheck_Payload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HealthCheck.Payload)
  // string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.Payload.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // bytes binary = 2;
  if (has_binary()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->binary(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HealthCheck.Payload)
  return target;
}

size_t HealthCheck_Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HealthCheck.Payload)
  size_t total_size = 0;

  switch (payload_case()) {
    // string text = 1;
    case kText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
      break;
    }
    // bytes binary = 2;
    case kBinary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheck_Payload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HealthCheck.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheck_Payload* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HealthCheck_Payload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HealthCheck.Payload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HealthCheck.Payload)
    MergeFrom(*source);
  }
}

void HealthCheck_Payload::MergeFrom(const HealthCheck_Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HealthCheck.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.payload_case()) {
    case kText: {
      set_text(from.text());
      break;
    }
    case kBinary: {
      set_binary(from.binary());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void HealthCheck_Payload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HealthCheck.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheck_Payload::CopyFrom(const HealthCheck_Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HealthCheck.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck_Payload::IsInitialized() const {
  return true;
}

void HealthCheck_Payload::Swap(HealthCheck_Payload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthCheck_Payload::InternalSwap(HealthCheck_Payload* other) {
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HealthCheck_Payload::GetMetadata() const {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HealthCheck_Payload

// string text = 1;
bool HealthCheck_Payload::has_text() const {
  return payload_case() == kText;
}
void HealthCheck_Payload::set_has_text() {
  _oneof_case_[0] = kText;
}
void HealthCheck_Payload::clear_text() {
  if (has_text()) {
    payload_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& HealthCheck_Payload::text() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.Payload.text)
  if (has_text()) {
    return payload_.text_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void HealthCheck_Payload::set_text(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.Payload.text)
  if (!has_text()) {
    clear_payload();
    set_has_text();
    payload_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.Payload.text)
}
#if LANG_CXX11
void HealthCheck_Payload::set_text(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.Payload.text)
  if (!has_text()) {
    clear_payload();
    set_has_text();
    payload_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HealthCheck.Payload.text)
}
#endif
void HealthCheck_Payload::set_text(const char* value) {
  if (!has_text()) {
    clear_payload();
    set_has_text();
    payload_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HealthCheck.Payload.text)
}
void HealthCheck_Payload::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_payload();
    set_has_text();
    payload_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HealthCheck.Payload.text)
}
::std::string* HealthCheck_Payload::mutable_text() {
  if (!has_text()) {
    clear_payload();
    set_has_text();
    payload_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.Payload.text)
  return payload_.text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HealthCheck_Payload::release_text() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.Payload.text)
  if (has_text()) {
    clear_has_payload();
    return payload_.text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void HealthCheck_Payload::set_allocated_text(::std::string* text) {
  if (!has_text()) {
    payload_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (text != NULL) {
    set_has_text();
    payload_.text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        text);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.Payload.text)
}

// bytes binary = 2;
bool HealthCheck_Payload::has_binary() const {
  return payload_case() == kBinary;
}
void HealthCheck_Payload::set_has_binary() {
  _oneof_case_[0] = kBinary;
}
void HealthCheck_Payload::clear_binary() {
  if (has_binary()) {
    payload_.binary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& HealthCheck_Payload::binary() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.Payload.binary)
  if (has_binary()) {
    return payload_.binary_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void HealthCheck_Payload::set_binary(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.Payload.binary)
  if (!has_binary()) {
    clear_payload();
    set_has_binary();
    payload_.binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.Payload.binary)
}
#if LANG_CXX11
void HealthCheck_Payload::set_binary(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.Payload.binary)
  if (!has_binary()) {
    clear_payload();
    set_has_binary();
    payload_.binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.binary_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HealthCheck.Payload.binary)
}
#endif
void HealthCheck_Payload::set_binary(const char* value) {
  if (!has_binary()) {
    clear_payload();
    set_has_binary();
    payload_.binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HealthCheck.Payload.binary)
}
void HealthCheck_Payload::set_binary(const void* value, size_t size) {
  if (!has_binary()) {
    clear_payload();
    set_has_binary();
    payload_.binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HealthCheck.Payload.binary)
}
::std::string* HealthCheck_Payload::mutable_binary() {
  if (!has_binary()) {
    clear_payload();
    set_has_binary();
    payload_.binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.Payload.binary)
  return payload_.binary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HealthCheck_Payload::release_binary() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.Payload.binary)
  if (has_binary()) {
    clear_has_payload();
    return payload_.binary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void HealthCheck_Payload::set_allocated_binary(::std::string* binary) {
  if (!has_binary()) {
    payload_.binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (binary != NULL) {
    set_has_binary();
    payload_.binary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        binary);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.Payload.binary)
}

bool HealthCheck_Payload::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void HealthCheck_Payload::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
HealthCheck_Payload::PayloadCase HealthCheck_Payload::payload_case() const {
  return HealthCheck_Payload::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthCheck_HttpHealthCheck::kHostFieldNumber;
const int HealthCheck_HttpHealthCheck::kPathFieldNumber;
const int HealthCheck_HttpHealthCheck::kSendFieldNumber;
const int HealthCheck_HttpHealthCheck::kReceiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthCheck_HttpHealthCheck::HealthCheck_HttpHealthCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fhealth_5fcheck_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HealthCheck.HttpHealthCheck)
}
HealthCheck_HttpHealthCheck::HealthCheck_HttpHealthCheck(const HealthCheck_HttpHealthCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_send()) {
    send_ = new ::envoy::api::v2::HealthCheck_Payload(*from.send_);
  } else {
    send_ = NULL;
  }
  if (from.has_receive()) {
    receive_ = new ::envoy::api::v2::HealthCheck_Payload(*from.receive_);
  } else {
    receive_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HealthCheck.HttpHealthCheck)
}

void HealthCheck_HttpHealthCheck::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&send_, 0, reinterpret_cast<char*>(&receive_) -
    reinterpret_cast<char*>(&send_) + sizeof(receive_));
  _cached_size_ = 0;
}

HealthCheck_HttpHealthCheck::~HealthCheck_HttpHealthCheck() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HealthCheck.HttpHealthCheck)
  SharedDtor();
}

void HealthCheck_HttpHealthCheck::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete send_;
  }
  if (this != internal_default_instance()) {
    delete receive_;
  }
}

void HealthCheck_HttpHealthCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheck_HttpHealthCheck::descriptor() {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[1].descriptor;
}

const HealthCheck_HttpHealthCheck& HealthCheck_HttpHealthCheck::default_instance() {
  protobuf_api_2fhealth_5fcheck_2eproto::InitDefaults();
  return *internal_default_instance();
}

HealthCheck_HttpHealthCheck* HealthCheck_HttpHealthCheck::New(::google::protobuf::Arena* arena) const {
  HealthCheck_HttpHealthCheck* n = new HealthCheck_HttpHealthCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthCheck_HttpHealthCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && send_ != NULL) {
    delete send_;
  }
  send_ = NULL;
  if (GetArenaNoVirtual() == NULL && receive_ != NULL) {
    delete receive_;
  }
  receive_ = NULL;
}

bool HealthCheck_HttpHealthCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.HealthCheck.HttpHealthCheck.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.HealthCheck.HttpHealthCheck.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.HealthCheck.Payload send = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.HealthCheck.Payload receive = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HealthCheck.HttpHealthCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HealthCheck.HttpHealthCheck)
  return false;
#undef DO_
}

void HealthCheck_HttpHealthCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.HttpHealthCheck.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.HttpHealthCheck.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // .envoy.api.v2.HealthCheck.Payload send = 3;
  if (this->has_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->send_, output);
  }

  // .envoy.api.v2.HealthCheck.Payload receive = 4;
  if (this->has_receive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->receive_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HealthCheck.HttpHealthCheck)
}

::google::protobuf::uint8* HealthCheck_HttpHealthCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.HttpHealthCheck.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.HealthCheck.HttpHealthCheck.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // .envoy.api.v2.HealthCheck.Payload send = 3;
  if (this->has_send()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->send_, false, target);
  }

  // .envoy.api.v2.HealthCheck.Payload receive = 4;
  if (this->has_receive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->receive_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HealthCheck.HttpHealthCheck)
  return target;
}

size_t HealthCheck_HttpHealthCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  size_t total_size = 0;

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .envoy.api.v2.HealthCheck.Payload send = 3;
  if (this->has_send()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->send_);
  }

  // .envoy.api.v2.HealthCheck.Payload receive = 4;
  if (this->has_receive()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receive_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheck_HttpHealthCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheck_HttpHealthCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HealthCheck_HttpHealthCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HealthCheck.HttpHealthCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HealthCheck.HttpHealthCheck)
    MergeFrom(*source);
  }
}

void HealthCheck_HttpHealthCheck::MergeFrom(const HealthCheck_HttpHealthCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_send()) {
    mutable_send()->::envoy::api::v2::HealthCheck_Payload::MergeFrom(from.send());
  }
  if (from.has_receive()) {
    mutable_receive()->::envoy::api::v2::HealthCheck_Payload::MergeFrom(from.receive());
  }
}

void HealthCheck_HttpHealthCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheck_HttpHealthCheck::CopyFrom(const HealthCheck_HttpHealthCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HealthCheck.HttpHealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck_HttpHealthCheck::IsInitialized() const {
  return true;
}

void HealthCheck_HttpHealthCheck::Swap(HealthCheck_HttpHealthCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthCheck_HttpHealthCheck::InternalSwap(HealthCheck_HttpHealthCheck* other) {
  host_.Swap(&other->host_);
  path_.Swap(&other->path_);
  std::swap(send_, other->send_);
  std::swap(receive_, other->receive_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HealthCheck_HttpHealthCheck::GetMetadata() const {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HealthCheck_HttpHealthCheck

// string host = 1;
void HealthCheck_HttpHealthCheck::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HealthCheck_HttpHealthCheck::host() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
  return host_.GetNoArena();
}
void HealthCheck_HttpHealthCheck::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
}
#if LANG_CXX11
void HealthCheck_HttpHealthCheck::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
}
#endif
void HealthCheck_HttpHealthCheck::set_host(const char* value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
}
void HealthCheck_HttpHealthCheck::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
}
::std::string* HealthCheck_HttpHealthCheck::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HealthCheck_HttpHealthCheck::release_host() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HealthCheck_HttpHealthCheck::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
}

// string path = 2;
void HealthCheck_HttpHealthCheck::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HealthCheck_HttpHealthCheck::path() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
  return path_.GetNoArena();
}
void HealthCheck_HttpHealthCheck::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
}
#if LANG_CXX11
void HealthCheck_HttpHealthCheck::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
}
#endif
void HealthCheck_HttpHealthCheck::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
}
void HealthCheck_HttpHealthCheck::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
}
::std::string* HealthCheck_HttpHealthCheck::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HealthCheck_HttpHealthCheck::release_path() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HealthCheck_HttpHealthCheck::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
}

// .envoy.api.v2.HealthCheck.Payload send = 3;
bool HealthCheck_HttpHealthCheck::has_send() const {
  return this != internal_default_instance() && send_ != NULL;
}
void HealthCheck_HttpHealthCheck::clear_send() {
  if (GetArenaNoVirtual() == NULL && send_ != NULL) delete send_;
  send_ = NULL;
}
const ::envoy::api::v2::HealthCheck_Payload& HealthCheck_HttpHealthCheck::send() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.HttpHealthCheck.send)
  return send_ != NULL ? *send_
                         : *::envoy::api::v2::HealthCheck_Payload::internal_default_instance();
}
::envoy::api::v2::HealthCheck_Payload* HealthCheck_HttpHealthCheck::mutable_send() {
  
  if (send_ == NULL) {
    send_ = new ::envoy::api::v2::HealthCheck_Payload;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.HttpHealthCheck.send)
  return send_;
}
::envoy::api::v2::HealthCheck_Payload* HealthCheck_HttpHealthCheck::release_send() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.HttpHealthCheck.send)
  
  ::envoy::api::v2::HealthCheck_Payload* temp = send_;
  send_ = NULL;
  return temp;
}
void HealthCheck_HttpHealthCheck::set_allocated_send(::envoy::api::v2::HealthCheck_Payload* send) {
  delete send_;
  send_ = send;
  if (send) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.HttpHealthCheck.send)
}

// .envoy.api.v2.HealthCheck.Payload receive = 4;
bool HealthCheck_HttpHealthCheck::has_receive() const {
  return this != internal_default_instance() && receive_ != NULL;
}
void HealthCheck_HttpHealthCheck::clear_receive() {
  if (GetArenaNoVirtual() == NULL && receive_ != NULL) delete receive_;
  receive_ = NULL;
}
const ::envoy::api::v2::HealthCheck_Payload& HealthCheck_HttpHealthCheck::receive() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.HttpHealthCheck.receive)
  return receive_ != NULL ? *receive_
                         : *::envoy::api::v2::HealthCheck_Payload::internal_default_instance();
}
::envoy::api::v2::HealthCheck_Payload* HealthCheck_HttpHealthCheck::mutable_receive() {
  
  if (receive_ == NULL) {
    receive_ = new ::envoy::api::v2::HealthCheck_Payload;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.HttpHealthCheck.receive)
  return receive_;
}
::envoy::api::v2::HealthCheck_Payload* HealthCheck_HttpHealthCheck::release_receive() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.HttpHealthCheck.receive)
  
  ::envoy::api::v2::HealthCheck_Payload* temp = receive_;
  receive_ = NULL;
  return temp;
}
void HealthCheck_HttpHealthCheck::set_allocated_receive(::envoy::api::v2::HealthCheck_Payload* receive) {
  delete receive_;
  receive_ = receive;
  if (receive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.HttpHealthCheck.receive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthCheck_TcpHealthCheck::kSendFieldNumber;
const int HealthCheck_TcpHealthCheck::kReceiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthCheck_TcpHealthCheck::HealthCheck_TcpHealthCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fhealth_5fcheck_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HealthCheck.TcpHealthCheck)
}
HealthCheck_TcpHealthCheck::HealthCheck_TcpHealthCheck(const HealthCheck_TcpHealthCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_send()) {
    send_ = new ::envoy::api::v2::HealthCheck_Payload(*from.send_);
  } else {
    send_ = NULL;
  }
  if (from.has_receive()) {
    receive_ = new ::envoy::api::v2::HealthCheck_Payload(*from.receive_);
  } else {
    receive_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HealthCheck.TcpHealthCheck)
}

void HealthCheck_TcpHealthCheck::SharedCtor() {
  ::memset(&send_, 0, reinterpret_cast<char*>(&receive_) -
    reinterpret_cast<char*>(&send_) + sizeof(receive_));
  _cached_size_ = 0;
}

HealthCheck_TcpHealthCheck::~HealthCheck_TcpHealthCheck() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HealthCheck.TcpHealthCheck)
  SharedDtor();
}

void HealthCheck_TcpHealthCheck::SharedDtor() {
  if (this != internal_default_instance()) {
    delete send_;
  }
  if (this != internal_default_instance()) {
    delete receive_;
  }
}

void HealthCheck_TcpHealthCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheck_TcpHealthCheck::descriptor() {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[2].descriptor;
}

const HealthCheck_TcpHealthCheck& HealthCheck_TcpHealthCheck::default_instance() {
  protobuf_api_2fhealth_5fcheck_2eproto::InitDefaults();
  return *internal_default_instance();
}

HealthCheck_TcpHealthCheck* HealthCheck_TcpHealthCheck::New(::google::protobuf::Arena* arena) const {
  HealthCheck_TcpHealthCheck* n = new HealthCheck_TcpHealthCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthCheck_TcpHealthCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  if (GetArenaNoVirtual() == NULL && send_ != NULL) {
    delete send_;
  }
  send_ = NULL;
  if (GetArenaNoVirtual() == NULL && receive_ != NULL) {
    delete receive_;
  }
  receive_ = NULL;
}

bool HealthCheck_TcpHealthCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.HealthCheck.Payload send = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.HealthCheck.Payload receive = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HealthCheck.TcpHealthCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HealthCheck.TcpHealthCheck)
  return false;
#undef DO_
}

void HealthCheck_TcpHealthCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  // .envoy.api.v2.HealthCheck.Payload send = 1;
  if (this->has_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->send_, output);
  }

  // .envoy.api.v2.HealthCheck.Payload receive = 2;
  if (this->has_receive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->receive_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HealthCheck.TcpHealthCheck)
}

::google::protobuf::uint8* HealthCheck_TcpHealthCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  // .envoy.api.v2.HealthCheck.Payload send = 1;
  if (this->has_send()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->send_, false, target);
  }

  // .envoy.api.v2.HealthCheck.Payload receive = 2;
  if (this->has_receive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->receive_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HealthCheck.TcpHealthCheck)
  return target;
}

size_t HealthCheck_TcpHealthCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  size_t total_size = 0;

  // .envoy.api.v2.HealthCheck.Payload send = 1;
  if (this->has_send()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->send_);
  }

  // .envoy.api.v2.HealthCheck.Payload receive = 2;
  if (this->has_receive()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receive_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheck_TcpHealthCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheck_TcpHealthCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HealthCheck_TcpHealthCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HealthCheck.TcpHealthCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HealthCheck.TcpHealthCheck)
    MergeFrom(*source);
  }
}

void HealthCheck_TcpHealthCheck::MergeFrom(const HealthCheck_TcpHealthCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_send()) {
    mutable_send()->::envoy::api::v2::HealthCheck_Payload::MergeFrom(from.send());
  }
  if (from.has_receive()) {
    mutable_receive()->::envoy::api::v2::HealthCheck_Payload::MergeFrom(from.receive());
  }
}

void HealthCheck_TcpHealthCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheck_TcpHealthCheck::CopyFrom(const HealthCheck_TcpHealthCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HealthCheck.TcpHealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck_TcpHealthCheck::IsInitialized() const {
  return true;
}

void HealthCheck_TcpHealthCheck::Swap(HealthCheck_TcpHealthCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthCheck_TcpHealthCheck::InternalSwap(HealthCheck_TcpHealthCheck* other) {
  std::swap(send_, other->send_);
  std::swap(receive_, other->receive_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HealthCheck_TcpHealthCheck::GetMetadata() const {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HealthCheck_TcpHealthCheck

// .envoy.api.v2.HealthCheck.Payload send = 1;
bool HealthCheck_TcpHealthCheck::has_send() const {
  return this != internal_default_instance() && send_ != NULL;
}
void HealthCheck_TcpHealthCheck::clear_send() {
  if (GetArenaNoVirtual() == NULL && send_ != NULL) delete send_;
  send_ = NULL;
}
const ::envoy::api::v2::HealthCheck_Payload& HealthCheck_TcpHealthCheck::send() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.TcpHealthCheck.send)
  return send_ != NULL ? *send_
                         : *::envoy::api::v2::HealthCheck_Payload::internal_default_instance();
}
::envoy::api::v2::HealthCheck_Payload* HealthCheck_TcpHealthCheck::mutable_send() {
  
  if (send_ == NULL) {
    send_ = new ::envoy::api::v2::HealthCheck_Payload;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.TcpHealthCheck.send)
  return send_;
}
::envoy::api::v2::HealthCheck_Payload* HealthCheck_TcpHealthCheck::release_send() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.TcpHealthCheck.send)
  
  ::envoy::api::v2::HealthCheck_Payload* temp = send_;
  send_ = NULL;
  return temp;
}
void HealthCheck_TcpHealthCheck::set_allocated_send(::envoy::api::v2::HealthCheck_Payload* send) {
  delete send_;
  send_ = send;
  if (send) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.TcpHealthCheck.send)
}

// .envoy.api.v2.HealthCheck.Payload receive = 2;
bool HealthCheck_TcpHealthCheck::has_receive() const {
  return this != internal_default_instance() && receive_ != NULL;
}
void HealthCheck_TcpHealthCheck::clear_receive() {
  if (GetArenaNoVirtual() == NULL && receive_ != NULL) delete receive_;
  receive_ = NULL;
}
const ::envoy::api::v2::HealthCheck_Payload& HealthCheck_TcpHealthCheck::receive() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.TcpHealthCheck.receive)
  return receive_ != NULL ? *receive_
                         : *::envoy::api::v2::HealthCheck_Payload::internal_default_instance();
}
::envoy::api::v2::HealthCheck_Payload* HealthCheck_TcpHealthCheck::mutable_receive() {
  
  if (receive_ == NULL) {
    receive_ = new ::envoy::api::v2::HealthCheck_Payload;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.TcpHealthCheck.receive)
  return receive_;
}
::envoy::api::v2::HealthCheck_Payload* HealthCheck_TcpHealthCheck::release_receive() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.TcpHealthCheck.receive)
  
  ::envoy::api::v2::HealthCheck_Payload* temp = receive_;
  receive_ = NULL;
  return temp;
}
void HealthCheck_TcpHealthCheck::set_allocated_receive(::envoy::api::v2::HealthCheck_Payload* receive) {
  delete receive_;
  receive_ = receive;
  if (receive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.TcpHealthCheck.receive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HealthCheck::kTimeoutFieldNumber;
const int HealthCheck::kIntervalFieldNumber;
const int HealthCheck::kIntervalJitterFieldNumber;
const int HealthCheck::kUnhealthyThresholdFieldNumber;
const int HealthCheck::kHealthyThresholdFieldNumber;
const int HealthCheck::kAltPortFieldNumber;
const int HealthCheck::kReuseConnectionFieldNumber;
const int HealthCheck::kHttpHealthCheckFieldNumber;
const int HealthCheck::kTcpHealthCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HealthCheck::HealthCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fhealth_5fcheck_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.HealthCheck)
}
HealthCheck::HealthCheck(const HealthCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timeout()) {
    timeout_ = new ::google::protobuf::Duration(*from.timeout_);
  } else {
    timeout_ = NULL;
  }
  if (from.has_interval()) {
    interval_ = new ::google::protobuf::Duration(*from.interval_);
  } else {
    interval_ = NULL;
  }
  if (from.has_interval_jitter()) {
    interval_jitter_ = new ::google::protobuf::Duration(*from.interval_jitter_);
  } else {
    interval_jitter_ = NULL;
  }
  if (from.has_unhealthy_threshold()) {
    unhealthy_threshold_ = new ::google::protobuf::UInt32Value(*from.unhealthy_threshold_);
  } else {
    unhealthy_threshold_ = NULL;
  }
  if (from.has_healthy_threshold()) {
    healthy_threshold_ = new ::google::protobuf::UInt32Value(*from.healthy_threshold_);
  } else {
    healthy_threshold_ = NULL;
  }
  if (from.has_alt_port()) {
    alt_port_ = new ::google::protobuf::UInt32Value(*from.alt_port_);
  } else {
    alt_port_ = NULL;
  }
  if (from.has_reuse_connection()) {
    reuse_connection_ = new ::google::protobuf::BoolValue(*from.reuse_connection_);
  } else {
    reuse_connection_ = NULL;
  }
  clear_has_health_checker();
  switch (from.health_checker_case()) {
    case kHttpHealthCheck: {
      mutable_http_health_check()->::envoy::api::v2::HealthCheck_HttpHealthCheck::MergeFrom(from.http_health_check());
      break;
    }
    case kTcpHealthCheck: {
      mutable_tcp_health_check()->::envoy::api::v2::HealthCheck_TcpHealthCheck::MergeFrom(from.tcp_health_check());
      break;
    }
    case HEALTH_CHECKER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.HealthCheck)
}

void HealthCheck::SharedCtor() {
  ::memset(&timeout_, 0, reinterpret_cast<char*>(&reuse_connection_) -
    reinterpret_cast<char*>(&timeout_) + sizeof(reuse_connection_));
  clear_has_health_checker();
  _cached_size_ = 0;
}

HealthCheck::~HealthCheck() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.HealthCheck)
  SharedDtor();
}

void HealthCheck::SharedDtor() {
  if (this != internal_default_instance()) {
    delete timeout_;
  }
  if (this != internal_default_instance()) {
    delete interval_;
  }
  if (this != internal_default_instance()) {
    delete interval_jitter_;
  }
  if (this != internal_default_instance()) {
    delete unhealthy_threshold_;
  }
  if (this != internal_default_instance()) {
    delete healthy_threshold_;
  }
  if (this != internal_default_instance()) {
    delete alt_port_;
  }
  if (this != internal_default_instance()) {
    delete reuse_connection_;
  }
  if (has_health_checker()) {
    clear_health_checker();
  }
}

void HealthCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheck::descriptor() {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[3].descriptor;
}

const HealthCheck& HealthCheck::default_instance() {
  protobuf_api_2fhealth_5fcheck_2eproto::InitDefaults();
  return *internal_default_instance();
}

HealthCheck* HealthCheck::New(::google::protobuf::Arena* arena) const {
  HealthCheck* n = new HealthCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HealthCheck::clear_health_checker() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.HealthCheck)
  switch (health_checker_case()) {
    case kHttpHealthCheck: {
      delete health_checker_.http_health_check_;
      break;
    }
    case kTcpHealthCheck: {
      delete health_checker_.tcp_health_check_;
      break;
    }
    case HEALTH_CHECKER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HEALTH_CHECKER_NOT_SET;
}


void HealthCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.HealthCheck)
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) {
    delete timeout_;
  }
  timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) {
    delete interval_;
  }
  interval_ = NULL;
  if (GetArenaNoVirtual() == NULL && interval_jitter_ != NULL) {
    delete interval_jitter_;
  }
  interval_jitter_ = NULL;
  if (GetArenaNoVirtual() == NULL && unhealthy_threshold_ != NULL) {
    delete unhealthy_threshold_;
  }
  unhealthy_threshold_ = NULL;
  if (GetArenaNoVirtual() == NULL && healthy_threshold_ != NULL) {
    delete healthy_threshold_;
  }
  healthy_threshold_ = NULL;
  if (GetArenaNoVirtual() == NULL && alt_port_ != NULL) {
    delete alt_port_;
  }
  alt_port_ = NULL;
  if (GetArenaNoVirtual() == NULL && reuse_connection_ != NULL) {
    delete reuse_connection_;
  }
  reuse_connection_ = NULL;
  clear_health_checker();
}

bool HealthCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.HealthCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration timeout = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration interval = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration interval_jitter = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interval_jitter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value unhealthy_threshold = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unhealthy_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value healthy_threshold = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_healthy_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value alt_port = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alt_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue reuse_connection = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reuse_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.HealthCheck.HttpHealthCheck http_health_check = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http_health_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.HealthCheck.TcpHealthCheck tcp_health_check = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcp_health_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.HealthCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.HealthCheck)
  return false;
#undef DO_
}

void HealthCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.HealthCheck)
  // .google.protobuf.Duration timeout = 1;
  if (this->has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->timeout_, output);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->interval_, output);
  }

  // .google.protobuf.Duration interval_jitter = 3;
  if (this->has_interval_jitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->interval_jitter_, output);
  }

  // .google.protobuf.UInt32Value unhealthy_threshold = 4;
  if (this->has_unhealthy_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->unhealthy_threshold_, output);
  }

  // .google.protobuf.UInt32Value healthy_threshold = 5;
  if (this->has_healthy_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->healthy_threshold_, output);
  }

  // .google.protobuf.UInt32Value alt_port = 6;
  if (this->has_alt_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->alt_port_, output);
  }

  // .google.protobuf.BoolValue reuse_connection = 7;
  if (this->has_reuse_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->reuse_connection_, output);
  }

  // .envoy.api.v2.HealthCheck.HttpHealthCheck http_health_check = 8;
  if (has_http_health_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *health_checker_.http_health_check_, output);
  }

  // .envoy.api.v2.HealthCheck.TcpHealthCheck tcp_health_check = 9;
  if (has_tcp_health_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *health_checker_.tcp_health_check_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.HealthCheck)
}

::google::protobuf::uint8* HealthCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.HealthCheck)
  // .google.protobuf.Duration timeout = 1;
  if (this->has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->timeout_, false, target);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->interval_, false, target);
  }

  // .google.protobuf.Duration interval_jitter = 3;
  if (this->has_interval_jitter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->interval_jitter_, false, target);
  }

  // .google.protobuf.UInt32Value unhealthy_threshold = 4;
  if (this->has_unhealthy_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->unhealthy_threshold_, false, target);
  }

  // .google.protobuf.UInt32Value healthy_threshold = 5;
  if (this->has_healthy_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->healthy_threshold_, false, target);
  }

  // .google.protobuf.UInt32Value alt_port = 6;
  if (this->has_alt_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->alt_port_, false, target);
  }

  // .google.protobuf.BoolValue reuse_connection = 7;
  if (this->has_reuse_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->reuse_connection_, false, target);
  }

  // .envoy.api.v2.HealthCheck.HttpHealthCheck http_health_check = 8;
  if (has_http_health_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *health_checker_.http_health_check_, false, target);
  }

  // .envoy.api.v2.HealthCheck.TcpHealthCheck tcp_health_check = 9;
  if (has_tcp_health_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *health_checker_.tcp_health_check_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.HealthCheck)
  return target;
}

size_t HealthCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.HealthCheck)
  size_t total_size = 0;

  // .google.protobuf.Duration timeout = 1;
  if (this->has_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timeout_);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->interval_);
  }

  // .google.protobuf.Duration interval_jitter = 3;
  if (this->has_interval_jitter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->interval_jitter_);
  }

  // .google.protobuf.UInt32Value unhealthy_threshold = 4;
  if (this->has_unhealthy_threshold()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->unhealthy_threshold_);
  }

  // .google.protobuf.UInt32Value healthy_threshold = 5;
  if (this->has_healthy_threshold()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->healthy_threshold_);
  }

  // .google.protobuf.UInt32Value alt_port = 6;
  if (this->has_alt_port()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->alt_port_);
  }

  // .google.protobuf.BoolValue reuse_connection = 7;
  if (this->has_reuse_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reuse_connection_);
  }

  switch (health_checker_case()) {
    // .envoy.api.v2.HealthCheck.HttpHealthCheck http_health_check = 8;
    case kHttpHealthCheck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *health_checker_.http_health_check_);
      break;
    }
    // .envoy.api.v2.HealthCheck.TcpHealthCheck tcp_health_check = 9;
    case kTcpHealthCheck: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *health_checker_.tcp_health_check_);
      break;
    }
    case HEALTH_CHECKER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.HealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HealthCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.HealthCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.HealthCheck)
    MergeFrom(*source);
  }
}

void HealthCheck::MergeFrom(const HealthCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.HealthCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timeout()) {
    mutable_timeout()->::google::protobuf::Duration::MergeFrom(from.timeout());
  }
  if (from.has_interval()) {
    mutable_interval()->::google::protobuf::Duration::MergeFrom(from.interval());
  }
  if (from.has_interval_jitter()) {
    mutable_interval_jitter()->::google::protobuf::Duration::MergeFrom(from.interval_jitter());
  }
  if (from.has_unhealthy_threshold()) {
    mutable_unhealthy_threshold()->::google::protobuf::UInt32Value::MergeFrom(from.unhealthy_threshold());
  }
  if (from.has_healthy_threshold()) {
    mutable_healthy_threshold()->::google::protobuf::UInt32Value::MergeFrom(from.healthy_threshold());
  }
  if (from.has_alt_port()) {
    mutable_alt_port()->::google::protobuf::UInt32Value::MergeFrom(from.alt_port());
  }
  if (from.has_reuse_connection()) {
    mutable_reuse_connection()->::google::protobuf::BoolValue::MergeFrom(from.reuse_connection());
  }
  switch (from.health_checker_case()) {
    case kHttpHealthCheck: {
      mutable_http_health_check()->::envoy::api::v2::HealthCheck_HttpHealthCheck::MergeFrom(from.http_health_check());
      break;
    }
    case kTcpHealthCheck: {
      mutable_tcp_health_check()->::envoy::api::v2::HealthCheck_TcpHealthCheck::MergeFrom(from.tcp_health_check());
      break;
    }
    case HEALTH_CHECKER_NOT_SET: {
      break;
    }
  }
}

void HealthCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.HealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheck::CopyFrom(const HealthCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.HealthCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck::IsInitialized() const {
  return true;
}

void HealthCheck::Swap(HealthCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HealthCheck::InternalSwap(HealthCheck* other) {
  std::swap(timeout_, other->timeout_);
  std::swap(interval_, other->interval_);
  std::swap(interval_jitter_, other->interval_jitter_);
  std::swap(unhealthy_threshold_, other->unhealthy_threshold_);
  std::swap(healthy_threshold_, other->healthy_threshold_);
  std::swap(alt_port_, other->alt_port_);
  std::swap(reuse_connection_, other->reuse_connection_);
  std::swap(health_checker_, other->health_checker_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HealthCheck::GetMetadata() const {
  protobuf_api_2fhealth_5fcheck_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fhealth_5fcheck_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HealthCheck

// .google.protobuf.Duration timeout = 1;
bool HealthCheck::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
void HealthCheck::clear_timeout() {
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) delete timeout_;
  timeout_ = NULL;
}
const ::google::protobuf::Duration& HealthCheck::timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.timeout)
  return timeout_ != NULL ? *timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* HealthCheck::mutable_timeout() {
  
  if (timeout_ == NULL) {
    timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.timeout)
  return timeout_;
}
::google::protobuf::Duration* HealthCheck::release_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
void HealthCheck::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  delete timeout_;
  if (timeout != NULL && timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_timeout = new ::google::protobuf::Duration;
    new_timeout->CopyFrom(*timeout);
    timeout = new_timeout;
  }
  timeout_ = timeout;
  if (timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.timeout)
}

// .google.protobuf.Duration interval = 2;
bool HealthCheck::has_interval() const {
  return this != internal_default_instance() && interval_ != NULL;
}
void HealthCheck::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}
const ::google::protobuf::Duration& HealthCheck::interval() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.interval)
  return interval_ != NULL ? *interval_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* HealthCheck::mutable_interval() {
  
  if (interval_ == NULL) {
    interval_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.interval)
  return interval_;
}
::google::protobuf::Duration* HealthCheck::release_interval() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.interval)
  
  ::google::protobuf::Duration* temp = interval_;
  interval_ = NULL;
  return temp;
}
void HealthCheck::set_allocated_interval(::google::protobuf::Duration* interval) {
  delete interval_;
  if (interval != NULL && interval->GetArena() != NULL) {
    ::google::protobuf::Duration* new_interval = new ::google::protobuf::Duration;
    new_interval->CopyFrom(*interval);
    interval = new_interval;
  }
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.interval)
}

// .google.protobuf.Duration interval_jitter = 3;
bool HealthCheck::has_interval_jitter() const {
  return this != internal_default_instance() && interval_jitter_ != NULL;
}
void HealthCheck::clear_interval_jitter() {
  if (GetArenaNoVirtual() == NULL && interval_jitter_ != NULL) delete interval_jitter_;
  interval_jitter_ = NULL;
}
const ::google::protobuf::Duration& HealthCheck::interval_jitter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.interval_jitter)
  return interval_jitter_ != NULL ? *interval_jitter_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* HealthCheck::mutable_interval_jitter() {
  
  if (interval_jitter_ == NULL) {
    interval_jitter_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.interval_jitter)
  return interval_jitter_;
}
::google::protobuf::Duration* HealthCheck::release_interval_jitter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.interval_jitter)
  
  ::google::protobuf::Duration* temp = interval_jitter_;
  interval_jitter_ = NULL;
  return temp;
}
void HealthCheck::set_allocated_interval_jitter(::google::protobuf::Duration* interval_jitter) {
  delete interval_jitter_;
  if (interval_jitter != NULL && interval_jitter->GetArena() != NULL) {
    ::google::protobuf::Duration* new_interval_jitter = new ::google::protobuf::Duration;
    new_interval_jitter->CopyFrom(*interval_jitter);
    interval_jitter = new_interval_jitter;
  }
  interval_jitter_ = interval_jitter;
  if (interval_jitter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.interval_jitter)
}

// .google.protobuf.UInt32Value unhealthy_threshold = 4;
bool HealthCheck::has_unhealthy_threshold() const {
  return this != internal_default_instance() && unhealthy_threshold_ != NULL;
}
void HealthCheck::clear_unhealthy_threshold() {
  if (GetArenaNoVirtual() == NULL && unhealthy_threshold_ != NULL) delete unhealthy_threshold_;
  unhealthy_threshold_ = NULL;
}
const ::google::protobuf::UInt32Value& HealthCheck::unhealthy_threshold() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.unhealthy_threshold)
  return unhealthy_threshold_ != NULL ? *unhealthy_threshold_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* HealthCheck::mutable_unhealthy_threshold() {
  
  if (unhealthy_threshold_ == NULL) {
    unhealthy_threshold_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.unhealthy_threshold)
  return unhealthy_threshold_;
}
::google::protobuf::UInt32Value* HealthCheck::release_unhealthy_threshold() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.unhealthy_threshold)
  
  ::google::protobuf::UInt32Value* temp = unhealthy_threshold_;
  unhealthy_threshold_ = NULL;
  return temp;
}
void HealthCheck::set_allocated_unhealthy_threshold(::google::protobuf::UInt32Value* unhealthy_threshold) {
  delete unhealthy_threshold_;
  if (unhealthy_threshold != NULL && unhealthy_threshold->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_unhealthy_threshold = new ::google::protobuf::UInt32Value;
    new_unhealthy_threshold->CopyFrom(*unhealthy_threshold);
    unhealthy_threshold = new_unhealthy_threshold;
  }
  unhealthy_threshold_ = unhealthy_threshold;
  if (unhealthy_threshold) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.unhealthy_threshold)
}

// .google.protobuf.UInt32Value healthy_threshold = 5;
bool HealthCheck::has_healthy_threshold() const {
  return this != internal_default_instance() && healthy_threshold_ != NULL;
}
void HealthCheck::clear_healthy_threshold() {
  if (GetArenaNoVirtual() == NULL && healthy_threshold_ != NULL) delete healthy_threshold_;
  healthy_threshold_ = NULL;
}
const ::google::protobuf::UInt32Value& HealthCheck::healthy_threshold() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.healthy_threshold)
  return healthy_threshold_ != NULL ? *healthy_threshold_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* HealthCheck::mutable_healthy_threshold() {
  
  if (healthy_threshold_ == NULL) {
    healthy_threshold_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.healthy_threshold)
  return healthy_threshold_;
}
::google::protobuf::UInt32Value* HealthCheck::release_healthy_threshold() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.healthy_threshold)
  
  ::google::protobuf::UInt32Value* temp = healthy_threshold_;
  healthy_threshold_ = NULL;
  return temp;
}
void HealthCheck::set_allocated_healthy_threshold(::google::protobuf::UInt32Value* healthy_threshold) {
  delete healthy_threshold_;
  if (healthy_threshold != NULL && healthy_threshold->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_healthy_threshold = new ::google::protobuf::UInt32Value;
    new_healthy_threshold->CopyFrom(*healthy_threshold);
    healthy_threshold = new_healthy_threshold;
  }
  healthy_threshold_ = healthy_threshold;
  if (healthy_threshold) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.healthy_threshold)
}

// .google.protobuf.UInt32Value alt_port = 6;
bool HealthCheck::has_alt_port() const {
  return this != internal_default_instance() && alt_port_ != NULL;
}
void HealthCheck::clear_alt_port() {
  if (GetArenaNoVirtual() == NULL && alt_port_ != NULL) delete alt_port_;
  alt_port_ = NULL;
}
const ::google::protobuf::UInt32Value& HealthCheck::alt_port() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.alt_port)
  return alt_port_ != NULL ? *alt_port_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* HealthCheck::mutable_alt_port() {
  
  if (alt_port_ == NULL) {
    alt_port_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.alt_port)
  return alt_port_;
}
::google::protobuf::UInt32Value* HealthCheck::release_alt_port() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.alt_port)
  
  ::google::protobuf::UInt32Value* temp = alt_port_;
  alt_port_ = NULL;
  return temp;
}
void HealthCheck::set_allocated_alt_port(::google::protobuf::UInt32Value* alt_port) {
  delete alt_port_;
  if (alt_port != NULL && alt_port->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_alt_port = new ::google::protobuf::UInt32Value;
    new_alt_port->CopyFrom(*alt_port);
    alt_port = new_alt_port;
  }
  alt_port_ = alt_port;
  if (alt_port) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.alt_port)
}

// .google.protobuf.BoolValue reuse_connection = 7;
bool HealthCheck::has_reuse_connection() const {
  return this != internal_default_instance() && reuse_connection_ != NULL;
}
void HealthCheck::clear_reuse_connection() {
  if (GetArenaNoVirtual() == NULL && reuse_connection_ != NULL) delete reuse_connection_;
  reuse_connection_ = NULL;
}
const ::google::protobuf::BoolValue& HealthCheck::reuse_connection() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.reuse_connection)
  return reuse_connection_ != NULL ? *reuse_connection_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
::google::protobuf::BoolValue* HealthCheck::mutable_reuse_connection() {
  
  if (reuse_connection_ == NULL) {
    reuse_connection_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.reuse_connection)
  return reuse_connection_;
}
::google::protobuf::BoolValue* HealthCheck::release_reuse_connection() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.reuse_connection)
  
  ::google::protobuf::BoolValue* temp = reuse_connection_;
  reuse_connection_ = NULL;
  return temp;
}
void HealthCheck::set_allocated_reuse_connection(::google::protobuf::BoolValue* reuse_connection) {
  delete reuse_connection_;
  if (reuse_connection != NULL && reuse_connection->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_reuse_connection = new ::google::protobuf::BoolValue;
    new_reuse_connection->CopyFrom(*reuse_connection);
    reuse_connection = new_reuse_connection;
  }
  reuse_connection_ = reuse_connection;
  if (reuse_connection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.reuse_connection)
}

// .envoy.api.v2.HealthCheck.HttpHealthCheck http_health_check = 8;
bool HealthCheck::has_http_health_check() const {
  return health_checker_case() == kHttpHealthCheck;
}
void HealthCheck::set_has_http_health_check() {
  _oneof_case_[0] = kHttpHealthCheck;
}
void HealthCheck::clear_http_health_check() {
  if (has_http_health_check()) {
    delete health_checker_.http_health_check_;
    clear_has_health_checker();
  }
}
 const ::envoy::api::v2::HealthCheck_HttpHealthCheck& HealthCheck::http_health_check() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.http_health_check)
  return has_http_health_check()
      ? *health_checker_.http_health_check_
      : ::envoy::api::v2::HealthCheck_HttpHealthCheck::default_instance();
}
::envoy::api::v2::HealthCheck_HttpHealthCheck* HealthCheck::mutable_http_health_check() {
  if (!has_http_health_check()) {
    clear_health_checker();
    set_has_http_health_check();
    health_checker_.http_health_check_ = new ::envoy::api::v2::HealthCheck_HttpHealthCheck;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.http_health_check)
  return health_checker_.http_health_check_;
}
::envoy::api::v2::HealthCheck_HttpHealthCheck* HealthCheck::release_http_health_check() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.http_health_check)
  if (has_http_health_check()) {
    clear_has_health_checker();
    ::envoy::api::v2::HealthCheck_HttpHealthCheck* temp = health_checker_.http_health_check_;
    health_checker_.http_health_check_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HealthCheck::set_allocated_http_health_check(::envoy::api::v2::HealthCheck_HttpHealthCheck* http_health_check) {
  clear_health_checker();
  if (http_health_check) {
    set_has_http_health_check();
    health_checker_.http_health_check_ = http_health_check;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.http_health_check)
}

// .envoy.api.v2.HealthCheck.TcpHealthCheck tcp_health_check = 9;
bool HealthCheck::has_tcp_health_check() const {
  return health_checker_case() == kTcpHealthCheck;
}
void HealthCheck::set_has_tcp_health_check() {
  _oneof_case_[0] = kTcpHealthCheck;
}
void HealthCheck::clear_tcp_health_check() {
  if (has_tcp_health_check()) {
    delete health_checker_.tcp_health_check_;
    clear_has_health_checker();
  }
}
 const ::envoy::api::v2::HealthCheck_TcpHealthCheck& HealthCheck::tcp_health_check() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.tcp_health_check)
  return has_tcp_health_check()
      ? *health_checker_.tcp_health_check_
      : ::envoy::api::v2::HealthCheck_TcpHealthCheck::default_instance();
}
::envoy::api::v2::HealthCheck_TcpHealthCheck* HealthCheck::mutable_tcp_health_check() {
  if (!has_tcp_health_check()) {
    clear_health_checker();
    set_has_tcp_health_check();
    health_checker_.tcp_health_check_ = new ::envoy::api::v2::HealthCheck_TcpHealthCheck;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.tcp_health_check)
  return health_checker_.tcp_health_check_;
}
::envoy::api::v2::HealthCheck_TcpHealthCheck* HealthCheck::release_tcp_health_check() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.tcp_health_check)
  if (has_tcp_health_check()) {
    clear_has_health_checker();
    ::envoy::api::v2::HealthCheck_TcpHealthCheck* temp = health_checker_.tcp_health_check_;
    health_checker_.tcp_health_check_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void HealthCheck::set_allocated_tcp_health_check(::envoy::api::v2::HealthCheck_TcpHealthCheck* tcp_health_check) {
  clear_health_checker();
  if (tcp_health_check) {
    set_has_tcp_health_check();
    health_checker_.tcp_health_check_ = tcp_health_check;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.tcp_health_check)
}

bool HealthCheck::has_health_checker() const {
  return health_checker_case() != HEALTH_CHECKER_NOT_SET;
}
void HealthCheck::clear_has_health_checker() {
  _oneof_case_[0] = HEALTH_CHECKER_NOT_SET;
}
HealthCheck::HealthCheckerCase HealthCheck::health_checker_case() const {
  return HealthCheck::HealthCheckerCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
