// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/rds.proto

#ifndef PROTOBUF_api_2frds_2eproto__INCLUDED
#define PROTOBUF_api_2frds_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "api/base.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
class DiscoveryRequest;
class DiscoveryRequestDefaultTypeInternal;
extern DiscoveryRequestDefaultTypeInternal _DiscoveryRequest_default_instance_;
class DiscoveryResponse;
class DiscoveryResponseDefaultTypeInternal;
extern DiscoveryResponseDefaultTypeInternal _DiscoveryResponse_default_instance_;
class Endpoint;
class EndpointDefaultTypeInternal;
extern EndpointDefaultTypeInternal _Endpoint_default_instance_;
class ForwardAction;
class ForwardActionDefaultTypeInternal;
extern ForwardActionDefaultTypeInternal _ForwardAction_default_instance_;
class ForwardAction_HashPolicy;
class ForwardAction_HashPolicyDefaultTypeInternal;
extern ForwardAction_HashPolicyDefaultTypeInternal _ForwardAction_HashPolicy_default_instance_;
class ForwardAction_HashPolicy_Header;
class ForwardAction_HashPolicy_HeaderDefaultTypeInternal;
extern ForwardAction_HashPolicy_HeaderDefaultTypeInternal _ForwardAction_HashPolicy_Header_default_instance_;
class ForwardAction_RequestMirrorPolicy;
class ForwardAction_RequestMirrorPolicyDefaultTypeInternal;
extern ForwardAction_RequestMirrorPolicyDefaultTypeInternal _ForwardAction_RequestMirrorPolicy_default_instance_;
class ForwardAction_RetryPolicy;
class ForwardAction_RetryPolicyDefaultTypeInternal;
extern ForwardAction_RetryPolicyDefaultTypeInternal _ForwardAction_RetryPolicy_default_instance_;
class HeaderMatcher;
class HeaderMatcherDefaultTypeInternal;
extern HeaderMatcherDefaultTypeInternal _HeaderMatcher_default_instance_;
class HeaderValue;
class HeaderValueDefaultTypeInternal;
extern HeaderValueDefaultTypeInternal _HeaderValue_default_instance_;
class HeaderValueOption;
class HeaderValueOptionDefaultTypeInternal;
extern HeaderValueOptionDefaultTypeInternal _HeaderValueOption_default_instance_;
class Locality;
class LocalityDefaultTypeInternal;
extern LocalityDefaultTypeInternal _Locality_default_instance_;
class Metadata;
class MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class RateLimit;
class RateLimitDefaultTypeInternal;
extern RateLimitDefaultTypeInternal _RateLimit_default_instance_;
class RateLimit_RateLimitAction;
class RateLimit_RateLimitActionDefaultTypeInternal;
extern RateLimit_RateLimitActionDefaultTypeInternal _RateLimit_RateLimitAction_default_instance_;
class RateLimit_RateLimitAction_HeaderValueMatch;
class RateLimit_RateLimitAction_HeaderValueMatchDefaultTypeInternal;
extern RateLimit_RateLimitAction_HeaderValueMatchDefaultTypeInternal _RateLimit_RateLimitAction_HeaderValueMatch_default_instance_;
class RateLimit_RateLimitAction_RequestHeaders;
class RateLimit_RateLimitAction_RequestHeadersDefaultTypeInternal;
extern RateLimit_RateLimitAction_RequestHeadersDefaultTypeInternal _RateLimit_RateLimitAction_RequestHeaders_default_instance_;
class RedirectAction;
class RedirectActionDefaultTypeInternal;
extern RedirectActionDefaultTypeInternal _RedirectAction_default_instance_;
class Route;
class RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
class RouteConfiguration;
class RouteConfigurationDefaultTypeInternal;
extern RouteConfigurationDefaultTypeInternal _RouteConfiguration_default_instance_;
class RouteMatch;
class RouteMatchDefaultTypeInternal;
extern RouteMatchDefaultTypeInternal _RouteMatch_default_instance_;
class RuntimeUInt32;
class RuntimeUInt32DefaultTypeInternal;
extern RuntimeUInt32DefaultTypeInternal _RuntimeUInt32_default_instance_;
class VirtualCluster;
class VirtualClusterDefaultTypeInternal;
extern VirtualClusterDefaultTypeInternal _VirtualCluster_default_instance_;
class VirtualHost;
class VirtualHostDefaultTypeInternal;
extern VirtualHostDefaultTypeInternal _VirtualHost_default_instance_;
class WeightedCluster;
class WeightedClusterDefaultTypeInternal;
extern WeightedClusterDefaultTypeInternal _WeightedCluster_default_instance_;
class WeightedCluster_ClusterWeight;
class WeightedCluster_ClusterWeightDefaultTypeInternal;
extern WeightedCluster_ClusterWeightDefaultTypeInternal _WeightedCluster_ClusterWeight_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace google {
namespace api {
}  // namespace api
namespace protobuf {
class BoolValue;
class BoolValueDefaultTypeInternal;
extern BoolValueDefaultTypeInternal _BoolValue_default_instance_;
class BytesValue;
class BytesValueDefaultTypeInternal;
extern BytesValueDefaultTypeInternal _BytesValue_default_instance_;
class DoubleValue;
class DoubleValueDefaultTypeInternal;
extern DoubleValueDefaultTypeInternal _DoubleValue_default_instance_;
class Duration;
class DurationDefaultTypeInternal;
extern DurationDefaultTypeInternal _Duration_default_instance_;
class FloatValue;
class FloatValueDefaultTypeInternal;
extern FloatValueDefaultTypeInternal _FloatValue_default_instance_;
class Int32Value;
class Int32ValueDefaultTypeInternal;
extern Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
class Int64Value;
class Int64ValueDefaultTypeInternal;
extern Int64ValueDefaultTypeInternal _Int64Value_default_instance_;
class StringValue;
class StringValueDefaultTypeInternal;
extern StringValueDefaultTypeInternal _StringValue_default_instance_;
class UInt32Value;
class UInt32ValueDefaultTypeInternal;
extern UInt32ValueDefaultTypeInternal _UInt32Value_default_instance_;
class UInt64Value;
class UInt64ValueDefaultTypeInternal;
extern UInt64ValueDefaultTypeInternal _UInt64Value_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace envoy {
namespace api {
namespace v2 {

namespace protobuf_api_2frds_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_api_2frds_2eproto

enum RateLimit_RateLimitAction_ActionType {
  RateLimit_RateLimitAction_ActionType_SOURCE_CLUSTER = 0,
  RateLimit_RateLimitAction_ActionType_DESTINATION_CLUSTER = 1,
  RateLimit_RateLimitAction_ActionType_REQUEST_HEADERS = 2,
  RateLimit_RateLimitAction_ActionType_REMOTE_ADDRESS = 3,
  RateLimit_RateLimitAction_ActionType_GENERIC_KEY = 4,
  RateLimit_RateLimitAction_ActionType_HEADER_VALUE_MATCH = 5,
  RateLimit_RateLimitAction_ActionType_RateLimit_RateLimitAction_ActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RateLimit_RateLimitAction_ActionType_RateLimit_RateLimitAction_ActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RateLimit_RateLimitAction_ActionType_IsValid(int value);
const RateLimit_RateLimitAction_ActionType RateLimit_RateLimitAction_ActionType_ActionType_MIN = RateLimit_RateLimitAction_ActionType_SOURCE_CLUSTER;
const RateLimit_RateLimitAction_ActionType RateLimit_RateLimitAction_ActionType_ActionType_MAX = RateLimit_RateLimitAction_ActionType_HEADER_VALUE_MATCH;
const int RateLimit_RateLimitAction_ActionType_ActionType_ARRAYSIZE = RateLimit_RateLimitAction_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RateLimit_RateLimitAction_ActionType_descriptor();
inline const ::std::string& RateLimit_RateLimitAction_ActionType_Name(RateLimit_RateLimitAction_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RateLimit_RateLimitAction_ActionType_descriptor(), value);
}
inline bool RateLimit_RateLimitAction_ActionType_Parse(
    const ::std::string& name, RateLimit_RateLimitAction_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RateLimit_RateLimitAction_ActionType>(
    RateLimit_RateLimitAction_ActionType_descriptor(), name, value);
}
enum VirtualHost_TlsRequirementType {
  VirtualHost_TlsRequirementType_NONE = 0,
  VirtualHost_TlsRequirementType_EXTERNAL_ONLY = 1,
  VirtualHost_TlsRequirementType_ALL = 2,
  VirtualHost_TlsRequirementType_VirtualHost_TlsRequirementType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VirtualHost_TlsRequirementType_VirtualHost_TlsRequirementType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VirtualHost_TlsRequirementType_IsValid(int value);
const VirtualHost_TlsRequirementType VirtualHost_TlsRequirementType_TlsRequirementType_MIN = VirtualHost_TlsRequirementType_NONE;
const VirtualHost_TlsRequirementType VirtualHost_TlsRequirementType_TlsRequirementType_MAX = VirtualHost_TlsRequirementType_ALL;
const int VirtualHost_TlsRequirementType_TlsRequirementType_ARRAYSIZE = VirtualHost_TlsRequirementType_TlsRequirementType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VirtualHost_TlsRequirementType_descriptor();
inline const ::std::string& VirtualHost_TlsRequirementType_Name(VirtualHost_TlsRequirementType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VirtualHost_TlsRequirementType_descriptor(), value);
}
inline bool VirtualHost_TlsRequirementType_Parse(
    const ::std::string& name, VirtualHost_TlsRequirementType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VirtualHost_TlsRequirementType>(
    VirtualHost_TlsRequirementType_descriptor(), name, value);
}
// ===================================================================

class WeightedCluster_ClusterWeight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.WeightedCluster.ClusterWeight) */ {
 public:
  WeightedCluster_ClusterWeight();
  virtual ~WeightedCluster_ClusterWeight();

  WeightedCluster_ClusterWeight(const WeightedCluster_ClusterWeight& from);

  inline WeightedCluster_ClusterWeight& operator=(const WeightedCluster_ClusterWeight& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeightedCluster_ClusterWeight& default_instance();

  static inline const WeightedCluster_ClusterWeight* internal_default_instance() {
    return reinterpret_cast<const WeightedCluster_ClusterWeight*>(
               &_WeightedCluster_ClusterWeight_default_instance_);
  }

  void Swap(WeightedCluster_ClusterWeight* other);

  // implements Message ----------------------------------------------

  inline WeightedCluster_ClusterWeight* New() const PROTOBUF_FINAL { return New(NULL); }

  WeightedCluster_ClusterWeight* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WeightedCluster_ClusterWeight& from);
  void MergeFrom(const WeightedCluster_ClusterWeight& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WeightedCluster_ClusterWeight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.UInt32Value weight = 2;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 2;
  const ::google::protobuf::UInt32Value& weight() const;
  ::google::protobuf::UInt32Value* mutable_weight();
  ::google::protobuf::UInt32Value* release_weight();
  void set_allocated_weight(::google::protobuf::UInt32Value* weight);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.WeightedCluster.ClusterWeight)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::UInt32Value* weight_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WeightedCluster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.WeightedCluster) */ {
 public:
  WeightedCluster();
  virtual ~WeightedCluster();

  WeightedCluster(const WeightedCluster& from);

  inline WeightedCluster& operator=(const WeightedCluster& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeightedCluster& default_instance();

  static inline const WeightedCluster* internal_default_instance() {
    return reinterpret_cast<const WeightedCluster*>(
               &_WeightedCluster_default_instance_);
  }

  void Swap(WeightedCluster* other);

  // implements Message ----------------------------------------------

  inline WeightedCluster* New() const PROTOBUF_FINAL { return New(NULL); }

  WeightedCluster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WeightedCluster& from);
  void MergeFrom(const WeightedCluster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WeightedCluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WeightedCluster_ClusterWeight ClusterWeight;

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.WeightedCluster.ClusterWeight clusters = 1;
  int clusters_size() const;
  void clear_clusters();
  static const int kClustersFieldNumber = 1;
  const ::envoy::api::v2::WeightedCluster_ClusterWeight& clusters(int index) const;
  ::envoy::api::v2::WeightedCluster_ClusterWeight* mutable_clusters(int index);
  ::envoy::api::v2::WeightedCluster_ClusterWeight* add_clusters();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::WeightedCluster_ClusterWeight >*
      mutable_clusters();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::WeightedCluster_ClusterWeight >&
      clusters() const;

  // string runtime_key_prefix = 2;
  void clear_runtime_key_prefix();
  static const int kRuntimeKeyPrefixFieldNumber = 2;
  const ::std::string& runtime_key_prefix() const;
  void set_runtime_key_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_runtime_key_prefix(::std::string&& value);
  #endif
  void set_runtime_key_prefix(const char* value);
  void set_runtime_key_prefix(const char* value, size_t size);
  ::std::string* mutable_runtime_key_prefix();
  ::std::string* release_runtime_key_prefix();
  void set_allocated_runtime_key_prefix(::std::string* runtime_key_prefix);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.WeightedCluster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::WeightedCluster_ClusterWeight > clusters_;
  ::google::protobuf::internal::ArenaStringPtr runtime_key_prefix_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RouteMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.RouteMatch) */ {
 public:
  RouteMatch();
  virtual ~RouteMatch();

  RouteMatch(const RouteMatch& from);

  inline RouteMatch& operator=(const RouteMatch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteMatch& default_instance();

  enum PathSpecifierCase {
    kPrefix = 1,
    kPath = 2,
    kRegex = 3,
    PATH_SPECIFIER_NOT_SET = 0,
  };

  static inline const RouteMatch* internal_default_instance() {
    return reinterpret_cast<const RouteMatch*>(
               &_RouteMatch_default_instance_);
  }

  void Swap(RouteMatch* other);

  // implements Message ----------------------------------------------

  inline RouteMatch* New() const PROTOBUF_FINAL { return New(NULL); }

  RouteMatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RouteMatch& from);
  void MergeFrom(const RouteMatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RouteMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.HeaderMatcher headers = 6;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 6;
  const ::envoy::api::v2::HeaderMatcher& headers(int index) const;
  ::envoy::api::v2::HeaderMatcher* mutable_headers(int index);
  ::envoy::api::v2::HeaderMatcher* add_headers();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >&
      headers() const;

  // .google.protobuf.BoolValue case_sensitive = 4;
  bool has_case_sensitive() const;
  void clear_case_sensitive();
  static const int kCaseSensitiveFieldNumber = 4;
  const ::google::protobuf::BoolValue& case_sensitive() const;
  ::google::protobuf::BoolValue* mutable_case_sensitive();
  ::google::protobuf::BoolValue* release_case_sensitive();
  void set_allocated_case_sensitive(::google::protobuf::BoolValue* case_sensitive);

  // .envoy.api.v2.RuntimeUInt32 runtime = 5;
  bool has_runtime() const;
  void clear_runtime();
  static const int kRuntimeFieldNumber = 5;
  const ::envoy::api::v2::RuntimeUInt32& runtime() const;
  ::envoy::api::v2::RuntimeUInt32* mutable_runtime();
  ::envoy::api::v2::RuntimeUInt32* release_runtime();
  void set_allocated_runtime(::envoy::api::v2::RuntimeUInt32* runtime);

  // string prefix = 1;
  private:
  bool has_prefix() const;
  public:
  void clear_prefix();
  static const int kPrefixFieldNumber = 1;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // string path = 2;
  private:
  bool has_path() const;
  public:
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string regex = 3;
  private:
  bool has_regex() const;
  public:
  void clear_regex();
  static const int kRegexFieldNumber = 3;
  const ::std::string& regex() const;
  void set_regex(const ::std::string& value);
  #if LANG_CXX11
  void set_regex(::std::string&& value);
  #endif
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  ::std::string* mutable_regex();
  ::std::string* release_regex();
  void set_allocated_regex(::std::string* regex);

  PathSpecifierCase path_specifier_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.RouteMatch)
 private:
  void set_has_prefix();
  void set_has_path();
  void set_has_regex();

  inline bool has_path_specifier() const;
  void clear_path_specifier();
  inline void clear_has_path_specifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher > headers_;
  ::google::protobuf::BoolValue* case_sensitive_;
  ::envoy::api::v2::RuntimeUInt32* runtime_;
  union PathSpecifierUnion {
    PathSpecifierUnion() {}
    ::google::protobuf::internal::ArenaStringPtr prefix_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr regex_;
  } path_specifier_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForwardAction_RetryPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.ForwardAction.RetryPolicy) */ {
 public:
  ForwardAction_RetryPolicy();
  virtual ~ForwardAction_RetryPolicy();

  ForwardAction_RetryPolicy(const ForwardAction_RetryPolicy& from);

  inline ForwardAction_RetryPolicy& operator=(const ForwardAction_RetryPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardAction_RetryPolicy& default_instance();

  static inline const ForwardAction_RetryPolicy* internal_default_instance() {
    return reinterpret_cast<const ForwardAction_RetryPolicy*>(
               &_ForwardAction_RetryPolicy_default_instance_);
  }

  void Swap(ForwardAction_RetryPolicy* other);

  // implements Message ----------------------------------------------

  inline ForwardAction_RetryPolicy* New() const PROTOBUF_FINAL { return New(NULL); }

  ForwardAction_RetryPolicy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ForwardAction_RetryPolicy& from);
  void MergeFrom(const ForwardAction_RetryPolicy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ForwardAction_RetryPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string retry_on = 1;
  void clear_retry_on();
  static const int kRetryOnFieldNumber = 1;
  const ::std::string& retry_on() const;
  void set_retry_on(const ::std::string& value);
  #if LANG_CXX11
  void set_retry_on(::std::string&& value);
  #endif
  void set_retry_on(const char* value);
  void set_retry_on(const char* value, size_t size);
  ::std::string* mutable_retry_on();
  ::std::string* release_retry_on();
  void set_allocated_retry_on(::std::string* retry_on);

  // .google.protobuf.UInt32Value num_retries = 2;
  bool has_num_retries() const;
  void clear_num_retries();
  static const int kNumRetriesFieldNumber = 2;
  const ::google::protobuf::UInt32Value& num_retries() const;
  ::google::protobuf::UInt32Value* mutable_num_retries();
  ::google::protobuf::UInt32Value* release_num_retries();
  void set_allocated_num_retries(::google::protobuf::UInt32Value* num_retries);

  // .google.protobuf.Duration per_try_timeout = 3;
  bool has_per_try_timeout() const;
  void clear_per_try_timeout();
  static const int kPerTryTimeoutFieldNumber = 3;
  const ::google::protobuf::Duration& per_try_timeout() const;
  ::google::protobuf::Duration* mutable_per_try_timeout();
  ::google::protobuf::Duration* release_per_try_timeout();
  void set_allocated_per_try_timeout(::google::protobuf::Duration* per_try_timeout);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.ForwardAction.RetryPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr retry_on_;
  ::google::protobuf::UInt32Value* num_retries_;
  ::google::protobuf::Duration* per_try_timeout_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForwardAction_RequestMirrorPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.ForwardAction.RequestMirrorPolicy) */ {
 public:
  ForwardAction_RequestMirrorPolicy();
  virtual ~ForwardAction_RequestMirrorPolicy();

  ForwardAction_RequestMirrorPolicy(const ForwardAction_RequestMirrorPolicy& from);

  inline ForwardAction_RequestMirrorPolicy& operator=(const ForwardAction_RequestMirrorPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardAction_RequestMirrorPolicy& default_instance();

  static inline const ForwardAction_RequestMirrorPolicy* internal_default_instance() {
    return reinterpret_cast<const ForwardAction_RequestMirrorPolicy*>(
               &_ForwardAction_RequestMirrorPolicy_default_instance_);
  }

  void Swap(ForwardAction_RequestMirrorPolicy* other);

  // implements Message ----------------------------------------------

  inline ForwardAction_RequestMirrorPolicy* New() const PROTOBUF_FINAL { return New(NULL); }

  ForwardAction_RequestMirrorPolicy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ForwardAction_RequestMirrorPolicy& from);
  void MergeFrom(const ForwardAction_RequestMirrorPolicy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ForwardAction_RequestMirrorPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cluster = 1;
  void clear_cluster();
  static const int kClusterFieldNumber = 1;
  const ::std::string& cluster() const;
  void set_cluster(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster(::std::string&& value);
  #endif
  void set_cluster(const char* value);
  void set_cluster(const char* value, size_t size);
  ::std::string* mutable_cluster();
  ::std::string* release_cluster();
  void set_allocated_cluster(::std::string* cluster);

  // string runtime_key = 2;
  void clear_runtime_key();
  static const int kRuntimeKeyFieldNumber = 2;
  const ::std::string& runtime_key() const;
  void set_runtime_key(const ::std::string& value);
  #if LANG_CXX11
  void set_runtime_key(::std::string&& value);
  #endif
  void set_runtime_key(const char* value);
  void set_runtime_key(const char* value, size_t size);
  ::std::string* mutable_runtime_key();
  ::std::string* release_runtime_key();
  void set_allocated_runtime_key(::std::string* runtime_key);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.ForwardAction.RequestMirrorPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cluster_;
  ::google::protobuf::internal::ArenaStringPtr runtime_key_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForwardAction_HashPolicy_Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.ForwardAction.HashPolicy.Header) */ {
 public:
  ForwardAction_HashPolicy_Header();
  virtual ~ForwardAction_HashPolicy_Header();

  ForwardAction_HashPolicy_Header(const ForwardAction_HashPolicy_Header& from);

  inline ForwardAction_HashPolicy_Header& operator=(const ForwardAction_HashPolicy_Header& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardAction_HashPolicy_Header& default_instance();

  static inline const ForwardAction_HashPolicy_Header* internal_default_instance() {
    return reinterpret_cast<const ForwardAction_HashPolicy_Header*>(
               &_ForwardAction_HashPolicy_Header_default_instance_);
  }

  void Swap(ForwardAction_HashPolicy_Header* other);

  // implements Message ----------------------------------------------

  inline ForwardAction_HashPolicy_Header* New() const PROTOBUF_FINAL { return New(NULL); }

  ForwardAction_HashPolicy_Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ForwardAction_HashPolicy_Header& from);
  void MergeFrom(const ForwardAction_HashPolicy_Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ForwardAction_HashPolicy_Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string header_name = 1;
  void clear_header_name();
  static const int kHeaderNameFieldNumber = 1;
  const ::std::string& header_name() const;
  void set_header_name(const ::std::string& value);
  #if LANG_CXX11
  void set_header_name(::std::string&& value);
  #endif
  void set_header_name(const char* value);
  void set_header_name(const char* value, size_t size);
  ::std::string* mutable_header_name();
  ::std::string* release_header_name();
  void set_allocated_header_name(::std::string* header_name);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.ForwardAction.HashPolicy.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr header_name_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForwardAction_HashPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.ForwardAction.HashPolicy) */ {
 public:
  ForwardAction_HashPolicy();
  virtual ~ForwardAction_HashPolicy();

  ForwardAction_HashPolicy(const ForwardAction_HashPolicy& from);

  inline ForwardAction_HashPolicy& operator=(const ForwardAction_HashPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardAction_HashPolicy& default_instance();

  enum PolicySpecifierCase {
    kHeader = 1,
    POLICY_SPECIFIER_NOT_SET = 0,
  };

  static inline const ForwardAction_HashPolicy* internal_default_instance() {
    return reinterpret_cast<const ForwardAction_HashPolicy*>(
               &_ForwardAction_HashPolicy_default_instance_);
  }

  void Swap(ForwardAction_HashPolicy* other);

  // implements Message ----------------------------------------------

  inline ForwardAction_HashPolicy* New() const PROTOBUF_FINAL { return New(NULL); }

  ForwardAction_HashPolicy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ForwardAction_HashPolicy& from);
  void MergeFrom(const ForwardAction_HashPolicy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ForwardAction_HashPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ForwardAction_HashPolicy_Header Header;

  // accessors -------------------------------------------------------

  // .envoy.api.v2.ForwardAction.HashPolicy.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::envoy::api::v2::ForwardAction_HashPolicy_Header& header() const;
  ::envoy::api::v2::ForwardAction_HashPolicy_Header* mutable_header();
  ::envoy::api::v2::ForwardAction_HashPolicy_Header* release_header();
  void set_allocated_header(::envoy::api::v2::ForwardAction_HashPolicy_Header* header);

  PolicySpecifierCase policy_specifier_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.ForwardAction.HashPolicy)
 private:
  void set_has_header();

  inline bool has_policy_specifier() const;
  void clear_policy_specifier();
  inline void clear_has_policy_specifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PolicySpecifierUnion {
    PolicySpecifierUnion() {}
    ::envoy::api::v2::ForwardAction_HashPolicy_Header* header_;
  } policy_specifier_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ForwardAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.ForwardAction) */ {
 public:
  ForwardAction();
  virtual ~ForwardAction();

  ForwardAction(const ForwardAction& from);

  inline ForwardAction& operator=(const ForwardAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardAction& default_instance();

  enum ClusterSpecifierCase {
    kCluster = 1,
    kClusterHeader = 2,
    kWeightedClusters = 3,
    CLUSTER_SPECIFIER_NOT_SET = 0,
  };

  enum HostRewriteSpecifierCase {
    kHostRewrite = 5,
    kAutoHostRewrite = 6,
    HOST_REWRITE_SPECIFIER_NOT_SET = 0,
  };

  static inline const ForwardAction* internal_default_instance() {
    return reinterpret_cast<const ForwardAction*>(
               &_ForwardAction_default_instance_);
  }

  void Swap(ForwardAction* other);

  // implements Message ----------------------------------------------

  inline ForwardAction* New() const PROTOBUF_FINAL { return New(NULL); }

  ForwardAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ForwardAction& from);
  void MergeFrom(const ForwardAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ForwardAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ForwardAction_RetryPolicy RetryPolicy;
  typedef ForwardAction_RequestMirrorPolicy RequestMirrorPolicy;
  typedef ForwardAction_HashPolicy HashPolicy;

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 11;
  int request_headers_to_add_size() const;
  void clear_request_headers_to_add();
  static const int kRequestHeadersToAddFieldNumber = 11;
  const ::envoy::api::v2::HeaderValueOption& request_headers_to_add(int index) const;
  ::envoy::api::v2::HeaderValueOption* mutable_request_headers_to_add(int index);
  ::envoy::api::v2::HeaderValueOption* add_request_headers_to_add();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
      mutable_request_headers_to_add();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
      request_headers_to_add() const;

  // repeated .envoy.api.v2.RateLimit rate_limits = 12;
  int rate_limits_size() const;
  void clear_rate_limits();
  static const int kRateLimitsFieldNumber = 12;
  const ::envoy::api::v2::RateLimit& rate_limits(int index) const;
  ::envoy::api::v2::RateLimit* mutable_rate_limits(int index);
  ::envoy::api::v2::RateLimit* add_rate_limits();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >*
      mutable_rate_limits();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >&
      rate_limits() const;

  // repeated .envoy.api.v2.ForwardAction.HashPolicy hash_policy = 14;
  int hash_policy_size() const;
  void clear_hash_policy();
  static const int kHashPolicyFieldNumber = 14;
  const ::envoy::api::v2::ForwardAction_HashPolicy& hash_policy(int index) const;
  ::envoy::api::v2::ForwardAction_HashPolicy* mutable_hash_policy(int index);
  ::envoy::api::v2::ForwardAction_HashPolicy* add_hash_policy();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ForwardAction_HashPolicy >*
      mutable_hash_policy();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ForwardAction_HashPolicy >&
      hash_policy() const;

  // string prefix_rewrite = 4;
  void clear_prefix_rewrite();
  static const int kPrefixRewriteFieldNumber = 4;
  const ::std::string& prefix_rewrite() const;
  void set_prefix_rewrite(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix_rewrite(::std::string&& value);
  #endif
  void set_prefix_rewrite(const char* value);
  void set_prefix_rewrite(const char* value, size_t size);
  ::std::string* mutable_prefix_rewrite();
  ::std::string* release_prefix_rewrite();
  void set_allocated_prefix_rewrite(::std::string* prefix_rewrite);

  // .google.protobuf.Duration timeout = 7;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 7;
  const ::google::protobuf::Duration& timeout() const;
  ::google::protobuf::Duration* mutable_timeout();
  ::google::protobuf::Duration* release_timeout();
  void set_allocated_timeout(::google::protobuf::Duration* timeout);

  // .envoy.api.v2.ForwardAction.RetryPolicy retry_policy = 8;
  bool has_retry_policy() const;
  void clear_retry_policy();
  static const int kRetryPolicyFieldNumber = 8;
  const ::envoy::api::v2::ForwardAction_RetryPolicy& retry_policy() const;
  ::envoy::api::v2::ForwardAction_RetryPolicy* mutable_retry_policy();
  ::envoy::api::v2::ForwardAction_RetryPolicy* release_retry_policy();
  void set_allocated_retry_policy(::envoy::api::v2::ForwardAction_RetryPolicy* retry_policy);

  // .envoy.api.v2.ForwardAction.RequestMirrorPolicy request_mirror_policy = 9;
  bool has_request_mirror_policy() const;
  void clear_request_mirror_policy();
  static const int kRequestMirrorPolicyFieldNumber = 9;
  const ::envoy::api::v2::ForwardAction_RequestMirrorPolicy& request_mirror_policy() const;
  ::envoy::api::v2::ForwardAction_RequestMirrorPolicy* mutable_request_mirror_policy();
  ::envoy::api::v2::ForwardAction_RequestMirrorPolicy* release_request_mirror_policy();
  void set_allocated_request_mirror_policy(::envoy::api::v2::ForwardAction_RequestMirrorPolicy* request_mirror_policy);

  // .google.protobuf.BoolValue include_vh_rate_limits = 13;
  bool has_include_vh_rate_limits() const;
  void clear_include_vh_rate_limits();
  static const int kIncludeVhRateLimitsFieldNumber = 13;
  const ::google::protobuf::BoolValue& include_vh_rate_limits() const;
  ::google::protobuf::BoolValue* mutable_include_vh_rate_limits();
  ::google::protobuf::BoolValue* release_include_vh_rate_limits();
  void set_allocated_include_vh_rate_limits(::google::protobuf::BoolValue* include_vh_rate_limits);

  // .envoy.api.v2.RoutingPriority priority = 10;
  void clear_priority();
  static const int kPriorityFieldNumber = 10;
  ::envoy::api::v2::RoutingPriority priority() const;
  void set_priority(::envoy::api::v2::RoutingPriority value);

  // string cluster = 1;
  private:
  bool has_cluster() const;
  public:
  void clear_cluster();
  static const int kClusterFieldNumber = 1;
  const ::std::string& cluster() const;
  void set_cluster(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster(::std::string&& value);
  #endif
  void set_cluster(const char* value);
  void set_cluster(const char* value, size_t size);
  ::std::string* mutable_cluster();
  ::std::string* release_cluster();
  void set_allocated_cluster(::std::string* cluster);

  // string cluster_header = 2;
  private:
  bool has_cluster_header() const;
  public:
  void clear_cluster_header();
  static const int kClusterHeaderFieldNumber = 2;
  const ::std::string& cluster_header() const;
  void set_cluster_header(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_header(::std::string&& value);
  #endif
  void set_cluster_header(const char* value);
  void set_cluster_header(const char* value, size_t size);
  ::std::string* mutable_cluster_header();
  ::std::string* release_cluster_header();
  void set_allocated_cluster_header(::std::string* cluster_header);

  // .envoy.api.v2.WeightedCluster weighted_clusters = 3;
  bool has_weighted_clusters() const;
  void clear_weighted_clusters();
  static const int kWeightedClustersFieldNumber = 3;
  const ::envoy::api::v2::WeightedCluster& weighted_clusters() const;
  ::envoy::api::v2::WeightedCluster* mutable_weighted_clusters();
  ::envoy::api::v2::WeightedCluster* release_weighted_clusters();
  void set_allocated_weighted_clusters(::envoy::api::v2::WeightedCluster* weighted_clusters);

  // string host_rewrite = 5;
  private:
  bool has_host_rewrite() const;
  public:
  void clear_host_rewrite();
  static const int kHostRewriteFieldNumber = 5;
  const ::std::string& host_rewrite() const;
  void set_host_rewrite(const ::std::string& value);
  #if LANG_CXX11
  void set_host_rewrite(::std::string&& value);
  #endif
  void set_host_rewrite(const char* value);
  void set_host_rewrite(const char* value, size_t size);
  ::std::string* mutable_host_rewrite();
  ::std::string* release_host_rewrite();
  void set_allocated_host_rewrite(::std::string* host_rewrite);

  // .google.protobuf.BoolValue auto_host_rewrite = 6;
  bool has_auto_host_rewrite() const;
  void clear_auto_host_rewrite();
  static const int kAutoHostRewriteFieldNumber = 6;
  const ::google::protobuf::BoolValue& auto_host_rewrite() const;
  ::google::protobuf::BoolValue* mutable_auto_host_rewrite();
  ::google::protobuf::BoolValue* release_auto_host_rewrite();
  void set_allocated_auto_host_rewrite(::google::protobuf::BoolValue* auto_host_rewrite);

  ClusterSpecifierCase cluster_specifier_case() const;
  HostRewriteSpecifierCase host_rewrite_specifier_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.ForwardAction)
 private:
  void set_has_cluster();
  void set_has_cluster_header();
  void set_has_weighted_clusters();
  void set_has_host_rewrite();
  void set_has_auto_host_rewrite();

  inline bool has_cluster_specifier() const;
  void clear_cluster_specifier();
  inline void clear_has_cluster_specifier();

  inline bool has_host_rewrite_specifier() const;
  void clear_host_rewrite_specifier();
  inline void clear_has_host_rewrite_specifier();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption > request_headers_to_add_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit > rate_limits_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ForwardAction_HashPolicy > hash_policy_;
  ::google::protobuf::internal::ArenaStringPtr prefix_rewrite_;
  ::google::protobuf::Duration* timeout_;
  ::envoy::api::v2::ForwardAction_RetryPolicy* retry_policy_;
  ::envoy::api::v2::ForwardAction_RequestMirrorPolicy* request_mirror_policy_;
  ::google::protobuf::BoolValue* include_vh_rate_limits_;
  int priority_;
  union ClusterSpecifierUnion {
    ClusterSpecifierUnion() {}
    ::google::protobuf::internal::ArenaStringPtr cluster_;
    ::google::protobuf::internal::ArenaStringPtr cluster_header_;
    ::envoy::api::v2::WeightedCluster* weighted_clusters_;
  } cluster_specifier_;
  union HostRewriteSpecifierUnion {
    HostRewriteSpecifierUnion() {}
    ::google::protobuf::internal::ArenaStringPtr host_rewrite_;
    ::google::protobuf::BoolValue* auto_host_rewrite_;
  } host_rewrite_specifier_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RedirectAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.RedirectAction) */ {
 public:
  RedirectAction();
  virtual ~RedirectAction();

  RedirectAction(const RedirectAction& from);

  inline RedirectAction& operator=(const RedirectAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedirectAction& default_instance();

  static inline const RedirectAction* internal_default_instance() {
    return reinterpret_cast<const RedirectAction*>(
               &_RedirectAction_default_instance_);
  }

  void Swap(RedirectAction* other);

  // implements Message ----------------------------------------------

  inline RedirectAction* New() const PROTOBUF_FINAL { return New(NULL); }

  RedirectAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RedirectAction& from);
  void MergeFrom(const RedirectAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RedirectAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host_redirect = 1;
  void clear_host_redirect();
  static const int kHostRedirectFieldNumber = 1;
  const ::std::string& host_redirect() const;
  void set_host_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_host_redirect(::std::string&& value);
  #endif
  void set_host_redirect(const char* value);
  void set_host_redirect(const char* value, size_t size);
  ::std::string* mutable_host_redirect();
  ::std::string* release_host_redirect();
  void set_allocated_host_redirect(::std::string* host_redirect);

  // string path_redirect = 2;
  void clear_path_redirect();
  static const int kPathRedirectFieldNumber = 2;
  const ::std::string& path_redirect() const;
  void set_path_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_path_redirect(::std::string&& value);
  #endif
  void set_path_redirect(const char* value);
  void set_path_redirect(const char* value, size_t size);
  ::std::string* mutable_path_redirect();
  ::std::string* release_path_redirect();
  void set_allocated_path_redirect(::std::string* path_redirect);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.RedirectAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_redirect_;
  ::google::protobuf::internal::ArenaStringPtr path_redirect_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Route : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.Route) */ {
 public:
  Route();
  virtual ~Route();

  Route(const Route& from);

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Route& default_instance();

  enum ActionCase {
    kForward = 2,
    kRedirect = 3,
    ACTION_NOT_SET = 0,
  };

  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }

  void Swap(Route* other);

  // implements Message ----------------------------------------------

  inline Route* New() const PROTOBUF_FINAL { return New(NULL); }

  Route* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Route& from);
  void MergeFrom(const Route& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Route* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .envoy.api.v2.RouteMatch match = 1;
  bool has_match() const;
  void clear_match();
  static const int kMatchFieldNumber = 1;
  const ::envoy::api::v2::RouteMatch& match() const;
  ::envoy::api::v2::RouteMatch* mutable_match();
  ::envoy::api::v2::RouteMatch* release_match();
  void set_allocated_match(::envoy::api::v2::RouteMatch* match);

  // .envoy.api.v2.Metadata metadata = 4;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::envoy::api::v2::Metadata& metadata() const;
  ::envoy::api::v2::Metadata* mutable_metadata();
  ::envoy::api::v2::Metadata* release_metadata();
  void set_allocated_metadata(::envoy::api::v2::Metadata* metadata);

  // .envoy.api.v2.ForwardAction forward = 2;
  bool has_forward() const;
  void clear_forward();
  static const int kForwardFieldNumber = 2;
  const ::envoy::api::v2::ForwardAction& forward() const;
  ::envoy::api::v2::ForwardAction* mutable_forward();
  ::envoy::api::v2::ForwardAction* release_forward();
  void set_allocated_forward(::envoy::api::v2::ForwardAction* forward);

  // .envoy.api.v2.RedirectAction redirect = 3;
  bool has_redirect() const;
  void clear_redirect();
  static const int kRedirectFieldNumber = 3;
  const ::envoy::api::v2::RedirectAction& redirect() const;
  ::envoy::api::v2::RedirectAction* mutable_redirect();
  ::envoy::api::v2::RedirectAction* release_redirect();
  void set_allocated_redirect(::envoy::api::v2::RedirectAction* redirect);

  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.Route)
 private:
  void set_has_forward();
  void set_has_redirect();

  inline bool has_action() const;
  void clear_action();
  inline void clear_has_action();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::envoy::api::v2::RouteMatch* match_;
  ::envoy::api::v2::Metadata* metadata_;
  union ActionUnion {
    ActionUnion() {}
    ::envoy::api::v2::ForwardAction* forward_;
    ::envoy::api::v2::RedirectAction* redirect_;
  } action_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VirtualCluster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.VirtualCluster) */ {
 public:
  VirtualCluster();
  virtual ~VirtualCluster();

  VirtualCluster(const VirtualCluster& from);

  inline VirtualCluster& operator=(const VirtualCluster& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualCluster& default_instance();

  static inline const VirtualCluster* internal_default_instance() {
    return reinterpret_cast<const VirtualCluster*>(
               &_VirtualCluster_default_instance_);
  }

  void Swap(VirtualCluster* other);

  // implements Message ----------------------------------------------

  inline VirtualCluster* New() const PROTOBUF_FINAL { return New(NULL); }

  VirtualCluster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VirtualCluster& from);
  void MergeFrom(const VirtualCluster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VirtualCluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pattern = 1;
  void clear_pattern();
  static const int kPatternFieldNumber = 1;
  const ::std::string& pattern() const;
  void set_pattern(const ::std::string& value);
  #if LANG_CXX11
  void set_pattern(::std::string&& value);
  #endif
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  ::std::string* mutable_pattern();
  ::std::string* release_pattern();
  void set_allocated_pattern(::std::string* pattern);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string method = 3;
  void clear_method();
  static const int kMethodFieldNumber = 3;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.VirtualCluster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pattern_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RateLimit_RateLimitAction_RequestHeaders : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders) */ {
 public:
  RateLimit_RateLimitAction_RequestHeaders();
  virtual ~RateLimit_RateLimitAction_RequestHeaders();

  RateLimit_RateLimitAction_RequestHeaders(const RateLimit_RateLimitAction_RequestHeaders& from);

  inline RateLimit_RateLimitAction_RequestHeaders& operator=(const RateLimit_RateLimitAction_RequestHeaders& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RateLimit_RateLimitAction_RequestHeaders& default_instance();

  static inline const RateLimit_RateLimitAction_RequestHeaders* internal_default_instance() {
    return reinterpret_cast<const RateLimit_RateLimitAction_RequestHeaders*>(
               &_RateLimit_RateLimitAction_RequestHeaders_default_instance_);
  }

  void Swap(RateLimit_RateLimitAction_RequestHeaders* other);

  // implements Message ----------------------------------------------

  inline RateLimit_RateLimitAction_RequestHeaders* New() const PROTOBUF_FINAL { return New(NULL); }

  RateLimit_RateLimitAction_RequestHeaders* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RateLimit_RateLimitAction_RequestHeaders& from);
  void MergeFrom(const RateLimit_RateLimitAction_RequestHeaders& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RateLimit_RateLimitAction_RequestHeaders* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string header_name = 1;
  void clear_header_name();
  static const int kHeaderNameFieldNumber = 1;
  const ::std::string& header_name() const;
  void set_header_name(const ::std::string& value);
  #if LANG_CXX11
  void set_header_name(::std::string&& value);
  #endif
  void set_header_name(const char* value);
  void set_header_name(const char* value, size_t size);
  ::std::string* mutable_header_name();
  ::std::string* release_header_name();
  void set_allocated_header_name(::std::string* header_name);

  // string descriptor_key = 2;
  void clear_descriptor_key();
  static const int kDescriptorKeyFieldNumber = 2;
  const ::std::string& descriptor_key() const;
  void set_descriptor_key(const ::std::string& value);
  #if LANG_CXX11
  void set_descriptor_key(::std::string&& value);
  #endif
  void set_descriptor_key(const char* value);
  void set_descriptor_key(const char* value, size_t size);
  ::std::string* mutable_descriptor_key();
  ::std::string* release_descriptor_key();
  void set_allocated_descriptor_key(::std::string* descriptor_key);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr header_name_;
  ::google::protobuf::internal::ArenaStringPtr descriptor_key_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RateLimit_RateLimitAction_HeaderValueMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch) */ {
 public:
  RateLimit_RateLimitAction_HeaderValueMatch();
  virtual ~RateLimit_RateLimitAction_HeaderValueMatch();

  RateLimit_RateLimitAction_HeaderValueMatch(const RateLimit_RateLimitAction_HeaderValueMatch& from);

  inline RateLimit_RateLimitAction_HeaderValueMatch& operator=(const RateLimit_RateLimitAction_HeaderValueMatch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RateLimit_RateLimitAction_HeaderValueMatch& default_instance();

  static inline const RateLimit_RateLimitAction_HeaderValueMatch* internal_default_instance() {
    return reinterpret_cast<const RateLimit_RateLimitAction_HeaderValueMatch*>(
               &_RateLimit_RateLimitAction_HeaderValueMatch_default_instance_);
  }

  void Swap(RateLimit_RateLimitAction_HeaderValueMatch* other);

  // implements Message ----------------------------------------------

  inline RateLimit_RateLimitAction_HeaderValueMatch* New() const PROTOBUF_FINAL { return New(NULL); }

  RateLimit_RateLimitAction_HeaderValueMatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RateLimit_RateLimitAction_HeaderValueMatch& from);
  void MergeFrom(const RateLimit_RateLimitAction_HeaderValueMatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RateLimit_RateLimitAction_HeaderValueMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.HeaderMatcher headers = 3;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 3;
  const ::envoy::api::v2::HeaderMatcher& headers(int index) const;
  ::envoy::api::v2::HeaderMatcher* mutable_headers(int index);
  ::envoy::api::v2::HeaderMatcher* add_headers();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >&
      headers() const;

  // string descriptor_value = 1;
  void clear_descriptor_value();
  static const int kDescriptorValueFieldNumber = 1;
  const ::std::string& descriptor_value() const;
  void set_descriptor_value(const ::std::string& value);
  #if LANG_CXX11
  void set_descriptor_value(::std::string&& value);
  #endif
  void set_descriptor_value(const char* value);
  void set_descriptor_value(const char* value, size_t size);
  ::std::string* mutable_descriptor_value();
  ::std::string* release_descriptor_value();
  void set_allocated_descriptor_value(::std::string* descriptor_value);

  // .google.protobuf.BoolValue expect_match = 2;
  bool has_expect_match() const;
  void clear_expect_match();
  static const int kExpectMatchFieldNumber = 2;
  const ::google::protobuf::BoolValue& expect_match() const;
  ::google::protobuf::BoolValue* mutable_expect_match();
  ::google::protobuf::BoolValue* release_expect_match();
  void set_allocated_expect_match(::google::protobuf::BoolValue* expect_match);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher > headers_;
  ::google::protobuf::internal::ArenaStringPtr descriptor_value_;
  ::google::protobuf::BoolValue* expect_match_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RateLimit_RateLimitAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.RateLimit.RateLimitAction) */ {
 public:
  RateLimit_RateLimitAction();
  virtual ~RateLimit_RateLimitAction();

  RateLimit_RateLimitAction(const RateLimit_RateLimitAction& from);

  inline RateLimit_RateLimitAction& operator=(const RateLimit_RateLimitAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RateLimit_RateLimitAction& default_instance();

  enum ActionDetailsCase {
    kRequestHeaders = 2,
    kGenericKey = 3,
    kHeaderValueMatch = 4,
    ACTION_DETAILS_NOT_SET = 0,
  };

  static inline const RateLimit_RateLimitAction* internal_default_instance() {
    return reinterpret_cast<const RateLimit_RateLimitAction*>(
               &_RateLimit_RateLimitAction_default_instance_);
  }

  void Swap(RateLimit_RateLimitAction* other);

  // implements Message ----------------------------------------------

  inline RateLimit_RateLimitAction* New() const PROTOBUF_FINAL { return New(NULL); }

  RateLimit_RateLimitAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RateLimit_RateLimitAction& from);
  void MergeFrom(const RateLimit_RateLimitAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RateLimit_RateLimitAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RateLimit_RateLimitAction_RequestHeaders RequestHeaders;
  typedef RateLimit_RateLimitAction_HeaderValueMatch HeaderValueMatch;

  typedef RateLimit_RateLimitAction_ActionType ActionType;
  static const ActionType SOURCE_CLUSTER =
    RateLimit_RateLimitAction_ActionType_SOURCE_CLUSTER;
  static const ActionType DESTINATION_CLUSTER =
    RateLimit_RateLimitAction_ActionType_DESTINATION_CLUSTER;
  static const ActionType REQUEST_HEADERS =
    RateLimit_RateLimitAction_ActionType_REQUEST_HEADERS;
  static const ActionType REMOTE_ADDRESS =
    RateLimit_RateLimitAction_ActionType_REMOTE_ADDRESS;
  static const ActionType GENERIC_KEY =
    RateLimit_RateLimitAction_ActionType_GENERIC_KEY;
  static const ActionType HEADER_VALUE_MATCH =
    RateLimit_RateLimitAction_ActionType_HEADER_VALUE_MATCH;
  static inline bool ActionType_IsValid(int value) {
    return RateLimit_RateLimitAction_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    RateLimit_RateLimitAction_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    RateLimit_RateLimitAction_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    RateLimit_RateLimitAction_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return RateLimit_RateLimitAction_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return RateLimit_RateLimitAction_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return RateLimit_RateLimitAction_ActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .envoy.api.v2.RateLimit.RateLimitAction.ActionType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::envoy::api::v2::RateLimit_RateLimitAction_ActionType type() const;
  void set_type(::envoy::api::v2::RateLimit_RateLimitAction_ActionType value);

  // .envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders request_headers = 2;
  bool has_request_headers() const;
  void clear_request_headers();
  static const int kRequestHeadersFieldNumber = 2;
  const ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders& request_headers() const;
  ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders* mutable_request_headers();
  ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders* release_request_headers();
  void set_allocated_request_headers(::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders* request_headers);

  // string generic_key = 3;
  private:
  bool has_generic_key() const;
  public:
  void clear_generic_key();
  static const int kGenericKeyFieldNumber = 3;
  const ::std::string& generic_key() const;
  void set_generic_key(const ::std::string& value);
  #if LANG_CXX11
  void set_generic_key(::std::string&& value);
  #endif
  void set_generic_key(const char* value);
  void set_generic_key(const char* value, size_t size);
  ::std::string* mutable_generic_key();
  ::std::string* release_generic_key();
  void set_allocated_generic_key(::std::string* generic_key);

  // .envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch header_value_match = 4;
  bool has_header_value_match() const;
  void clear_header_value_match();
  static const int kHeaderValueMatchFieldNumber = 4;
  const ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch& header_value_match() const;
  ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch* mutable_header_value_match();
  ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch* release_header_value_match();
  void set_allocated_header_value_match(::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch* header_value_match);

  ActionDetailsCase action_details_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.RateLimit.RateLimitAction)
 private:
  void set_has_request_headers();
  void set_has_generic_key();
  void set_has_header_value_match();

  inline bool has_action_details() const;
  void clear_action_details();
  inline void clear_has_action_details();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union ActionDetailsUnion {
    ActionDetailsUnion() {}
    ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders* request_headers_;
    ::google::protobuf::internal::ArenaStringPtr generic_key_;
    ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch* header_value_match_;
  } action_details_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RateLimit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.RateLimit) */ {
 public:
  RateLimit();
  virtual ~RateLimit();

  RateLimit(const RateLimit& from);

  inline RateLimit& operator=(const RateLimit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RateLimit& default_instance();

  static inline const RateLimit* internal_default_instance() {
    return reinterpret_cast<const RateLimit*>(
               &_RateLimit_default_instance_);
  }

  void Swap(RateLimit* other);

  // implements Message ----------------------------------------------

  inline RateLimit* New() const PROTOBUF_FINAL { return New(NULL); }

  RateLimit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RateLimit& from);
  void MergeFrom(const RateLimit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RateLimit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RateLimit_RateLimitAction RateLimitAction;

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.RateLimit.RateLimitAction actions = 3;
  int actions_size() const;
  void clear_actions();
  static const int kActionsFieldNumber = 3;
  const ::envoy::api::v2::RateLimit_RateLimitAction& actions(int index) const;
  ::envoy::api::v2::RateLimit_RateLimitAction* mutable_actions(int index);
  ::envoy::api::v2::RateLimit_RateLimitAction* add_actions();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit_RateLimitAction >*
      mutable_actions();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit_RateLimitAction >&
      actions() const;

  // string disable_key = 2;
  void clear_disable_key();
  static const int kDisableKeyFieldNumber = 2;
  const ::std::string& disable_key() const;
  void set_disable_key(const ::std::string& value);
  #if LANG_CXX11
  void set_disable_key(::std::string&& value);
  #endif
  void set_disable_key(const char* value);
  void set_disable_key(const char* value, size_t size);
  ::std::string* mutable_disable_key();
  ::std::string* release_disable_key();
  void set_allocated_disable_key(::std::string* disable_key);

  // .google.protobuf.UInt32Value stage = 1;
  bool has_stage() const;
  void clear_stage();
  static const int kStageFieldNumber = 1;
  const ::google::protobuf::UInt32Value& stage() const;
  ::google::protobuf::UInt32Value* mutable_stage();
  ::google::protobuf::UInt32Value* release_stage();
  void set_allocated_stage(::google::protobuf::UInt32Value* stage);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.RateLimit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit_RateLimitAction > actions_;
  ::google::protobuf::internal::ArenaStringPtr disable_key_;
  ::google::protobuf::UInt32Value* stage_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeaderMatcher : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.HeaderMatcher) */ {
 public:
  HeaderMatcher();
  virtual ~HeaderMatcher();

  HeaderMatcher(const HeaderMatcher& from);

  inline HeaderMatcher& operator=(const HeaderMatcher& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeaderMatcher& default_instance();

  static inline const HeaderMatcher* internal_default_instance() {
    return reinterpret_cast<const HeaderMatcher*>(
               &_HeaderMatcher_default_instance_);
  }

  void Swap(HeaderMatcher* other);

  // implements Message ----------------------------------------------

  inline HeaderMatcher* New() const PROTOBUF_FINAL { return New(NULL); }

  HeaderMatcher* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeaderMatcher& from);
  void MergeFrom(const HeaderMatcher& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeaderMatcher* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.protobuf.BoolValue regex = 3;
  bool has_regex() const;
  void clear_regex();
  static const int kRegexFieldNumber = 3;
  const ::google::protobuf::BoolValue& regex() const;
  ::google::protobuf::BoolValue* mutable_regex();
  ::google::protobuf::BoolValue* release_regex();
  void set_allocated_regex(::google::protobuf::BoolValue* regex);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.HeaderMatcher)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::BoolValue* regex_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VirtualHost : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.VirtualHost) */ {
 public:
  VirtualHost();
  virtual ~VirtualHost();

  VirtualHost(const VirtualHost& from);

  inline VirtualHost& operator=(const VirtualHost& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualHost& default_instance();

  static inline const VirtualHost* internal_default_instance() {
    return reinterpret_cast<const VirtualHost*>(
               &_VirtualHost_default_instance_);
  }

  void Swap(VirtualHost* other);

  // implements Message ----------------------------------------------

  inline VirtualHost* New() const PROTOBUF_FINAL { return New(NULL); }

  VirtualHost* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VirtualHost& from);
  void MergeFrom(const VirtualHost& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VirtualHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VirtualHost_TlsRequirementType TlsRequirementType;
  static const TlsRequirementType NONE =
    VirtualHost_TlsRequirementType_NONE;
  static const TlsRequirementType EXTERNAL_ONLY =
    VirtualHost_TlsRequirementType_EXTERNAL_ONLY;
  static const TlsRequirementType ALL =
    VirtualHost_TlsRequirementType_ALL;
  static inline bool TlsRequirementType_IsValid(int value) {
    return VirtualHost_TlsRequirementType_IsValid(value);
  }
  static const TlsRequirementType TlsRequirementType_MIN =
    VirtualHost_TlsRequirementType_TlsRequirementType_MIN;
  static const TlsRequirementType TlsRequirementType_MAX =
    VirtualHost_TlsRequirementType_TlsRequirementType_MAX;
  static const int TlsRequirementType_ARRAYSIZE =
    VirtualHost_TlsRequirementType_TlsRequirementType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TlsRequirementType_descriptor() {
    return VirtualHost_TlsRequirementType_descriptor();
  }
  static inline const ::std::string& TlsRequirementType_Name(TlsRequirementType value) {
    return VirtualHost_TlsRequirementType_Name(value);
  }
  static inline bool TlsRequirementType_Parse(const ::std::string& name,
      TlsRequirementType* value) {
    return VirtualHost_TlsRequirementType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string domains = 2;
  int domains_size() const;
  void clear_domains();
  static const int kDomainsFieldNumber = 2;
  const ::std::string& domains(int index) const;
  ::std::string* mutable_domains(int index);
  void set_domains(int index, const ::std::string& value);
  void set_domains(int index, const char* value);
  void set_domains(int index, const char* value, size_t size);
  ::std::string* add_domains();
  void add_domains(const ::std::string& value);
  void add_domains(const char* value);
  void add_domains(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& domains() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_domains();

  // repeated .envoy.api.v2.Route routes = 3;
  int routes_size() const;
  void clear_routes();
  static const int kRoutesFieldNumber = 3;
  const ::envoy::api::v2::Route& routes(int index) const;
  ::envoy::api::v2::Route* mutable_routes(int index);
  ::envoy::api::v2::Route* add_routes();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Route >*
      mutable_routes();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Route >&
      routes() const;

  // repeated .envoy.api.v2.VirtualCluster virtual_clusters = 5;
  int virtual_clusters_size() const;
  void clear_virtual_clusters();
  static const int kVirtualClustersFieldNumber = 5;
  const ::envoy::api::v2::VirtualCluster& virtual_clusters(int index) const;
  ::envoy::api::v2::VirtualCluster* mutable_virtual_clusters(int index);
  ::envoy::api::v2::VirtualCluster* add_virtual_clusters();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualCluster >*
      mutable_virtual_clusters();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualCluster >&
      virtual_clusters() const;

  // repeated .envoy.api.v2.RateLimit rate_limits = 6;
  int rate_limits_size() const;
  void clear_rate_limits();
  static const int kRateLimitsFieldNumber = 6;
  const ::envoy::api::v2::RateLimit& rate_limits(int index) const;
  ::envoy::api::v2::RateLimit* mutable_rate_limits(int index);
  ::envoy::api::v2::RateLimit* add_rate_limits();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >*
      mutable_rate_limits();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >&
      rate_limits() const;

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 7;
  int request_headers_to_add_size() const;
  void clear_request_headers_to_add();
  static const int kRequestHeadersToAddFieldNumber = 7;
  const ::envoy::api::v2::HeaderValueOption& request_headers_to_add(int index) const;
  ::envoy::api::v2::HeaderValueOption* mutable_request_headers_to_add(int index);
  ::envoy::api::v2::HeaderValueOption* add_request_headers_to_add();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
      mutable_request_headers_to_add();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
      request_headers_to_add() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .envoy.api.v2.VirtualHost.TlsRequirementType require_tls = 4;
  void clear_require_tls();
  static const int kRequireTlsFieldNumber = 4;
  ::envoy::api::v2::VirtualHost_TlsRequirementType require_tls() const;
  void set_require_tls(::envoy::api::v2::VirtualHost_TlsRequirementType value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.VirtualHost)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> domains_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Route > routes_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualCluster > virtual_clusters_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit > rate_limits_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption > request_headers_to_add_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int require_tls_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RouteConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.RouteConfiguration) */ {
 public:
  RouteConfiguration();
  virtual ~RouteConfiguration();

  RouteConfiguration(const RouteConfiguration& from);

  inline RouteConfiguration& operator=(const RouteConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteConfiguration& default_instance();

  static inline const RouteConfiguration* internal_default_instance() {
    return reinterpret_cast<const RouteConfiguration*>(
               &_RouteConfiguration_default_instance_);
  }

  void Swap(RouteConfiguration* other);

  // implements Message ----------------------------------------------

  inline RouteConfiguration* New() const PROTOBUF_FINAL { return New(NULL); }

  RouteConfiguration* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RouteConfiguration& from);
  void MergeFrom(const RouteConfiguration& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RouteConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.VirtualHost virtual_hosts = 1;
  int virtual_hosts_size() const;
  void clear_virtual_hosts();
  static const int kVirtualHostsFieldNumber = 1;
  const ::envoy::api::v2::VirtualHost& virtual_hosts(int index) const;
  ::envoy::api::v2::VirtualHost* mutable_virtual_hosts(int index);
  ::envoy::api::v2::VirtualHost* add_virtual_hosts();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualHost >*
      mutable_virtual_hosts();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualHost >&
      virtual_hosts() const;

  // repeated string internal_only_headers = 2;
  int internal_only_headers_size() const;
  void clear_internal_only_headers();
  static const int kInternalOnlyHeadersFieldNumber = 2;
  const ::std::string& internal_only_headers(int index) const;
  ::std::string* mutable_internal_only_headers(int index);
  void set_internal_only_headers(int index, const ::std::string& value);
  void set_internal_only_headers(int index, const char* value);
  void set_internal_only_headers(int index, const char* value, size_t size);
  ::std::string* add_internal_only_headers();
  void add_internal_only_headers(const ::std::string& value);
  void add_internal_only_headers(const char* value);
  void add_internal_only_headers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& internal_only_headers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_internal_only_headers();

  // repeated .envoy.api.v2.HeaderValueOption response_headers_to_add = 3;
  int response_headers_to_add_size() const;
  void clear_response_headers_to_add();
  static const int kResponseHeadersToAddFieldNumber = 3;
  const ::envoy::api::v2::HeaderValueOption& response_headers_to_add(int index) const;
  ::envoy::api::v2::HeaderValueOption* mutable_response_headers_to_add(int index);
  ::envoy::api::v2::HeaderValueOption* add_response_headers_to_add();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
      mutable_response_headers_to_add();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
      response_headers_to_add() const;

  // repeated string response_headers_to_remove = 4;
  int response_headers_to_remove_size() const;
  void clear_response_headers_to_remove();
  static const int kResponseHeadersToRemoveFieldNumber = 4;
  const ::std::string& response_headers_to_remove(int index) const;
  ::std::string* mutable_response_headers_to_remove(int index);
  void set_response_headers_to_remove(int index, const ::std::string& value);
  void set_response_headers_to_remove(int index, const char* value);
  void set_response_headers_to_remove(int index, const char* value, size_t size);
  ::std::string* add_response_headers_to_remove();
  void add_response_headers_to_remove(const ::std::string& value);
  void add_response_headers_to_remove(const char* value);
  void add_response_headers_to_remove(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& response_headers_to_remove() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_response_headers_to_remove();

  // repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 5;
  int request_headers_to_add_size() const;
  void clear_request_headers_to_add();
  static const int kRequestHeadersToAddFieldNumber = 5;
  const ::envoy::api::v2::HeaderValueOption& request_headers_to_add(int index) const;
  ::envoy::api::v2::HeaderValueOption* mutable_request_headers_to_add(int index);
  ::envoy::api::v2::HeaderValueOption* add_request_headers_to_add();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
      mutable_request_headers_to_add();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
      request_headers_to_add() const;

  // @@protoc_insertion_point(class_scope:envoy.api.v2.RouteConfiguration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualHost > virtual_hosts_;
  ::google::protobuf::RepeatedPtrField< ::std::string> internal_only_headers_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption > response_headers_to_add_;
  ::google::protobuf::RepeatedPtrField< ::std::string> response_headers_to_remove_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption > request_headers_to_add_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2frds_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedCluster_ClusterWeight

// string name = 1;
inline void WeightedCluster_ClusterWeight::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeightedCluster_ClusterWeight::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.WeightedCluster.ClusterWeight.name)
  return name_.GetNoArena();
}
inline void WeightedCluster_ClusterWeight::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}
#if LANG_CXX11
inline void WeightedCluster_ClusterWeight::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}
#endif
inline void WeightedCluster_ClusterWeight::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}
inline void WeightedCluster_ClusterWeight::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}
inline ::std::string* WeightedCluster_ClusterWeight::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.WeightedCluster.ClusterWeight.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeightedCluster_ClusterWeight::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.WeightedCluster.ClusterWeight.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeightedCluster_ClusterWeight::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.WeightedCluster.ClusterWeight.name)
}

// .google.protobuf.UInt32Value weight = 2;
inline bool WeightedCluster_ClusterWeight::has_weight() const {
  return this != internal_default_instance() && weight_ != NULL;
}
inline void WeightedCluster_ClusterWeight::clear_weight() {
  if (GetArenaNoVirtual() == NULL && weight_ != NULL) delete weight_;
  weight_ = NULL;
}
inline const ::google::protobuf::UInt32Value& WeightedCluster_ClusterWeight::weight() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.WeightedCluster.ClusterWeight.weight)
  return weight_ != NULL ? *weight_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* WeightedCluster_ClusterWeight::mutable_weight() {
  
  if (weight_ == NULL) {
    weight_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.WeightedCluster.ClusterWeight.weight)
  return weight_;
}
inline ::google::protobuf::UInt32Value* WeightedCluster_ClusterWeight::release_weight() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.WeightedCluster.ClusterWeight.weight)
  
  ::google::protobuf::UInt32Value* temp = weight_;
  weight_ = NULL;
  return temp;
}
inline void WeightedCluster_ClusterWeight::set_allocated_weight(::google::protobuf::UInt32Value* weight) {
  delete weight_;
  if (weight != NULL && weight->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_weight = new ::google::protobuf::UInt32Value;
    new_weight->CopyFrom(*weight);
    weight = new_weight;
  }
  weight_ = weight;
  if (weight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.WeightedCluster.ClusterWeight.weight)
}

// -------------------------------------------------------------------

// WeightedCluster

// repeated .envoy.api.v2.WeightedCluster.ClusterWeight clusters = 1;
inline int WeightedCluster::clusters_size() const {
  return clusters_.size();
}
inline void WeightedCluster::clear_clusters() {
  clusters_.Clear();
}
inline const ::envoy::api::v2::WeightedCluster_ClusterWeight& WeightedCluster::clusters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.WeightedCluster.clusters)
  return clusters_.Get(index);
}
inline ::envoy::api::v2::WeightedCluster_ClusterWeight* WeightedCluster::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.WeightedCluster.clusters)
  return clusters_.Mutable(index);
}
inline ::envoy::api::v2::WeightedCluster_ClusterWeight* WeightedCluster::add_clusters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.WeightedCluster.clusters)
  return clusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::WeightedCluster_ClusterWeight >*
WeightedCluster::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.WeightedCluster.clusters)
  return &clusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::WeightedCluster_ClusterWeight >&
WeightedCluster::clusters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.WeightedCluster.clusters)
  return clusters_;
}

// string runtime_key_prefix = 2;
inline void WeightedCluster::clear_runtime_key_prefix() {
  runtime_key_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WeightedCluster::runtime_key_prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.WeightedCluster.runtime_key_prefix)
  return runtime_key_prefix_.GetNoArena();
}
inline void WeightedCluster::set_runtime_key_prefix(const ::std::string& value) {
  
  runtime_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}
#if LANG_CXX11
inline void WeightedCluster::set_runtime_key_prefix(::std::string&& value) {
  
  runtime_key_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}
#endif
inline void WeightedCluster::set_runtime_key_prefix(const char* value) {
  
  runtime_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}
inline void WeightedCluster::set_runtime_key_prefix(const char* value, size_t size) {
  
  runtime_key_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}
inline ::std::string* WeightedCluster::mutable_runtime_key_prefix() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.WeightedCluster.runtime_key_prefix)
  return runtime_key_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeightedCluster::release_runtime_key_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.WeightedCluster.runtime_key_prefix)
  
  return runtime_key_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeightedCluster::set_allocated_runtime_key_prefix(::std::string* runtime_key_prefix) {
  if (runtime_key_prefix != NULL) {
    
  } else {
    
  }
  runtime_key_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime_key_prefix);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.WeightedCluster.runtime_key_prefix)
}

// -------------------------------------------------------------------

// RouteMatch

// string prefix = 1;
inline bool RouteMatch::has_prefix() const {
  return path_specifier_case() == kPrefix;
}
inline void RouteMatch::set_has_prefix() {
  _oneof_case_[0] = kPrefix;
}
inline void RouteMatch::clear_prefix() {
  if (has_prefix()) {
    path_specifier_.prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_path_specifier();
  }
}
inline const ::std::string& RouteMatch::prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.prefix)
  if (has_prefix()) {
    return path_specifier_.prefix_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RouteMatch::set_prefix(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.prefix)
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.prefix)
}
#if LANG_CXX11
inline void RouteMatch::set_prefix(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.prefix)
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteMatch.prefix)
}
#endif
inline void RouteMatch::set_prefix(const char* value) {
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteMatch.prefix)
}
inline void RouteMatch::set_prefix(const char* value, size_t size) {
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteMatch.prefix)
}
inline ::std::string* RouteMatch::mutable_prefix() {
  if (!has_prefix()) {
    clear_path_specifier();
    set_has_prefix();
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.prefix)
  return path_specifier_.prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RouteMatch::release_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.prefix)
  if (has_prefix()) {
    clear_has_path_specifier();
    return path_specifier_.prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RouteMatch::set_allocated_prefix(::std::string* prefix) {
  if (!has_prefix()) {
    path_specifier_.prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_path_specifier();
  if (prefix != NULL) {
    set_has_prefix();
    path_specifier_.prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        prefix);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.prefix)
}

// string path = 2;
inline bool RouteMatch::has_path() const {
  return path_specifier_case() == kPath;
}
inline void RouteMatch::set_has_path() {
  _oneof_case_[0] = kPath;
}
inline void RouteMatch::clear_path() {
  if (has_path()) {
    path_specifier_.path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_path_specifier();
  }
}
inline const ::std::string& RouteMatch::path() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.path)
  if (has_path()) {
    return path_specifier_.path_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RouteMatch::set_path(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.path)
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.path)
}
#if LANG_CXX11
inline void RouteMatch::set_path(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.path)
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteMatch.path)
}
#endif
inline void RouteMatch::set_path(const char* value) {
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteMatch.path)
}
inline void RouteMatch::set_path(const char* value, size_t size) {
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteMatch.path)
}
inline ::std::string* RouteMatch::mutable_path() {
  if (!has_path()) {
    clear_path_specifier();
    set_has_path();
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.path)
  return path_specifier_.path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RouteMatch::release_path() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.path)
  if (has_path()) {
    clear_has_path_specifier();
    return path_specifier_.path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RouteMatch::set_allocated_path(::std::string* path) {
  if (!has_path()) {
    path_specifier_.path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_path_specifier();
  if (path != NULL) {
    set_has_path();
    path_specifier_.path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        path);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.path)
}

// string regex = 3;
inline bool RouteMatch::has_regex() const {
  return path_specifier_case() == kRegex;
}
inline void RouteMatch::set_has_regex() {
  _oneof_case_[0] = kRegex;
}
inline void RouteMatch::clear_regex() {
  if (has_regex()) {
    path_specifier_.regex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_path_specifier();
  }
}
inline const ::std::string& RouteMatch::regex() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.regex)
  if (has_regex()) {
    return path_specifier_.regex_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RouteMatch::set_regex(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.regex)
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.regex)
}
#if LANG_CXX11
inline void RouteMatch::set_regex(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteMatch.regex)
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.regex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RouteMatch.regex)
}
#endif
inline void RouteMatch::set_regex(const char* value) {
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteMatch.regex)
}
inline void RouteMatch::set_regex(const char* value, size_t size) {
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  path_specifier_.regex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteMatch.regex)
}
inline ::std::string* RouteMatch::mutable_regex() {
  if (!has_regex()) {
    clear_path_specifier();
    set_has_regex();
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.regex)
  return path_specifier_.regex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RouteMatch::release_regex() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.regex)
  if (has_regex()) {
    clear_has_path_specifier();
    return path_specifier_.regex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RouteMatch::set_allocated_regex(::std::string* regex) {
  if (!has_regex()) {
    path_specifier_.regex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_path_specifier();
  if (regex != NULL) {
    set_has_regex();
    path_specifier_.regex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        regex);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.regex)
}

// .google.protobuf.BoolValue case_sensitive = 4;
inline bool RouteMatch::has_case_sensitive() const {
  return this != internal_default_instance() && case_sensitive_ != NULL;
}
inline void RouteMatch::clear_case_sensitive() {
  if (GetArenaNoVirtual() == NULL && case_sensitive_ != NULL) delete case_sensitive_;
  case_sensitive_ = NULL;
}
inline const ::google::protobuf::BoolValue& RouteMatch::case_sensitive() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.case_sensitive)
  return case_sensitive_ != NULL ? *case_sensitive_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
inline ::google::protobuf::BoolValue* RouteMatch::mutable_case_sensitive() {
  
  if (case_sensitive_ == NULL) {
    case_sensitive_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.case_sensitive)
  return case_sensitive_;
}
inline ::google::protobuf::BoolValue* RouteMatch::release_case_sensitive() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.case_sensitive)
  
  ::google::protobuf::BoolValue* temp = case_sensitive_;
  case_sensitive_ = NULL;
  return temp;
}
inline void RouteMatch::set_allocated_case_sensitive(::google::protobuf::BoolValue* case_sensitive) {
  delete case_sensitive_;
  if (case_sensitive != NULL && case_sensitive->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_case_sensitive = new ::google::protobuf::BoolValue;
    new_case_sensitive->CopyFrom(*case_sensitive);
    case_sensitive = new_case_sensitive;
  }
  case_sensitive_ = case_sensitive;
  if (case_sensitive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.case_sensitive)
}

// .envoy.api.v2.RuntimeUInt32 runtime = 5;
inline bool RouteMatch::has_runtime() const {
  return this != internal_default_instance() && runtime_ != NULL;
}
inline void RouteMatch::clear_runtime() {
  if (GetArenaNoVirtual() == NULL && runtime_ != NULL) delete runtime_;
  runtime_ = NULL;
}
inline const ::envoy::api::v2::RuntimeUInt32& RouteMatch::runtime() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.runtime)
  return runtime_ != NULL ? *runtime_
                         : *::envoy::api::v2::RuntimeUInt32::internal_default_instance();
}
inline ::envoy::api::v2::RuntimeUInt32* RouteMatch::mutable_runtime() {
  
  if (runtime_ == NULL) {
    runtime_ = new ::envoy::api::v2::RuntimeUInt32;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.runtime)
  return runtime_;
}
inline ::envoy::api::v2::RuntimeUInt32* RouteMatch::release_runtime() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RouteMatch.runtime)
  
  ::envoy::api::v2::RuntimeUInt32* temp = runtime_;
  runtime_ = NULL;
  return temp;
}
inline void RouteMatch::set_allocated_runtime(::envoy::api::v2::RuntimeUInt32* runtime) {
  delete runtime_;
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RouteMatch.runtime)
}

// repeated .envoy.api.v2.HeaderMatcher headers = 6;
inline int RouteMatch::headers_size() const {
  return headers_.size();
}
inline void RouteMatch::clear_headers() {
  headers_.Clear();
}
inline const ::envoy::api::v2::HeaderMatcher& RouteMatch::headers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteMatch.headers)
  return headers_.Get(index);
}
inline ::envoy::api::v2::HeaderMatcher* RouteMatch::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteMatch.headers)
  return headers_.Mutable(index);
}
inline ::envoy::api::v2::HeaderMatcher* RouteMatch::add_headers() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteMatch.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >*
RouteMatch::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteMatch.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >&
RouteMatch::headers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteMatch.headers)
  return headers_;
}

inline bool RouteMatch::has_path_specifier() const {
  return path_specifier_case() != PATH_SPECIFIER_NOT_SET;
}
inline void RouteMatch::clear_has_path_specifier() {
  _oneof_case_[0] = PATH_SPECIFIER_NOT_SET;
}
inline RouteMatch::PathSpecifierCase RouteMatch::path_specifier_case() const {
  return RouteMatch::PathSpecifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ForwardAction_RetryPolicy

// string retry_on = 1;
inline void ForwardAction_RetryPolicy::clear_retry_on() {
  retry_on_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForwardAction_RetryPolicy::retry_on() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
  return retry_on_.GetNoArena();
}
inline void ForwardAction_RetryPolicy::set_retry_on(const ::std::string& value) {
  
  retry_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
}
#if LANG_CXX11
inline void ForwardAction_RetryPolicy::set_retry_on(::std::string&& value) {
  
  retry_on_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
}
#endif
inline void ForwardAction_RetryPolicy::set_retry_on(const char* value) {
  
  retry_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
}
inline void ForwardAction_RetryPolicy::set_retry_on(const char* value, size_t size) {
  
  retry_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
}
inline ::std::string* ForwardAction_RetryPolicy::mutable_retry_on() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
  return retry_on_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardAction_RetryPolicy::release_retry_on() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
  
  return retry_on_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForwardAction_RetryPolicy::set_allocated_retry_on(::std::string* retry_on) {
  if (retry_on != NULL) {
    
  } else {
    
  }
  retry_on_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retry_on);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.RetryPolicy.retry_on)
}

// .google.protobuf.UInt32Value num_retries = 2;
inline bool ForwardAction_RetryPolicy::has_num_retries() const {
  return this != internal_default_instance() && num_retries_ != NULL;
}
inline void ForwardAction_RetryPolicy::clear_num_retries() {
  if (GetArenaNoVirtual() == NULL && num_retries_ != NULL) delete num_retries_;
  num_retries_ = NULL;
}
inline const ::google::protobuf::UInt32Value& ForwardAction_RetryPolicy::num_retries() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.RetryPolicy.num_retries)
  return num_retries_ != NULL ? *num_retries_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* ForwardAction_RetryPolicy::mutable_num_retries() {
  
  if (num_retries_ == NULL) {
    num_retries_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.RetryPolicy.num_retries)
  return num_retries_;
}
inline ::google::protobuf::UInt32Value* ForwardAction_RetryPolicy::release_num_retries() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.RetryPolicy.num_retries)
  
  ::google::protobuf::UInt32Value* temp = num_retries_;
  num_retries_ = NULL;
  return temp;
}
inline void ForwardAction_RetryPolicy::set_allocated_num_retries(::google::protobuf::UInt32Value* num_retries) {
  delete num_retries_;
  if (num_retries != NULL && num_retries->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_num_retries = new ::google::protobuf::UInt32Value;
    new_num_retries->CopyFrom(*num_retries);
    num_retries = new_num_retries;
  }
  num_retries_ = num_retries;
  if (num_retries) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.RetryPolicy.num_retries)
}

// .google.protobuf.Duration per_try_timeout = 3;
inline bool ForwardAction_RetryPolicy::has_per_try_timeout() const {
  return this != internal_default_instance() && per_try_timeout_ != NULL;
}
inline void ForwardAction_RetryPolicy::clear_per_try_timeout() {
  if (GetArenaNoVirtual() == NULL && per_try_timeout_ != NULL) delete per_try_timeout_;
  per_try_timeout_ = NULL;
}
inline const ::google::protobuf::Duration& ForwardAction_RetryPolicy::per_try_timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.RetryPolicy.per_try_timeout)
  return per_try_timeout_ != NULL ? *per_try_timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* ForwardAction_RetryPolicy::mutable_per_try_timeout() {
  
  if (per_try_timeout_ == NULL) {
    per_try_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.RetryPolicy.per_try_timeout)
  return per_try_timeout_;
}
inline ::google::protobuf::Duration* ForwardAction_RetryPolicy::release_per_try_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.RetryPolicy.per_try_timeout)
  
  ::google::protobuf::Duration* temp = per_try_timeout_;
  per_try_timeout_ = NULL;
  return temp;
}
inline void ForwardAction_RetryPolicy::set_allocated_per_try_timeout(::google::protobuf::Duration* per_try_timeout) {
  delete per_try_timeout_;
  if (per_try_timeout != NULL && per_try_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_per_try_timeout = new ::google::protobuf::Duration;
    new_per_try_timeout->CopyFrom(*per_try_timeout);
    per_try_timeout = new_per_try_timeout;
  }
  per_try_timeout_ = per_try_timeout;
  if (per_try_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.RetryPolicy.per_try_timeout)
}

// -------------------------------------------------------------------

// ForwardAction_RequestMirrorPolicy

// string cluster = 1;
inline void ForwardAction_RequestMirrorPolicy::clear_cluster() {
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForwardAction_RequestMirrorPolicy::cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
  return cluster_.GetNoArena();
}
inline void ForwardAction_RequestMirrorPolicy::set_cluster(const ::std::string& value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
}
#if LANG_CXX11
inline void ForwardAction_RequestMirrorPolicy::set_cluster(::std::string&& value) {
  
  cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
}
#endif
inline void ForwardAction_RequestMirrorPolicy::set_cluster(const char* value) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
}
inline void ForwardAction_RequestMirrorPolicy::set_cluster(const char* value, size_t size) {
  
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
}
inline ::std::string* ForwardAction_RequestMirrorPolicy::mutable_cluster() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
  return cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardAction_RequestMirrorPolicy::release_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
  
  return cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForwardAction_RequestMirrorPolicy::set_allocated_cluster(::std::string* cluster) {
  if (cluster != NULL) {
    
  } else {
    
  }
  cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.RequestMirrorPolicy.cluster)
}

// string runtime_key = 2;
inline void ForwardAction_RequestMirrorPolicy::clear_runtime_key() {
  runtime_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForwardAction_RequestMirrorPolicy::runtime_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
  return runtime_key_.GetNoArena();
}
inline void ForwardAction_RequestMirrorPolicy::set_runtime_key(const ::std::string& value) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
}
#if LANG_CXX11
inline void ForwardAction_RequestMirrorPolicy::set_runtime_key(::std::string&& value) {
  
  runtime_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
}
#endif
inline void ForwardAction_RequestMirrorPolicy::set_runtime_key(const char* value) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
}
inline void ForwardAction_RequestMirrorPolicy::set_runtime_key(const char* value, size_t size) {
  
  runtime_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
}
inline ::std::string* ForwardAction_RequestMirrorPolicy::mutable_runtime_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
  return runtime_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardAction_RequestMirrorPolicy::release_runtime_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
  
  return runtime_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForwardAction_RequestMirrorPolicy::set_allocated_runtime_key(::std::string* runtime_key) {
  if (runtime_key != NULL) {
    
  } else {
    
  }
  runtime_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runtime_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.RequestMirrorPolicy.runtime_key)
}

// -------------------------------------------------------------------

// ForwardAction_HashPolicy_Header

// string header_name = 1;
inline void ForwardAction_HashPolicy_Header::clear_header_name() {
  header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForwardAction_HashPolicy_Header::header_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
  return header_name_.GetNoArena();
}
inline void ForwardAction_HashPolicy_Header::set_header_name(const ::std::string& value) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
}
#if LANG_CXX11
inline void ForwardAction_HashPolicy_Header::set_header_name(::std::string&& value) {
  
  header_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
}
#endif
inline void ForwardAction_HashPolicy_Header::set_header_name(const char* value) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
}
inline void ForwardAction_HashPolicy_Header::set_header_name(const char* value, size_t size) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
}
inline ::std::string* ForwardAction_HashPolicy_Header::mutable_header_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
  return header_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardAction_HashPolicy_Header::release_header_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
  
  return header_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForwardAction_HashPolicy_Header::set_allocated_header_name(::std::string* header_name) {
  if (header_name != NULL) {
    
  } else {
    
  }
  header_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.HashPolicy.Header.header_name)
}

// -------------------------------------------------------------------

// ForwardAction_HashPolicy

// .envoy.api.v2.ForwardAction.HashPolicy.Header header = 1;
inline bool ForwardAction_HashPolicy::has_header() const {
  return policy_specifier_case() == kHeader;
}
inline void ForwardAction_HashPolicy::set_has_header() {
  _oneof_case_[0] = kHeader;
}
inline void ForwardAction_HashPolicy::clear_header() {
  if (has_header()) {
    delete policy_specifier_.header_;
    clear_has_policy_specifier();
  }
}
inline  const ::envoy::api::v2::ForwardAction_HashPolicy_Header& ForwardAction_HashPolicy::header() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.HashPolicy.header)
  return has_header()
      ? *policy_specifier_.header_
      : ::envoy::api::v2::ForwardAction_HashPolicy_Header::default_instance();
}
inline ::envoy::api::v2::ForwardAction_HashPolicy_Header* ForwardAction_HashPolicy::mutable_header() {
  if (!has_header()) {
    clear_policy_specifier();
    set_has_header();
    policy_specifier_.header_ = new ::envoy::api::v2::ForwardAction_HashPolicy_Header;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.HashPolicy.header)
  return policy_specifier_.header_;
}
inline ::envoy::api::v2::ForwardAction_HashPolicy_Header* ForwardAction_HashPolicy::release_header() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.HashPolicy.header)
  if (has_header()) {
    clear_has_policy_specifier();
    ::envoy::api::v2::ForwardAction_HashPolicy_Header* temp = policy_specifier_.header_;
    policy_specifier_.header_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ForwardAction_HashPolicy::set_allocated_header(::envoy::api::v2::ForwardAction_HashPolicy_Header* header) {
  clear_policy_specifier();
  if (header) {
    set_has_header();
    policy_specifier_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.HashPolicy.header)
}

inline bool ForwardAction_HashPolicy::has_policy_specifier() const {
  return policy_specifier_case() != POLICY_SPECIFIER_NOT_SET;
}
inline void ForwardAction_HashPolicy::clear_has_policy_specifier() {
  _oneof_case_[0] = POLICY_SPECIFIER_NOT_SET;
}
inline ForwardAction_HashPolicy::PolicySpecifierCase ForwardAction_HashPolicy::policy_specifier_case() const {
  return ForwardAction_HashPolicy::PolicySpecifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ForwardAction

// string cluster = 1;
inline bool ForwardAction::has_cluster() const {
  return cluster_specifier_case() == kCluster;
}
inline void ForwardAction::set_has_cluster() {
  _oneof_case_[0] = kCluster;
}
inline void ForwardAction::clear_cluster() {
  if (has_cluster()) {
    cluster_specifier_.cluster_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_cluster_specifier();
  }
}
inline const ::std::string& ForwardAction::cluster() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.cluster)
  if (has_cluster()) {
    return cluster_specifier_.cluster_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ForwardAction::set_cluster(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.cluster)
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.cluster)
}
#if LANG_CXX11
inline void ForwardAction::set_cluster(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.cluster)
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.cluster)
}
#endif
inline void ForwardAction::set_cluster(const char* value) {
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.cluster)
}
inline void ForwardAction::set_cluster(const char* value, size_t size) {
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.cluster)
}
inline ::std::string* ForwardAction::mutable_cluster() {
  if (!has_cluster()) {
    clear_cluster_specifier();
    set_has_cluster();
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.cluster)
  return cluster_specifier_.cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardAction::release_cluster() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.cluster)
  if (has_cluster()) {
    clear_has_cluster_specifier();
    return cluster_specifier_.cluster_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ForwardAction::set_allocated_cluster(::std::string* cluster) {
  if (!has_cluster()) {
    cluster_specifier_.cluster_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_cluster_specifier();
  if (cluster != NULL) {
    set_has_cluster();
    cluster_specifier_.cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        cluster);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.cluster)
}

// string cluster_header = 2;
inline bool ForwardAction::has_cluster_header() const {
  return cluster_specifier_case() == kClusterHeader;
}
inline void ForwardAction::set_has_cluster_header() {
  _oneof_case_[0] = kClusterHeader;
}
inline void ForwardAction::clear_cluster_header() {
  if (has_cluster_header()) {
    cluster_specifier_.cluster_header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_cluster_specifier();
  }
}
inline const ::std::string& ForwardAction::cluster_header() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.cluster_header)
  if (has_cluster_header()) {
    return cluster_specifier_.cluster_header_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ForwardAction::set_cluster_header(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.cluster_header)
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.cluster_header)
}
#if LANG_CXX11
inline void ForwardAction::set_cluster_header(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.cluster_header)
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.cluster_header)
}
#endif
inline void ForwardAction::set_cluster_header(const char* value) {
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.cluster_header)
}
inline void ForwardAction::set_cluster_header(const char* value, size_t size) {
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  cluster_specifier_.cluster_header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.cluster_header)
}
inline ::std::string* ForwardAction::mutable_cluster_header() {
  if (!has_cluster_header()) {
    clear_cluster_specifier();
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.cluster_header)
  return cluster_specifier_.cluster_header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardAction::release_cluster_header() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.cluster_header)
  if (has_cluster_header()) {
    clear_has_cluster_specifier();
    return cluster_specifier_.cluster_header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ForwardAction::set_allocated_cluster_header(::std::string* cluster_header) {
  if (!has_cluster_header()) {
    cluster_specifier_.cluster_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_cluster_specifier();
  if (cluster_header != NULL) {
    set_has_cluster_header();
    cluster_specifier_.cluster_header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        cluster_header);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.cluster_header)
}

// .envoy.api.v2.WeightedCluster weighted_clusters = 3;
inline bool ForwardAction::has_weighted_clusters() const {
  return cluster_specifier_case() == kWeightedClusters;
}
inline void ForwardAction::set_has_weighted_clusters() {
  _oneof_case_[0] = kWeightedClusters;
}
inline void ForwardAction::clear_weighted_clusters() {
  if (has_weighted_clusters()) {
    delete cluster_specifier_.weighted_clusters_;
    clear_has_cluster_specifier();
  }
}
inline  const ::envoy::api::v2::WeightedCluster& ForwardAction::weighted_clusters() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.weighted_clusters)
  return has_weighted_clusters()
      ? *cluster_specifier_.weighted_clusters_
      : ::envoy::api::v2::WeightedCluster::default_instance();
}
inline ::envoy::api::v2::WeightedCluster* ForwardAction::mutable_weighted_clusters() {
  if (!has_weighted_clusters()) {
    clear_cluster_specifier();
    set_has_weighted_clusters();
    cluster_specifier_.weighted_clusters_ = new ::envoy::api::v2::WeightedCluster;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.weighted_clusters)
  return cluster_specifier_.weighted_clusters_;
}
inline ::envoy::api::v2::WeightedCluster* ForwardAction::release_weighted_clusters() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.weighted_clusters)
  if (has_weighted_clusters()) {
    clear_has_cluster_specifier();
    ::envoy::api::v2::WeightedCluster* temp = cluster_specifier_.weighted_clusters_;
    cluster_specifier_.weighted_clusters_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ForwardAction::set_allocated_weighted_clusters(::envoy::api::v2::WeightedCluster* weighted_clusters) {
  clear_cluster_specifier();
  if (weighted_clusters) {
    set_has_weighted_clusters();
    cluster_specifier_.weighted_clusters_ = weighted_clusters;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.weighted_clusters)
}

// string prefix_rewrite = 4;
inline void ForwardAction::clear_prefix_rewrite() {
  prefix_rewrite_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ForwardAction::prefix_rewrite() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.prefix_rewrite)
  return prefix_rewrite_.GetNoArena();
}
inline void ForwardAction::set_prefix_rewrite(const ::std::string& value) {
  
  prefix_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.prefix_rewrite)
}
#if LANG_CXX11
inline void ForwardAction::set_prefix_rewrite(::std::string&& value) {
  
  prefix_rewrite_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.prefix_rewrite)
}
#endif
inline void ForwardAction::set_prefix_rewrite(const char* value) {
  
  prefix_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.prefix_rewrite)
}
inline void ForwardAction::set_prefix_rewrite(const char* value, size_t size) {
  
  prefix_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.prefix_rewrite)
}
inline ::std::string* ForwardAction::mutable_prefix_rewrite() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.prefix_rewrite)
  return prefix_rewrite_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardAction::release_prefix_rewrite() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.prefix_rewrite)
  
  return prefix_rewrite_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ForwardAction::set_allocated_prefix_rewrite(::std::string* prefix_rewrite) {
  if (prefix_rewrite != NULL) {
    
  } else {
    
  }
  prefix_rewrite_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix_rewrite);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.prefix_rewrite)
}

// string host_rewrite = 5;
inline bool ForwardAction::has_host_rewrite() const {
  return host_rewrite_specifier_case() == kHostRewrite;
}
inline void ForwardAction::set_has_host_rewrite() {
  _oneof_case_[1] = kHostRewrite;
}
inline void ForwardAction::clear_host_rewrite() {
  if (has_host_rewrite()) {
    host_rewrite_specifier_.host_rewrite_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_host_rewrite_specifier();
  }
}
inline const ::std::string& ForwardAction::host_rewrite() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.host_rewrite)
  if (has_host_rewrite()) {
    return host_rewrite_specifier_.host_rewrite_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ForwardAction::set_host_rewrite(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.host_rewrite)
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  host_rewrite_specifier_.host_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.host_rewrite)
}
#if LANG_CXX11
inline void ForwardAction::set_host_rewrite(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.host_rewrite)
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  host_rewrite_specifier_.host_rewrite_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.ForwardAction.host_rewrite)
}
#endif
inline void ForwardAction::set_host_rewrite(const char* value) {
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  host_rewrite_specifier_.host_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.ForwardAction.host_rewrite)
}
inline void ForwardAction::set_host_rewrite(const char* value, size_t size) {
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  host_rewrite_specifier_.host_rewrite_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.ForwardAction.host_rewrite)
}
inline ::std::string* ForwardAction::mutable_host_rewrite() {
  if (!has_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.host_rewrite)
  return host_rewrite_specifier_.host_rewrite_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ForwardAction::release_host_rewrite() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.host_rewrite)
  if (has_host_rewrite()) {
    clear_has_host_rewrite_specifier();
    return host_rewrite_specifier_.host_rewrite_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ForwardAction::set_allocated_host_rewrite(::std::string* host_rewrite) {
  if (!has_host_rewrite()) {
    host_rewrite_specifier_.host_rewrite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_host_rewrite_specifier();
  if (host_rewrite != NULL) {
    set_has_host_rewrite();
    host_rewrite_specifier_.host_rewrite_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        host_rewrite);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.host_rewrite)
}

// .google.protobuf.BoolValue auto_host_rewrite = 6;
inline bool ForwardAction::has_auto_host_rewrite() const {
  return host_rewrite_specifier_case() == kAutoHostRewrite;
}
inline void ForwardAction::set_has_auto_host_rewrite() {
  _oneof_case_[1] = kAutoHostRewrite;
}
inline void ForwardAction::clear_auto_host_rewrite() {
  if (has_auto_host_rewrite()) {
    delete host_rewrite_specifier_.auto_host_rewrite_;
    clear_has_host_rewrite_specifier();
  }
}
inline  const ::google::protobuf::BoolValue& ForwardAction::auto_host_rewrite() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.auto_host_rewrite)
  return has_auto_host_rewrite()
      ? *host_rewrite_specifier_.auto_host_rewrite_
      : ::google::protobuf::BoolValue::default_instance();
}
inline ::google::protobuf::BoolValue* ForwardAction::mutable_auto_host_rewrite() {
  if (!has_auto_host_rewrite()) {
    clear_host_rewrite_specifier();
    set_has_auto_host_rewrite();
    host_rewrite_specifier_.auto_host_rewrite_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.auto_host_rewrite)
  return host_rewrite_specifier_.auto_host_rewrite_;
}
inline ::google::protobuf::BoolValue* ForwardAction::release_auto_host_rewrite() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.auto_host_rewrite)
  if (has_auto_host_rewrite()) {
    clear_has_host_rewrite_specifier();
    ::google::protobuf::BoolValue* temp = host_rewrite_specifier_.auto_host_rewrite_;
    host_rewrite_specifier_.auto_host_rewrite_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ForwardAction::set_allocated_auto_host_rewrite(::google::protobuf::BoolValue* auto_host_rewrite) {
  clear_host_rewrite_specifier();
  if (auto_host_rewrite) {
    if (static_cast< ::google::protobuf::BoolValue*>(auto_host_rewrite)->GetArena() != NULL) {
      ::google::protobuf::BoolValue* new_auto_host_rewrite = new ::google::protobuf::BoolValue;
      new_auto_host_rewrite->CopyFrom(*auto_host_rewrite);
      auto_host_rewrite = new_auto_host_rewrite;
    }
    set_has_auto_host_rewrite();
    host_rewrite_specifier_.auto_host_rewrite_ = auto_host_rewrite;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.auto_host_rewrite)
}

// .google.protobuf.Duration timeout = 7;
inline bool ForwardAction::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
inline void ForwardAction::clear_timeout() {
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) delete timeout_;
  timeout_ = NULL;
}
inline const ::google::protobuf::Duration& ForwardAction::timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.timeout)
  return timeout_ != NULL ? *timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* ForwardAction::mutable_timeout() {
  
  if (timeout_ == NULL) {
    timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.timeout)
  return timeout_;
}
inline ::google::protobuf::Duration* ForwardAction::release_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
inline void ForwardAction::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  delete timeout_;
  if (timeout != NULL && timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_timeout = new ::google::protobuf::Duration;
    new_timeout->CopyFrom(*timeout);
    timeout = new_timeout;
  }
  timeout_ = timeout;
  if (timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.timeout)
}

// .envoy.api.v2.ForwardAction.RetryPolicy retry_policy = 8;
inline bool ForwardAction::has_retry_policy() const {
  return this != internal_default_instance() && retry_policy_ != NULL;
}
inline void ForwardAction::clear_retry_policy() {
  if (GetArenaNoVirtual() == NULL && retry_policy_ != NULL) delete retry_policy_;
  retry_policy_ = NULL;
}
inline const ::envoy::api::v2::ForwardAction_RetryPolicy& ForwardAction::retry_policy() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.retry_policy)
  return retry_policy_ != NULL ? *retry_policy_
                         : *::envoy::api::v2::ForwardAction_RetryPolicy::internal_default_instance();
}
inline ::envoy::api::v2::ForwardAction_RetryPolicy* ForwardAction::mutable_retry_policy() {
  
  if (retry_policy_ == NULL) {
    retry_policy_ = new ::envoy::api::v2::ForwardAction_RetryPolicy;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.retry_policy)
  return retry_policy_;
}
inline ::envoy::api::v2::ForwardAction_RetryPolicy* ForwardAction::release_retry_policy() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.retry_policy)
  
  ::envoy::api::v2::ForwardAction_RetryPolicy* temp = retry_policy_;
  retry_policy_ = NULL;
  return temp;
}
inline void ForwardAction::set_allocated_retry_policy(::envoy::api::v2::ForwardAction_RetryPolicy* retry_policy) {
  delete retry_policy_;
  retry_policy_ = retry_policy;
  if (retry_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.retry_policy)
}

// .envoy.api.v2.ForwardAction.RequestMirrorPolicy request_mirror_policy = 9;
inline bool ForwardAction::has_request_mirror_policy() const {
  return this != internal_default_instance() && request_mirror_policy_ != NULL;
}
inline void ForwardAction::clear_request_mirror_policy() {
  if (GetArenaNoVirtual() == NULL && request_mirror_policy_ != NULL) delete request_mirror_policy_;
  request_mirror_policy_ = NULL;
}
inline const ::envoy::api::v2::ForwardAction_RequestMirrorPolicy& ForwardAction::request_mirror_policy() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.request_mirror_policy)
  return request_mirror_policy_ != NULL ? *request_mirror_policy_
                         : *::envoy::api::v2::ForwardAction_RequestMirrorPolicy::internal_default_instance();
}
inline ::envoy::api::v2::ForwardAction_RequestMirrorPolicy* ForwardAction::mutable_request_mirror_policy() {
  
  if (request_mirror_policy_ == NULL) {
    request_mirror_policy_ = new ::envoy::api::v2::ForwardAction_RequestMirrorPolicy;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.request_mirror_policy)
  return request_mirror_policy_;
}
inline ::envoy::api::v2::ForwardAction_RequestMirrorPolicy* ForwardAction::release_request_mirror_policy() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.request_mirror_policy)
  
  ::envoy::api::v2::ForwardAction_RequestMirrorPolicy* temp = request_mirror_policy_;
  request_mirror_policy_ = NULL;
  return temp;
}
inline void ForwardAction::set_allocated_request_mirror_policy(::envoy::api::v2::ForwardAction_RequestMirrorPolicy* request_mirror_policy) {
  delete request_mirror_policy_;
  request_mirror_policy_ = request_mirror_policy;
  if (request_mirror_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.request_mirror_policy)
}

// .envoy.api.v2.RoutingPriority priority = 10;
inline void ForwardAction::clear_priority() {
  priority_ = 0;
}
inline ::envoy::api::v2::RoutingPriority ForwardAction::priority() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.priority)
  return static_cast< ::envoy::api::v2::RoutingPriority >(priority_);
}
inline void ForwardAction::set_priority(::envoy::api::v2::RoutingPriority value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.ForwardAction.priority)
}

// repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 11;
inline int ForwardAction::request_headers_to_add_size() const {
  return request_headers_to_add_.size();
}
inline void ForwardAction::clear_request_headers_to_add() {
  request_headers_to_add_.Clear();
}
inline const ::envoy::api::v2::HeaderValueOption& ForwardAction::request_headers_to_add(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.request_headers_to_add)
  return request_headers_to_add_.Get(index);
}
inline ::envoy::api::v2::HeaderValueOption* ForwardAction::mutable_request_headers_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.request_headers_to_add)
  return request_headers_to_add_.Mutable(index);
}
inline ::envoy::api::v2::HeaderValueOption* ForwardAction::add_request_headers_to_add() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.ForwardAction.request_headers_to_add)
  return request_headers_to_add_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
ForwardAction::mutable_request_headers_to_add() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.ForwardAction.request_headers_to_add)
  return &request_headers_to_add_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
ForwardAction::request_headers_to_add() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.ForwardAction.request_headers_to_add)
  return request_headers_to_add_;
}

// repeated .envoy.api.v2.RateLimit rate_limits = 12;
inline int ForwardAction::rate_limits_size() const {
  return rate_limits_.size();
}
inline void ForwardAction::clear_rate_limits() {
  rate_limits_.Clear();
}
inline const ::envoy::api::v2::RateLimit& ForwardAction::rate_limits(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.rate_limits)
  return rate_limits_.Get(index);
}
inline ::envoy::api::v2::RateLimit* ForwardAction::mutable_rate_limits(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.rate_limits)
  return rate_limits_.Mutable(index);
}
inline ::envoy::api::v2::RateLimit* ForwardAction::add_rate_limits() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.ForwardAction.rate_limits)
  return rate_limits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >*
ForwardAction::mutable_rate_limits() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.ForwardAction.rate_limits)
  return &rate_limits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >&
ForwardAction::rate_limits() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.ForwardAction.rate_limits)
  return rate_limits_;
}

// .google.protobuf.BoolValue include_vh_rate_limits = 13;
inline bool ForwardAction::has_include_vh_rate_limits() const {
  return this != internal_default_instance() && include_vh_rate_limits_ != NULL;
}
inline void ForwardAction::clear_include_vh_rate_limits() {
  if (GetArenaNoVirtual() == NULL && include_vh_rate_limits_ != NULL) delete include_vh_rate_limits_;
  include_vh_rate_limits_ = NULL;
}
inline const ::google::protobuf::BoolValue& ForwardAction::include_vh_rate_limits() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.include_vh_rate_limits)
  return include_vh_rate_limits_ != NULL ? *include_vh_rate_limits_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
inline ::google::protobuf::BoolValue* ForwardAction::mutable_include_vh_rate_limits() {
  
  if (include_vh_rate_limits_ == NULL) {
    include_vh_rate_limits_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.include_vh_rate_limits)
  return include_vh_rate_limits_;
}
inline ::google::protobuf::BoolValue* ForwardAction::release_include_vh_rate_limits() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.ForwardAction.include_vh_rate_limits)
  
  ::google::protobuf::BoolValue* temp = include_vh_rate_limits_;
  include_vh_rate_limits_ = NULL;
  return temp;
}
inline void ForwardAction::set_allocated_include_vh_rate_limits(::google::protobuf::BoolValue* include_vh_rate_limits) {
  delete include_vh_rate_limits_;
  if (include_vh_rate_limits != NULL && include_vh_rate_limits->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_include_vh_rate_limits = new ::google::protobuf::BoolValue;
    new_include_vh_rate_limits->CopyFrom(*include_vh_rate_limits);
    include_vh_rate_limits = new_include_vh_rate_limits;
  }
  include_vh_rate_limits_ = include_vh_rate_limits;
  if (include_vh_rate_limits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.ForwardAction.include_vh_rate_limits)
}

// repeated .envoy.api.v2.ForwardAction.HashPolicy hash_policy = 14;
inline int ForwardAction::hash_policy_size() const {
  return hash_policy_.size();
}
inline void ForwardAction::clear_hash_policy() {
  hash_policy_.Clear();
}
inline const ::envoy::api::v2::ForwardAction_HashPolicy& ForwardAction::hash_policy(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.ForwardAction.hash_policy)
  return hash_policy_.Get(index);
}
inline ::envoy::api::v2::ForwardAction_HashPolicy* ForwardAction::mutable_hash_policy(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.ForwardAction.hash_policy)
  return hash_policy_.Mutable(index);
}
inline ::envoy::api::v2::ForwardAction_HashPolicy* ForwardAction::add_hash_policy() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.ForwardAction.hash_policy)
  return hash_policy_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ForwardAction_HashPolicy >*
ForwardAction::mutable_hash_policy() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.ForwardAction.hash_policy)
  return &hash_policy_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::ForwardAction_HashPolicy >&
ForwardAction::hash_policy() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.ForwardAction.hash_policy)
  return hash_policy_;
}

inline bool ForwardAction::has_cluster_specifier() const {
  return cluster_specifier_case() != CLUSTER_SPECIFIER_NOT_SET;
}
inline void ForwardAction::clear_has_cluster_specifier() {
  _oneof_case_[0] = CLUSTER_SPECIFIER_NOT_SET;
}
inline bool ForwardAction::has_host_rewrite_specifier() const {
  return host_rewrite_specifier_case() != HOST_REWRITE_SPECIFIER_NOT_SET;
}
inline void ForwardAction::clear_has_host_rewrite_specifier() {
  _oneof_case_[1] = HOST_REWRITE_SPECIFIER_NOT_SET;
}
inline ForwardAction::ClusterSpecifierCase ForwardAction::cluster_specifier_case() const {
  return ForwardAction::ClusterSpecifierCase(_oneof_case_[0]);
}
inline ForwardAction::HostRewriteSpecifierCase ForwardAction::host_rewrite_specifier_case() const {
  return ForwardAction::HostRewriteSpecifierCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// RedirectAction

// string host_redirect = 1;
inline void RedirectAction::clear_host_redirect() {
  host_redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RedirectAction::host_redirect() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RedirectAction.host_redirect)
  return host_redirect_.GetNoArena();
}
inline void RedirectAction::set_host_redirect(const ::std::string& value) {
  
  host_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RedirectAction.host_redirect)
}
#if LANG_CXX11
inline void RedirectAction::set_host_redirect(::std::string&& value) {
  
  host_redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RedirectAction.host_redirect)
}
#endif
inline void RedirectAction::set_host_redirect(const char* value) {
  
  host_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RedirectAction.host_redirect)
}
inline void RedirectAction::set_host_redirect(const char* value, size_t size) {
  
  host_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RedirectAction.host_redirect)
}
inline ::std::string* RedirectAction::mutable_host_redirect() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RedirectAction.host_redirect)
  return host_redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedirectAction::release_host_redirect() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RedirectAction.host_redirect)
  
  return host_redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedirectAction::set_allocated_host_redirect(::std::string* host_redirect) {
  if (host_redirect != NULL) {
    
  } else {
    
  }
  host_redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_redirect);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RedirectAction.host_redirect)
}

// string path_redirect = 2;
inline void RedirectAction::clear_path_redirect() {
  path_redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RedirectAction::path_redirect() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RedirectAction.path_redirect)
  return path_redirect_.GetNoArena();
}
inline void RedirectAction::set_path_redirect(const ::std::string& value) {
  
  path_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RedirectAction.path_redirect)
}
#if LANG_CXX11
inline void RedirectAction::set_path_redirect(::std::string&& value) {
  
  path_redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RedirectAction.path_redirect)
}
#endif
inline void RedirectAction::set_path_redirect(const char* value) {
  
  path_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RedirectAction.path_redirect)
}
inline void RedirectAction::set_path_redirect(const char* value, size_t size) {
  
  path_redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RedirectAction.path_redirect)
}
inline ::std::string* RedirectAction::mutable_path_redirect() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RedirectAction.path_redirect)
  return path_redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedirectAction::release_path_redirect() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RedirectAction.path_redirect)
  
  return path_redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedirectAction::set_allocated_path_redirect(::std::string* path_redirect) {
  if (path_redirect != NULL) {
    
  } else {
    
  }
  path_redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_redirect);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RedirectAction.path_redirect)
}

// -------------------------------------------------------------------

// Route

// .envoy.api.v2.RouteMatch match = 1;
inline bool Route::has_match() const {
  return this != internal_default_instance() && match_ != NULL;
}
inline void Route::clear_match() {
  if (GetArenaNoVirtual() == NULL && match_ != NULL) delete match_;
  match_ = NULL;
}
inline const ::envoy::api::v2::RouteMatch& Route::match() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Route.match)
  return match_ != NULL ? *match_
                         : *::envoy::api::v2::RouteMatch::internal_default_instance();
}
inline ::envoy::api::v2::RouteMatch* Route::mutable_match() {
  
  if (match_ == NULL) {
    match_ = new ::envoy::api::v2::RouteMatch;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Route.match)
  return match_;
}
inline ::envoy::api::v2::RouteMatch* Route::release_match() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Route.match)
  
  ::envoy::api::v2::RouteMatch* temp = match_;
  match_ = NULL;
  return temp;
}
inline void Route::set_allocated_match(::envoy::api::v2::RouteMatch* match) {
  delete match_;
  match_ = match;
  if (match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Route.match)
}

// .envoy.api.v2.ForwardAction forward = 2;
inline bool Route::has_forward() const {
  return action_case() == kForward;
}
inline void Route::set_has_forward() {
  _oneof_case_[0] = kForward;
}
inline void Route::clear_forward() {
  if (has_forward()) {
    delete action_.forward_;
    clear_has_action();
  }
}
inline  const ::envoy::api::v2::ForwardAction& Route::forward() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Route.forward)
  return has_forward()
      ? *action_.forward_
      : ::envoy::api::v2::ForwardAction::default_instance();
}
inline ::envoy::api::v2::ForwardAction* Route::mutable_forward() {
  if (!has_forward()) {
    clear_action();
    set_has_forward();
    action_.forward_ = new ::envoy::api::v2::ForwardAction;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Route.forward)
  return action_.forward_;
}
inline ::envoy::api::v2::ForwardAction* Route::release_forward() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Route.forward)
  if (has_forward()) {
    clear_has_action();
    ::envoy::api::v2::ForwardAction* temp = action_.forward_;
    action_.forward_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Route::set_allocated_forward(::envoy::api::v2::ForwardAction* forward) {
  clear_action();
  if (forward) {
    set_has_forward();
    action_.forward_ = forward;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Route.forward)
}

// .envoy.api.v2.RedirectAction redirect = 3;
inline bool Route::has_redirect() const {
  return action_case() == kRedirect;
}
inline void Route::set_has_redirect() {
  _oneof_case_[0] = kRedirect;
}
inline void Route::clear_redirect() {
  if (has_redirect()) {
    delete action_.redirect_;
    clear_has_action();
  }
}
inline  const ::envoy::api::v2::RedirectAction& Route::redirect() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Route.redirect)
  return has_redirect()
      ? *action_.redirect_
      : ::envoy::api::v2::RedirectAction::default_instance();
}
inline ::envoy::api::v2::RedirectAction* Route::mutable_redirect() {
  if (!has_redirect()) {
    clear_action();
    set_has_redirect();
    action_.redirect_ = new ::envoy::api::v2::RedirectAction;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Route.redirect)
  return action_.redirect_;
}
inline ::envoy::api::v2::RedirectAction* Route::release_redirect() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Route.redirect)
  if (has_redirect()) {
    clear_has_action();
    ::envoy::api::v2::RedirectAction* temp = action_.redirect_;
    action_.redirect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Route::set_allocated_redirect(::envoy::api::v2::RedirectAction* redirect) {
  clear_action();
  if (redirect) {
    set_has_redirect();
    action_.redirect_ = redirect;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Route.redirect)
}

// .envoy.api.v2.Metadata metadata = 4;
inline bool Route::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline void Route::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::envoy::api::v2::Metadata& Route::metadata() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Route.metadata)
  return metadata_ != NULL ? *metadata_
                         : *::envoy::api::v2::Metadata::internal_default_instance();
}
inline ::envoy::api::v2::Metadata* Route::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::envoy::api::v2::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Route.metadata)
  return metadata_;
}
inline ::envoy::api::v2::Metadata* Route::release_metadata() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Route.metadata)
  
  ::envoy::api::v2::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void Route::set_allocated_metadata(::envoy::api::v2::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Route.metadata)
}

inline bool Route::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void Route::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline Route::ActionCase Route::action_case() const {
  return Route::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// VirtualCluster

// string pattern = 1;
inline void VirtualCluster::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VirtualCluster::pattern() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualCluster.pattern)
  return pattern_.GetNoArena();
}
inline void VirtualCluster::set_pattern(const ::std::string& value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualCluster.pattern)
}
#if LANG_CXX11
inline void VirtualCluster::set_pattern(::std::string&& value) {
  
  pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.VirtualCluster.pattern)
}
#endif
inline void VirtualCluster::set_pattern(const char* value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualCluster.pattern)
}
inline void VirtualCluster::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualCluster.pattern)
}
inline ::std::string* VirtualCluster::mutable_pattern() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualCluster.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VirtualCluster::release_pattern() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.VirtualCluster.pattern)
  
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VirtualCluster::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.VirtualCluster.pattern)
}

// string name = 2;
inline void VirtualCluster::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VirtualCluster::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualCluster.name)
  return name_.GetNoArena();
}
inline void VirtualCluster::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualCluster.name)
}
#if LANG_CXX11
inline void VirtualCluster::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.VirtualCluster.name)
}
#endif
inline void VirtualCluster::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualCluster.name)
}
inline void VirtualCluster::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualCluster.name)
}
inline ::std::string* VirtualCluster::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualCluster.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VirtualCluster::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.VirtualCluster.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VirtualCluster::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.VirtualCluster.name)
}

// string method = 3;
inline void VirtualCluster::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VirtualCluster::method() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualCluster.method)
  return method_.GetNoArena();
}
inline void VirtualCluster::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualCluster.method)
}
#if LANG_CXX11
inline void VirtualCluster::set_method(::std::string&& value) {
  
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.VirtualCluster.method)
}
#endif
inline void VirtualCluster::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualCluster.method)
}
inline void VirtualCluster::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualCluster.method)
}
inline ::std::string* VirtualCluster::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualCluster.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VirtualCluster::release_method() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.VirtualCluster.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VirtualCluster::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.VirtualCluster.method)
}

// -------------------------------------------------------------------

// RateLimit_RateLimitAction_RequestHeaders

// string header_name = 1;
inline void RateLimit_RateLimitAction_RequestHeaders::clear_header_name() {
  header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RateLimit_RateLimitAction_RequestHeaders::header_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
  return header_name_.GetNoArena();
}
inline void RateLimit_RateLimitAction_RequestHeaders::set_header_name(const ::std::string& value) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
}
#if LANG_CXX11
inline void RateLimit_RateLimitAction_RequestHeaders::set_header_name(::std::string&& value) {
  
  header_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
}
#endif
inline void RateLimit_RateLimitAction_RequestHeaders::set_header_name(const char* value) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
}
inline void RateLimit_RateLimitAction_RequestHeaders::set_header_name(const char* value, size_t size) {
  
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
}
inline ::std::string* RateLimit_RateLimitAction_RequestHeaders::mutable_header_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
  return header_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RateLimit_RateLimitAction_RequestHeaders::release_header_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
  
  return header_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RateLimit_RateLimitAction_RequestHeaders::set_allocated_header_name(::std::string* header_name) {
  if (header_name != NULL) {
    
  } else {
    
  }
  header_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.header_name)
}

// string descriptor_key = 2;
inline void RateLimit_RateLimitAction_RequestHeaders::clear_descriptor_key() {
  descriptor_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RateLimit_RateLimitAction_RequestHeaders::descriptor_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
  return descriptor_key_.GetNoArena();
}
inline void RateLimit_RateLimitAction_RequestHeaders::set_descriptor_key(const ::std::string& value) {
  
  descriptor_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
}
#if LANG_CXX11
inline void RateLimit_RateLimitAction_RequestHeaders::set_descriptor_key(::std::string&& value) {
  
  descriptor_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
}
#endif
inline void RateLimit_RateLimitAction_RequestHeaders::set_descriptor_key(const char* value) {
  
  descriptor_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
}
inline void RateLimit_RateLimitAction_RequestHeaders::set_descriptor_key(const char* value, size_t size) {
  
  descriptor_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
}
inline ::std::string* RateLimit_RateLimitAction_RequestHeaders::mutable_descriptor_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
  return descriptor_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RateLimit_RateLimitAction_RequestHeaders::release_descriptor_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
  
  return descriptor_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RateLimit_RateLimitAction_RequestHeaders::set_allocated_descriptor_key(::std::string* descriptor_key) {
  if (descriptor_key != NULL) {
    
  } else {
    
  }
  descriptor_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders.descriptor_key)
}

// -------------------------------------------------------------------

// RateLimit_RateLimitAction_HeaderValueMatch

// string descriptor_value = 1;
inline void RateLimit_RateLimitAction_HeaderValueMatch::clear_descriptor_value() {
  descriptor_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RateLimit_RateLimitAction_HeaderValueMatch::descriptor_value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
  return descriptor_value_.GetNoArena();
}
inline void RateLimit_RateLimitAction_HeaderValueMatch::set_descriptor_value(const ::std::string& value) {
  
  descriptor_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
}
#if LANG_CXX11
inline void RateLimit_RateLimitAction_HeaderValueMatch::set_descriptor_value(::std::string&& value) {
  
  descriptor_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
}
#endif
inline void RateLimit_RateLimitAction_HeaderValueMatch::set_descriptor_value(const char* value) {
  
  descriptor_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
}
inline void RateLimit_RateLimitAction_HeaderValueMatch::set_descriptor_value(const char* value, size_t size) {
  
  descriptor_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
}
inline ::std::string* RateLimit_RateLimitAction_HeaderValueMatch::mutable_descriptor_value() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
  return descriptor_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RateLimit_RateLimitAction_HeaderValueMatch::release_descriptor_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
  
  return descriptor_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RateLimit_RateLimitAction_HeaderValueMatch::set_allocated_descriptor_value(::std::string* descriptor_value) {
  if (descriptor_value != NULL) {
    
  } else {
    
  }
  descriptor_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptor_value);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.descriptor_value)
}

// .google.protobuf.BoolValue expect_match = 2;
inline bool RateLimit_RateLimitAction_HeaderValueMatch::has_expect_match() const {
  return this != internal_default_instance() && expect_match_ != NULL;
}
inline void RateLimit_RateLimitAction_HeaderValueMatch::clear_expect_match() {
  if (GetArenaNoVirtual() == NULL && expect_match_ != NULL) delete expect_match_;
  expect_match_ = NULL;
}
inline const ::google::protobuf::BoolValue& RateLimit_RateLimitAction_HeaderValueMatch::expect_match() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.expect_match)
  return expect_match_ != NULL ? *expect_match_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
inline ::google::protobuf::BoolValue* RateLimit_RateLimitAction_HeaderValueMatch::mutable_expect_match() {
  
  if (expect_match_ == NULL) {
    expect_match_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.expect_match)
  return expect_match_;
}
inline ::google::protobuf::BoolValue* RateLimit_RateLimitAction_HeaderValueMatch::release_expect_match() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.expect_match)
  
  ::google::protobuf::BoolValue* temp = expect_match_;
  expect_match_ = NULL;
  return temp;
}
inline void RateLimit_RateLimitAction_HeaderValueMatch::set_allocated_expect_match(::google::protobuf::BoolValue* expect_match) {
  delete expect_match_;
  if (expect_match != NULL && expect_match->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_expect_match = new ::google::protobuf::BoolValue;
    new_expect_match->CopyFrom(*expect_match);
    expect_match = new_expect_match;
  }
  expect_match_ = expect_match;
  if (expect_match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.expect_match)
}

// repeated .envoy.api.v2.HeaderMatcher headers = 3;
inline int RateLimit_RateLimitAction_HeaderValueMatch::headers_size() const {
  return headers_.size();
}
inline void RateLimit_RateLimitAction_HeaderValueMatch::clear_headers() {
  headers_.Clear();
}
inline const ::envoy::api::v2::HeaderMatcher& RateLimit_RateLimitAction_HeaderValueMatch::headers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.headers)
  return headers_.Get(index);
}
inline ::envoy::api::v2::HeaderMatcher* RateLimit_RateLimitAction_HeaderValueMatch::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.headers)
  return headers_.Mutable(index);
}
inline ::envoy::api::v2::HeaderMatcher* RateLimit_RateLimitAction_HeaderValueMatch::add_headers() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >*
RateLimit_RateLimitAction_HeaderValueMatch::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderMatcher >&
RateLimit_RateLimitAction_HeaderValueMatch::headers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch.headers)
  return headers_;
}

// -------------------------------------------------------------------

// RateLimit_RateLimitAction

// .envoy.api.v2.RateLimit.RateLimitAction.ActionType type = 1;
inline void RateLimit_RateLimitAction::clear_type() {
  type_ = 0;
}
inline ::envoy::api::v2::RateLimit_RateLimitAction_ActionType RateLimit_RateLimitAction::type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.type)
  return static_cast< ::envoy::api::v2::RateLimit_RateLimitAction_ActionType >(type_);
}
inline void RateLimit_RateLimitAction::set_type(::envoy::api::v2::RateLimit_RateLimitAction_ActionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.type)
}

// .envoy.api.v2.RateLimit.RateLimitAction.RequestHeaders request_headers = 2;
inline bool RateLimit_RateLimitAction::has_request_headers() const {
  return action_details_case() == kRequestHeaders;
}
inline void RateLimit_RateLimitAction::set_has_request_headers() {
  _oneof_case_[0] = kRequestHeaders;
}
inline void RateLimit_RateLimitAction::clear_request_headers() {
  if (has_request_headers()) {
    delete action_details_.request_headers_;
    clear_has_action_details();
  }
}
inline  const ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders& RateLimit_RateLimitAction::request_headers() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.request_headers)
  return has_request_headers()
      ? *action_details_.request_headers_
      : ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders::default_instance();
}
inline ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders* RateLimit_RateLimitAction::mutable_request_headers() {
  if (!has_request_headers()) {
    clear_action_details();
    set_has_request_headers();
    action_details_.request_headers_ = new ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.request_headers)
  return action_details_.request_headers_;
}
inline ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders* RateLimit_RateLimitAction::release_request_headers() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.request_headers)
  if (has_request_headers()) {
    clear_has_action_details();
    ::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders* temp = action_details_.request_headers_;
    action_details_.request_headers_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RateLimit_RateLimitAction::set_allocated_request_headers(::envoy::api::v2::RateLimit_RateLimitAction_RequestHeaders* request_headers) {
  clear_action_details();
  if (request_headers) {
    set_has_request_headers();
    action_details_.request_headers_ = request_headers;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.request_headers)
}

// string generic_key = 3;
inline bool RateLimit_RateLimitAction::has_generic_key() const {
  return action_details_case() == kGenericKey;
}
inline void RateLimit_RateLimitAction::set_has_generic_key() {
  _oneof_case_[0] = kGenericKey;
}
inline void RateLimit_RateLimitAction::clear_generic_key() {
  if (has_generic_key()) {
    action_details_.generic_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_action_details();
  }
}
inline const ::std::string& RateLimit_RateLimitAction::generic_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
  if (has_generic_key()) {
    return action_details_.generic_key_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RateLimit_RateLimitAction::set_generic_key(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
  if (!has_generic_key()) {
    clear_action_details();
    set_has_generic_key();
    action_details_.generic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  action_details_.generic_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
}
#if LANG_CXX11
inline void RateLimit_RateLimitAction::set_generic_key(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
  if (!has_generic_key()) {
    clear_action_details();
    set_has_generic_key();
    action_details_.generic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  action_details_.generic_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
}
#endif
inline void RateLimit_RateLimitAction::set_generic_key(const char* value) {
  if (!has_generic_key()) {
    clear_action_details();
    set_has_generic_key();
    action_details_.generic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  action_details_.generic_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
}
inline void RateLimit_RateLimitAction::set_generic_key(const char* value, size_t size) {
  if (!has_generic_key()) {
    clear_action_details();
    set_has_generic_key();
    action_details_.generic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  action_details_.generic_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
}
inline ::std::string* RateLimit_RateLimitAction::mutable_generic_key() {
  if (!has_generic_key()) {
    clear_action_details();
    set_has_generic_key();
    action_details_.generic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
  return action_details_.generic_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RateLimit_RateLimitAction::release_generic_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
  if (has_generic_key()) {
    clear_has_action_details();
    return action_details_.generic_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RateLimit_RateLimitAction::set_allocated_generic_key(::std::string* generic_key) {
  if (!has_generic_key()) {
    action_details_.generic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_action_details();
  if (generic_key != NULL) {
    set_has_generic_key();
    action_details_.generic_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        generic_key);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.generic_key)
}

// .envoy.api.v2.RateLimit.RateLimitAction.HeaderValueMatch header_value_match = 4;
inline bool RateLimit_RateLimitAction::has_header_value_match() const {
  return action_details_case() == kHeaderValueMatch;
}
inline void RateLimit_RateLimitAction::set_has_header_value_match() {
  _oneof_case_[0] = kHeaderValueMatch;
}
inline void RateLimit_RateLimitAction::clear_header_value_match() {
  if (has_header_value_match()) {
    delete action_details_.header_value_match_;
    clear_has_action_details();
  }
}
inline  const ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch& RateLimit_RateLimitAction::header_value_match() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.RateLimitAction.header_value_match)
  return has_header_value_match()
      ? *action_details_.header_value_match_
      : ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch::default_instance();
}
inline ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch* RateLimit_RateLimitAction::mutable_header_value_match() {
  if (!has_header_value_match()) {
    clear_action_details();
    set_has_header_value_match();
    action_details_.header_value_match_ = new ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.RateLimitAction.header_value_match)
  return action_details_.header_value_match_;
}
inline ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch* RateLimit_RateLimitAction::release_header_value_match() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.RateLimitAction.header_value_match)
  if (has_header_value_match()) {
    clear_has_action_details();
    ::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch* temp = action_details_.header_value_match_;
    action_details_.header_value_match_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RateLimit_RateLimitAction::set_allocated_header_value_match(::envoy::api::v2::RateLimit_RateLimitAction_HeaderValueMatch* header_value_match) {
  clear_action_details();
  if (header_value_match) {
    set_has_header_value_match();
    action_details_.header_value_match_ = header_value_match;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.RateLimitAction.header_value_match)
}

inline bool RateLimit_RateLimitAction::has_action_details() const {
  return action_details_case() != ACTION_DETAILS_NOT_SET;
}
inline void RateLimit_RateLimitAction::clear_has_action_details() {
  _oneof_case_[0] = ACTION_DETAILS_NOT_SET;
}
inline RateLimit_RateLimitAction::ActionDetailsCase RateLimit_RateLimitAction::action_details_case() const {
  return RateLimit_RateLimitAction::ActionDetailsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RateLimit

// .google.protobuf.UInt32Value stage = 1;
inline bool RateLimit::has_stage() const {
  return this != internal_default_instance() && stage_ != NULL;
}
inline void RateLimit::clear_stage() {
  if (GetArenaNoVirtual() == NULL && stage_ != NULL) delete stage_;
  stage_ = NULL;
}
inline const ::google::protobuf::UInt32Value& RateLimit::stage() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.stage)
  return stage_ != NULL ? *stage_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* RateLimit::mutable_stage() {
  
  if (stage_ == NULL) {
    stage_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.stage)
  return stage_;
}
inline ::google::protobuf::UInt32Value* RateLimit::release_stage() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.stage)
  
  ::google::protobuf::UInt32Value* temp = stage_;
  stage_ = NULL;
  return temp;
}
inline void RateLimit::set_allocated_stage(::google::protobuf::UInt32Value* stage) {
  delete stage_;
  if (stage != NULL && stage->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_stage = new ::google::protobuf::UInt32Value;
    new_stage->CopyFrom(*stage);
    stage = new_stage;
  }
  stage_ = stage;
  if (stage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.stage)
}

// string disable_key = 2;
inline void RateLimit::clear_disable_key() {
  disable_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RateLimit::disable_key() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.disable_key)
  return disable_key_.GetNoArena();
}
inline void RateLimit::set_disable_key(const ::std::string& value) {
  
  disable_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.RateLimit.disable_key)
}
#if LANG_CXX11
inline void RateLimit::set_disable_key(::std::string&& value) {
  
  disable_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.RateLimit.disable_key)
}
#endif
inline void RateLimit::set_disable_key(const char* value) {
  
  disable_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RateLimit.disable_key)
}
inline void RateLimit::set_disable_key(const char* value, size_t size) {
  
  disable_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RateLimit.disable_key)
}
inline ::std::string* RateLimit::mutable_disable_key() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.disable_key)
  return disable_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RateLimit::release_disable_key() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.RateLimit.disable_key)
  
  return disable_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RateLimit::set_allocated_disable_key(::std::string* disable_key) {
  if (disable_key != NULL) {
    
  } else {
    
  }
  disable_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disable_key);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.RateLimit.disable_key)
}

// repeated .envoy.api.v2.RateLimit.RateLimitAction actions = 3;
inline int RateLimit::actions_size() const {
  return actions_.size();
}
inline void RateLimit::clear_actions() {
  actions_.Clear();
}
inline const ::envoy::api::v2::RateLimit_RateLimitAction& RateLimit::actions(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RateLimit.actions)
  return actions_.Get(index);
}
inline ::envoy::api::v2::RateLimit_RateLimitAction* RateLimit::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RateLimit.actions)
  return actions_.Mutable(index);
}
inline ::envoy::api::v2::RateLimit_RateLimitAction* RateLimit::add_actions() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RateLimit.actions)
  return actions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit_RateLimitAction >*
RateLimit::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RateLimit.actions)
  return &actions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit_RateLimitAction >&
RateLimit::actions() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RateLimit.actions)
  return actions_;
}

// -------------------------------------------------------------------

// HeaderMatcher

// string name = 1;
inline void HeaderMatcher::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderMatcher::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HeaderMatcher.name)
  return name_.GetNoArena();
}
inline void HeaderMatcher::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HeaderMatcher.name)
}
#if LANG_CXX11
inline void HeaderMatcher::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HeaderMatcher.name)
}
#endif
inline void HeaderMatcher::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HeaderMatcher.name)
}
inline void HeaderMatcher::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HeaderMatcher.name)
}
inline ::std::string* HeaderMatcher::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HeaderMatcher.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderMatcher::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HeaderMatcher.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderMatcher::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HeaderMatcher.name)
}

// string value = 2;
inline void HeaderMatcher::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderMatcher::value() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HeaderMatcher.value)
  return value_.GetNoArena();
}
inline void HeaderMatcher::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HeaderMatcher.value)
}
#if LANG_CXX11
inline void HeaderMatcher::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HeaderMatcher.value)
}
#endif
inline void HeaderMatcher::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HeaderMatcher.value)
}
inline void HeaderMatcher::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HeaderMatcher.value)
}
inline ::std::string* HeaderMatcher::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HeaderMatcher.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderMatcher::release_value() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HeaderMatcher.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderMatcher::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HeaderMatcher.value)
}

// .google.protobuf.BoolValue regex = 3;
inline bool HeaderMatcher::has_regex() const {
  return this != internal_default_instance() && regex_ != NULL;
}
inline void HeaderMatcher::clear_regex() {
  if (GetArenaNoVirtual() == NULL && regex_ != NULL) delete regex_;
  regex_ = NULL;
}
inline const ::google::protobuf::BoolValue& HeaderMatcher::regex() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HeaderMatcher.regex)
  return regex_ != NULL ? *regex_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
inline ::google::protobuf::BoolValue* HeaderMatcher::mutable_regex() {
  
  if (regex_ == NULL) {
    regex_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HeaderMatcher.regex)
  return regex_;
}
inline ::google::protobuf::BoolValue* HeaderMatcher::release_regex() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HeaderMatcher.regex)
  
  ::google::protobuf::BoolValue* temp = regex_;
  regex_ = NULL;
  return temp;
}
inline void HeaderMatcher::set_allocated_regex(::google::protobuf::BoolValue* regex) {
  delete regex_;
  if (regex != NULL && regex->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_regex = new ::google::protobuf::BoolValue;
    new_regex->CopyFrom(*regex);
    regex = new_regex;
  }
  regex_ = regex;
  if (regex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HeaderMatcher.regex)
}

// -------------------------------------------------------------------

// VirtualHost

// string name = 1;
inline void VirtualHost::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VirtualHost::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.name)
  return name_.GetNoArena();
}
inline void VirtualHost::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualHost.name)
}
#if LANG_CXX11
inline void VirtualHost::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.VirtualHost.name)
}
#endif
inline void VirtualHost::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualHost.name)
}
inline void VirtualHost::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualHost.name)
}
inline ::std::string* VirtualHost::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VirtualHost::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.VirtualHost.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VirtualHost::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.VirtualHost.name)
}

// repeated string domains = 2;
inline int VirtualHost::domains_size() const {
  return domains_.size();
}
inline void VirtualHost::clear_domains() {
  domains_.Clear();
}
inline const ::std::string& VirtualHost::domains(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.domains)
  return domains_.Get(index);
}
inline ::std::string* VirtualHost::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.domains)
  return domains_.Mutable(index);
}
inline void VirtualHost::set_domains(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualHost.domains)
  domains_.Mutable(index)->assign(value);
}
inline void VirtualHost::set_domains(int index, const char* value) {
  domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.VirtualHost.domains)
}
inline void VirtualHost::set_domains(int index, const char* value, size_t size) {
  domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.VirtualHost.domains)
}
inline ::std::string* VirtualHost::add_domains() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.VirtualHost.domains)
  return domains_.Add();
}
inline void VirtualHost::add_domains(const ::std::string& value) {
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.domains)
}
inline void VirtualHost::add_domains(const char* value) {
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.VirtualHost.domains)
}
inline void VirtualHost::add_domains(const char* value, size_t size) {
  domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.VirtualHost.domains)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VirtualHost::domains() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VirtualHost::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.domains)
  return &domains_;
}

// repeated .envoy.api.v2.Route routes = 3;
inline int VirtualHost::routes_size() const {
  return routes_.size();
}
inline void VirtualHost::clear_routes() {
  routes_.Clear();
}
inline const ::envoy::api::v2::Route& VirtualHost::routes(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.routes)
  return routes_.Get(index);
}
inline ::envoy::api::v2::Route* VirtualHost::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.routes)
  return routes_.Mutable(index);
}
inline ::envoy::api::v2::Route* VirtualHost::add_routes() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.routes)
  return routes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Route >*
VirtualHost::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.routes)
  return &routes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Route >&
VirtualHost::routes() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.routes)
  return routes_;
}

// .envoy.api.v2.VirtualHost.TlsRequirementType require_tls = 4;
inline void VirtualHost::clear_require_tls() {
  require_tls_ = 0;
}
inline ::envoy::api::v2::VirtualHost_TlsRequirementType VirtualHost::require_tls() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.require_tls)
  return static_cast< ::envoy::api::v2::VirtualHost_TlsRequirementType >(require_tls_);
}
inline void VirtualHost::set_require_tls(::envoy::api::v2::VirtualHost_TlsRequirementType value) {
  
  require_tls_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.VirtualHost.require_tls)
}

// repeated .envoy.api.v2.VirtualCluster virtual_clusters = 5;
inline int VirtualHost::virtual_clusters_size() const {
  return virtual_clusters_.size();
}
inline void VirtualHost::clear_virtual_clusters() {
  virtual_clusters_.Clear();
}
inline const ::envoy::api::v2::VirtualCluster& VirtualHost::virtual_clusters(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.virtual_clusters)
  return virtual_clusters_.Get(index);
}
inline ::envoy::api::v2::VirtualCluster* VirtualHost::mutable_virtual_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.virtual_clusters)
  return virtual_clusters_.Mutable(index);
}
inline ::envoy::api::v2::VirtualCluster* VirtualHost::add_virtual_clusters() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.virtual_clusters)
  return virtual_clusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualCluster >*
VirtualHost::mutable_virtual_clusters() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.virtual_clusters)
  return &virtual_clusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualCluster >&
VirtualHost::virtual_clusters() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.virtual_clusters)
  return virtual_clusters_;
}

// repeated .envoy.api.v2.RateLimit rate_limits = 6;
inline int VirtualHost::rate_limits_size() const {
  return rate_limits_.size();
}
inline void VirtualHost::clear_rate_limits() {
  rate_limits_.Clear();
}
inline const ::envoy::api::v2::RateLimit& VirtualHost::rate_limits(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.rate_limits)
  return rate_limits_.Get(index);
}
inline ::envoy::api::v2::RateLimit* VirtualHost::mutable_rate_limits(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.rate_limits)
  return rate_limits_.Mutable(index);
}
inline ::envoy::api::v2::RateLimit* VirtualHost::add_rate_limits() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.rate_limits)
  return rate_limits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >*
VirtualHost::mutable_rate_limits() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.rate_limits)
  return &rate_limits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::RateLimit >&
VirtualHost::rate_limits() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.rate_limits)
  return rate_limits_;
}

// repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 7;
inline int VirtualHost::request_headers_to_add_size() const {
  return request_headers_to_add_.size();
}
inline void VirtualHost::clear_request_headers_to_add() {
  request_headers_to_add_.Clear();
}
inline const ::envoy::api::v2::HeaderValueOption& VirtualHost::request_headers_to_add(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.VirtualHost.request_headers_to_add)
  return request_headers_to_add_.Get(index);
}
inline ::envoy::api::v2::HeaderValueOption* VirtualHost::mutable_request_headers_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.VirtualHost.request_headers_to_add)
  return request_headers_to_add_.Mutable(index);
}
inline ::envoy::api::v2::HeaderValueOption* VirtualHost::add_request_headers_to_add() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.VirtualHost.request_headers_to_add)
  return request_headers_to_add_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
VirtualHost::mutable_request_headers_to_add() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.VirtualHost.request_headers_to_add)
  return &request_headers_to_add_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
VirtualHost::request_headers_to_add() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.VirtualHost.request_headers_to_add)
  return request_headers_to_add_;
}

// -------------------------------------------------------------------

// RouteConfiguration

// repeated .envoy.api.v2.VirtualHost virtual_hosts = 1;
inline int RouteConfiguration::virtual_hosts_size() const {
  return virtual_hosts_.size();
}
inline void RouteConfiguration::clear_virtual_hosts() {
  virtual_hosts_.Clear();
}
inline const ::envoy::api::v2::VirtualHost& RouteConfiguration::virtual_hosts(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return virtual_hosts_.Get(index);
}
inline ::envoy::api::v2::VirtualHost* RouteConfiguration::mutable_virtual_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return virtual_hosts_.Mutable(index);
}
inline ::envoy::api::v2::VirtualHost* RouteConfiguration::add_virtual_hosts() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return virtual_hosts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualHost >*
RouteConfiguration::mutable_virtual_hosts() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return &virtual_hosts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::VirtualHost >&
RouteConfiguration::virtual_hosts() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.virtual_hosts)
  return virtual_hosts_;
}

// repeated string internal_only_headers = 2;
inline int RouteConfiguration::internal_only_headers_size() const {
  return internal_only_headers_.size();
}
inline void RouteConfiguration::clear_internal_only_headers() {
  internal_only_headers_.Clear();
}
inline const ::std::string& RouteConfiguration::internal_only_headers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return internal_only_headers_.Get(index);
}
inline ::std::string* RouteConfiguration::mutable_internal_only_headers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return internal_only_headers_.Mutable(index);
}
inline void RouteConfiguration::set_internal_only_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteConfiguration.internal_only_headers)
  internal_only_headers_.Mutable(index)->assign(value);
}
inline void RouteConfiguration::set_internal_only_headers(int index, const char* value) {
  internal_only_headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
inline void RouteConfiguration::set_internal_only_headers(int index, const char* value, size_t size) {
  internal_only_headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
inline ::std::string* RouteConfiguration::add_internal_only_headers() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return internal_only_headers_.Add();
}
inline void RouteConfiguration::add_internal_only_headers(const ::std::string& value) {
  internal_only_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
inline void RouteConfiguration::add_internal_only_headers(const char* value) {
  internal_only_headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
inline void RouteConfiguration::add_internal_only_headers(const char* value, size_t size) {
  internal_only_headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.RouteConfiguration.internal_only_headers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RouteConfiguration::internal_only_headers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return internal_only_headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RouteConfiguration::mutable_internal_only_headers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.internal_only_headers)
  return &internal_only_headers_;
}

// repeated .envoy.api.v2.HeaderValueOption response_headers_to_add = 3;
inline int RouteConfiguration::response_headers_to_add_size() const {
  return response_headers_to_add_.size();
}
inline void RouteConfiguration::clear_response_headers_to_add() {
  response_headers_to_add_.Clear();
}
inline const ::envoy::api::v2::HeaderValueOption& RouteConfiguration::response_headers_to_add(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return response_headers_to_add_.Get(index);
}
inline ::envoy::api::v2::HeaderValueOption* RouteConfiguration::mutable_response_headers_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return response_headers_to_add_.Mutable(index);
}
inline ::envoy::api::v2::HeaderValueOption* RouteConfiguration::add_response_headers_to_add() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return response_headers_to_add_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
RouteConfiguration::mutable_response_headers_to_add() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return &response_headers_to_add_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
RouteConfiguration::response_headers_to_add() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.response_headers_to_add)
  return response_headers_to_add_;
}

// repeated string response_headers_to_remove = 4;
inline int RouteConfiguration::response_headers_to_remove_size() const {
  return response_headers_to_remove_.size();
}
inline void RouteConfiguration::clear_response_headers_to_remove() {
  response_headers_to_remove_.Clear();
}
inline const ::std::string& RouteConfiguration::response_headers_to_remove(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return response_headers_to_remove_.Get(index);
}
inline ::std::string* RouteConfiguration::mutable_response_headers_to_remove(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return response_headers_to_remove_.Mutable(index);
}
inline void RouteConfiguration::set_response_headers_to_remove(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  response_headers_to_remove_.Mutable(index)->assign(value);
}
inline void RouteConfiguration::set_response_headers_to_remove(int index, const char* value) {
  response_headers_to_remove_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
inline void RouteConfiguration::set_response_headers_to_remove(int index, const char* value, size_t size) {
  response_headers_to_remove_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
inline ::std::string* RouteConfiguration::add_response_headers_to_remove() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return response_headers_to_remove_.Add();
}
inline void RouteConfiguration::add_response_headers_to_remove(const ::std::string& value) {
  response_headers_to_remove_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
inline void RouteConfiguration::add_response_headers_to_remove(const char* value) {
  response_headers_to_remove_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
inline void RouteConfiguration::add_response_headers_to_remove(const char* value, size_t size) {
  response_headers_to_remove_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RouteConfiguration::response_headers_to_remove() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return response_headers_to_remove_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RouteConfiguration::mutable_response_headers_to_remove() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.response_headers_to_remove)
  return &response_headers_to_remove_;
}

// repeated .envoy.api.v2.HeaderValueOption request_headers_to_add = 5;
inline int RouteConfiguration::request_headers_to_add_size() const {
  return request_headers_to_add_.size();
}
inline void RouteConfiguration::clear_request_headers_to_add() {
  request_headers_to_add_.Clear();
}
inline const ::envoy::api::v2::HeaderValueOption& RouteConfiguration::request_headers_to_add(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return request_headers_to_add_.Get(index);
}
inline ::envoy::api::v2::HeaderValueOption* RouteConfiguration::mutable_request_headers_to_add(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return request_headers_to_add_.Mutable(index);
}
inline ::envoy::api::v2::HeaderValueOption* RouteConfiguration::add_request_headers_to_add() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return request_headers_to_add_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >*
RouteConfiguration::mutable_request_headers_to_add() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return &request_headers_to_add_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HeaderValueOption >&
RouteConfiguration::request_headers_to_add() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.RouteConfiguration.request_headers_to_add)
  return request_headers_to_add_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v2
}  // namespace api
}  // namespace envoy

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::envoy::api::v2::RateLimit_RateLimitAction_ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::RateLimit_RateLimitAction_ActionType>() {
  return ::envoy::api::v2::RateLimit_RateLimitAction_ActionType_descriptor();
}
template <> struct is_proto_enum< ::envoy::api::v2::VirtualHost_TlsRequirementType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::VirtualHost_TlsRequirementType>() {
  return ::envoy::api::v2::VirtualHost_TlsRequirementType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2frds_2eproto__INCLUDED
