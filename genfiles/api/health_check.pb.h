// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/health_check.proto

#ifndef PROTOBUF_api_2fhealth_5fcheck_2eproto__INCLUDED
#define PROTOBUF_api_2fhealth_5fcheck_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
class HealthCheck;
class HealthCheckDefaultTypeInternal;
extern HealthCheckDefaultTypeInternal _HealthCheck_default_instance_;
class HealthCheck_HttpHealthCheck;
class HealthCheck_HttpHealthCheckDefaultTypeInternal;
extern HealthCheck_HttpHealthCheckDefaultTypeInternal _HealthCheck_HttpHealthCheck_default_instance_;
class HealthCheck_Payload;
class HealthCheck_PayloadDefaultTypeInternal;
extern HealthCheck_PayloadDefaultTypeInternal _HealthCheck_Payload_default_instance_;
class HealthCheck_RedisHealthCheck;
class HealthCheck_RedisHealthCheckDefaultTypeInternal;
extern HealthCheck_RedisHealthCheckDefaultTypeInternal _HealthCheck_RedisHealthCheck_default_instance_;
class HealthCheck_TcpHealthCheck;
class HealthCheck_TcpHealthCheckDefaultTypeInternal;
extern HealthCheck_TcpHealthCheckDefaultTypeInternal _HealthCheck_TcpHealthCheck_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace envoy
namespace google {
namespace protobuf {
class BoolValue;
class BoolValueDefaultTypeInternal;
extern BoolValueDefaultTypeInternal _BoolValue_default_instance_;
class BytesValue;
class BytesValueDefaultTypeInternal;
extern BytesValueDefaultTypeInternal _BytesValue_default_instance_;
class DoubleValue;
class DoubleValueDefaultTypeInternal;
extern DoubleValueDefaultTypeInternal _DoubleValue_default_instance_;
class Duration;
class DurationDefaultTypeInternal;
extern DurationDefaultTypeInternal _Duration_default_instance_;
class FloatValue;
class FloatValueDefaultTypeInternal;
extern FloatValueDefaultTypeInternal _FloatValue_default_instance_;
class Int32Value;
class Int32ValueDefaultTypeInternal;
extern Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
class Int64Value;
class Int64ValueDefaultTypeInternal;
extern Int64ValueDefaultTypeInternal _Int64Value_default_instance_;
class StringValue;
class StringValueDefaultTypeInternal;
extern StringValueDefaultTypeInternal _StringValue_default_instance_;
class UInt32Value;
class UInt32ValueDefaultTypeInternal;
extern UInt32ValueDefaultTypeInternal _UInt32Value_default_instance_;
class UInt64Value;
class UInt64ValueDefaultTypeInternal;
extern UInt64ValueDefaultTypeInternal _UInt64Value_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace envoy {
namespace api {
namespace v2 {

namespace protobuf_api_2fhealth_5fcheck_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_api_2fhealth_5fcheck_2eproto

enum HealthStatus {
  UNKNOWN = 0,
  HEALTHY = 1,
  UNHEALTHY = 2,
  DRAINING = 3,
  TIMEOUT = 4,
  HealthStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HealthStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HealthStatus_IsValid(int value);
const HealthStatus HealthStatus_MIN = UNKNOWN;
const HealthStatus HealthStatus_MAX = TIMEOUT;
const int HealthStatus_ARRAYSIZE = HealthStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* HealthStatus_descriptor();
inline const ::std::string& HealthStatus_Name(HealthStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    HealthStatus_descriptor(), value);
}
inline bool HealthStatus_Parse(
    const ::std::string& name, HealthStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HealthStatus>(
    HealthStatus_descriptor(), name, value);
}
// ===================================================================

class HealthCheck_Payload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.HealthCheck.Payload) */ {
 public:
  HealthCheck_Payload();
  virtual ~HealthCheck_Payload();

  HealthCheck_Payload(const HealthCheck_Payload& from);

  inline HealthCheck_Payload& operator=(const HealthCheck_Payload& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HealthCheck_Payload& default_instance();

  enum PayloadCase {
    kText = 1,
    kBinary = 2,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const HealthCheck_Payload* internal_default_instance() {
    return reinterpret_cast<const HealthCheck_Payload*>(
               &_HealthCheck_Payload_default_instance_);
  }

  void Swap(HealthCheck_Payload* other);

  // implements Message ----------------------------------------------

  inline HealthCheck_Payload* New() const PROTOBUF_FINAL { return New(NULL); }

  HealthCheck_Payload* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HealthCheck_Payload& from);
  void MergeFrom(const HealthCheck_Payload& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HealthCheck_Payload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  private:
  bool has_text() const;
  public:
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // bytes binary = 2;
  private:
  bool has_binary() const;
  public:
  void clear_binary();
  static const int kBinaryFieldNumber = 2;
  const ::std::string& binary() const;
  void set_binary(const ::std::string& value);
  #if LANG_CXX11
  void set_binary(::std::string&& value);
  #endif
  void set_binary(const char* value);
  void set_binary(const void* value, size_t size);
  ::std::string* mutable_binary();
  ::std::string* release_binary();
  void set_allocated_binary(::std::string* binary);

  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.HealthCheck.Payload)
 private:
  void set_has_text();
  void set_has_binary();

  inline bool has_payload() const;
  void clear_payload();
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PayloadUnion {
    PayloadUnion() {}
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::ArenaStringPtr binary_;
  } payload_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_api_2fhealth_5fcheck_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HealthCheck_HttpHealthCheck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.HealthCheck.HttpHealthCheck) */ {
 public:
  HealthCheck_HttpHealthCheck();
  virtual ~HealthCheck_HttpHealthCheck();

  HealthCheck_HttpHealthCheck(const HealthCheck_HttpHealthCheck& from);

  inline HealthCheck_HttpHealthCheck& operator=(const HealthCheck_HttpHealthCheck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HealthCheck_HttpHealthCheck& default_instance();

  static inline const HealthCheck_HttpHealthCheck* internal_default_instance() {
    return reinterpret_cast<const HealthCheck_HttpHealthCheck*>(
               &_HealthCheck_HttpHealthCheck_default_instance_);
  }

  void Swap(HealthCheck_HttpHealthCheck* other);

  // implements Message ----------------------------------------------

  inline HealthCheck_HttpHealthCheck* New() const PROTOBUF_FINAL { return New(NULL); }

  HealthCheck_HttpHealthCheck* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HealthCheck_HttpHealthCheck& from);
  void MergeFrom(const HealthCheck_HttpHealthCheck& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HealthCheck_HttpHealthCheck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .envoy.api.v2.HealthCheck.Payload send = 3;
  bool has_send() const;
  void clear_send();
  static const int kSendFieldNumber = 3;
  const ::envoy::api::v2::HealthCheck_Payload& send() const;
  ::envoy::api::v2::HealthCheck_Payload* mutable_send();
  ::envoy::api::v2::HealthCheck_Payload* release_send();
  void set_allocated_send(::envoy::api::v2::HealthCheck_Payload* send);

  // .envoy.api.v2.HealthCheck.Payload receive = 4;
  bool has_receive() const;
  void clear_receive();
  static const int kReceiveFieldNumber = 4;
  const ::envoy::api::v2::HealthCheck_Payload& receive() const;
  ::envoy::api::v2::HealthCheck_Payload* mutable_receive();
  ::envoy::api::v2::HealthCheck_Payload* release_receive();
  void set_allocated_receive(::envoy::api::v2::HealthCheck_Payload* receive);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.HealthCheck.HttpHealthCheck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::envoy::api::v2::HealthCheck_Payload* send_;
  ::envoy::api::v2::HealthCheck_Payload* receive_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2fhealth_5fcheck_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HealthCheck_TcpHealthCheck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.HealthCheck.TcpHealthCheck) */ {
 public:
  HealthCheck_TcpHealthCheck();
  virtual ~HealthCheck_TcpHealthCheck();

  HealthCheck_TcpHealthCheck(const HealthCheck_TcpHealthCheck& from);

  inline HealthCheck_TcpHealthCheck& operator=(const HealthCheck_TcpHealthCheck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HealthCheck_TcpHealthCheck& default_instance();

  static inline const HealthCheck_TcpHealthCheck* internal_default_instance() {
    return reinterpret_cast<const HealthCheck_TcpHealthCheck*>(
               &_HealthCheck_TcpHealthCheck_default_instance_);
  }

  void Swap(HealthCheck_TcpHealthCheck* other);

  // implements Message ----------------------------------------------

  inline HealthCheck_TcpHealthCheck* New() const PROTOBUF_FINAL { return New(NULL); }

  HealthCheck_TcpHealthCheck* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HealthCheck_TcpHealthCheck& from);
  void MergeFrom(const HealthCheck_TcpHealthCheck& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HealthCheck_TcpHealthCheck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .envoy.api.v2.HealthCheck.Payload receive = 2;
  int receive_size() const;
  void clear_receive();
  static const int kReceiveFieldNumber = 2;
  const ::envoy::api::v2::HealthCheck_Payload& receive(int index) const;
  ::envoy::api::v2::HealthCheck_Payload* mutable_receive(int index);
  ::envoy::api::v2::HealthCheck_Payload* add_receive();
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck_Payload >*
      mutable_receive();
  const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck_Payload >&
      receive() const;

  // .envoy.api.v2.HealthCheck.Payload send = 1;
  bool has_send() const;
  void clear_send();
  static const int kSendFieldNumber = 1;
  const ::envoy::api::v2::HealthCheck_Payload& send() const;
  ::envoy::api::v2::HealthCheck_Payload* mutable_send();
  ::envoy::api::v2::HealthCheck_Payload* release_send();
  void set_allocated_send(::envoy::api::v2::HealthCheck_Payload* send);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.HealthCheck.TcpHealthCheck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck_Payload > receive_;
  ::envoy::api::v2::HealthCheck_Payload* send_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2fhealth_5fcheck_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HealthCheck_RedisHealthCheck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.HealthCheck.RedisHealthCheck) */ {
 public:
  HealthCheck_RedisHealthCheck();
  virtual ~HealthCheck_RedisHealthCheck();

  HealthCheck_RedisHealthCheck(const HealthCheck_RedisHealthCheck& from);

  inline HealthCheck_RedisHealthCheck& operator=(const HealthCheck_RedisHealthCheck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HealthCheck_RedisHealthCheck& default_instance();

  static inline const HealthCheck_RedisHealthCheck* internal_default_instance() {
    return reinterpret_cast<const HealthCheck_RedisHealthCheck*>(
               &_HealthCheck_RedisHealthCheck_default_instance_);
  }

  void Swap(HealthCheck_RedisHealthCheck* other);

  // implements Message ----------------------------------------------

  inline HealthCheck_RedisHealthCheck* New() const PROTOBUF_FINAL { return New(NULL); }

  HealthCheck_RedisHealthCheck* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HealthCheck_RedisHealthCheck& from);
  void MergeFrom(const HealthCheck_RedisHealthCheck& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HealthCheck_RedisHealthCheck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:envoy.api.v2.HealthCheck.RedisHealthCheck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_api_2fhealth_5fcheck_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HealthCheck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.HealthCheck) */ {
 public:
  HealthCheck();
  virtual ~HealthCheck();

  HealthCheck(const HealthCheck& from);

  inline HealthCheck& operator=(const HealthCheck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HealthCheck& default_instance();

  enum HealthCheckerCase {
    kHttpHealthCheck = 9,
    kTcpHealthCheck = 10,
    kRedisHealthCheck = 11,
    HEALTH_CHECKER_NOT_SET = 0,
  };

  static inline const HealthCheck* internal_default_instance() {
    return reinterpret_cast<const HealthCheck*>(
               &_HealthCheck_default_instance_);
  }

  void Swap(HealthCheck* other);

  // implements Message ----------------------------------------------

  inline HealthCheck* New() const PROTOBUF_FINAL { return New(NULL); }

  HealthCheck* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HealthCheck& from);
  void MergeFrom(const HealthCheck& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HealthCheck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HealthCheck_Payload Payload;
  typedef HealthCheck_HttpHealthCheck HttpHealthCheck;
  typedef HealthCheck_TcpHealthCheck TcpHealthCheck;
  typedef HealthCheck_RedisHealthCheck RedisHealthCheck;

  // accessors -------------------------------------------------------

  // string service_name = 8;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 8;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // .google.protobuf.Duration timeout = 1;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 1;
  const ::google::protobuf::Duration& timeout() const;
  ::google::protobuf::Duration* mutable_timeout();
  ::google::protobuf::Duration* release_timeout();
  void set_allocated_timeout(::google::protobuf::Duration* timeout);

  // .google.protobuf.Duration interval = 2;
  bool has_interval() const;
  void clear_interval();
  static const int kIntervalFieldNumber = 2;
  const ::google::protobuf::Duration& interval() const;
  ::google::protobuf::Duration* mutable_interval();
  ::google::protobuf::Duration* release_interval();
  void set_allocated_interval(::google::protobuf::Duration* interval);

  // .google.protobuf.Duration interval_jitter = 3;
  bool has_interval_jitter() const;
  void clear_interval_jitter();
  static const int kIntervalJitterFieldNumber = 3;
  const ::google::protobuf::Duration& interval_jitter() const;
  ::google::protobuf::Duration* mutable_interval_jitter();
  ::google::protobuf::Duration* release_interval_jitter();
  void set_allocated_interval_jitter(::google::protobuf::Duration* interval_jitter);

  // .google.protobuf.UInt32Value unhealthy_threshold = 4;
  bool has_unhealthy_threshold() const;
  void clear_unhealthy_threshold();
  static const int kUnhealthyThresholdFieldNumber = 4;
  const ::google::protobuf::UInt32Value& unhealthy_threshold() const;
  ::google::protobuf::UInt32Value* mutable_unhealthy_threshold();
  ::google::protobuf::UInt32Value* release_unhealthy_threshold();
  void set_allocated_unhealthy_threshold(::google::protobuf::UInt32Value* unhealthy_threshold);

  // .google.protobuf.UInt32Value healthy_threshold = 5;
  bool has_healthy_threshold() const;
  void clear_healthy_threshold();
  static const int kHealthyThresholdFieldNumber = 5;
  const ::google::protobuf::UInt32Value& healthy_threshold() const;
  ::google::protobuf::UInt32Value* mutable_healthy_threshold();
  ::google::protobuf::UInt32Value* release_healthy_threshold();
  void set_allocated_healthy_threshold(::google::protobuf::UInt32Value* healthy_threshold);

  // .google.protobuf.UInt32Value alt_port = 6;
  bool has_alt_port() const;
  void clear_alt_port();
  static const int kAltPortFieldNumber = 6;
  const ::google::protobuf::UInt32Value& alt_port() const;
  ::google::protobuf::UInt32Value* mutable_alt_port();
  ::google::protobuf::UInt32Value* release_alt_port();
  void set_allocated_alt_port(::google::protobuf::UInt32Value* alt_port);

  // .google.protobuf.BoolValue reuse_connection = 7;
  bool has_reuse_connection() const;
  void clear_reuse_connection();
  static const int kReuseConnectionFieldNumber = 7;
  const ::google::protobuf::BoolValue& reuse_connection() const;
  ::google::protobuf::BoolValue* mutable_reuse_connection();
  ::google::protobuf::BoolValue* release_reuse_connection();
  void set_allocated_reuse_connection(::google::protobuf::BoolValue* reuse_connection);

  // .envoy.api.v2.HealthCheck.HttpHealthCheck http_health_check = 9;
  bool has_http_health_check() const;
  void clear_http_health_check();
  static const int kHttpHealthCheckFieldNumber = 9;
  const ::envoy::api::v2::HealthCheck_HttpHealthCheck& http_health_check() const;
  ::envoy::api::v2::HealthCheck_HttpHealthCheck* mutable_http_health_check();
  ::envoy::api::v2::HealthCheck_HttpHealthCheck* release_http_health_check();
  void set_allocated_http_health_check(::envoy::api::v2::HealthCheck_HttpHealthCheck* http_health_check);

  // .envoy.api.v2.HealthCheck.TcpHealthCheck tcp_health_check = 10;
  bool has_tcp_health_check() const;
  void clear_tcp_health_check();
  static const int kTcpHealthCheckFieldNumber = 10;
  const ::envoy::api::v2::HealthCheck_TcpHealthCheck& tcp_health_check() const;
  ::envoy::api::v2::HealthCheck_TcpHealthCheck* mutable_tcp_health_check();
  ::envoy::api::v2::HealthCheck_TcpHealthCheck* release_tcp_health_check();
  void set_allocated_tcp_health_check(::envoy::api::v2::HealthCheck_TcpHealthCheck* tcp_health_check);

  // .envoy.api.v2.HealthCheck.RedisHealthCheck redis_health_check = 11;
  bool has_redis_health_check() const;
  void clear_redis_health_check();
  static const int kRedisHealthCheckFieldNumber = 11;
  const ::envoy::api::v2::HealthCheck_RedisHealthCheck& redis_health_check() const;
  ::envoy::api::v2::HealthCheck_RedisHealthCheck* mutable_redis_health_check();
  ::envoy::api::v2::HealthCheck_RedisHealthCheck* release_redis_health_check();
  void set_allocated_redis_health_check(::envoy::api::v2::HealthCheck_RedisHealthCheck* redis_health_check);

  HealthCheckerCase health_checker_case() const;
  // @@protoc_insertion_point(class_scope:envoy.api.v2.HealthCheck)
 private:
  void set_has_http_health_check();
  void set_has_tcp_health_check();
  void set_has_redis_health_check();

  inline bool has_health_checker() const;
  void clear_health_checker();
  inline void clear_has_health_checker();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::Duration* timeout_;
  ::google::protobuf::Duration* interval_;
  ::google::protobuf::Duration* interval_jitter_;
  ::google::protobuf::UInt32Value* unhealthy_threshold_;
  ::google::protobuf::UInt32Value* healthy_threshold_;
  ::google::protobuf::UInt32Value* alt_port_;
  ::google::protobuf::BoolValue* reuse_connection_;
  union HealthCheckerUnion {
    HealthCheckerUnion() {}
    ::envoy::api::v2::HealthCheck_HttpHealthCheck* http_health_check_;
    ::envoy::api::v2::HealthCheck_TcpHealthCheck* tcp_health_check_;
    ::envoy::api::v2::HealthCheck_RedisHealthCheck* redis_health_check_;
  } health_checker_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_api_2fhealth_5fcheck_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HealthCheck_Payload

// string text = 1;
inline bool HealthCheck_Payload::has_text() const {
  return payload_case() == kText;
}
inline void HealthCheck_Payload::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void HealthCheck_Payload::clear_text() {
  if (has_text()) {
    payload_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
inline const ::std::string& HealthCheck_Payload::text() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.Payload.text)
  if (has_text()) {
    return payload_.text_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void HealthCheck_Payload::set_text(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.Payload.text)
  if (!has_text()) {
    clear_payload();
    set_has_text();
    payload_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.Payload.text)
}
#if LANG_CXX11
inline void HealthCheck_Payload::set_text(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.Payload.text)
  if (!has_text()) {
    clear_payload();
    set_has_text();
    payload_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HealthCheck.Payload.text)
}
#endif
inline void HealthCheck_Payload::set_text(const char* value) {
  if (!has_text()) {
    clear_payload();
    set_has_text();
    payload_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HealthCheck.Payload.text)
}
inline void HealthCheck_Payload::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_payload();
    set_has_text();
    payload_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HealthCheck.Payload.text)
}
inline ::std::string* HealthCheck_Payload::mutable_text() {
  if (!has_text()) {
    clear_payload();
    set_has_text();
    payload_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.Payload.text)
  return payload_.text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HealthCheck_Payload::release_text() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.Payload.text)
  if (has_text()) {
    clear_has_payload();
    return payload_.text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void HealthCheck_Payload::set_allocated_text(::std::string* text) {
  if (!has_text()) {
    payload_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (text != NULL) {
    set_has_text();
    payload_.text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        text);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.Payload.text)
}

// bytes binary = 2;
inline bool HealthCheck_Payload::has_binary() const {
  return payload_case() == kBinary;
}
inline void HealthCheck_Payload::set_has_binary() {
  _oneof_case_[0] = kBinary;
}
inline void HealthCheck_Payload::clear_binary() {
  if (has_binary()) {
    payload_.binary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
inline const ::std::string& HealthCheck_Payload::binary() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.Payload.binary)
  if (has_binary()) {
    return payload_.binary_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void HealthCheck_Payload::set_binary(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.Payload.binary)
  if (!has_binary()) {
    clear_payload();
    set_has_binary();
    payload_.binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.Payload.binary)
}
#if LANG_CXX11
inline void HealthCheck_Payload::set_binary(::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.Payload.binary)
  if (!has_binary()) {
    clear_payload();
    set_has_binary();
    payload_.binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.binary_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HealthCheck.Payload.binary)
}
#endif
inline void HealthCheck_Payload::set_binary(const char* value) {
  if (!has_binary()) {
    clear_payload();
    set_has_binary();
    payload_.binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HealthCheck.Payload.binary)
}
inline void HealthCheck_Payload::set_binary(const void* value, size_t size) {
  if (!has_binary()) {
    clear_payload();
    set_has_binary();
    payload_.binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HealthCheck.Payload.binary)
}
inline ::std::string* HealthCheck_Payload::mutable_binary() {
  if (!has_binary()) {
    clear_payload();
    set_has_binary();
    payload_.binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.Payload.binary)
  return payload_.binary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HealthCheck_Payload::release_binary() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.Payload.binary)
  if (has_binary()) {
    clear_has_payload();
    return payload_.binary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void HealthCheck_Payload::set_allocated_binary(::std::string* binary) {
  if (!has_binary()) {
    payload_.binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (binary != NULL) {
    set_has_binary();
    payload_.binary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        binary);
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.Payload.binary)
}

inline bool HealthCheck_Payload::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void HealthCheck_Payload::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline HealthCheck_Payload::PayloadCase HealthCheck_Payload::payload_case() const {
  return HealthCheck_Payload::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HealthCheck_HttpHealthCheck

// string host = 1;
inline void HealthCheck_HttpHealthCheck::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HealthCheck_HttpHealthCheck::host() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
  return host_.GetNoArena();
}
inline void HealthCheck_HttpHealthCheck::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
}
#if LANG_CXX11
inline void HealthCheck_HttpHealthCheck::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
}
#endif
inline void HealthCheck_HttpHealthCheck::set_host(const char* value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
}
inline void HealthCheck_HttpHealthCheck::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
}
inline ::std::string* HealthCheck_HttpHealthCheck::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HealthCheck_HttpHealthCheck::release_host() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HealthCheck_HttpHealthCheck::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.HttpHealthCheck.host)
}

// string path = 2;
inline void HealthCheck_HttpHealthCheck::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HealthCheck_HttpHealthCheck::path() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
  return path_.GetNoArena();
}
inline void HealthCheck_HttpHealthCheck::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
}
#if LANG_CXX11
inline void HealthCheck_HttpHealthCheck::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
}
#endif
inline void HealthCheck_HttpHealthCheck::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
}
inline void HealthCheck_HttpHealthCheck::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
}
inline ::std::string* HealthCheck_HttpHealthCheck::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HealthCheck_HttpHealthCheck::release_path() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HealthCheck_HttpHealthCheck::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.HttpHealthCheck.path)
}

// .envoy.api.v2.HealthCheck.Payload send = 3;
inline bool HealthCheck_HttpHealthCheck::has_send() const {
  return this != internal_default_instance() && send_ != NULL;
}
inline void HealthCheck_HttpHealthCheck::clear_send() {
  if (GetArenaNoVirtual() == NULL && send_ != NULL) delete send_;
  send_ = NULL;
}
inline const ::envoy::api::v2::HealthCheck_Payload& HealthCheck_HttpHealthCheck::send() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.HttpHealthCheck.send)
  return send_ != NULL ? *send_
                         : *::envoy::api::v2::HealthCheck_Payload::internal_default_instance();
}
inline ::envoy::api::v2::HealthCheck_Payload* HealthCheck_HttpHealthCheck::mutable_send() {
  
  if (send_ == NULL) {
    send_ = new ::envoy::api::v2::HealthCheck_Payload;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.HttpHealthCheck.send)
  return send_;
}
inline ::envoy::api::v2::HealthCheck_Payload* HealthCheck_HttpHealthCheck::release_send() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.HttpHealthCheck.send)
  
  ::envoy::api::v2::HealthCheck_Payload* temp = send_;
  send_ = NULL;
  return temp;
}
inline void HealthCheck_HttpHealthCheck::set_allocated_send(::envoy::api::v2::HealthCheck_Payload* send) {
  delete send_;
  send_ = send;
  if (send) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.HttpHealthCheck.send)
}

// .envoy.api.v2.HealthCheck.Payload receive = 4;
inline bool HealthCheck_HttpHealthCheck::has_receive() const {
  return this != internal_default_instance() && receive_ != NULL;
}
inline void HealthCheck_HttpHealthCheck::clear_receive() {
  if (GetArenaNoVirtual() == NULL && receive_ != NULL) delete receive_;
  receive_ = NULL;
}
inline const ::envoy::api::v2::HealthCheck_Payload& HealthCheck_HttpHealthCheck::receive() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.HttpHealthCheck.receive)
  return receive_ != NULL ? *receive_
                         : *::envoy::api::v2::HealthCheck_Payload::internal_default_instance();
}
inline ::envoy::api::v2::HealthCheck_Payload* HealthCheck_HttpHealthCheck::mutable_receive() {
  
  if (receive_ == NULL) {
    receive_ = new ::envoy::api::v2::HealthCheck_Payload;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.HttpHealthCheck.receive)
  return receive_;
}
inline ::envoy::api::v2::HealthCheck_Payload* HealthCheck_HttpHealthCheck::release_receive() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.HttpHealthCheck.receive)
  
  ::envoy::api::v2::HealthCheck_Payload* temp = receive_;
  receive_ = NULL;
  return temp;
}
inline void HealthCheck_HttpHealthCheck::set_allocated_receive(::envoy::api::v2::HealthCheck_Payload* receive) {
  delete receive_;
  receive_ = receive;
  if (receive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.HttpHealthCheck.receive)
}

// -------------------------------------------------------------------

// HealthCheck_TcpHealthCheck

// .envoy.api.v2.HealthCheck.Payload send = 1;
inline bool HealthCheck_TcpHealthCheck::has_send() const {
  return this != internal_default_instance() && send_ != NULL;
}
inline void HealthCheck_TcpHealthCheck::clear_send() {
  if (GetArenaNoVirtual() == NULL && send_ != NULL) delete send_;
  send_ = NULL;
}
inline const ::envoy::api::v2::HealthCheck_Payload& HealthCheck_TcpHealthCheck::send() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.TcpHealthCheck.send)
  return send_ != NULL ? *send_
                         : *::envoy::api::v2::HealthCheck_Payload::internal_default_instance();
}
inline ::envoy::api::v2::HealthCheck_Payload* HealthCheck_TcpHealthCheck::mutable_send() {
  
  if (send_ == NULL) {
    send_ = new ::envoy::api::v2::HealthCheck_Payload;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.TcpHealthCheck.send)
  return send_;
}
inline ::envoy::api::v2::HealthCheck_Payload* HealthCheck_TcpHealthCheck::release_send() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.TcpHealthCheck.send)
  
  ::envoy::api::v2::HealthCheck_Payload* temp = send_;
  send_ = NULL;
  return temp;
}
inline void HealthCheck_TcpHealthCheck::set_allocated_send(::envoy::api::v2::HealthCheck_Payload* send) {
  delete send_;
  send_ = send;
  if (send) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.TcpHealthCheck.send)
}

// repeated .envoy.api.v2.HealthCheck.Payload receive = 2;
inline int HealthCheck_TcpHealthCheck::receive_size() const {
  return receive_.size();
}
inline void HealthCheck_TcpHealthCheck::clear_receive() {
  receive_.Clear();
}
inline const ::envoy::api::v2::HealthCheck_Payload& HealthCheck_TcpHealthCheck::receive(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.TcpHealthCheck.receive)
  return receive_.Get(index);
}
inline ::envoy::api::v2::HealthCheck_Payload* HealthCheck_TcpHealthCheck::mutable_receive(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.TcpHealthCheck.receive)
  return receive_.Mutable(index);
}
inline ::envoy::api::v2::HealthCheck_Payload* HealthCheck_TcpHealthCheck::add_receive() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.HealthCheck.TcpHealthCheck.receive)
  return receive_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck_Payload >*
HealthCheck_TcpHealthCheck::mutable_receive() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.HealthCheck.TcpHealthCheck.receive)
  return &receive_;
}
inline const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck_Payload >&
HealthCheck_TcpHealthCheck::receive() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.HealthCheck.TcpHealthCheck.receive)
  return receive_;
}

// -------------------------------------------------------------------

// HealthCheck_RedisHealthCheck

// -------------------------------------------------------------------

// HealthCheck

// .google.protobuf.Duration timeout = 1;
inline bool HealthCheck::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
inline void HealthCheck::clear_timeout() {
  if (GetArenaNoVirtual() == NULL && timeout_ != NULL) delete timeout_;
  timeout_ = NULL;
}
inline const ::google::protobuf::Duration& HealthCheck::timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.timeout)
  return timeout_ != NULL ? *timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* HealthCheck::mutable_timeout() {
  
  if (timeout_ == NULL) {
    timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.timeout)
  return timeout_;
}
inline ::google::protobuf::Duration* HealthCheck::release_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
inline void HealthCheck::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  delete timeout_;
  if (timeout != NULL && timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_timeout = new ::google::protobuf::Duration;
    new_timeout->CopyFrom(*timeout);
    timeout = new_timeout;
  }
  timeout_ = timeout;
  if (timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.timeout)
}

// .google.protobuf.Duration interval = 2;
inline bool HealthCheck::has_interval() const {
  return this != internal_default_instance() && interval_ != NULL;
}
inline void HealthCheck::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}
inline const ::google::protobuf::Duration& HealthCheck::interval() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.interval)
  return interval_ != NULL ? *interval_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* HealthCheck::mutable_interval() {
  
  if (interval_ == NULL) {
    interval_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.interval)
  return interval_;
}
inline ::google::protobuf::Duration* HealthCheck::release_interval() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.interval)
  
  ::google::protobuf::Duration* temp = interval_;
  interval_ = NULL;
  return temp;
}
inline void HealthCheck::set_allocated_interval(::google::protobuf::Duration* interval) {
  delete interval_;
  if (interval != NULL && interval->GetArena() != NULL) {
    ::google::protobuf::Duration* new_interval = new ::google::protobuf::Duration;
    new_interval->CopyFrom(*interval);
    interval = new_interval;
  }
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.interval)
}

// .google.protobuf.Duration interval_jitter = 3;
inline bool HealthCheck::has_interval_jitter() const {
  return this != internal_default_instance() && interval_jitter_ != NULL;
}
inline void HealthCheck::clear_interval_jitter() {
  if (GetArenaNoVirtual() == NULL && interval_jitter_ != NULL) delete interval_jitter_;
  interval_jitter_ = NULL;
}
inline const ::google::protobuf::Duration& HealthCheck::interval_jitter() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.interval_jitter)
  return interval_jitter_ != NULL ? *interval_jitter_
                         : *::google::protobuf::Duration::internal_default_instance();
}
inline ::google::protobuf::Duration* HealthCheck::mutable_interval_jitter() {
  
  if (interval_jitter_ == NULL) {
    interval_jitter_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.interval_jitter)
  return interval_jitter_;
}
inline ::google::protobuf::Duration* HealthCheck::release_interval_jitter() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.interval_jitter)
  
  ::google::protobuf::Duration* temp = interval_jitter_;
  interval_jitter_ = NULL;
  return temp;
}
inline void HealthCheck::set_allocated_interval_jitter(::google::protobuf::Duration* interval_jitter) {
  delete interval_jitter_;
  if (interval_jitter != NULL && interval_jitter->GetArena() != NULL) {
    ::google::protobuf::Duration* new_interval_jitter = new ::google::protobuf::Duration;
    new_interval_jitter->CopyFrom(*interval_jitter);
    interval_jitter = new_interval_jitter;
  }
  interval_jitter_ = interval_jitter;
  if (interval_jitter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.interval_jitter)
}

// .google.protobuf.UInt32Value unhealthy_threshold = 4;
inline bool HealthCheck::has_unhealthy_threshold() const {
  return this != internal_default_instance() && unhealthy_threshold_ != NULL;
}
inline void HealthCheck::clear_unhealthy_threshold() {
  if (GetArenaNoVirtual() == NULL && unhealthy_threshold_ != NULL) delete unhealthy_threshold_;
  unhealthy_threshold_ = NULL;
}
inline const ::google::protobuf::UInt32Value& HealthCheck::unhealthy_threshold() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.unhealthy_threshold)
  return unhealthy_threshold_ != NULL ? *unhealthy_threshold_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* HealthCheck::mutable_unhealthy_threshold() {
  
  if (unhealthy_threshold_ == NULL) {
    unhealthy_threshold_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.unhealthy_threshold)
  return unhealthy_threshold_;
}
inline ::google::protobuf::UInt32Value* HealthCheck::release_unhealthy_threshold() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.unhealthy_threshold)
  
  ::google::protobuf::UInt32Value* temp = unhealthy_threshold_;
  unhealthy_threshold_ = NULL;
  return temp;
}
inline void HealthCheck::set_allocated_unhealthy_threshold(::google::protobuf::UInt32Value* unhealthy_threshold) {
  delete unhealthy_threshold_;
  if (unhealthy_threshold != NULL && unhealthy_threshold->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_unhealthy_threshold = new ::google::protobuf::UInt32Value;
    new_unhealthy_threshold->CopyFrom(*unhealthy_threshold);
    unhealthy_threshold = new_unhealthy_threshold;
  }
  unhealthy_threshold_ = unhealthy_threshold;
  if (unhealthy_threshold) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.unhealthy_threshold)
}

// .google.protobuf.UInt32Value healthy_threshold = 5;
inline bool HealthCheck::has_healthy_threshold() const {
  return this != internal_default_instance() && healthy_threshold_ != NULL;
}
inline void HealthCheck::clear_healthy_threshold() {
  if (GetArenaNoVirtual() == NULL && healthy_threshold_ != NULL) delete healthy_threshold_;
  healthy_threshold_ = NULL;
}
inline const ::google::protobuf::UInt32Value& HealthCheck::healthy_threshold() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.healthy_threshold)
  return healthy_threshold_ != NULL ? *healthy_threshold_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* HealthCheck::mutable_healthy_threshold() {
  
  if (healthy_threshold_ == NULL) {
    healthy_threshold_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.healthy_threshold)
  return healthy_threshold_;
}
inline ::google::protobuf::UInt32Value* HealthCheck::release_healthy_threshold() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.healthy_threshold)
  
  ::google::protobuf::UInt32Value* temp = healthy_threshold_;
  healthy_threshold_ = NULL;
  return temp;
}
inline void HealthCheck::set_allocated_healthy_threshold(::google::protobuf::UInt32Value* healthy_threshold) {
  delete healthy_threshold_;
  if (healthy_threshold != NULL && healthy_threshold->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_healthy_threshold = new ::google::protobuf::UInt32Value;
    new_healthy_threshold->CopyFrom(*healthy_threshold);
    healthy_threshold = new_healthy_threshold;
  }
  healthy_threshold_ = healthy_threshold;
  if (healthy_threshold) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.healthy_threshold)
}

// .google.protobuf.UInt32Value alt_port = 6;
inline bool HealthCheck::has_alt_port() const {
  return this != internal_default_instance() && alt_port_ != NULL;
}
inline void HealthCheck::clear_alt_port() {
  if (GetArenaNoVirtual() == NULL && alt_port_ != NULL) delete alt_port_;
  alt_port_ = NULL;
}
inline const ::google::protobuf::UInt32Value& HealthCheck::alt_port() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.alt_port)
  return alt_port_ != NULL ? *alt_port_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
inline ::google::protobuf::UInt32Value* HealthCheck::mutable_alt_port() {
  
  if (alt_port_ == NULL) {
    alt_port_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.alt_port)
  return alt_port_;
}
inline ::google::protobuf::UInt32Value* HealthCheck::release_alt_port() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.alt_port)
  
  ::google::protobuf::UInt32Value* temp = alt_port_;
  alt_port_ = NULL;
  return temp;
}
inline void HealthCheck::set_allocated_alt_port(::google::protobuf::UInt32Value* alt_port) {
  delete alt_port_;
  if (alt_port != NULL && alt_port->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_alt_port = new ::google::protobuf::UInt32Value;
    new_alt_port->CopyFrom(*alt_port);
    alt_port = new_alt_port;
  }
  alt_port_ = alt_port;
  if (alt_port) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.alt_port)
}

// .google.protobuf.BoolValue reuse_connection = 7;
inline bool HealthCheck::has_reuse_connection() const {
  return this != internal_default_instance() && reuse_connection_ != NULL;
}
inline void HealthCheck::clear_reuse_connection() {
  if (GetArenaNoVirtual() == NULL && reuse_connection_ != NULL) delete reuse_connection_;
  reuse_connection_ = NULL;
}
inline const ::google::protobuf::BoolValue& HealthCheck::reuse_connection() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.reuse_connection)
  return reuse_connection_ != NULL ? *reuse_connection_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
inline ::google::protobuf::BoolValue* HealthCheck::mutable_reuse_connection() {
  
  if (reuse_connection_ == NULL) {
    reuse_connection_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.reuse_connection)
  return reuse_connection_;
}
inline ::google::protobuf::BoolValue* HealthCheck::release_reuse_connection() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.reuse_connection)
  
  ::google::protobuf::BoolValue* temp = reuse_connection_;
  reuse_connection_ = NULL;
  return temp;
}
inline void HealthCheck::set_allocated_reuse_connection(::google::protobuf::BoolValue* reuse_connection) {
  delete reuse_connection_;
  if (reuse_connection != NULL && reuse_connection->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_reuse_connection = new ::google::protobuf::BoolValue;
    new_reuse_connection->CopyFrom(*reuse_connection);
    reuse_connection = new_reuse_connection;
  }
  reuse_connection_ = reuse_connection;
  if (reuse_connection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.reuse_connection)
}

// string service_name = 8;
inline void HealthCheck::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HealthCheck::service_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.service_name)
  return service_name_.GetNoArena();
}
inline void HealthCheck::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.HealthCheck.service_name)
}
#if LANG_CXX11
inline void HealthCheck::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.HealthCheck.service_name)
}
#endif
inline void HealthCheck::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.HealthCheck.service_name)
}
inline void HealthCheck::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.HealthCheck.service_name)
}
inline ::std::string* HealthCheck::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HealthCheck::release_service_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HealthCheck::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.service_name)
}

// .envoy.api.v2.HealthCheck.HttpHealthCheck http_health_check = 9;
inline bool HealthCheck::has_http_health_check() const {
  return health_checker_case() == kHttpHealthCheck;
}
inline void HealthCheck::set_has_http_health_check() {
  _oneof_case_[0] = kHttpHealthCheck;
}
inline void HealthCheck::clear_http_health_check() {
  if (has_http_health_check()) {
    delete health_checker_.http_health_check_;
    clear_has_health_checker();
  }
}
inline  const ::envoy::api::v2::HealthCheck_HttpHealthCheck& HealthCheck::http_health_check() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.http_health_check)
  return has_http_health_check()
      ? *health_checker_.http_health_check_
      : ::envoy::api::v2::HealthCheck_HttpHealthCheck::default_instance();
}
inline ::envoy::api::v2::HealthCheck_HttpHealthCheck* HealthCheck::mutable_http_health_check() {
  if (!has_http_health_check()) {
    clear_health_checker();
    set_has_http_health_check();
    health_checker_.http_health_check_ = new ::envoy::api::v2::HealthCheck_HttpHealthCheck;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.http_health_check)
  return health_checker_.http_health_check_;
}
inline ::envoy::api::v2::HealthCheck_HttpHealthCheck* HealthCheck::release_http_health_check() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.http_health_check)
  if (has_http_health_check()) {
    clear_has_health_checker();
    ::envoy::api::v2::HealthCheck_HttpHealthCheck* temp = health_checker_.http_health_check_;
    health_checker_.http_health_check_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void HealthCheck::set_allocated_http_health_check(::envoy::api::v2::HealthCheck_HttpHealthCheck* http_health_check) {
  clear_health_checker();
  if (http_health_check) {
    set_has_http_health_check();
    health_checker_.http_health_check_ = http_health_check;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.http_health_check)
}

// .envoy.api.v2.HealthCheck.TcpHealthCheck tcp_health_check = 10;
inline bool HealthCheck::has_tcp_health_check() const {
  return health_checker_case() == kTcpHealthCheck;
}
inline void HealthCheck::set_has_tcp_health_check() {
  _oneof_case_[0] = kTcpHealthCheck;
}
inline void HealthCheck::clear_tcp_health_check() {
  if (has_tcp_health_check()) {
    delete health_checker_.tcp_health_check_;
    clear_has_health_checker();
  }
}
inline  const ::envoy::api::v2::HealthCheck_TcpHealthCheck& HealthCheck::tcp_health_check() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.tcp_health_check)
  return has_tcp_health_check()
      ? *health_checker_.tcp_health_check_
      : ::envoy::api::v2::HealthCheck_TcpHealthCheck::default_instance();
}
inline ::envoy::api::v2::HealthCheck_TcpHealthCheck* HealthCheck::mutable_tcp_health_check() {
  if (!has_tcp_health_check()) {
    clear_health_checker();
    set_has_tcp_health_check();
    health_checker_.tcp_health_check_ = new ::envoy::api::v2::HealthCheck_TcpHealthCheck;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.tcp_health_check)
  return health_checker_.tcp_health_check_;
}
inline ::envoy::api::v2::HealthCheck_TcpHealthCheck* HealthCheck::release_tcp_health_check() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.tcp_health_check)
  if (has_tcp_health_check()) {
    clear_has_health_checker();
    ::envoy::api::v2::HealthCheck_TcpHealthCheck* temp = health_checker_.tcp_health_check_;
    health_checker_.tcp_health_check_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void HealthCheck::set_allocated_tcp_health_check(::envoy::api::v2::HealthCheck_TcpHealthCheck* tcp_health_check) {
  clear_health_checker();
  if (tcp_health_check) {
    set_has_tcp_health_check();
    health_checker_.tcp_health_check_ = tcp_health_check;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.tcp_health_check)
}

// .envoy.api.v2.HealthCheck.RedisHealthCheck redis_health_check = 11;
inline bool HealthCheck::has_redis_health_check() const {
  return health_checker_case() == kRedisHealthCheck;
}
inline void HealthCheck::set_has_redis_health_check() {
  _oneof_case_[0] = kRedisHealthCheck;
}
inline void HealthCheck::clear_redis_health_check() {
  if (has_redis_health_check()) {
    delete health_checker_.redis_health_check_;
    clear_has_health_checker();
  }
}
inline  const ::envoy::api::v2::HealthCheck_RedisHealthCheck& HealthCheck::redis_health_check() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.HealthCheck.redis_health_check)
  return has_redis_health_check()
      ? *health_checker_.redis_health_check_
      : ::envoy::api::v2::HealthCheck_RedisHealthCheck::default_instance();
}
inline ::envoy::api::v2::HealthCheck_RedisHealthCheck* HealthCheck::mutable_redis_health_check() {
  if (!has_redis_health_check()) {
    clear_health_checker();
    set_has_redis_health_check();
    health_checker_.redis_health_check_ = new ::envoy::api::v2::HealthCheck_RedisHealthCheck;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.HealthCheck.redis_health_check)
  return health_checker_.redis_health_check_;
}
inline ::envoy::api::v2::HealthCheck_RedisHealthCheck* HealthCheck::release_redis_health_check() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.HealthCheck.redis_health_check)
  if (has_redis_health_check()) {
    clear_has_health_checker();
    ::envoy::api::v2::HealthCheck_RedisHealthCheck* temp = health_checker_.redis_health_check_;
    health_checker_.redis_health_check_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void HealthCheck::set_allocated_redis_health_check(::envoy::api::v2::HealthCheck_RedisHealthCheck* redis_health_check) {
  clear_health_checker();
  if (redis_health_check) {
    set_has_redis_health_check();
    health_checker_.redis_health_check_ = redis_health_check;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.HealthCheck.redis_health_check)
}

inline bool HealthCheck::has_health_checker() const {
  return health_checker_case() != HEALTH_CHECKER_NOT_SET;
}
inline void HealthCheck::clear_has_health_checker() {
  _oneof_case_[0] = HEALTH_CHECKER_NOT_SET;
}
inline HealthCheck::HealthCheckerCase HealthCheck::health_checker_case() const {
  return HealthCheck::HealthCheckerCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v2
}  // namespace api
}  // namespace envoy

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::envoy::api::v2::HealthStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::envoy::api::v2::HealthStatus>() {
  return ::envoy::api::v2::HealthStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2fhealth_5fcheck_2eproto__INCLUDED
