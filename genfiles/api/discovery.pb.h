// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/discovery.proto

#ifndef PROTOBUF_api_2fdiscovery_2eproto__INCLUDED
#define PROTOBUF_api_2fdiscovery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "api/base.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
namespace envoy {
namespace api {
namespace v2 {
class DiscoveryRequest;
class DiscoveryRequestDefaultTypeInternal;
extern DiscoveryRequestDefaultTypeInternal _DiscoveryRequest_default_instance_;
class DiscoveryResponse;
class DiscoveryResponseDefaultTypeInternal;
extern DiscoveryResponseDefaultTypeInternal _DiscoveryResponse_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace envoy

namespace envoy {
namespace api {
namespace v2 {

namespace protobuf_api_2fdiscovery_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_api_2fdiscovery_2eproto

// ===================================================================

class DiscoveryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.DiscoveryRequest) */ {
 public:
  DiscoveryRequest();
  virtual ~DiscoveryRequest();

  DiscoveryRequest(const DiscoveryRequest& from);

  inline DiscoveryRequest& operator=(const DiscoveryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiscoveryRequest(DiscoveryRequest&& from) noexcept
    : DiscoveryRequest() {
    *this = ::std::move(from);
  }

  inline DiscoveryRequest& operator=(DiscoveryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscoveryRequest& default_instance();

  static inline const DiscoveryRequest* internal_default_instance() {
    return reinterpret_cast<const DiscoveryRequest*>(
               &_DiscoveryRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DiscoveryRequest* other);
  friend void swap(DiscoveryRequest& a, DiscoveryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiscoveryRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DiscoveryRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DiscoveryRequest& from);
  void MergeFrom(const DiscoveryRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DiscoveryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string resource_names = 3;
  int resource_names_size() const;
  void clear_resource_names();
  static const int kResourceNamesFieldNumber = 3;
  const ::std::string& resource_names(int index) const;
  ::std::string* mutable_resource_names(int index);
  void set_resource_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_resource_names(int index, ::std::string&& value);
  #endif
  void set_resource_names(int index, const char* value);
  void set_resource_names(int index, const char* value, size_t size);
  ::std::string* add_resource_names();
  void add_resource_names(const ::std::string& value);
  #if LANG_CXX11
  void add_resource_names(::std::string&& value);
  #endif
  void add_resource_names(const char* value);
  void add_resource_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& resource_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_resource_names();

  // string version_info = 1;
  void clear_version_info();
  static const int kVersionInfoFieldNumber = 1;
  const ::std::string& version_info() const;
  void set_version_info(const ::std::string& value);
  #if LANG_CXX11
  void set_version_info(::std::string&& value);
  #endif
  void set_version_info(const char* value);
  void set_version_info(const char* value, size_t size);
  ::std::string* mutable_version_info();
  ::std::string* release_version_info();
  void set_allocated_version_info(::std::string* version_info);

  // string type_url = 4;
  void clear_type_url();
  static const int kTypeUrlFieldNumber = 4;
  const ::std::string& type_url() const;
  void set_type_url(const ::std::string& value);
  #if LANG_CXX11
  void set_type_url(::std::string&& value);
  #endif
  void set_type_url(const char* value);
  void set_type_url(const char* value, size_t size);
  ::std::string* mutable_type_url();
  ::std::string* release_type_url();
  void set_allocated_type_url(::std::string* type_url);

  // string response_nonce = 5;
  void clear_response_nonce();
  static const int kResponseNonceFieldNumber = 5;
  const ::std::string& response_nonce() const;
  void set_response_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_response_nonce(::std::string&& value);
  #endif
  void set_response_nonce(const char* value);
  void set_response_nonce(const char* value, size_t size);
  ::std::string* mutable_response_nonce();
  ::std::string* release_response_nonce();
  void set_allocated_response_nonce(::std::string* response_nonce);

  // .envoy.api.v2.Node node = 2;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 2;
  const ::envoy::api::v2::Node& node() const;
  ::envoy::api::v2::Node* mutable_node();
  ::envoy::api::v2::Node* release_node();
  void set_allocated_node(::envoy::api::v2::Node* node);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.DiscoveryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> resource_names_;
  ::google::protobuf::internal::ArenaStringPtr version_info_;
  ::google::protobuf::internal::ArenaStringPtr type_url_;
  ::google::protobuf::internal::ArenaStringPtr response_nonce_;
  ::envoy::api::v2::Node* node_;
  mutable int _cached_size_;
  friend struct protobuf_api_2fdiscovery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiscoveryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envoy.api.v2.DiscoveryResponse) */ {
 public:
  DiscoveryResponse();
  virtual ~DiscoveryResponse();

  DiscoveryResponse(const DiscoveryResponse& from);

  inline DiscoveryResponse& operator=(const DiscoveryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiscoveryResponse(DiscoveryResponse&& from) noexcept
    : DiscoveryResponse() {
    *this = ::std::move(from);
  }

  inline DiscoveryResponse& operator=(DiscoveryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscoveryResponse& default_instance();

  static inline const DiscoveryResponse* internal_default_instance() {
    return reinterpret_cast<const DiscoveryResponse*>(
               &_DiscoveryResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DiscoveryResponse* other);
  friend void swap(DiscoveryResponse& a, DiscoveryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiscoveryResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DiscoveryResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DiscoveryResponse& from);
  void MergeFrom(const DiscoveryResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DiscoveryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any resources = 2;
  int resources_size() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 2;
  const ::google::protobuf::Any& resources(int index) const;
  ::google::protobuf::Any* mutable_resources(int index);
  ::google::protobuf::Any* add_resources();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_resources();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      resources() const;

  // string version_info = 1;
  void clear_version_info();
  static const int kVersionInfoFieldNumber = 1;
  const ::std::string& version_info() const;
  void set_version_info(const ::std::string& value);
  #if LANG_CXX11
  void set_version_info(::std::string&& value);
  #endif
  void set_version_info(const char* value);
  void set_version_info(const char* value, size_t size);
  ::std::string* mutable_version_info();
  ::std::string* release_version_info();
  void set_allocated_version_info(::std::string* version_info);

  // string type_url = 4;
  void clear_type_url();
  static const int kTypeUrlFieldNumber = 4;
  const ::std::string& type_url() const;
  void set_type_url(const ::std::string& value);
  #if LANG_CXX11
  void set_type_url(::std::string&& value);
  #endif
  void set_type_url(const char* value);
  void set_type_url(const char* value, size_t size);
  ::std::string* mutable_type_url();
  ::std::string* release_type_url();
  void set_allocated_type_url(::std::string* type_url);

  // string nonce = 5;
  void clear_nonce();
  static const int kNonceFieldNumber = 5;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  #if LANG_CXX11
  void set_nonce(::std::string&& value);
  #endif
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // bool canary = 3;
  void clear_canary();
  static const int kCanaryFieldNumber = 3;
  bool canary() const;
  void set_canary(bool value);

  // @@protoc_insertion_point(class_scope:envoy.api.v2.DiscoveryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > resources_;
  ::google::protobuf::internal::ArenaStringPtr version_info_;
  ::google::protobuf::internal::ArenaStringPtr type_url_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  bool canary_;
  mutable int _cached_size_;
  friend struct protobuf_api_2fdiscovery_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DiscoveryRequest

// string version_info = 1;
inline void DiscoveryRequest::clear_version_info() {
  version_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiscoveryRequest::version_info() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DiscoveryRequest.version_info)
  return version_info_.GetNoArena();
}
inline void DiscoveryRequest::set_version_info(const ::std::string& value) {
  
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.DiscoveryRequest.version_info)
}
#if LANG_CXX11
inline void DiscoveryRequest::set_version_info(::std::string&& value) {
  
  version_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.DiscoveryRequest.version_info)
}
#endif
inline void DiscoveryRequest::set_version_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.DiscoveryRequest.version_info)
}
inline void DiscoveryRequest::set_version_info(const char* value, size_t size) {
  
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.DiscoveryRequest.version_info)
}
inline ::std::string* DiscoveryRequest::mutable_version_info() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DiscoveryRequest.version_info)
  return version_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiscoveryRequest::release_version_info() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DiscoveryRequest.version_info)
  
  return version_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiscoveryRequest::set_allocated_version_info(::std::string* version_info) {
  if (version_info != NULL) {
    
  } else {
    
  }
  version_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_info);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DiscoveryRequest.version_info)
}

// .envoy.api.v2.Node node = 2;
inline bool DiscoveryRequest::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
inline void DiscoveryRequest::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
inline const ::envoy::api::v2::Node& DiscoveryRequest::node() const {
  const ::envoy::api::v2::Node* p = node_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.DiscoveryRequest.node)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Node*>(
      &::envoy::api::v2::_Node_default_instance_);
}
inline ::envoy::api::v2::Node* DiscoveryRequest::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::envoy::api::v2::Node;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DiscoveryRequest.node)
  return node_;
}
inline ::envoy::api::v2::Node* DiscoveryRequest::release_node() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DiscoveryRequest.node)
  
  ::envoy::api::v2::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void DiscoveryRequest::set_allocated_node(::envoy::api::v2::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DiscoveryRequest.node)
}

// repeated string resource_names = 3;
inline int DiscoveryRequest::resource_names_size() const {
  return resource_names_.size();
}
inline void DiscoveryRequest::clear_resource_names() {
  resource_names_.Clear();
}
inline const ::std::string& DiscoveryRequest::resource_names(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DiscoveryRequest.resource_names)
  return resource_names_.Get(index);
}
inline ::std::string* DiscoveryRequest::mutable_resource_names(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DiscoveryRequest.resource_names)
  return resource_names_.Mutable(index);
}
inline void DiscoveryRequest::set_resource_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.DiscoveryRequest.resource_names)
  resource_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DiscoveryRequest::set_resource_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.DiscoveryRequest.resource_names)
  resource_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DiscoveryRequest::set_resource_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  resource_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.DiscoveryRequest.resource_names)
}
inline void DiscoveryRequest::set_resource_names(int index, const char* value, size_t size) {
  resource_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.DiscoveryRequest.resource_names)
}
inline ::std::string* DiscoveryRequest::add_resource_names() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.DiscoveryRequest.resource_names)
  return resource_names_.Add();
}
inline void DiscoveryRequest::add_resource_names(const ::std::string& value) {
  resource_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.DiscoveryRequest.resource_names)
}
#if LANG_CXX11
inline void DiscoveryRequest::add_resource_names(::std::string&& value) {
  resource_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:envoy.api.v2.DiscoveryRequest.resource_names)
}
#endif
inline void DiscoveryRequest::add_resource_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  resource_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.DiscoveryRequest.resource_names)
}
inline void DiscoveryRequest::add_resource_names(const char* value, size_t size) {
  resource_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.DiscoveryRequest.resource_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DiscoveryRequest::resource_names() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.DiscoveryRequest.resource_names)
  return resource_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DiscoveryRequest::mutable_resource_names() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.DiscoveryRequest.resource_names)
  return &resource_names_;
}

// string type_url = 4;
inline void DiscoveryRequest::clear_type_url() {
  type_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiscoveryRequest::type_url() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DiscoveryRequest.type_url)
  return type_url_.GetNoArena();
}
inline void DiscoveryRequest::set_type_url(const ::std::string& value) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.DiscoveryRequest.type_url)
}
#if LANG_CXX11
inline void DiscoveryRequest::set_type_url(::std::string&& value) {
  
  type_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.DiscoveryRequest.type_url)
}
#endif
inline void DiscoveryRequest::set_type_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.DiscoveryRequest.type_url)
}
inline void DiscoveryRequest::set_type_url(const char* value, size_t size) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.DiscoveryRequest.type_url)
}
inline ::std::string* DiscoveryRequest::mutable_type_url() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DiscoveryRequest.type_url)
  return type_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiscoveryRequest::release_type_url() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DiscoveryRequest.type_url)
  
  return type_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiscoveryRequest::set_allocated_type_url(::std::string* type_url) {
  if (type_url != NULL) {
    
  } else {
    
  }
  type_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_url);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DiscoveryRequest.type_url)
}

// string response_nonce = 5;
inline void DiscoveryRequest::clear_response_nonce() {
  response_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiscoveryRequest::response_nonce() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DiscoveryRequest.response_nonce)
  return response_nonce_.GetNoArena();
}
inline void DiscoveryRequest::set_response_nonce(const ::std::string& value) {
  
  response_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.DiscoveryRequest.response_nonce)
}
#if LANG_CXX11
inline void DiscoveryRequest::set_response_nonce(::std::string&& value) {
  
  response_nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.DiscoveryRequest.response_nonce)
}
#endif
inline void DiscoveryRequest::set_response_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.DiscoveryRequest.response_nonce)
}
inline void DiscoveryRequest::set_response_nonce(const char* value, size_t size) {
  
  response_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.DiscoveryRequest.response_nonce)
}
inline ::std::string* DiscoveryRequest::mutable_response_nonce() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DiscoveryRequest.response_nonce)
  return response_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiscoveryRequest::release_response_nonce() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DiscoveryRequest.response_nonce)
  
  return response_nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiscoveryRequest::set_allocated_response_nonce(::std::string* response_nonce) {
  if (response_nonce != NULL) {
    
  } else {
    
  }
  response_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_nonce);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DiscoveryRequest.response_nonce)
}

// -------------------------------------------------------------------

// DiscoveryResponse

// string version_info = 1;
inline void DiscoveryResponse::clear_version_info() {
  version_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiscoveryResponse::version_info() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DiscoveryResponse.version_info)
  return version_info_.GetNoArena();
}
inline void DiscoveryResponse::set_version_info(const ::std::string& value) {
  
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.DiscoveryResponse.version_info)
}
#if LANG_CXX11
inline void DiscoveryResponse::set_version_info(::std::string&& value) {
  
  version_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.DiscoveryResponse.version_info)
}
#endif
inline void DiscoveryResponse::set_version_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.DiscoveryResponse.version_info)
}
inline void DiscoveryResponse::set_version_info(const char* value, size_t size) {
  
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.DiscoveryResponse.version_info)
}
inline ::std::string* DiscoveryResponse::mutable_version_info() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DiscoveryResponse.version_info)
  return version_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiscoveryResponse::release_version_info() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DiscoveryResponse.version_info)
  
  return version_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiscoveryResponse::set_allocated_version_info(::std::string* version_info) {
  if (version_info != NULL) {
    
  } else {
    
  }
  version_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_info);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DiscoveryResponse.version_info)
}

// repeated .google.protobuf.Any resources = 2;
inline int DiscoveryResponse::resources_size() const {
  return resources_.size();
}
inline void DiscoveryResponse::clear_resources() {
  resources_.Clear();
}
inline const ::google::protobuf::Any& DiscoveryResponse::resources(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DiscoveryResponse.resources)
  return resources_.Get(index);
}
inline ::google::protobuf::Any* DiscoveryResponse::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DiscoveryResponse.resources)
  return resources_.Mutable(index);
}
inline ::google::protobuf::Any* DiscoveryResponse::add_resources() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.DiscoveryResponse.resources)
  return resources_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
DiscoveryResponse::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.DiscoveryResponse.resources)
  return &resources_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
DiscoveryResponse::resources() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.DiscoveryResponse.resources)
  return resources_;
}

// bool canary = 3;
inline void DiscoveryResponse::clear_canary() {
  canary_ = false;
}
inline bool DiscoveryResponse::canary() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DiscoveryResponse.canary)
  return canary_;
}
inline void DiscoveryResponse::set_canary(bool value) {
  
  canary_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.DiscoveryResponse.canary)
}

// string type_url = 4;
inline void DiscoveryResponse::clear_type_url() {
  type_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiscoveryResponse::type_url() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DiscoveryResponse.type_url)
  return type_url_.GetNoArena();
}
inline void DiscoveryResponse::set_type_url(const ::std::string& value) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.DiscoveryResponse.type_url)
}
#if LANG_CXX11
inline void DiscoveryResponse::set_type_url(::std::string&& value) {
  
  type_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.DiscoveryResponse.type_url)
}
#endif
inline void DiscoveryResponse::set_type_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.DiscoveryResponse.type_url)
}
inline void DiscoveryResponse::set_type_url(const char* value, size_t size) {
  
  type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.DiscoveryResponse.type_url)
}
inline ::std::string* DiscoveryResponse::mutable_type_url() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DiscoveryResponse.type_url)
  return type_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiscoveryResponse::release_type_url() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DiscoveryResponse.type_url)
  
  return type_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiscoveryResponse::set_allocated_type_url(::std::string* type_url) {
  if (type_url != NULL) {
    
  } else {
    
  }
  type_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_url);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DiscoveryResponse.type_url)
}

// string nonce = 5;
inline void DiscoveryResponse::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiscoveryResponse::nonce() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.DiscoveryResponse.nonce)
  return nonce_.GetNoArena();
}
inline void DiscoveryResponse::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.DiscoveryResponse.nonce)
}
#if LANG_CXX11
inline void DiscoveryResponse::set_nonce(::std::string&& value) {
  
  nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.DiscoveryResponse.nonce)
}
#endif
inline void DiscoveryResponse::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.DiscoveryResponse.nonce)
}
inline void DiscoveryResponse::set_nonce(const char* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.DiscoveryResponse.nonce)
}
inline ::std::string* DiscoveryResponse::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.DiscoveryResponse.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiscoveryResponse::release_nonce() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.DiscoveryResponse.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiscoveryResponse::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.DiscoveryResponse.nonce)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2fdiscovery_2eproto__INCLUDED
