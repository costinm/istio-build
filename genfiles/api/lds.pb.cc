// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/lds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/lds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
class FilterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Filter> {
} _Filter_default_instance_;
class FilterChainMatch_CidrRangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FilterChainMatch_CidrRange> {
} _FilterChainMatch_CidrRange_default_instance_;
class FilterChainMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FilterChainMatch> {
} _FilterChainMatch_default_instance_;
class FilterChainDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FilterChain> {
} _FilterChain_default_instance_;
class ListenerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Listener> {
} _Listener_default_instance_;

namespace protobuf_api_2flds_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChainMatch_CidrRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChainMatch_CidrRange, address_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChainMatch_CidrRange, prefix_len_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChainMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChainMatch, sni_domains_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChainMatch, prefix_ranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChainMatch, address_suffix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChainMatch, suffix_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChainMatch, source_prefix_ranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChainMatch, source_ports_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChain, filter_chain_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChain, tls_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChain, filter_chain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChain, use_proxy_proto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterChain, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Listener, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Listener, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Listener, filter_chains_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Listener, use_original_dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Listener, per_connection_buffer_limit_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Listener, metadata_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Filter)},
  { 7, -1, sizeof(FilterChainMatch_CidrRange)},
  { 13, -1, sizeof(FilterChainMatch)},
  { 23, -1, sizeof(FilterChain)},
  { 32, -1, sizeof(Listener)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Filter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FilterChainMatch_CidrRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FilterChainMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FilterChain_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Listener_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/lds.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _Filter_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _FilterChainMatch_CidrRange_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _FilterChainMatch_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _FilterChain_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Listener_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::envoy::api::v2::protobuf_api_2faddress_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  _Filter_default_instance_.DefaultConstruct();
  _FilterChainMatch_CidrRange_default_instance_.DefaultConstruct();
  _FilterChainMatch_default_instance_.DefaultConstruct();
  _FilterChain_default_instance_.DefaultConstruct();
  _Listener_default_instance_.DefaultConstruct();
  _Filter_default_instance_.get_mutable()->config_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  _FilterChainMatch_CidrRange_default_instance_.get_mutable()->prefix_len_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _FilterChainMatch_default_instance_.get_mutable()->suffix_len_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _FilterChain_default_instance_.get_mutable()->filter_chain_match_ = const_cast< ::envoy::api::v2::FilterChainMatch*>(
      ::envoy::api::v2::FilterChainMatch::internal_default_instance());
  _FilterChain_default_instance_.get_mutable()->tls_context_ = const_cast< ::envoy::api::v2::DownstreamTlsContext*>(
      ::envoy::api::v2::DownstreamTlsContext::internal_default_instance());
  _FilterChain_default_instance_.get_mutable()->use_proxy_proto_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _FilterChain_default_instance_.get_mutable()->metadata_ = const_cast< ::envoy::api::v2::Metadata*>(
      ::envoy::api::v2::Metadata::internal_default_instance());
  _Listener_default_instance_.get_mutable()->address_ = const_cast< ::envoy::api::v2::UnresolvedAddress*>(
      ::envoy::api::v2::UnresolvedAddress::internal_default_instance());
  _Listener_default_instance_.get_mutable()->use_original_dst_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _Listener_default_instance_.get_mutable()->per_connection_buffer_limit_bytes_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Listener_default_instance_.get_mutable()->metadata_ = const_cast< ::envoy::api::v2::Metadata*>(
      ::envoy::api::v2::Metadata::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rapi/lds.proto\022\014envoy.api.v2\032\021api/addre"
      "ss.proto\032\016api/base.proto\032\025api/tls_contex"
      "t.proto\032\034google/api/annotations.proto\032\034g"
      "oogle/protobuf/struct.proto\032\036google/prot"
      "obuf/wrappers.proto\"\217\001\n\006Filter\022\'\n\004type\030\001"
      " \001(\0162\031.envoy.api.v2.Filter.Type\022\014\n\004name\030"
      "\002 \001(\t\022\'\n\006config\030\003 \001(\0132\027.google.protobuf."
      "Struct\"%\n\004Type\022\010\n\004BOTH\020\000\022\010\n\004READ\020\001\022\t\n\005WR"
      "ITE\020\002\"\205\003\n\020FilterChainMatch\022\023\n\013sni_domain"
      "s\030\001 \003(\t\022\?\n\rprefix_ranges\030\003 \003(\0132(.envoy.a"
      "pi.v2.FilterChainMatch.CidrRange\022\026\n\016addr"
      "ess_suffix\030\004 \001(\t\0220\n\nsuffix_len\030\005 \001(\0132\034.g"
      "oogle.protobuf.UInt32Value\022F\n\024source_pre"
      "fix_ranges\030\006 \003(\0132(.envoy.api.v2.FilterCh"
      "ainMatch.CidrRange\0222\n\014source_ports\030\007 \003(\013"
      "2\034.google.protobuf.UInt32Value\032U\n\tCidrRa"
      "nge\022\026\n\016address_prefix\030\001 \001(\t\0220\n\nprefix_le"
      "n\030\002 \001(\0132\034.google.protobuf.UInt32Value\"\215\002"
      "\n\013FilterChain\022:\n\022filter_chain_match\030\001 \001("
      "\0132\036.envoy.api.v2.FilterChainMatch\0227\n\013tls"
      "_context\030\002 \001(\0132\".envoy.api.v2.Downstream"
      "TlsContext\022*\n\014filter_chain\030\003 \003(\0132\024.envoy"
      ".api.v2.Filter\0223\n\017use_proxy_proto\030\004 \001(\0132"
      "\032.google.protobuf.BoolValue\022(\n\010metadata\030"
      "\005 \001(\0132\026.envoy.api.v2.Metadata\"\227\002\n\010Listen"
      "er\0220\n\007address\030\001 \001(\0132\037.envoy.api.v2.Unres"
      "olvedAddress\0220\n\rfilter_chains\030\002 \003(\0132\031.en"
      "voy.api.v2.FilterChain\0224\n\020use_original_d"
      "st\030\003 \001(\0132\032.google.protobuf.BoolValue\022G\n!"
      "per_connection_buffer_limit_bytes\030\004 \001(\0132"
      "\034.google.protobuf.UInt32Value\022(\n\010metadat"
      "a\030\005 \001(\0132\026.envoy.api.v2.Metadata2\353\001\n\030List"
      "enerDiscoveryService\022X\n\017StreamListeners\022"
      "\036.envoy.api.v2.DiscoveryRequest\032\037.envoy."
      "api.v2.DiscoveryResponse\"\000(\0010\001\022u\n\016FetchL"
      "isteners\022\036.envoy.api.v2.DiscoveryRequest"
      "\032\037.envoy.api.v2.DiscoveryResponse\"\"\202\323\344\223\002"
      "\034\"\027/v2/discovery:listeners:\001*b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1517);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/lds.proto", &protobuf_RegisterTypes);
  ::envoy::api::v2::protobuf_api_2faddress_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2ftls_5fcontext_2eproto::AddDescriptors();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2flds_2eproto

const ::google::protobuf::EnumDescriptor* Filter_Type_descriptor() {
  protobuf_api_2flds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2flds_2eproto::file_level_enum_descriptors[0];
}
bool Filter_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Filter_Type Filter::BOTH;
const Filter_Type Filter::READ;
const Filter_Type Filter::WRITE;
const Filter_Type Filter::Type_MIN;
const Filter_Type Filter::Type_MAX;
const int Filter::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Filter::kTypeFieldNumber;
const int Filter::kNameFieldNumber;
const int Filter::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Filter::Filter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2flds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Filter)
}
Filter::Filter(const Filter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_config()) {
    config_ = new ::google::protobuf::Struct(*from.config_);
  } else {
    config_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Filter)
}

void Filter::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&config_) + sizeof(type_));
  _cached_size_ = 0;
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Filter)
  SharedDtor();
}

void Filter::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void Filter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Filter::descriptor() {
  protobuf_api_2flds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2flds_2eproto::file_level_metadata[0].descriptor;
}

const Filter& Filter::default_instance() {
  protobuf_api_2flds_2eproto::InitDefaults();
  return *internal_default_instance();
}

Filter* Filter::New(::google::protobuf::Arena* arena) const {
  Filter* n = new Filter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Filter)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  type_ = 0;
}

bool Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Filter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.Filter.Type type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::envoy::api::v2::Filter_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.Filter.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct config = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Filter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Filter)
  return false;
#undef DO_
}

void Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Filter)
  // .envoy.api.v2.Filter.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Filter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Filter)
}

::google::protobuf::uint8* Filter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Filter)
  // .envoy.api.v2.Filter.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Filter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->config_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Filter)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Struct config = 3;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // .envoy.api.v2.Filter.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Filter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Filter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Filter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Filter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Filter)
    MergeFrom(*source);
  }
}

void Filter::MergeFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_config()) {
    mutable_config()->::google::protobuf::Struct::MergeFrom(from.config());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Filter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  return true;
}

void Filter::Swap(Filter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Filter::InternalSwap(Filter* other) {
  name_.Swap(&other->name_);
  std::swap(config_, other->config_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Filter::GetMetadata() const {
  protobuf_api_2flds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2flds_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Filter

// .envoy.api.v2.Filter.Type type = 1;
void Filter::clear_type() {
  type_ = 0;
}
::envoy::api::v2::Filter_Type Filter::type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Filter.type)
  return static_cast< ::envoy::api::v2::Filter_Type >(type_);
}
void Filter::set_type(::envoy::api::v2::Filter_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.Filter.type)
}

// string name = 2;
void Filter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Filter::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Filter.name)
  return name_.GetNoArena();
}
void Filter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Filter.name)
}
#if LANG_CXX11
void Filter::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Filter.name)
}
#endif
void Filter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Filter.name)
}
void Filter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Filter.name)
}
::std::string* Filter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Filter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Filter::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Filter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Filter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Filter.name)
}

// .google.protobuf.Struct config = 3;
bool Filter::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void Filter::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::google::protobuf::Struct& Filter::config() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Filter.config)
  return config_ != NULL ? *config_
                         : *::google::protobuf::Struct::internal_default_instance();
}
::google::protobuf::Struct* Filter::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::protobuf::Struct;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Filter.config)
  return config_;
}
::google::protobuf::Struct* Filter::release_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Filter.config)
  
  ::google::protobuf::Struct* temp = config_;
  config_ = NULL;
  return temp;
}
void Filter::set_allocated_config(::google::protobuf::Struct* config) {
  delete config_;
  if (config != NULL && config->GetArena() != NULL) {
    ::google::protobuf::Struct* new_config = new ::google::protobuf::Struct;
    new_config->CopyFrom(*config);
    config = new_config;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Filter.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterChainMatch_CidrRange::kAddressPrefixFieldNumber;
const int FilterChainMatch_CidrRange::kPrefixLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterChainMatch_CidrRange::FilterChainMatch_CidrRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2flds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.FilterChainMatch.CidrRange)
}
FilterChainMatch_CidrRange::FilterChainMatch_CidrRange(const FilterChainMatch_CidrRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address_prefix().size() > 0) {
    address_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_prefix_);
  }
  if (from.has_prefix_len()) {
    prefix_len_ = new ::google::protobuf::UInt32Value(*from.prefix_len_);
  } else {
    prefix_len_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.FilterChainMatch.CidrRange)
}

void FilterChainMatch_CidrRange::SharedCtor() {
  address_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = NULL;
  _cached_size_ = 0;
}

FilterChainMatch_CidrRange::~FilterChainMatch_CidrRange() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.FilterChainMatch.CidrRange)
  SharedDtor();
}

void FilterChainMatch_CidrRange::SharedDtor() {
  address_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete prefix_len_;
  }
}

void FilterChainMatch_CidrRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterChainMatch_CidrRange::descriptor() {
  protobuf_api_2flds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2flds_2eproto::file_level_metadata[1].descriptor;
}

const FilterChainMatch_CidrRange& FilterChainMatch_CidrRange::default_instance() {
  protobuf_api_2flds_2eproto::InitDefaults();
  return *internal_default_instance();
}

FilterChainMatch_CidrRange* FilterChainMatch_CidrRange::New(::google::protobuf::Arena* arena) const {
  FilterChainMatch_CidrRange* n = new FilterChainMatch_CidrRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilterChainMatch_CidrRange::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.FilterChainMatch.CidrRange)
  address_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && prefix_len_ != NULL) {
    delete prefix_len_;
  }
  prefix_len_ = NULL;
}

bool FilterChainMatch_CidrRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.FilterChainMatch.CidrRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address_prefix = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address_prefix().data(), this->address_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.FilterChainMatch.CidrRange.address_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value prefix_len = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prefix_len()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.FilterChainMatch.CidrRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.FilterChainMatch.CidrRange)
  return false;
#undef DO_
}

void FilterChainMatch_CidrRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.FilterChainMatch.CidrRange)
  // string address_prefix = 1;
  if (this->address_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address_prefix().data(), this->address_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.FilterChainMatch.CidrRange.address_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address_prefix(), output);
  }

  // .google.protobuf.UInt32Value prefix_len = 2;
  if (this->has_prefix_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->prefix_len_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.FilterChainMatch.CidrRange)
}

::google::protobuf::uint8* FilterChainMatch_CidrRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.FilterChainMatch.CidrRange)
  // string address_prefix = 1;
  if (this->address_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address_prefix().data(), this->address_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.FilterChainMatch.CidrRange.address_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address_prefix(), target);
  }

  // .google.protobuf.UInt32Value prefix_len = 2;
  if (this->has_prefix_len()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->prefix_len_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.FilterChainMatch.CidrRange)
  return target;
}

size_t FilterChainMatch_CidrRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.FilterChainMatch.CidrRange)
  size_t total_size = 0;

  // string address_prefix = 1;
  if (this->address_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address_prefix());
  }

  // .google.protobuf.UInt32Value prefix_len = 2;
  if (this->has_prefix_len()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prefix_len_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterChainMatch_CidrRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.FilterChainMatch.CidrRange)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterChainMatch_CidrRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterChainMatch_CidrRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.FilterChainMatch.CidrRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.FilterChainMatch.CidrRange)
    MergeFrom(*source);
  }
}

void FilterChainMatch_CidrRange::MergeFrom(const FilterChainMatch_CidrRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.FilterChainMatch.CidrRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.address_prefix().size() > 0) {

    address_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_prefix_);
  }
  if (from.has_prefix_len()) {
    mutable_prefix_len()->::google::protobuf::UInt32Value::MergeFrom(from.prefix_len());
  }
}

void FilterChainMatch_CidrRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.FilterChainMatch.CidrRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterChainMatch_CidrRange::CopyFrom(const FilterChainMatch_CidrRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.FilterChainMatch.CidrRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterChainMatch_CidrRange::IsInitialized() const {
  return true;
}

void FilterChainMatch_CidrRange::Swap(FilterChainMatch_CidrRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterChainMatch_CidrRange::InternalSwap(FilterChainMatch_CidrRange* other) {
  address_prefix_.Swap(&other->address_prefix_);
  std::swap(prefix_len_, other->prefix_len_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilterChainMatch_CidrRange::GetMetadata() const {
  protobuf_api_2flds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2flds_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilterChainMatch_CidrRange

// string address_prefix = 1;
void FilterChainMatch_CidrRange::clear_address_prefix() {
  address_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FilterChainMatch_CidrRange::address_prefix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.FilterChainMatch.CidrRange.address_prefix)
  return address_prefix_.GetNoArena();
}
void FilterChainMatch_CidrRange::set_address_prefix(const ::std::string& value) {
  
  address_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.FilterChainMatch.CidrRange.address_prefix)
}
#if LANG_CXX11
void FilterChainMatch_CidrRange::set_address_prefix(::std::string&& value) {
  
  address_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.FilterChainMatch.CidrRange.address_prefix)
}
#endif
void FilterChainMatch_CidrRange::set_address_prefix(const char* value) {
  
  address_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.FilterChainMatch.CidrRange.address_prefix)
}
void FilterChainMatch_CidrRange::set_address_prefix(const char* value, size_t size) {
  
  address_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.FilterChainMatch.CidrRange.address_prefix)
}
::std::string* FilterChainMatch_CidrRange::mutable_address_prefix() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.FilterChainMatch.CidrRange.address_prefix)
  return address_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FilterChainMatch_CidrRange::release_address_prefix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.FilterChainMatch.CidrRange.address_prefix)
  
  return address_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FilterChainMatch_CidrRange::set_allocated_address_prefix(::std::string* address_prefix) {
  if (address_prefix != NULL) {
    
  } else {
    
  }
  address_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address_prefix);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.FilterChainMatch.CidrRange.address_prefix)
}

// .google.protobuf.UInt32Value prefix_len = 2;
bool FilterChainMatch_CidrRange::has_prefix_len() const {
  return this != internal_default_instance() && prefix_len_ != NULL;
}
void FilterChainMatch_CidrRange::clear_prefix_len() {
  if (GetArenaNoVirtual() == NULL && prefix_len_ != NULL) delete prefix_len_;
  prefix_len_ = NULL;
}
const ::google::protobuf::UInt32Value& FilterChainMatch_CidrRange::prefix_len() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.FilterChainMatch.CidrRange.prefix_len)
  return prefix_len_ != NULL ? *prefix_len_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* FilterChainMatch_CidrRange::mutable_prefix_len() {
  
  if (prefix_len_ == NULL) {
    prefix_len_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.FilterChainMatch.CidrRange.prefix_len)
  return prefix_len_;
}
::google::protobuf::UInt32Value* FilterChainMatch_CidrRange::release_prefix_len() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.FilterChainMatch.CidrRange.prefix_len)
  
  ::google::protobuf::UInt32Value* temp = prefix_len_;
  prefix_len_ = NULL;
  return temp;
}
void FilterChainMatch_CidrRange::set_allocated_prefix_len(::google::protobuf::UInt32Value* prefix_len) {
  delete prefix_len_;
  if (prefix_len != NULL && prefix_len->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_prefix_len = new ::google::protobuf::UInt32Value;
    new_prefix_len->CopyFrom(*prefix_len);
    prefix_len = new_prefix_len;
  }
  prefix_len_ = prefix_len;
  if (prefix_len) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.FilterChainMatch.CidrRange.prefix_len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterChainMatch::kSniDomainsFieldNumber;
const int FilterChainMatch::kPrefixRangesFieldNumber;
const int FilterChainMatch::kAddressSuffixFieldNumber;
const int FilterChainMatch::kSuffixLenFieldNumber;
const int FilterChainMatch::kSourcePrefixRangesFieldNumber;
const int FilterChainMatch::kSourcePortsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterChainMatch::FilterChainMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2flds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.FilterChainMatch)
}
FilterChainMatch::FilterChainMatch(const FilterChainMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sni_domains_(from.sni_domains_),
      prefix_ranges_(from.prefix_ranges_),
      source_prefix_ranges_(from.source_prefix_ranges_),
      source_ports_(from.source_ports_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address_suffix().size() > 0) {
    address_suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_suffix_);
  }
  if (from.has_suffix_len()) {
    suffix_len_ = new ::google::protobuf::UInt32Value(*from.suffix_len_);
  } else {
    suffix_len_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.FilterChainMatch)
}

void FilterChainMatch::SharedCtor() {
  address_suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_len_ = NULL;
  _cached_size_ = 0;
}

FilterChainMatch::~FilterChainMatch() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.FilterChainMatch)
  SharedDtor();
}

void FilterChainMatch::SharedDtor() {
  address_suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete suffix_len_;
  }
}

void FilterChainMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterChainMatch::descriptor() {
  protobuf_api_2flds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2flds_2eproto::file_level_metadata[2].descriptor;
}

const FilterChainMatch& FilterChainMatch::default_instance() {
  protobuf_api_2flds_2eproto::InitDefaults();
  return *internal_default_instance();
}

FilterChainMatch* FilterChainMatch::New(::google::protobuf::Arena* arena) const {
  FilterChainMatch* n = new FilterChainMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilterChainMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.FilterChainMatch)
  sni_domains_.Clear();
  prefix_ranges_.Clear();
  source_prefix_ranges_.Clear();
  source_ports_.Clear();
  address_suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && suffix_len_ != NULL) {
    delete suffix_len_;
  }
  suffix_len_ = NULL;
}

bool FilterChainMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.FilterChainMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string sni_domains = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sni_domains()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sni_domains(this->sni_domains_size() - 1).data(),
            this->sni_domains(this->sni_domains_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.FilterChainMatch.sni_domains"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.FilterChainMatch.CidrRange prefix_ranges = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_prefix_ranges()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // string address_suffix = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_suffix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address_suffix().data(), this->address_suffix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.FilterChainMatch.address_suffix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value suffix_len = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suffix_len()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.FilterChainMatch.CidrRange source_prefix_ranges = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_source_prefix_ranges()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .google.protobuf.UInt32Value source_ports = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_source_ports()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.FilterChainMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.FilterChainMatch)
  return false;
#undef DO_
}

void FilterChainMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.FilterChainMatch)
  // repeated string sni_domains = 1;
  for (int i = 0; i < this->sni_domains_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sni_domains(i).data(), this->sni_domains(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.FilterChainMatch.sni_domains");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sni_domains(i), output);
  }

  // repeated .envoy.api.v2.FilterChainMatch.CidrRange prefix_ranges = 3;
  for (unsigned int i = 0, n = this->prefix_ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prefix_ranges(i), output);
  }

  // string address_suffix = 4;
  if (this->address_suffix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address_suffix().data(), this->address_suffix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.FilterChainMatch.address_suffix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->address_suffix(), output);
  }

  // .google.protobuf.UInt32Value suffix_len = 5;
  if (this->has_suffix_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->suffix_len_, output);
  }

  // repeated .envoy.api.v2.FilterChainMatch.CidrRange source_prefix_ranges = 6;
  for (unsigned int i = 0, n = this->source_prefix_ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->source_prefix_ranges(i), output);
  }

  // repeated .google.protobuf.UInt32Value source_ports = 7;
  for (unsigned int i = 0, n = this->source_ports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->source_ports(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.FilterChainMatch)
}

::google::protobuf::uint8* FilterChainMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.FilterChainMatch)
  // repeated string sni_domains = 1;
  for (int i = 0; i < this->sni_domains_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sni_domains(i).data(), this->sni_domains(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.FilterChainMatch.sni_domains");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->sni_domains(i), target);
  }

  // repeated .envoy.api.v2.FilterChainMatch.CidrRange prefix_ranges = 3;
  for (unsigned int i = 0, n = this->prefix_ranges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->prefix_ranges(i), false, target);
  }

  // string address_suffix = 4;
  if (this->address_suffix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address_suffix().data(), this->address_suffix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.FilterChainMatch.address_suffix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address_suffix(), target);
  }

  // .google.protobuf.UInt32Value suffix_len = 5;
  if (this->has_suffix_len()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->suffix_len_, false, target);
  }

  // repeated .envoy.api.v2.FilterChainMatch.CidrRange source_prefix_ranges = 6;
  for (unsigned int i = 0, n = this->source_prefix_ranges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->source_prefix_ranges(i), false, target);
  }

  // repeated .google.protobuf.UInt32Value source_ports = 7;
  for (unsigned int i = 0, n = this->source_ports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->source_ports(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.FilterChainMatch)
  return target;
}

size_t FilterChainMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.FilterChainMatch)
  size_t total_size = 0;

  // repeated string sni_domains = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sni_domains_size());
  for (int i = 0; i < this->sni_domains_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sni_domains(i));
  }

  // repeated .envoy.api.v2.FilterChainMatch.CidrRange prefix_ranges = 3;
  {
    unsigned int count = this->prefix_ranges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prefix_ranges(i));
    }
  }

  // repeated .envoy.api.v2.FilterChainMatch.CidrRange source_prefix_ranges = 6;
  {
    unsigned int count = this->source_prefix_ranges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source_prefix_ranges(i));
    }
  }

  // repeated .google.protobuf.UInt32Value source_ports = 7;
  {
    unsigned int count = this->source_ports_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source_ports(i));
    }
  }

  // string address_suffix = 4;
  if (this->address_suffix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address_suffix());
  }

  // .google.protobuf.UInt32Value suffix_len = 5;
  if (this->has_suffix_len()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->suffix_len_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterChainMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.FilterChainMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterChainMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterChainMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.FilterChainMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.FilterChainMatch)
    MergeFrom(*source);
  }
}

void FilterChainMatch::MergeFrom(const FilterChainMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.FilterChainMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sni_domains_.MergeFrom(from.sni_domains_);
  prefix_ranges_.MergeFrom(from.prefix_ranges_);
  source_prefix_ranges_.MergeFrom(from.source_prefix_ranges_);
  source_ports_.MergeFrom(from.source_ports_);
  if (from.address_suffix().size() > 0) {

    address_suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_suffix_);
  }
  if (from.has_suffix_len()) {
    mutable_suffix_len()->::google::protobuf::UInt32Value::MergeFrom(from.suffix_len());
  }
}

void FilterChainMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.FilterChainMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterChainMatch::CopyFrom(const FilterChainMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.FilterChainMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterChainMatch::IsInitialized() const {
  return true;
}

void FilterChainMatch::Swap(FilterChainMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterChainMatch::InternalSwap(FilterChainMatch* other) {
  sni_domains_.UnsafeArenaSwap(&other->sni_domains_);
  prefix_ranges_.UnsafeArenaSwap(&other->prefix_ranges_);
  source_prefix_ranges_.UnsafeArenaSwap(&other->source_prefix_ranges_);
  source_ports_.UnsafeArenaSwap(&other->source_ports_);
  address_suffix_.Swap(&other->address_suffix_);
  std::swap(suffix_len_, other->suffix_len_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilterChainMatch::GetMetadata() const {
  protobuf_api_2flds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2flds_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilterChainMatch

// repeated string sni_domains = 1;
int FilterChainMatch::sni_domains_size() const {
  return sni_domains_.size();
}
void FilterChainMatch::clear_sni_domains() {
  sni_domains_.Clear();
}
const ::std::string& FilterChainMatch::sni_domains(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.FilterChainMatch.sni_domains)
  return sni_domains_.Get(index);
}
::std::string* FilterChainMatch::mutable_sni_domains(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.FilterChainMatch.sni_domains)
  return sni_domains_.Mutable(index);
}
void FilterChainMatch::set_sni_domains(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:envoy.api.v2.FilterChainMatch.sni_domains)
  sni_domains_.Mutable(index)->assign(value);
}
void FilterChainMatch::set_sni_domains(int index, const char* value) {
  sni_domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.FilterChainMatch.sni_domains)
}
void FilterChainMatch::set_sni_domains(int index, const char* value, size_t size) {
  sni_domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.FilterChainMatch.sni_domains)
}
::std::string* FilterChainMatch::add_sni_domains() {
  // @@protoc_insertion_point(field_add_mutable:envoy.api.v2.FilterChainMatch.sni_domains)
  return sni_domains_.Add();
}
void FilterChainMatch::add_sni_domains(const ::std::string& value) {
  sni_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:envoy.api.v2.FilterChainMatch.sni_domains)
}
void FilterChainMatch::add_sni_domains(const char* value) {
  sni_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:envoy.api.v2.FilterChainMatch.sni_domains)
}
void FilterChainMatch::add_sni_domains(const char* value, size_t size) {
  sni_domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:envoy.api.v2.FilterChainMatch.sni_domains)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FilterChainMatch::sni_domains() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.FilterChainMatch.sni_domains)
  return sni_domains_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FilterChainMatch::mutable_sni_domains() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.FilterChainMatch.sni_domains)
  return &sni_domains_;
}

// repeated .envoy.api.v2.FilterChainMatch.CidrRange prefix_ranges = 3;
int FilterChainMatch::prefix_ranges_size() const {
  return prefix_ranges_.size();
}
void FilterChainMatch::clear_prefix_ranges() {
  prefix_ranges_.Clear();
}
const ::envoy::api::v2::FilterChainMatch_CidrRange& FilterChainMatch::prefix_ranges(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.FilterChainMatch.prefix_ranges)
  return prefix_ranges_.Get(index);
}
::envoy::api::v2::FilterChainMatch_CidrRange* FilterChainMatch::mutable_prefix_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.FilterChainMatch.prefix_ranges)
  return prefix_ranges_.Mutable(index);
}
::envoy::api::v2::FilterChainMatch_CidrRange* FilterChainMatch::add_prefix_ranges() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.FilterChainMatch.prefix_ranges)
  return prefix_ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::FilterChainMatch_CidrRange >*
FilterChainMatch::mutable_prefix_ranges() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.FilterChainMatch.prefix_ranges)
  return &prefix_ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::FilterChainMatch_CidrRange >&
FilterChainMatch::prefix_ranges() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.FilterChainMatch.prefix_ranges)
  return prefix_ranges_;
}

// string address_suffix = 4;
void FilterChainMatch::clear_address_suffix() {
  address_suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FilterChainMatch::address_suffix() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.FilterChainMatch.address_suffix)
  return address_suffix_.GetNoArena();
}
void FilterChainMatch::set_address_suffix(const ::std::string& value) {
  
  address_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.FilterChainMatch.address_suffix)
}
#if LANG_CXX11
void FilterChainMatch::set_address_suffix(::std::string&& value) {
  
  address_suffix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.FilterChainMatch.address_suffix)
}
#endif
void FilterChainMatch::set_address_suffix(const char* value) {
  
  address_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.FilterChainMatch.address_suffix)
}
void FilterChainMatch::set_address_suffix(const char* value, size_t size) {
  
  address_suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.FilterChainMatch.address_suffix)
}
::std::string* FilterChainMatch::mutable_address_suffix() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.FilterChainMatch.address_suffix)
  return address_suffix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FilterChainMatch::release_address_suffix() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.FilterChainMatch.address_suffix)
  
  return address_suffix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FilterChainMatch::set_allocated_address_suffix(::std::string* address_suffix) {
  if (address_suffix != NULL) {
    
  } else {
    
  }
  address_suffix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address_suffix);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.FilterChainMatch.address_suffix)
}

// .google.protobuf.UInt32Value suffix_len = 5;
bool FilterChainMatch::has_suffix_len() const {
  return this != internal_default_instance() && suffix_len_ != NULL;
}
void FilterChainMatch::clear_suffix_len() {
  if (GetArenaNoVirtual() == NULL && suffix_len_ != NULL) delete suffix_len_;
  suffix_len_ = NULL;
}
const ::google::protobuf::UInt32Value& FilterChainMatch::suffix_len() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.FilterChainMatch.suffix_len)
  return suffix_len_ != NULL ? *suffix_len_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* FilterChainMatch::mutable_suffix_len() {
  
  if (suffix_len_ == NULL) {
    suffix_len_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.FilterChainMatch.suffix_len)
  return suffix_len_;
}
::google::protobuf::UInt32Value* FilterChainMatch::release_suffix_len() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.FilterChainMatch.suffix_len)
  
  ::google::protobuf::UInt32Value* temp = suffix_len_;
  suffix_len_ = NULL;
  return temp;
}
void FilterChainMatch::set_allocated_suffix_len(::google::protobuf::UInt32Value* suffix_len) {
  delete suffix_len_;
  if (suffix_len != NULL && suffix_len->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_suffix_len = new ::google::protobuf::UInt32Value;
    new_suffix_len->CopyFrom(*suffix_len);
    suffix_len = new_suffix_len;
  }
  suffix_len_ = suffix_len;
  if (suffix_len) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.FilterChainMatch.suffix_len)
}

// repeated .envoy.api.v2.FilterChainMatch.CidrRange source_prefix_ranges = 6;
int FilterChainMatch::source_prefix_ranges_size() const {
  return source_prefix_ranges_.size();
}
void FilterChainMatch::clear_source_prefix_ranges() {
  source_prefix_ranges_.Clear();
}
const ::envoy::api::v2::FilterChainMatch_CidrRange& FilterChainMatch::source_prefix_ranges(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.FilterChainMatch.source_prefix_ranges)
  return source_prefix_ranges_.Get(index);
}
::envoy::api::v2::FilterChainMatch_CidrRange* FilterChainMatch::mutable_source_prefix_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.FilterChainMatch.source_prefix_ranges)
  return source_prefix_ranges_.Mutable(index);
}
::envoy::api::v2::FilterChainMatch_CidrRange* FilterChainMatch::add_source_prefix_ranges() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.FilterChainMatch.source_prefix_ranges)
  return source_prefix_ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::FilterChainMatch_CidrRange >*
FilterChainMatch::mutable_source_prefix_ranges() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.FilterChainMatch.source_prefix_ranges)
  return &source_prefix_ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::FilterChainMatch_CidrRange >&
FilterChainMatch::source_prefix_ranges() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.FilterChainMatch.source_prefix_ranges)
  return source_prefix_ranges_;
}

// repeated .google.protobuf.UInt32Value source_ports = 7;
int FilterChainMatch::source_ports_size() const {
  return source_ports_.size();
}
void FilterChainMatch::clear_source_ports() {
  source_ports_.Clear();
}
const ::google::protobuf::UInt32Value& FilterChainMatch::source_ports(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.FilterChainMatch.source_ports)
  return source_ports_.Get(index);
}
::google::protobuf::UInt32Value* FilterChainMatch::mutable_source_ports(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.FilterChainMatch.source_ports)
  return source_ports_.Mutable(index);
}
::google::protobuf::UInt32Value* FilterChainMatch::add_source_ports() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.FilterChainMatch.source_ports)
  return source_ports_.Add();
}
::google::protobuf::RepeatedPtrField< ::google::protobuf::UInt32Value >*
FilterChainMatch::mutable_source_ports() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.FilterChainMatch.source_ports)
  return &source_ports_;
}
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::UInt32Value >&
FilterChainMatch::source_ports() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.FilterChainMatch.source_ports)
  return source_ports_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterChain::kFilterChainMatchFieldNumber;
const int FilterChain::kTlsContextFieldNumber;
const int FilterChain::kFilterChainFieldNumber;
const int FilterChain::kUseProxyProtoFieldNumber;
const int FilterChain::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterChain::FilterChain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2flds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.FilterChain)
}
FilterChain::FilterChain(const FilterChain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filter_chain_(from.filter_chain_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_filter_chain_match()) {
    filter_chain_match_ = new ::envoy::api::v2::FilterChainMatch(*from.filter_chain_match_);
  } else {
    filter_chain_match_ = NULL;
  }
  if (from.has_tls_context()) {
    tls_context_ = new ::envoy::api::v2::DownstreamTlsContext(*from.tls_context_);
  } else {
    tls_context_ = NULL;
  }
  if (from.has_use_proxy_proto()) {
    use_proxy_proto_ = new ::google::protobuf::BoolValue(*from.use_proxy_proto_);
  } else {
    use_proxy_proto_ = NULL;
  }
  if (from.has_metadata()) {
    metadata_ = new ::envoy::api::v2::Metadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.FilterChain)
}

void FilterChain::SharedCtor() {
  ::memset(&filter_chain_match_, 0, reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&filter_chain_match_) + sizeof(metadata_));
  _cached_size_ = 0;
}

FilterChain::~FilterChain() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.FilterChain)
  SharedDtor();
}

void FilterChain::SharedDtor() {
  if (this != internal_default_instance()) {
    delete filter_chain_match_;
  }
  if (this != internal_default_instance()) {
    delete tls_context_;
  }
  if (this != internal_default_instance()) {
    delete use_proxy_proto_;
  }
  if (this != internal_default_instance()) {
    delete metadata_;
  }
}

void FilterChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterChain::descriptor() {
  protobuf_api_2flds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2flds_2eproto::file_level_metadata[3].descriptor;
}

const FilterChain& FilterChain::default_instance() {
  protobuf_api_2flds_2eproto::InitDefaults();
  return *internal_default_instance();
}

FilterChain* FilterChain::New(::google::protobuf::Arena* arena) const {
  FilterChain* n = new FilterChain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilterChain::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.FilterChain)
  filter_chain_.Clear();
  if (GetArenaNoVirtual() == NULL && filter_chain_match_ != NULL) {
    delete filter_chain_match_;
  }
  filter_chain_match_ = NULL;
  if (GetArenaNoVirtual() == NULL && tls_context_ != NULL) {
    delete tls_context_;
  }
  tls_context_ = NULL;
  if (GetArenaNoVirtual() == NULL && use_proxy_proto_ != NULL) {
    delete use_proxy_proto_;
  }
  use_proxy_proto_ = NULL;
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
}

bool FilterChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.FilterChain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.FilterChainMatch filter_chain_match = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter_chain_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.DownstreamTlsContext tls_context = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tls_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.Filter filter_chain = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_filter_chain()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .google.protobuf.BoolValue use_proxy_proto = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_use_proxy_proto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Metadata metadata = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.FilterChain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.FilterChain)
  return false;
#undef DO_
}

void FilterChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.FilterChain)
  // .envoy.api.v2.FilterChainMatch filter_chain_match = 1;
  if (this->has_filter_chain_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->filter_chain_match_, output);
  }

  // .envoy.api.v2.DownstreamTlsContext tls_context = 2;
  if (this->has_tls_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tls_context_, output);
  }

  // repeated .envoy.api.v2.Filter filter_chain = 3;
  for (unsigned int i = 0, n = this->filter_chain_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->filter_chain(i), output);
  }

  // .google.protobuf.BoolValue use_proxy_proto = 4;
  if (this->has_use_proxy_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->use_proxy_proto_, output);
  }

  // .envoy.api.v2.Metadata metadata = 5;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->metadata_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.FilterChain)
}

::google::protobuf::uint8* FilterChain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.FilterChain)
  // .envoy.api.v2.FilterChainMatch filter_chain_match = 1;
  if (this->has_filter_chain_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->filter_chain_match_, false, target);
  }

  // .envoy.api.v2.DownstreamTlsContext tls_context = 2;
  if (this->has_tls_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tls_context_, false, target);
  }

  // repeated .envoy.api.v2.Filter filter_chain = 3;
  for (unsigned int i = 0, n = this->filter_chain_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->filter_chain(i), false, target);
  }

  // .google.protobuf.BoolValue use_proxy_proto = 4;
  if (this->has_use_proxy_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->use_proxy_proto_, false, target);
  }

  // .envoy.api.v2.Metadata metadata = 5;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->metadata_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.FilterChain)
  return target;
}

size_t FilterChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.FilterChain)
  size_t total_size = 0;

  // repeated .envoy.api.v2.Filter filter_chain = 3;
  {
    unsigned int count = this->filter_chain_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter_chain(i));
    }
  }

  // .envoy.api.v2.FilterChainMatch filter_chain_match = 1;
  if (this->has_filter_chain_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->filter_chain_match_);
  }

  // .envoy.api.v2.DownstreamTlsContext tls_context = 2;
  if (this->has_tls_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tls_context_);
  }

  // .google.protobuf.BoolValue use_proxy_proto = 4;
  if (this->has_use_proxy_proto()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->use_proxy_proto_);
  }

  // .envoy.api.v2.Metadata metadata = 5;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterChain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.FilterChain)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterChain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterChain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.FilterChain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.FilterChain)
    MergeFrom(*source);
  }
}

void FilterChain::MergeFrom(const FilterChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.FilterChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_chain_.MergeFrom(from.filter_chain_);
  if (from.has_filter_chain_match()) {
    mutable_filter_chain_match()->::envoy::api::v2::FilterChainMatch::MergeFrom(from.filter_chain_match());
  }
  if (from.has_tls_context()) {
    mutable_tls_context()->::envoy::api::v2::DownstreamTlsContext::MergeFrom(from.tls_context());
  }
  if (from.has_use_proxy_proto()) {
    mutable_use_proxy_proto()->::google::protobuf::BoolValue::MergeFrom(from.use_proxy_proto());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::envoy::api::v2::Metadata::MergeFrom(from.metadata());
  }
}

void FilterChain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.FilterChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterChain::CopyFrom(const FilterChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.FilterChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterChain::IsInitialized() const {
  return true;
}

void FilterChain::Swap(FilterChain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterChain::InternalSwap(FilterChain* other) {
  filter_chain_.UnsafeArenaSwap(&other->filter_chain_);
  std::swap(filter_chain_match_, other->filter_chain_match_);
  std::swap(tls_context_, other->tls_context_);
  std::swap(use_proxy_proto_, other->use_proxy_proto_);
  std::swap(metadata_, other->metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FilterChain::GetMetadata() const {
  protobuf_api_2flds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2flds_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilterChain

// .envoy.api.v2.FilterChainMatch filter_chain_match = 1;
bool FilterChain::has_filter_chain_match() const {
  return this != internal_default_instance() && filter_chain_match_ != NULL;
}
void FilterChain::clear_filter_chain_match() {
  if (GetArenaNoVirtual() == NULL && filter_chain_match_ != NULL) delete filter_chain_match_;
  filter_chain_match_ = NULL;
}
const ::envoy::api::v2::FilterChainMatch& FilterChain::filter_chain_match() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.FilterChain.filter_chain_match)
  return filter_chain_match_ != NULL ? *filter_chain_match_
                         : *::envoy::api::v2::FilterChainMatch::internal_default_instance();
}
::envoy::api::v2::FilterChainMatch* FilterChain::mutable_filter_chain_match() {
  
  if (filter_chain_match_ == NULL) {
    filter_chain_match_ = new ::envoy::api::v2::FilterChainMatch;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.FilterChain.filter_chain_match)
  return filter_chain_match_;
}
::envoy::api::v2::FilterChainMatch* FilterChain::release_filter_chain_match() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.FilterChain.filter_chain_match)
  
  ::envoy::api::v2::FilterChainMatch* temp = filter_chain_match_;
  filter_chain_match_ = NULL;
  return temp;
}
void FilterChain::set_allocated_filter_chain_match(::envoy::api::v2::FilterChainMatch* filter_chain_match) {
  delete filter_chain_match_;
  filter_chain_match_ = filter_chain_match;
  if (filter_chain_match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.FilterChain.filter_chain_match)
}

// .envoy.api.v2.DownstreamTlsContext tls_context = 2;
bool FilterChain::has_tls_context() const {
  return this != internal_default_instance() && tls_context_ != NULL;
}
void FilterChain::clear_tls_context() {
  if (GetArenaNoVirtual() == NULL && tls_context_ != NULL) delete tls_context_;
  tls_context_ = NULL;
}
const ::envoy::api::v2::DownstreamTlsContext& FilterChain::tls_context() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.FilterChain.tls_context)
  return tls_context_ != NULL ? *tls_context_
                         : *::envoy::api::v2::DownstreamTlsContext::internal_default_instance();
}
::envoy::api::v2::DownstreamTlsContext* FilterChain::mutable_tls_context() {
  
  if (tls_context_ == NULL) {
    tls_context_ = new ::envoy::api::v2::DownstreamTlsContext;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.FilterChain.tls_context)
  return tls_context_;
}
::envoy::api::v2::DownstreamTlsContext* FilterChain::release_tls_context() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.FilterChain.tls_context)
  
  ::envoy::api::v2::DownstreamTlsContext* temp = tls_context_;
  tls_context_ = NULL;
  return temp;
}
void FilterChain::set_allocated_tls_context(::envoy::api::v2::DownstreamTlsContext* tls_context) {
  delete tls_context_;
  tls_context_ = tls_context;
  if (tls_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.FilterChain.tls_context)
}

// repeated .envoy.api.v2.Filter filter_chain = 3;
int FilterChain::filter_chain_size() const {
  return filter_chain_.size();
}
void FilterChain::clear_filter_chain() {
  filter_chain_.Clear();
}
const ::envoy::api::v2::Filter& FilterChain::filter_chain(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.FilterChain.filter_chain)
  return filter_chain_.Get(index);
}
::envoy::api::v2::Filter* FilterChain::mutable_filter_chain(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.FilterChain.filter_chain)
  return filter_chain_.Mutable(index);
}
::envoy::api::v2::Filter* FilterChain::add_filter_chain() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.FilterChain.filter_chain)
  return filter_chain_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Filter >*
FilterChain::mutable_filter_chain() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.FilterChain.filter_chain)
  return &filter_chain_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Filter >&
FilterChain::filter_chain() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.FilterChain.filter_chain)
  return filter_chain_;
}

// .google.protobuf.BoolValue use_proxy_proto = 4;
bool FilterChain::has_use_proxy_proto() const {
  return this != internal_default_instance() && use_proxy_proto_ != NULL;
}
void FilterChain::clear_use_proxy_proto() {
  if (GetArenaNoVirtual() == NULL && use_proxy_proto_ != NULL) delete use_proxy_proto_;
  use_proxy_proto_ = NULL;
}
const ::google::protobuf::BoolValue& FilterChain::use_proxy_proto() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.FilterChain.use_proxy_proto)
  return use_proxy_proto_ != NULL ? *use_proxy_proto_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
::google::protobuf::BoolValue* FilterChain::mutable_use_proxy_proto() {
  
  if (use_proxy_proto_ == NULL) {
    use_proxy_proto_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.FilterChain.use_proxy_proto)
  return use_proxy_proto_;
}
::google::protobuf::BoolValue* FilterChain::release_use_proxy_proto() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.FilterChain.use_proxy_proto)
  
  ::google::protobuf::BoolValue* temp = use_proxy_proto_;
  use_proxy_proto_ = NULL;
  return temp;
}
void FilterChain::set_allocated_use_proxy_proto(::google::protobuf::BoolValue* use_proxy_proto) {
  delete use_proxy_proto_;
  if (use_proxy_proto != NULL && use_proxy_proto->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_use_proxy_proto = new ::google::protobuf::BoolValue;
    new_use_proxy_proto->CopyFrom(*use_proxy_proto);
    use_proxy_proto = new_use_proxy_proto;
  }
  use_proxy_proto_ = use_proxy_proto;
  if (use_proxy_proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.FilterChain.use_proxy_proto)
}

// .envoy.api.v2.Metadata metadata = 5;
bool FilterChain::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
void FilterChain::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::envoy::api::v2::Metadata& FilterChain::metadata() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.FilterChain.metadata)
  return metadata_ != NULL ? *metadata_
                         : *::envoy::api::v2::Metadata::internal_default_instance();
}
::envoy::api::v2::Metadata* FilterChain::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::envoy::api::v2::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.FilterChain.metadata)
  return metadata_;
}
::envoy::api::v2::Metadata* FilterChain::release_metadata() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.FilterChain.metadata)
  
  ::envoy::api::v2::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void FilterChain::set_allocated_metadata(::envoy::api::v2::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.FilterChain.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Listener::kAddressFieldNumber;
const int Listener::kFilterChainsFieldNumber;
const int Listener::kUseOriginalDstFieldNumber;
const int Listener::kPerConnectionBufferLimitBytesFieldNumber;
const int Listener::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Listener::Listener()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2flds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Listener)
}
Listener::Listener(const Listener& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filter_chains_(from.filter_chains_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_address()) {
    address_ = new ::envoy::api::v2::UnresolvedAddress(*from.address_);
  } else {
    address_ = NULL;
  }
  if (from.has_use_original_dst()) {
    use_original_dst_ = new ::google::protobuf::BoolValue(*from.use_original_dst_);
  } else {
    use_original_dst_ = NULL;
  }
  if (from.has_per_connection_buffer_limit_bytes()) {
    per_connection_buffer_limit_bytes_ = new ::google::protobuf::UInt32Value(*from.per_connection_buffer_limit_bytes_);
  } else {
    per_connection_buffer_limit_bytes_ = NULL;
  }
  if (from.has_metadata()) {
    metadata_ = new ::envoy::api::v2::Metadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Listener)
}

void Listener::SharedCtor() {
  ::memset(&address_, 0, reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&address_) + sizeof(metadata_));
  _cached_size_ = 0;
}

Listener::~Listener() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Listener)
  SharedDtor();
}

void Listener::SharedDtor() {
  if (this != internal_default_instance()) {
    delete address_;
  }
  if (this != internal_default_instance()) {
    delete use_original_dst_;
  }
  if (this != internal_default_instance()) {
    delete per_connection_buffer_limit_bytes_;
  }
  if (this != internal_default_instance()) {
    delete metadata_;
  }
}

void Listener::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Listener::descriptor() {
  protobuf_api_2flds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2flds_2eproto::file_level_metadata[4].descriptor;
}

const Listener& Listener::default_instance() {
  protobuf_api_2flds_2eproto::InitDefaults();
  return *internal_default_instance();
}

Listener* Listener::New(::google::protobuf::Arena* arena) const {
  Listener* n = new Listener;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Listener::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Listener)
  filter_chains_.Clear();
  if (GetArenaNoVirtual() == NULL && address_ != NULL) {
    delete address_;
  }
  address_ = NULL;
  if (GetArenaNoVirtual() == NULL && use_original_dst_ != NULL) {
    delete use_original_dst_;
  }
  use_original_dst_ = NULL;
  if (GetArenaNoVirtual() == NULL && per_connection_buffer_limit_bytes_ != NULL) {
    delete per_connection_buffer_limit_bytes_;
  }
  per_connection_buffer_limit_bytes_ = NULL;
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
}

bool Listener::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Listener)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.UnresolvedAddress address = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.FilterChain filter_chains = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_filter_chains()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .google.protobuf.BoolValue use_original_dst = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_use_original_dst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_per_connection_buffer_limit_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Metadata metadata = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Listener)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Listener)
  return false;
#undef DO_
}

void Listener::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Listener)
  // .envoy.api.v2.UnresolvedAddress address = 1;
  if (this->has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->address_, output);
  }

  // repeated .envoy.api.v2.FilterChain filter_chains = 2;
  for (unsigned int i = 0, n = this->filter_chains_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter_chains(i), output);
  }

  // .google.protobuf.BoolValue use_original_dst = 3;
  if (this->has_use_original_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->use_original_dst_, output);
  }

  // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;
  if (this->has_per_connection_buffer_limit_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->per_connection_buffer_limit_bytes_, output);
  }

  // .envoy.api.v2.Metadata metadata = 5;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->metadata_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Listener)
}

::google::protobuf::uint8* Listener::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Listener)
  // .envoy.api.v2.UnresolvedAddress address = 1;
  if (this->has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->address_, false, target);
  }

  // repeated .envoy.api.v2.FilterChain filter_chains = 2;
  for (unsigned int i = 0, n = this->filter_chains_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->filter_chains(i), false, target);
  }

  // .google.protobuf.BoolValue use_original_dst = 3;
  if (this->has_use_original_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->use_original_dst_, false, target);
  }

  // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;
  if (this->has_per_connection_buffer_limit_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->per_connection_buffer_limit_bytes_, false, target);
  }

  // .envoy.api.v2.Metadata metadata = 5;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->metadata_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Listener)
  return target;
}

size_t Listener::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Listener)
  size_t total_size = 0;

  // repeated .envoy.api.v2.FilterChain filter_chains = 2;
  {
    unsigned int count = this->filter_chains_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter_chains(i));
    }
  }

  // .envoy.api.v2.UnresolvedAddress address = 1;
  if (this->has_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->address_);
  }

  // .google.protobuf.BoolValue use_original_dst = 3;
  if (this->has_use_original_dst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->use_original_dst_);
  }

  // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;
  if (this->has_per_connection_buffer_limit_bytes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->per_connection_buffer_limit_bytes_);
  }

  // .envoy.api.v2.Metadata metadata = 5;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Listener::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Listener)
  GOOGLE_DCHECK_NE(&from, this);
  const Listener* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Listener>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Listener)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Listener)
    MergeFrom(*source);
  }
}

void Listener::MergeFrom(const Listener& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Listener)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_chains_.MergeFrom(from.filter_chains_);
  if (from.has_address()) {
    mutable_address()->::envoy::api::v2::UnresolvedAddress::MergeFrom(from.address());
  }
  if (from.has_use_original_dst()) {
    mutable_use_original_dst()->::google::protobuf::BoolValue::MergeFrom(from.use_original_dst());
  }
  if (from.has_per_connection_buffer_limit_bytes()) {
    mutable_per_connection_buffer_limit_bytes()->::google::protobuf::UInt32Value::MergeFrom(from.per_connection_buffer_limit_bytes());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::envoy::api::v2::Metadata::MergeFrom(from.metadata());
  }
}

void Listener::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Listener)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Listener::CopyFrom(const Listener& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Listener)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Listener::IsInitialized() const {
  return true;
}

void Listener::Swap(Listener* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Listener::InternalSwap(Listener* other) {
  filter_chains_.UnsafeArenaSwap(&other->filter_chains_);
  std::swap(address_, other->address_);
  std::swap(use_original_dst_, other->use_original_dst_);
  std::swap(per_connection_buffer_limit_bytes_, other->per_connection_buffer_limit_bytes_);
  std::swap(metadata_, other->metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Listener::GetMetadata() const {
  protobuf_api_2flds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2flds_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Listener

// .envoy.api.v2.UnresolvedAddress address = 1;
bool Listener::has_address() const {
  return this != internal_default_instance() && address_ != NULL;
}
void Listener::clear_address() {
  if (GetArenaNoVirtual() == NULL && address_ != NULL) delete address_;
  address_ = NULL;
}
const ::envoy::api::v2::UnresolvedAddress& Listener::address() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Listener.address)
  return address_ != NULL ? *address_
                         : *::envoy::api::v2::UnresolvedAddress::internal_default_instance();
}
::envoy::api::v2::UnresolvedAddress* Listener::mutable_address() {
  
  if (address_ == NULL) {
    address_ = new ::envoy::api::v2::UnresolvedAddress;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Listener.address)
  return address_;
}
::envoy::api::v2::UnresolvedAddress* Listener::release_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Listener.address)
  
  ::envoy::api::v2::UnresolvedAddress* temp = address_;
  address_ = NULL;
  return temp;
}
void Listener::set_allocated_address(::envoy::api::v2::UnresolvedAddress* address) {
  delete address_;
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Listener.address)
}

// repeated .envoy.api.v2.FilterChain filter_chains = 2;
int Listener::filter_chains_size() const {
  return filter_chains_.size();
}
void Listener::clear_filter_chains() {
  filter_chains_.Clear();
}
const ::envoy::api::v2::FilterChain& Listener::filter_chains(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Listener.filter_chains)
  return filter_chains_.Get(index);
}
::envoy::api::v2::FilterChain* Listener::mutable_filter_chains(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Listener.filter_chains)
  return filter_chains_.Mutable(index);
}
::envoy::api::v2::FilterChain* Listener::add_filter_chains() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.Listener.filter_chains)
  return filter_chains_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::FilterChain >*
Listener::mutable_filter_chains() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.Listener.filter_chains)
  return &filter_chains_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::FilterChain >&
Listener::filter_chains() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.Listener.filter_chains)
  return filter_chains_;
}

// .google.protobuf.BoolValue use_original_dst = 3;
bool Listener::has_use_original_dst() const {
  return this != internal_default_instance() && use_original_dst_ != NULL;
}
void Listener::clear_use_original_dst() {
  if (GetArenaNoVirtual() == NULL && use_original_dst_ != NULL) delete use_original_dst_;
  use_original_dst_ = NULL;
}
const ::google::protobuf::BoolValue& Listener::use_original_dst() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Listener.use_original_dst)
  return use_original_dst_ != NULL ? *use_original_dst_
                         : *::google::protobuf::BoolValue::internal_default_instance();
}
::google::protobuf::BoolValue* Listener::mutable_use_original_dst() {
  
  if (use_original_dst_ == NULL) {
    use_original_dst_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Listener.use_original_dst)
  return use_original_dst_;
}
::google::protobuf::BoolValue* Listener::release_use_original_dst() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Listener.use_original_dst)
  
  ::google::protobuf::BoolValue* temp = use_original_dst_;
  use_original_dst_ = NULL;
  return temp;
}
void Listener::set_allocated_use_original_dst(::google::protobuf::BoolValue* use_original_dst) {
  delete use_original_dst_;
  if (use_original_dst != NULL && use_original_dst->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_use_original_dst = new ::google::protobuf::BoolValue;
    new_use_original_dst->CopyFrom(*use_original_dst);
    use_original_dst = new_use_original_dst;
  }
  use_original_dst_ = use_original_dst;
  if (use_original_dst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Listener.use_original_dst)
}

// .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;
bool Listener::has_per_connection_buffer_limit_bytes() const {
  return this != internal_default_instance() && per_connection_buffer_limit_bytes_ != NULL;
}
void Listener::clear_per_connection_buffer_limit_bytes() {
  if (GetArenaNoVirtual() == NULL && per_connection_buffer_limit_bytes_ != NULL) delete per_connection_buffer_limit_bytes_;
  per_connection_buffer_limit_bytes_ = NULL;
}
const ::google::protobuf::UInt32Value& Listener::per_connection_buffer_limit_bytes() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Listener.per_connection_buffer_limit_bytes)
  return per_connection_buffer_limit_bytes_ != NULL ? *per_connection_buffer_limit_bytes_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Listener::mutable_per_connection_buffer_limit_bytes() {
  
  if (per_connection_buffer_limit_bytes_ == NULL) {
    per_connection_buffer_limit_bytes_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Listener.per_connection_buffer_limit_bytes)
  return per_connection_buffer_limit_bytes_;
}
::google::protobuf::UInt32Value* Listener::release_per_connection_buffer_limit_bytes() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Listener.per_connection_buffer_limit_bytes)
  
  ::google::protobuf::UInt32Value* temp = per_connection_buffer_limit_bytes_;
  per_connection_buffer_limit_bytes_ = NULL;
  return temp;
}
void Listener::set_allocated_per_connection_buffer_limit_bytes(::google::protobuf::UInt32Value* per_connection_buffer_limit_bytes) {
  delete per_connection_buffer_limit_bytes_;
  if (per_connection_buffer_limit_bytes != NULL && per_connection_buffer_limit_bytes->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_per_connection_buffer_limit_bytes = new ::google::protobuf::UInt32Value;
    new_per_connection_buffer_limit_bytes->CopyFrom(*per_connection_buffer_limit_bytes);
    per_connection_buffer_limit_bytes = new_per_connection_buffer_limit_bytes;
  }
  per_connection_buffer_limit_bytes_ = per_connection_buffer_limit_bytes;
  if (per_connection_buffer_limit_bytes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Listener.per_connection_buffer_limit_bytes)
}

// .envoy.api.v2.Metadata metadata = 5;
bool Listener::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
void Listener::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::envoy::api::v2::Metadata& Listener::metadata() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Listener.metadata)
  return metadata_ != NULL ? *metadata_
                         : *::envoy::api::v2::Metadata::internal_default_instance();
}
::envoy::api::v2::Metadata* Listener::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::envoy::api::v2::Metadata;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Listener.metadata)
  return metadata_;
}
::envoy::api::v2::Metadata* Listener::release_metadata() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Listener.metadata)
  
  ::envoy::api::v2::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Listener::set_allocated_metadata(::envoy::api::v2::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Listener.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
