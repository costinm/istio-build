// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/cds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/cds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
class UpstreamBindConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UpstreamBindConfig>
     _instance;
} _UpstreamBindConfig_default_instance_;
class CircuitBreakers_ThresholdsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CircuitBreakers_Thresholds>
     _instance;
} _CircuitBreakers_Thresholds_default_instance_;
class CircuitBreakersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CircuitBreakers>
     _instance;
} _CircuitBreakers_default_instance_;
class Cluster_EdsClusterConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Cluster_EdsClusterConfig>
     _instance;
} _Cluster_EdsClusterConfig_default_instance_;
class Cluster_OutlierDetectionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Cluster_OutlierDetection>
     _instance;
} _Cluster_OutlierDetection_default_instance_;
class ClusterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Cluster>
     _instance;
  const ::envoy::api::v2::TcpProtocolOptions* tcp_protocol_options_;
  const ::envoy::api::v2::Http1ProtocolOptions* http_protocol_options_;
  const ::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options_;
  const ::envoy::api::v2::GrpcProtocolOptions* grpc_protocol_options_;
} _Cluster_default_instance_;

namespace protobuf_api_2fcds_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpstreamBindConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpstreamBindConfig, source_address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers_Thresholds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers_Thresholds, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers_Thresholds, max_connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers_Thresholds, max_pending_requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers_Thresholds, max_requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers_Thresholds, max_retries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers, thresholds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_EdsClusterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_EdsClusterConfig, eds_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_EdsClusterConfig, service_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, consecutive_5xx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, base_ejection_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, max_ejection_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, enforcing_consecutive_5xx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, enforcing_success_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, success_rate_minimum_hosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, success_rate_request_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, success_rate_stdev_factor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, eds_cluster_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, connect_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, per_connection_buffer_limit_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, lb_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, hosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, health_checks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, max_requests_per_connection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, circuit_breakers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, tls_context_),
  offsetof(ClusterDefaultTypeInternal, tcp_protocol_options_),
  offsetof(ClusterDefaultTypeInternal, http_protocol_options_),
  offsetof(ClusterDefaultTypeInternal, http2_protocol_options_),
  offsetof(ClusterDefaultTypeInternal, grpc_protocol_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, dns_refresh_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, dns_lookup_family_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, dns_resolvers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, outlier_detection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, cleanup_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, upstream_bind_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, protocol_options_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(UpstreamBindConfig)},
  { 6, -1, sizeof(CircuitBreakers_Thresholds)},
  { 16, -1, sizeof(CircuitBreakers)},
  { 22, -1, sizeof(Cluster_EdsClusterConfig)},
  { 29, -1, sizeof(Cluster_OutlierDetection)},
  { 43, -1, sizeof(Cluster)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpstreamBindConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CircuitBreakers_Thresholds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CircuitBreakers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cluster_EdsClusterConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cluster_OutlierDetection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cluster_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/cds.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::envoy::api::v2::protobuf_api_2faddress_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2fdiscovery_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2fhealth_5fcheck_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2fprotocol_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  _UpstreamBindConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UpstreamBindConfig_default_instance_);_CircuitBreakers_Thresholds_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CircuitBreakers_Thresholds_default_instance_);_CircuitBreakers_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CircuitBreakers_default_instance_);_Cluster_EdsClusterConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Cluster_EdsClusterConfig_default_instance_);_Cluster_OutlierDetection_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Cluster_OutlierDetection_default_instance_);_Cluster_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Cluster_default_instance_);_UpstreamBindConfig_default_instance_._instance.get_mutable()->source_address_ = const_cast< ::envoy::api::v2::Address*>(
      ::envoy::api::v2::Address::internal_default_instance());
  _CircuitBreakers_Thresholds_default_instance_._instance.get_mutable()->max_connections_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _CircuitBreakers_Thresholds_default_instance_._instance.get_mutable()->max_pending_requests_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _CircuitBreakers_Thresholds_default_instance_._instance.get_mutable()->max_requests_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _CircuitBreakers_Thresholds_default_instance_._instance.get_mutable()->max_retries_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_EdsClusterConfig_default_instance_._instance.get_mutable()->eds_config_ = const_cast< ::envoy::api::v2::ConfigSource*>(
      ::envoy::api::v2::ConfigSource::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_._instance.get_mutable()->consecutive_5xx_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_._instance.get_mutable()->interval_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_._instance.get_mutable()->base_ejection_time_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_._instance.get_mutable()->max_ejection_percent_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_._instance.get_mutable()->enforcing_consecutive_5xx_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_._instance.get_mutable()->enforcing_success_rate_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_._instance.get_mutable()->success_rate_minimum_hosts_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_._instance.get_mutable()->success_rate_request_volume_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_._instance.get_mutable()->success_rate_stdev_factor_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_default_instance_._instance.get_mutable()->eds_cluster_config_ = const_cast< ::envoy::api::v2::Cluster_EdsClusterConfig*>(
      ::envoy::api::v2::Cluster_EdsClusterConfig::internal_default_instance());
  _Cluster_default_instance_._instance.get_mutable()->connect_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _Cluster_default_instance_._instance.get_mutable()->per_connection_buffer_limit_bytes_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_default_instance_._instance.get_mutable()->max_requests_per_connection_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_default_instance_._instance.get_mutable()->circuit_breakers_ = const_cast< ::envoy::api::v2::CircuitBreakers*>(
      ::envoy::api::v2::CircuitBreakers::internal_default_instance());
  _Cluster_default_instance_._instance.get_mutable()->tls_context_ = const_cast< ::envoy::api::v2::UpstreamTlsContext*>(
      ::envoy::api::v2::UpstreamTlsContext::internal_default_instance());
  _Cluster_default_instance_.tcp_protocol_options_ = const_cast< ::envoy::api::v2::TcpProtocolOptions*>(
      ::envoy::api::v2::TcpProtocolOptions::internal_default_instance());
  _Cluster_default_instance_.http_protocol_options_ = const_cast< ::envoy::api::v2::Http1ProtocolOptions*>(
      ::envoy::api::v2::Http1ProtocolOptions::internal_default_instance());
  _Cluster_default_instance_.http2_protocol_options_ = const_cast< ::envoy::api::v2::Http2ProtocolOptions*>(
      ::envoy::api::v2::Http2ProtocolOptions::internal_default_instance());
  _Cluster_default_instance_.grpc_protocol_options_ = const_cast< ::envoy::api::v2::GrpcProtocolOptions*>(
      ::envoy::api::v2::GrpcProtocolOptions::internal_default_instance());
  _Cluster_default_instance_._instance.get_mutable()->dns_refresh_rate_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _Cluster_default_instance_._instance.get_mutable()->outlier_detection_ = const_cast< ::envoy::api::v2::Cluster_OutlierDetection*>(
      ::envoy::api::v2::Cluster_OutlierDetection::internal_default_instance());
  _Cluster_default_instance_._instance.get_mutable()->cleanup_interval_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _Cluster_default_instance_._instance.get_mutable()->upstream_bind_config_ = const_cast< ::envoy::api::v2::BindConfig*>(
      ::envoy::api::v2::BindConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rapi/cds.proto\022\014envoy.api.v2\032\021api/addre"
      "ss.proto\032\016api/base.proto\032\023api/discovery."
      "proto\032\026api/health_check.proto\032\022api/proto"
      "col.proto\032\025api/tls_context.proto\032\034google"
      "/api/annotations.proto\032\036google/protobuf/"
      "duration.proto\032\036google/protobuf/wrappers"
      ".proto\"C\n\022UpstreamBindConfig\022-\n\016source_a"
      "ddress\030\001 \001(\0132\025.envoy.api.v2.Address\"\351\002\n\017"
      "CircuitBreakers\022<\n\nthresholds\030\001 \003(\0132(.en"
      "voy.api.v2.CircuitBreakers.Thresholds\032\227\002"
      "\n\nThresholds\022/\n\010priority\030\001 \001(\0162\035.envoy.a"
      "pi.v2.RoutingPriority\0225\n\017max_connections"
      "\030\002 \001(\0132\034.google.protobuf.UInt32Value\022:\n\024"
      "max_pending_requests\030\003 \001(\0132\034.google.prot"
      "obuf.UInt32Value\0222\n\014max_requests\030\004 \001(\0132\034"
      ".google.protobuf.UInt32Value\0221\n\013max_retr"
      "ies\030\005 \001(\0132\034.google.protobuf.UInt32Value\""
      "\276\020\n\007Cluster\022\014\n\004name\030\001 \001(\t\0221\n\004type\030\002 \001(\0162"
      "#.envoy.api.v2.Cluster.DiscoveryType\022B\n\022"
      "eds_cluster_config\030\003 \001(\0132&.envoy.api.v2."
      "Cluster.EdsClusterConfig\0222\n\017connect_time"
      "out\030\004 \001(\0132\031.google.protobuf.Duration\022G\n!"
      "per_connection_buffer_limit_bytes\030\005 \001(\0132"
      "\034.google.protobuf.UInt32Value\0221\n\tlb_poli"
      "cy\030\006 \001(\0162\036.envoy.api.v2.Cluster.LbPolicy"
      "\022$\n\005hosts\030\007 \003(\0132\025.envoy.api.v2.Address\0220"
      "\n\rhealth_checks\030\010 \003(\0132\031.envoy.api.v2.Hea"
      "lthCheck\022A\n\033max_requests_per_connection\030"
      "\t \001(\0132\034.google.protobuf.UInt32Value\0227\n\020c"
      "ircuit_breakers\030\n \001(\0132\035.envoy.api.v2.Cir"
      "cuitBreakers\0225\n\013tls_context\030\013 \001(\0132 .envo"
      "y.api.v2.UpstreamTlsContext\022@\n\024tcp_proto"
      "col_options\030\014 \001(\0132 .envoy.api.v2.TcpProt"
      "ocolOptionsH\000\022C\n\025http_protocol_options\030\r"
      " \001(\0132\".envoy.api.v2.Http1ProtocolOptions"
      "H\000\022D\n\026http2_protocol_options\030\016 \001(\0132\".env"
      "oy.api.v2.Http2ProtocolOptionsH\000\022B\n\025grpc"
      "_protocol_options\030\017 \001(\0132!.envoy.api.v2.G"
      "rpcProtocolOptionsH\000\0223\n\020dns_refresh_rate"
      "\030\020 \001(\0132\031.google.protobuf.Duration\022@\n\021dns"
      "_lookup_family\030\021 \001(\0162%.envoy.api.v2.Clus"
      "ter.DnsLookupFamily\022,\n\rdns_resolvers\030\022 \003"
      "(\0132\025.envoy.api.v2.Address\022A\n\021outlier_det"
      "ection\030\023 \001(\0132&.envoy.api.v2.Cluster.Outl"
      "ierDetection\0223\n\020cleanup_interval\030\024 \001(\0132\031"
      ".google.protobuf.Duration\0226\n\024upstream_bi"
      "nd_config\030\025 \001(\0132\030.envoy.api.v2.BindConfi"
      "g\032X\n\020EdsClusterConfig\022.\n\neds_config\030\001 \001("
      "\0132\032.envoy.api.v2.ConfigSource\022\024\n\014service"
      "_name\030\002 \001(\t\032\256\004\n\020OutlierDetection\0225\n\017cons"
      "ecutive_5xx\030\001 \001(\0132\034.google.protobuf.UInt"
      "32Value\022+\n\010interval\030\002 \001(\0132\031.google.proto"
      "buf.Duration\0225\n\022base_ejection_time\030\003 \001(\013"
      "2\031.google.protobuf.Duration\022:\n\024max_eject"
      "ion_percent\030\004 \001(\0132\034.google.protobuf.UInt"
      "32Value\022\?\n\031enforcing_consecutive_5xx\030\005 \001"
      "(\0132\034.google.protobuf.UInt32Value\022<\n\026enfo"
      "rcing_success_rate\030\006 \001(\0132\034.google.protob"
      "uf.UInt32Value\022@\n\032success_rate_minimum_h"
      "osts\030\007 \001(\0132\034.google.protobuf.UInt32Value"
      "\022A\n\033success_rate_request_volume\030\010 \001(\0132\034."
      "google.protobuf.UInt32Value\022\?\n\031success_r"
      "ate_stdev_factor\030\t \001(\0132\034.google.protobuf"
      ".UInt32Value\"W\n\rDiscoveryType\022\n\n\006STATIC\020"
      "\000\022\016\n\nSTRICT_DNS\020\001\022\017\n\013LOGICAL_DNS\020\002\022\007\n\003ED"
      "S\020\003\022\020\n\014ORIGINAL_DST\020\004\"^\n\010LbPolicy\022\017\n\013ROU"
      "ND_ROBIN\020\000\022\021\n\rLEAST_REQUEST\020\001\022\r\n\tRING_HA"
      "SH\020\002\022\n\n\006RANDOM\020\003\022\023\n\017ORIGINAL_DST_LB\020\004\"5\n"
      "\017DnsLookupFamily\022\010\n\004AUTO\020\000\022\013\n\007V4_ONLY\020\001\022"
      "\013\n\007V6_ONLY\020\002B\022\n\020protocol_options2\347\001\n\027Clu"
      "sterDiscoveryService\022W\n\016StreamClusters\022\036"
      ".envoy.api.v2.DiscoveryRequest\032\037.envoy.a"
      "pi.v2.DiscoveryResponse\"\000(\0010\001\022s\n\rFetchCl"
      "usters\022\036.envoy.api.v2.DiscoveryRequest\032\037"
      ".envoy.api.v2.DiscoveryResponse\"!\202\323\344\223\002\033\""
      "\026/v2/discovery:clusters:\001*b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3034);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/cds.proto", &protobuf_RegisterTypes);
  ::envoy::api::v2::protobuf_api_2faddress_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2fdiscovery_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2fhealth_5fcheck_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2fprotocol_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2ftls_5fcontext_2eproto::AddDescriptors();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2fcds_2eproto

const ::google::protobuf::EnumDescriptor* Cluster_DiscoveryType_descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_enum_descriptors[0];
}
bool Cluster_DiscoveryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cluster_DiscoveryType Cluster::STATIC;
const Cluster_DiscoveryType Cluster::STRICT_DNS;
const Cluster_DiscoveryType Cluster::LOGICAL_DNS;
const Cluster_DiscoveryType Cluster::EDS;
const Cluster_DiscoveryType Cluster::ORIGINAL_DST;
const Cluster_DiscoveryType Cluster::DiscoveryType_MIN;
const Cluster_DiscoveryType Cluster::DiscoveryType_MAX;
const int Cluster::DiscoveryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Cluster_LbPolicy_descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_enum_descriptors[1];
}
bool Cluster_LbPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cluster_LbPolicy Cluster::ROUND_ROBIN;
const Cluster_LbPolicy Cluster::LEAST_REQUEST;
const Cluster_LbPolicy Cluster::RING_HASH;
const Cluster_LbPolicy Cluster::RANDOM;
const Cluster_LbPolicy Cluster::ORIGINAL_DST_LB;
const Cluster_LbPolicy Cluster::LbPolicy_MIN;
const Cluster_LbPolicy Cluster::LbPolicy_MAX;
const int Cluster::LbPolicy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Cluster_DnsLookupFamily_descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_enum_descriptors[2];
}
bool Cluster_DnsLookupFamily_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cluster_DnsLookupFamily Cluster::AUTO;
const Cluster_DnsLookupFamily Cluster::V4_ONLY;
const Cluster_DnsLookupFamily Cluster::V6_ONLY;
const Cluster_DnsLookupFamily Cluster::DnsLookupFamily_MIN;
const Cluster_DnsLookupFamily Cluster::DnsLookupFamily_MAX;
const int Cluster::DnsLookupFamily_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpstreamBindConfig::kSourceAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpstreamBindConfig::UpstreamBindConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.UpstreamBindConfig)
}
UpstreamBindConfig::UpstreamBindConfig(const UpstreamBindConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_address()) {
    source_address_ = new ::envoy::api::v2::Address(*from.source_address_);
  } else {
    source_address_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.UpstreamBindConfig)
}

void UpstreamBindConfig::SharedCtor() {
  source_address_ = NULL;
  _cached_size_ = 0;
}

UpstreamBindConfig::~UpstreamBindConfig() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.UpstreamBindConfig)
  SharedDtor();
}

void UpstreamBindConfig::SharedDtor() {
  if (this != internal_default_instance()) delete source_address_;
}

void UpstreamBindConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpstreamBindConfig::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpstreamBindConfig& UpstreamBindConfig::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpstreamBindConfig* UpstreamBindConfig::New(::google::protobuf::Arena* arena) const {
  UpstreamBindConfig* n = new UpstreamBindConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpstreamBindConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.UpstreamBindConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) {
    delete source_address_;
  }
  source_address_ = NULL;
  _internal_metadata_.Clear();
}

bool UpstreamBindConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.UpstreamBindConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.Address source_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.UpstreamBindConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.UpstreamBindConfig)
  return false;
#undef DO_
}

void UpstreamBindConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.UpstreamBindConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.Address source_address = 1;
  if (this->has_source_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->source_address_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.UpstreamBindConfig)
}

::google::protobuf::uint8* UpstreamBindConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.UpstreamBindConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.Address source_address = 1;
  if (this->has_source_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->source_address_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.UpstreamBindConfig)
  return target;
}

size_t UpstreamBindConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.UpstreamBindConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .envoy.api.v2.Address source_address = 1;
  if (this->has_source_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_address_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpstreamBindConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.UpstreamBindConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UpstreamBindConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpstreamBindConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.UpstreamBindConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.UpstreamBindConfig)
    MergeFrom(*source);
  }
}

void UpstreamBindConfig::MergeFrom(const UpstreamBindConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.UpstreamBindConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_address()) {
    mutable_source_address()->::envoy::api::v2::Address::MergeFrom(from.source_address());
  }
}

void UpstreamBindConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.UpstreamBindConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpstreamBindConfig::CopyFrom(const UpstreamBindConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.UpstreamBindConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpstreamBindConfig::IsInitialized() const {
  return true;
}

void UpstreamBindConfig::Swap(UpstreamBindConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpstreamBindConfig::InternalSwap(UpstreamBindConfig* other) {
  using std::swap;
  swap(source_address_, other->source_address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpstreamBindConfig::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpstreamBindConfig

// .envoy.api.v2.Address source_address = 1;
bool UpstreamBindConfig::has_source_address() const {
  return this != internal_default_instance() && source_address_ != NULL;
}
void UpstreamBindConfig::clear_source_address() {
  if (GetArenaNoVirtual() == NULL && source_address_ != NULL) delete source_address_;
  source_address_ = NULL;
}
const ::envoy::api::v2::Address& UpstreamBindConfig::source_address() const {
  const ::envoy::api::v2::Address* p = source_address_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.UpstreamBindConfig.source_address)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Address*>(
      &::envoy::api::v2::_Address_default_instance_);
}
::envoy::api::v2::Address* UpstreamBindConfig::mutable_source_address() {
  
  if (source_address_ == NULL) {
    source_address_ = new ::envoy::api::v2::Address;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.UpstreamBindConfig.source_address)
  return source_address_;
}
::envoy::api::v2::Address* UpstreamBindConfig::release_source_address() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.UpstreamBindConfig.source_address)
  
  ::envoy::api::v2::Address* temp = source_address_;
  source_address_ = NULL;
  return temp;
}
void UpstreamBindConfig::set_allocated_source_address(::envoy::api::v2::Address* source_address) {
  delete source_address_;
  source_address_ = source_address;
  if (source_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.UpstreamBindConfig.source_address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CircuitBreakers_Thresholds::kPriorityFieldNumber;
const int CircuitBreakers_Thresholds::kMaxConnectionsFieldNumber;
const int CircuitBreakers_Thresholds::kMaxPendingRequestsFieldNumber;
const int CircuitBreakers_Thresholds::kMaxRequestsFieldNumber;
const int CircuitBreakers_Thresholds::kMaxRetriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CircuitBreakers_Thresholds::CircuitBreakers_Thresholds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.CircuitBreakers.Thresholds)
}
CircuitBreakers_Thresholds::CircuitBreakers_Thresholds(const CircuitBreakers_Thresholds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max_connections()) {
    max_connections_ = new ::google::protobuf::UInt32Value(*from.max_connections_);
  } else {
    max_connections_ = NULL;
  }
  if (from.has_max_pending_requests()) {
    max_pending_requests_ = new ::google::protobuf::UInt32Value(*from.max_pending_requests_);
  } else {
    max_pending_requests_ = NULL;
  }
  if (from.has_max_requests()) {
    max_requests_ = new ::google::protobuf::UInt32Value(*from.max_requests_);
  } else {
    max_requests_ = NULL;
  }
  if (from.has_max_retries()) {
    max_retries_ = new ::google::protobuf::UInt32Value(*from.max_retries_);
  } else {
    max_retries_ = NULL;
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.CircuitBreakers.Thresholds)
}

void CircuitBreakers_Thresholds::SharedCtor() {
  ::memset(&max_connections_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&max_connections_)) + sizeof(priority_));
  _cached_size_ = 0;
}

CircuitBreakers_Thresholds::~CircuitBreakers_Thresholds() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.CircuitBreakers.Thresholds)
  SharedDtor();
}

void CircuitBreakers_Thresholds::SharedDtor() {
  if (this != internal_default_instance()) delete max_connections_;
  if (this != internal_default_instance()) delete max_pending_requests_;
  if (this != internal_default_instance()) delete max_requests_;
  if (this != internal_default_instance()) delete max_retries_;
}

void CircuitBreakers_Thresholds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircuitBreakers_Thresholds::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CircuitBreakers_Thresholds& CircuitBreakers_Thresholds::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

CircuitBreakers_Thresholds* CircuitBreakers_Thresholds::New(::google::protobuf::Arena* arena) const {
  CircuitBreakers_Thresholds* n = new CircuitBreakers_Thresholds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CircuitBreakers_Thresholds::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.CircuitBreakers.Thresholds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && max_connections_ != NULL) {
    delete max_connections_;
  }
  max_connections_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_pending_requests_ != NULL) {
    delete max_pending_requests_;
  }
  max_pending_requests_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_requests_ != NULL) {
    delete max_requests_;
  }
  max_requests_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_retries_ != NULL) {
    delete max_retries_;
  }
  max_retries_ = NULL;
  priority_ = 0;
  _internal_metadata_.Clear();
}

bool CircuitBreakers_Thresholds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.CircuitBreakers.Thresholds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.RoutingPriority priority = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_priority(static_cast< ::envoy::api::v2::RoutingPriority >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value max_connections = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_connections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value max_pending_requests = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_pending_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value max_requests = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value max_retries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_retries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.CircuitBreakers.Thresholds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.CircuitBreakers.Thresholds)
  return false;
#undef DO_
}

void CircuitBreakers_Thresholds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.CircuitBreakers.Thresholds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.RoutingPriority priority = 1;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->priority(), output);
  }

  // .google.protobuf.UInt32Value max_connections = 2;
  if (this->has_max_connections()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->max_connections_, output);
  }

  // .google.protobuf.UInt32Value max_pending_requests = 3;
  if (this->has_max_pending_requests()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->max_pending_requests_, output);
  }

  // .google.protobuf.UInt32Value max_requests = 4;
  if (this->has_max_requests()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->max_requests_, output);
  }

  // .google.protobuf.UInt32Value max_retries = 5;
  if (this->has_max_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->max_retries_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.CircuitBreakers.Thresholds)
}

::google::protobuf::uint8* CircuitBreakers_Thresholds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.CircuitBreakers.Thresholds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.RoutingPriority priority = 1;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->priority(), target);
  }

  // .google.protobuf.UInt32Value max_connections = 2;
  if (this->has_max_connections()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->max_connections_, deterministic, target);
  }

  // .google.protobuf.UInt32Value max_pending_requests = 3;
  if (this->has_max_pending_requests()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->max_pending_requests_, deterministic, target);
  }

  // .google.protobuf.UInt32Value max_requests = 4;
  if (this->has_max_requests()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->max_requests_, deterministic, target);
  }

  // .google.protobuf.UInt32Value max_retries = 5;
  if (this->has_max_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->max_retries_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.CircuitBreakers.Thresholds)
  return target;
}

size_t CircuitBreakers_Thresholds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.CircuitBreakers.Thresholds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.UInt32Value max_connections = 2;
  if (this->has_max_connections()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_connections_);
  }

  // .google.protobuf.UInt32Value max_pending_requests = 3;
  if (this->has_max_pending_requests()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_pending_requests_);
  }

  // .google.protobuf.UInt32Value max_requests = 4;
  if (this->has_max_requests()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_requests_);
  }

  // .google.protobuf.UInt32Value max_retries = 5;
  if (this->has_max_retries()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_retries_);
  }

  // .envoy.api.v2.RoutingPriority priority = 1;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircuitBreakers_Thresholds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.CircuitBreakers.Thresholds)
  GOOGLE_DCHECK_NE(&from, this);
  const CircuitBreakers_Thresholds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CircuitBreakers_Thresholds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.CircuitBreakers.Thresholds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.CircuitBreakers.Thresholds)
    MergeFrom(*source);
  }
}

void CircuitBreakers_Thresholds::MergeFrom(const CircuitBreakers_Thresholds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.CircuitBreakers.Thresholds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max_connections()) {
    mutable_max_connections()->::google::protobuf::UInt32Value::MergeFrom(from.max_connections());
  }
  if (from.has_max_pending_requests()) {
    mutable_max_pending_requests()->::google::protobuf::UInt32Value::MergeFrom(from.max_pending_requests());
  }
  if (from.has_max_requests()) {
    mutable_max_requests()->::google::protobuf::UInt32Value::MergeFrom(from.max_requests());
  }
  if (from.has_max_retries()) {
    mutable_max_retries()->::google::protobuf::UInt32Value::MergeFrom(from.max_retries());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void CircuitBreakers_Thresholds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.CircuitBreakers.Thresholds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircuitBreakers_Thresholds::CopyFrom(const CircuitBreakers_Thresholds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.CircuitBreakers.Thresholds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircuitBreakers_Thresholds::IsInitialized() const {
  return true;
}

void CircuitBreakers_Thresholds::Swap(CircuitBreakers_Thresholds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CircuitBreakers_Thresholds::InternalSwap(CircuitBreakers_Thresholds* other) {
  using std::swap;
  swap(max_connections_, other->max_connections_);
  swap(max_pending_requests_, other->max_pending_requests_);
  swap(max_requests_, other->max_requests_);
  swap(max_retries_, other->max_retries_);
  swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CircuitBreakers_Thresholds::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CircuitBreakers_Thresholds

// .envoy.api.v2.RoutingPriority priority = 1;
void CircuitBreakers_Thresholds::clear_priority() {
  priority_ = 0;
}
::envoy::api::v2::RoutingPriority CircuitBreakers_Thresholds::priority() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.priority)
  return static_cast< ::envoy::api::v2::RoutingPriority >(priority_);
}
void CircuitBreakers_Thresholds::set_priority(::envoy::api::v2::RoutingPriority value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.CircuitBreakers.Thresholds.priority)
}

// .google.protobuf.UInt32Value max_connections = 2;
bool CircuitBreakers_Thresholds::has_max_connections() const {
  return this != internal_default_instance() && max_connections_ != NULL;
}
void CircuitBreakers_Thresholds::clear_max_connections() {
  if (GetArenaNoVirtual() == NULL && max_connections_ != NULL) delete max_connections_;
  max_connections_ = NULL;
}
const ::google::protobuf::UInt32Value& CircuitBreakers_Thresholds::max_connections() const {
  const ::google::protobuf::UInt32Value* p = max_connections_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.max_connections)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::mutable_max_connections() {
  
  if (max_connections_ == NULL) {
    max_connections_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.Thresholds.max_connections)
  return max_connections_;
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::release_max_connections() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CircuitBreakers.Thresholds.max_connections)
  
  ::google::protobuf::UInt32Value* temp = max_connections_;
  max_connections_ = NULL;
  return temp;
}
void CircuitBreakers_Thresholds::set_allocated_max_connections(::google::protobuf::UInt32Value* max_connections) {
  delete max_connections_;
  if (max_connections != NULL && max_connections->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_connections = new ::google::protobuf::UInt32Value;
    new_max_connections->CopyFrom(*max_connections);
    max_connections = new_max_connections;
  }
  max_connections_ = max_connections;
  if (max_connections) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CircuitBreakers.Thresholds.max_connections)
}

// .google.protobuf.UInt32Value max_pending_requests = 3;
bool CircuitBreakers_Thresholds::has_max_pending_requests() const {
  return this != internal_default_instance() && max_pending_requests_ != NULL;
}
void CircuitBreakers_Thresholds::clear_max_pending_requests() {
  if (GetArenaNoVirtual() == NULL && max_pending_requests_ != NULL) delete max_pending_requests_;
  max_pending_requests_ = NULL;
}
const ::google::protobuf::UInt32Value& CircuitBreakers_Thresholds::max_pending_requests() const {
  const ::google::protobuf::UInt32Value* p = max_pending_requests_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.max_pending_requests)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::mutable_max_pending_requests() {
  
  if (max_pending_requests_ == NULL) {
    max_pending_requests_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.Thresholds.max_pending_requests)
  return max_pending_requests_;
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::release_max_pending_requests() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CircuitBreakers.Thresholds.max_pending_requests)
  
  ::google::protobuf::UInt32Value* temp = max_pending_requests_;
  max_pending_requests_ = NULL;
  return temp;
}
void CircuitBreakers_Thresholds::set_allocated_max_pending_requests(::google::protobuf::UInt32Value* max_pending_requests) {
  delete max_pending_requests_;
  if (max_pending_requests != NULL && max_pending_requests->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_pending_requests = new ::google::protobuf::UInt32Value;
    new_max_pending_requests->CopyFrom(*max_pending_requests);
    max_pending_requests = new_max_pending_requests;
  }
  max_pending_requests_ = max_pending_requests;
  if (max_pending_requests) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CircuitBreakers.Thresholds.max_pending_requests)
}

// .google.protobuf.UInt32Value max_requests = 4;
bool CircuitBreakers_Thresholds::has_max_requests() const {
  return this != internal_default_instance() && max_requests_ != NULL;
}
void CircuitBreakers_Thresholds::clear_max_requests() {
  if (GetArenaNoVirtual() == NULL && max_requests_ != NULL) delete max_requests_;
  max_requests_ = NULL;
}
const ::google::protobuf::UInt32Value& CircuitBreakers_Thresholds::max_requests() const {
  const ::google::protobuf::UInt32Value* p = max_requests_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.max_requests)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::mutable_max_requests() {
  
  if (max_requests_ == NULL) {
    max_requests_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.Thresholds.max_requests)
  return max_requests_;
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::release_max_requests() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CircuitBreakers.Thresholds.max_requests)
  
  ::google::protobuf::UInt32Value* temp = max_requests_;
  max_requests_ = NULL;
  return temp;
}
void CircuitBreakers_Thresholds::set_allocated_max_requests(::google::protobuf::UInt32Value* max_requests) {
  delete max_requests_;
  if (max_requests != NULL && max_requests->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_requests = new ::google::protobuf::UInt32Value;
    new_max_requests->CopyFrom(*max_requests);
    max_requests = new_max_requests;
  }
  max_requests_ = max_requests;
  if (max_requests) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CircuitBreakers.Thresholds.max_requests)
}

// .google.protobuf.UInt32Value max_retries = 5;
bool CircuitBreakers_Thresholds::has_max_retries() const {
  return this != internal_default_instance() && max_retries_ != NULL;
}
void CircuitBreakers_Thresholds::clear_max_retries() {
  if (GetArenaNoVirtual() == NULL && max_retries_ != NULL) delete max_retries_;
  max_retries_ = NULL;
}
const ::google::protobuf::UInt32Value& CircuitBreakers_Thresholds::max_retries() const {
  const ::google::protobuf::UInt32Value* p = max_retries_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.max_retries)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::mutable_max_retries() {
  
  if (max_retries_ == NULL) {
    max_retries_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.Thresholds.max_retries)
  return max_retries_;
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::release_max_retries() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CircuitBreakers.Thresholds.max_retries)
  
  ::google::protobuf::UInt32Value* temp = max_retries_;
  max_retries_ = NULL;
  return temp;
}
void CircuitBreakers_Thresholds::set_allocated_max_retries(::google::protobuf::UInt32Value* max_retries) {
  delete max_retries_;
  if (max_retries != NULL && max_retries->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_retries = new ::google::protobuf::UInt32Value;
    new_max_retries->CopyFrom(*max_retries);
    max_retries = new_max_retries;
  }
  max_retries_ = max_retries;
  if (max_retries) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CircuitBreakers.Thresholds.max_retries)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CircuitBreakers::kThresholdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CircuitBreakers::CircuitBreakers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.CircuitBreakers)
}
CircuitBreakers::CircuitBreakers(const CircuitBreakers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      thresholds_(from.thresholds_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.CircuitBreakers)
}

void CircuitBreakers::SharedCtor() {
  _cached_size_ = 0;
}

CircuitBreakers::~CircuitBreakers() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.CircuitBreakers)
  SharedDtor();
}

void CircuitBreakers::SharedDtor() {
}

void CircuitBreakers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircuitBreakers::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CircuitBreakers& CircuitBreakers::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

CircuitBreakers* CircuitBreakers::New(::google::protobuf::Arena* arena) const {
  CircuitBreakers* n = new CircuitBreakers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CircuitBreakers::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.CircuitBreakers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thresholds_.Clear();
  _internal_metadata_.Clear();
}

bool CircuitBreakers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.CircuitBreakers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.CircuitBreakers.Thresholds thresholds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thresholds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.CircuitBreakers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.CircuitBreakers)
  return false;
#undef DO_
}

void CircuitBreakers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.CircuitBreakers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.CircuitBreakers.Thresholds thresholds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thresholds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->thresholds(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.CircuitBreakers)
}

::google::protobuf::uint8* CircuitBreakers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.CircuitBreakers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .envoy.api.v2.CircuitBreakers.Thresholds thresholds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thresholds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->thresholds(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.CircuitBreakers)
  return target;
}

size_t CircuitBreakers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.CircuitBreakers)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.CircuitBreakers.Thresholds thresholds = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->thresholds_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thresholds(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircuitBreakers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.CircuitBreakers)
  GOOGLE_DCHECK_NE(&from, this);
  const CircuitBreakers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CircuitBreakers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.CircuitBreakers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.CircuitBreakers)
    MergeFrom(*source);
  }
}

void CircuitBreakers::MergeFrom(const CircuitBreakers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.CircuitBreakers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thresholds_.MergeFrom(from.thresholds_);
}

void CircuitBreakers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.CircuitBreakers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircuitBreakers::CopyFrom(const CircuitBreakers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.CircuitBreakers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircuitBreakers::IsInitialized() const {
  return true;
}

void CircuitBreakers::Swap(CircuitBreakers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CircuitBreakers::InternalSwap(CircuitBreakers* other) {
  using std::swap;
  thresholds_.InternalSwap(&other->thresholds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CircuitBreakers::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CircuitBreakers

// repeated .envoy.api.v2.CircuitBreakers.Thresholds thresholds = 1;
int CircuitBreakers::thresholds_size() const {
  return thresholds_.size();
}
void CircuitBreakers::clear_thresholds() {
  thresholds_.Clear();
}
const ::envoy::api::v2::CircuitBreakers_Thresholds& CircuitBreakers::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.thresholds)
  return thresholds_.Get(index);
}
::envoy::api::v2::CircuitBreakers_Thresholds* CircuitBreakers::mutable_thresholds(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.thresholds)
  return thresholds_.Mutable(index);
}
::envoy::api::v2::CircuitBreakers_Thresholds* CircuitBreakers::add_thresholds() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.CircuitBreakers.thresholds)
  return thresholds_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::CircuitBreakers_Thresholds >*
CircuitBreakers::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.CircuitBreakers.thresholds)
  return &thresholds_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::CircuitBreakers_Thresholds >&
CircuitBreakers::thresholds() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.CircuitBreakers.thresholds)
  return thresholds_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cluster_EdsClusterConfig::kEdsConfigFieldNumber;
const int Cluster_EdsClusterConfig::kServiceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cluster_EdsClusterConfig::Cluster_EdsClusterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Cluster.EdsClusterConfig)
}
Cluster_EdsClusterConfig::Cluster_EdsClusterConfig(const Cluster_EdsClusterConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.has_eds_config()) {
    eds_config_ = new ::envoy::api::v2::ConfigSource(*from.eds_config_);
  } else {
    eds_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Cluster.EdsClusterConfig)
}

void Cluster_EdsClusterConfig::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eds_config_ = NULL;
  _cached_size_ = 0;
}

Cluster_EdsClusterConfig::~Cluster_EdsClusterConfig() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Cluster.EdsClusterConfig)
  SharedDtor();
}

void Cluster_EdsClusterConfig::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete eds_config_;
}

void Cluster_EdsClusterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster_EdsClusterConfig::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cluster_EdsClusterConfig& Cluster_EdsClusterConfig::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cluster_EdsClusterConfig* Cluster_EdsClusterConfig::New(::google::protobuf::Arena* arena) const {
  Cluster_EdsClusterConfig* n = new Cluster_EdsClusterConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cluster_EdsClusterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Cluster.EdsClusterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && eds_config_ != NULL) {
    delete eds_config_;
  }
  eds_config_ = NULL;
  _internal_metadata_.Clear();
}

bool Cluster_EdsClusterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Cluster.EdsClusterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.ConfigSource eds_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eds_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.Cluster.EdsClusterConfig.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Cluster.EdsClusterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Cluster.EdsClusterConfig)
  return false;
#undef DO_
}

void Cluster_EdsClusterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Cluster.EdsClusterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.ConfigSource eds_config = 1;
  if (this->has_eds_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->eds_config_, output);
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Cluster.EdsClusterConfig.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Cluster.EdsClusterConfig)
}

::google::protobuf::uint8* Cluster_EdsClusterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Cluster.EdsClusterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .envoy.api.v2.ConfigSource eds_config = 1;
  if (this->has_eds_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->eds_config_, deterministic, target);
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Cluster.EdsClusterConfig.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Cluster.EdsClusterConfig)
  return target;
}

size_t Cluster_EdsClusterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Cluster.EdsClusterConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string service_name = 2;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // .envoy.api.v2.ConfigSource eds_config = 1;
  if (this->has_eds_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->eds_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cluster_EdsClusterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Cluster.EdsClusterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Cluster_EdsClusterConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cluster_EdsClusterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Cluster.EdsClusterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Cluster.EdsClusterConfig)
    MergeFrom(*source);
  }
}

void Cluster_EdsClusterConfig::MergeFrom(const Cluster_EdsClusterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Cluster.EdsClusterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.has_eds_config()) {
    mutable_eds_config()->::envoy::api::v2::ConfigSource::MergeFrom(from.eds_config());
  }
}

void Cluster_EdsClusterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Cluster.EdsClusterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster_EdsClusterConfig::CopyFrom(const Cluster_EdsClusterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Cluster.EdsClusterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster_EdsClusterConfig::IsInitialized() const {
  return true;
}

void Cluster_EdsClusterConfig::Swap(Cluster_EdsClusterConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cluster_EdsClusterConfig::InternalSwap(Cluster_EdsClusterConfig* other) {
  using std::swap;
  service_name_.Swap(&other->service_name_);
  swap(eds_config_, other->eds_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cluster_EdsClusterConfig::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cluster_EdsClusterConfig

// .envoy.api.v2.ConfigSource eds_config = 1;
bool Cluster_EdsClusterConfig::has_eds_config() const {
  return this != internal_default_instance() && eds_config_ != NULL;
}
void Cluster_EdsClusterConfig::clear_eds_config() {
  if (GetArenaNoVirtual() == NULL && eds_config_ != NULL) delete eds_config_;
  eds_config_ = NULL;
}
const ::envoy::api::v2::ConfigSource& Cluster_EdsClusterConfig::eds_config() const {
  const ::envoy::api::v2::ConfigSource* p = eds_config_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.EdsClusterConfig.eds_config)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::ConfigSource*>(
      &::envoy::api::v2::_ConfigSource_default_instance_);
}
::envoy::api::v2::ConfigSource* Cluster_EdsClusterConfig::mutable_eds_config() {
  
  if (eds_config_ == NULL) {
    eds_config_ = new ::envoy::api::v2::ConfigSource;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.EdsClusterConfig.eds_config)
  return eds_config_;
}
::envoy::api::v2::ConfigSource* Cluster_EdsClusterConfig::release_eds_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.EdsClusterConfig.eds_config)
  
  ::envoy::api::v2::ConfigSource* temp = eds_config_;
  eds_config_ = NULL;
  return temp;
}
void Cluster_EdsClusterConfig::set_allocated_eds_config(::envoy::api::v2::ConfigSource* eds_config) {
  delete eds_config_;
  eds_config_ = eds_config;
  if (eds_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.EdsClusterConfig.eds_config)
}

// string service_name = 2;
void Cluster_EdsClusterConfig::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster_EdsClusterConfig::service_name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.EdsClusterConfig.service_name)
  return service_name_.GetNoArena();
}
void Cluster_EdsClusterConfig::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Cluster.EdsClusterConfig.service_name)
}
#if LANG_CXX11
void Cluster_EdsClusterConfig::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Cluster.EdsClusterConfig.service_name)
}
#endif
void Cluster_EdsClusterConfig::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Cluster.EdsClusterConfig.service_name)
}
void Cluster_EdsClusterConfig::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Cluster.EdsClusterConfig.service_name)
}
::std::string* Cluster_EdsClusterConfig::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.EdsClusterConfig.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster_EdsClusterConfig::release_service_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.EdsClusterConfig.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster_EdsClusterConfig::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.EdsClusterConfig.service_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cluster_OutlierDetection::kConsecutive5XxFieldNumber;
const int Cluster_OutlierDetection::kIntervalFieldNumber;
const int Cluster_OutlierDetection::kBaseEjectionTimeFieldNumber;
const int Cluster_OutlierDetection::kMaxEjectionPercentFieldNumber;
const int Cluster_OutlierDetection::kEnforcingConsecutive5XxFieldNumber;
const int Cluster_OutlierDetection::kEnforcingSuccessRateFieldNumber;
const int Cluster_OutlierDetection::kSuccessRateMinimumHostsFieldNumber;
const int Cluster_OutlierDetection::kSuccessRateRequestVolumeFieldNumber;
const int Cluster_OutlierDetection::kSuccessRateStdevFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cluster_OutlierDetection::Cluster_OutlierDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Cluster.OutlierDetection)
}
Cluster_OutlierDetection::Cluster_OutlierDetection(const Cluster_OutlierDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_consecutive_5xx()) {
    consecutive_5xx_ = new ::google::protobuf::UInt32Value(*from.consecutive_5xx_);
  } else {
    consecutive_5xx_ = NULL;
  }
  if (from.has_interval()) {
    interval_ = new ::google::protobuf::Duration(*from.interval_);
  } else {
    interval_ = NULL;
  }
  if (from.has_base_ejection_time()) {
    base_ejection_time_ = new ::google::protobuf::Duration(*from.base_ejection_time_);
  } else {
    base_ejection_time_ = NULL;
  }
  if (from.has_max_ejection_percent()) {
    max_ejection_percent_ = new ::google::protobuf::UInt32Value(*from.max_ejection_percent_);
  } else {
    max_ejection_percent_ = NULL;
  }
  if (from.has_enforcing_consecutive_5xx()) {
    enforcing_consecutive_5xx_ = new ::google::protobuf::UInt32Value(*from.enforcing_consecutive_5xx_);
  } else {
    enforcing_consecutive_5xx_ = NULL;
  }
  if (from.has_enforcing_success_rate()) {
    enforcing_success_rate_ = new ::google::protobuf::UInt32Value(*from.enforcing_success_rate_);
  } else {
    enforcing_success_rate_ = NULL;
  }
  if (from.has_success_rate_minimum_hosts()) {
    success_rate_minimum_hosts_ = new ::google::protobuf::UInt32Value(*from.success_rate_minimum_hosts_);
  } else {
    success_rate_minimum_hosts_ = NULL;
  }
  if (from.has_success_rate_request_volume()) {
    success_rate_request_volume_ = new ::google::protobuf::UInt32Value(*from.success_rate_request_volume_);
  } else {
    success_rate_request_volume_ = NULL;
  }
  if (from.has_success_rate_stdev_factor()) {
    success_rate_stdev_factor_ = new ::google::protobuf::UInt32Value(*from.success_rate_stdev_factor_);
  } else {
    success_rate_stdev_factor_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Cluster.OutlierDetection)
}

void Cluster_OutlierDetection::SharedCtor() {
  ::memset(&consecutive_5xx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_rate_stdev_factor_) -
      reinterpret_cast<char*>(&consecutive_5xx_)) + sizeof(success_rate_stdev_factor_));
  _cached_size_ = 0;
}

Cluster_OutlierDetection::~Cluster_OutlierDetection() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Cluster.OutlierDetection)
  SharedDtor();
}

void Cluster_OutlierDetection::SharedDtor() {
  if (this != internal_default_instance()) delete consecutive_5xx_;
  if (this != internal_default_instance()) delete interval_;
  if (this != internal_default_instance()) delete base_ejection_time_;
  if (this != internal_default_instance()) delete max_ejection_percent_;
  if (this != internal_default_instance()) delete enforcing_consecutive_5xx_;
  if (this != internal_default_instance()) delete enforcing_success_rate_;
  if (this != internal_default_instance()) delete success_rate_minimum_hosts_;
  if (this != internal_default_instance()) delete success_rate_request_volume_;
  if (this != internal_default_instance()) delete success_rate_stdev_factor_;
}

void Cluster_OutlierDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster_OutlierDetection::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cluster_OutlierDetection& Cluster_OutlierDetection::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cluster_OutlierDetection* Cluster_OutlierDetection::New(::google::protobuf::Arena* arena) const {
  Cluster_OutlierDetection* n = new Cluster_OutlierDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cluster_OutlierDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Cluster.OutlierDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && consecutive_5xx_ != NULL) {
    delete consecutive_5xx_;
  }
  consecutive_5xx_ = NULL;
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) {
    delete interval_;
  }
  interval_ = NULL;
  if (GetArenaNoVirtual() == NULL && base_ejection_time_ != NULL) {
    delete base_ejection_time_;
  }
  base_ejection_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_ejection_percent_ != NULL) {
    delete max_ejection_percent_;
  }
  max_ejection_percent_ = NULL;
  if (GetArenaNoVirtual() == NULL && enforcing_consecutive_5xx_ != NULL) {
    delete enforcing_consecutive_5xx_;
  }
  enforcing_consecutive_5xx_ = NULL;
  if (GetArenaNoVirtual() == NULL && enforcing_success_rate_ != NULL) {
    delete enforcing_success_rate_;
  }
  enforcing_success_rate_ = NULL;
  if (GetArenaNoVirtual() == NULL && success_rate_minimum_hosts_ != NULL) {
    delete success_rate_minimum_hosts_;
  }
  success_rate_minimum_hosts_ = NULL;
  if (GetArenaNoVirtual() == NULL && success_rate_request_volume_ != NULL) {
    delete success_rate_request_volume_;
  }
  success_rate_request_volume_ = NULL;
  if (GetArenaNoVirtual() == NULL && success_rate_stdev_factor_ != NULL) {
    delete success_rate_stdev_factor_;
  }
  success_rate_stdev_factor_ = NULL;
  _internal_metadata_.Clear();
}

bool Cluster_OutlierDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Cluster.OutlierDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.UInt32Value consecutive_5xx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consecutive_5xx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration base_ejection_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_ejection_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value max_ejection_percent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_ejection_percent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enforcing_consecutive_5xx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value enforcing_success_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enforcing_success_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success_rate_minimum_hosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value success_rate_request_volume = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success_rate_request_volume()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value success_rate_stdev_factor = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success_rate_stdev_factor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Cluster.OutlierDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Cluster.OutlierDetection)
  return false;
#undef DO_
}

void Cluster_OutlierDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Cluster.OutlierDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value consecutive_5xx = 1;
  if (this->has_consecutive_5xx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->consecutive_5xx_, output);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->interval_, output);
  }

  // .google.protobuf.Duration base_ejection_time = 3;
  if (this->has_base_ejection_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->base_ejection_time_, output);
  }

  // .google.protobuf.UInt32Value max_ejection_percent = 4;
  if (this->has_max_ejection_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->max_ejection_percent_, output);
  }

  // .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;
  if (this->has_enforcing_consecutive_5xx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->enforcing_consecutive_5xx_, output);
  }

  // .google.protobuf.UInt32Value enforcing_success_rate = 6;
  if (this->has_enforcing_success_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->enforcing_success_rate_, output);
  }

  // .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;
  if (this->has_success_rate_minimum_hosts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->success_rate_minimum_hosts_, output);
  }

  // .google.protobuf.UInt32Value success_rate_request_volume = 8;
  if (this->has_success_rate_request_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->success_rate_request_volume_, output);
  }

  // .google.protobuf.UInt32Value success_rate_stdev_factor = 9;
  if (this->has_success_rate_stdev_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->success_rate_stdev_factor_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Cluster.OutlierDetection)
}

::google::protobuf::uint8* Cluster_OutlierDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Cluster.OutlierDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value consecutive_5xx = 1;
  if (this->has_consecutive_5xx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->consecutive_5xx_, deterministic, target);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->interval_, deterministic, target);
  }

  // .google.protobuf.Duration base_ejection_time = 3;
  if (this->has_base_ejection_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->base_ejection_time_, deterministic, target);
  }

  // .google.protobuf.UInt32Value max_ejection_percent = 4;
  if (this->has_max_ejection_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->max_ejection_percent_, deterministic, target);
  }

  // .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;
  if (this->has_enforcing_consecutive_5xx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->enforcing_consecutive_5xx_, deterministic, target);
  }

  // .google.protobuf.UInt32Value enforcing_success_rate = 6;
  if (this->has_enforcing_success_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->enforcing_success_rate_, deterministic, target);
  }

  // .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;
  if (this->has_success_rate_minimum_hosts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->success_rate_minimum_hosts_, deterministic, target);
  }

  // .google.protobuf.UInt32Value success_rate_request_volume = 8;
  if (this->has_success_rate_request_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->success_rate_request_volume_, deterministic, target);
  }

  // .google.protobuf.UInt32Value success_rate_stdev_factor = 9;
  if (this->has_success_rate_stdev_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->success_rate_stdev_factor_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Cluster.OutlierDetection)
  return target;
}

size_t Cluster_OutlierDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Cluster.OutlierDetection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.UInt32Value consecutive_5xx = 1;
  if (this->has_consecutive_5xx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->consecutive_5xx_);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->interval_);
  }

  // .google.protobuf.Duration base_ejection_time = 3;
  if (this->has_base_ejection_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_ejection_time_);
  }

  // .google.protobuf.UInt32Value max_ejection_percent = 4;
  if (this->has_max_ejection_percent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_ejection_percent_);
  }

  // .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;
  if (this->has_enforcing_consecutive_5xx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->enforcing_consecutive_5xx_);
  }

  // .google.protobuf.UInt32Value enforcing_success_rate = 6;
  if (this->has_enforcing_success_rate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->enforcing_success_rate_);
  }

  // .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;
  if (this->has_success_rate_minimum_hosts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->success_rate_minimum_hosts_);
  }

  // .google.protobuf.UInt32Value success_rate_request_volume = 8;
  if (this->has_success_rate_request_volume()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->success_rate_request_volume_);
  }

  // .google.protobuf.UInt32Value success_rate_stdev_factor = 9;
  if (this->has_success_rate_stdev_factor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->success_rate_stdev_factor_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cluster_OutlierDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Cluster.OutlierDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const Cluster_OutlierDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cluster_OutlierDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Cluster.OutlierDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Cluster.OutlierDetection)
    MergeFrom(*source);
  }
}

void Cluster_OutlierDetection::MergeFrom(const Cluster_OutlierDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Cluster.OutlierDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_consecutive_5xx()) {
    mutable_consecutive_5xx()->::google::protobuf::UInt32Value::MergeFrom(from.consecutive_5xx());
  }
  if (from.has_interval()) {
    mutable_interval()->::google::protobuf::Duration::MergeFrom(from.interval());
  }
  if (from.has_base_ejection_time()) {
    mutable_base_ejection_time()->::google::protobuf::Duration::MergeFrom(from.base_ejection_time());
  }
  if (from.has_max_ejection_percent()) {
    mutable_max_ejection_percent()->::google::protobuf::UInt32Value::MergeFrom(from.max_ejection_percent());
  }
  if (from.has_enforcing_consecutive_5xx()) {
    mutable_enforcing_consecutive_5xx()->::google::protobuf::UInt32Value::MergeFrom(from.enforcing_consecutive_5xx());
  }
  if (from.has_enforcing_success_rate()) {
    mutable_enforcing_success_rate()->::google::protobuf::UInt32Value::MergeFrom(from.enforcing_success_rate());
  }
  if (from.has_success_rate_minimum_hosts()) {
    mutable_success_rate_minimum_hosts()->::google::protobuf::UInt32Value::MergeFrom(from.success_rate_minimum_hosts());
  }
  if (from.has_success_rate_request_volume()) {
    mutable_success_rate_request_volume()->::google::protobuf::UInt32Value::MergeFrom(from.success_rate_request_volume());
  }
  if (from.has_success_rate_stdev_factor()) {
    mutable_success_rate_stdev_factor()->::google::protobuf::UInt32Value::MergeFrom(from.success_rate_stdev_factor());
  }
}

void Cluster_OutlierDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Cluster.OutlierDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster_OutlierDetection::CopyFrom(const Cluster_OutlierDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Cluster.OutlierDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster_OutlierDetection::IsInitialized() const {
  return true;
}

void Cluster_OutlierDetection::Swap(Cluster_OutlierDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cluster_OutlierDetection::InternalSwap(Cluster_OutlierDetection* other) {
  using std::swap;
  swap(consecutive_5xx_, other->consecutive_5xx_);
  swap(interval_, other->interval_);
  swap(base_ejection_time_, other->base_ejection_time_);
  swap(max_ejection_percent_, other->max_ejection_percent_);
  swap(enforcing_consecutive_5xx_, other->enforcing_consecutive_5xx_);
  swap(enforcing_success_rate_, other->enforcing_success_rate_);
  swap(success_rate_minimum_hosts_, other->success_rate_minimum_hosts_);
  swap(success_rate_request_volume_, other->success_rate_request_volume_);
  swap(success_rate_stdev_factor_, other->success_rate_stdev_factor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cluster_OutlierDetection::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cluster_OutlierDetection

// .google.protobuf.UInt32Value consecutive_5xx = 1;
bool Cluster_OutlierDetection::has_consecutive_5xx() const {
  return this != internal_default_instance() && consecutive_5xx_ != NULL;
}
void Cluster_OutlierDetection::clear_consecutive_5xx() {
  if (GetArenaNoVirtual() == NULL && consecutive_5xx_ != NULL) delete consecutive_5xx_;
  consecutive_5xx_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::consecutive_5xx() const {
  const ::google::protobuf::UInt32Value* p = consecutive_5xx_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.consecutive_5xx)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_consecutive_5xx() {
  
  if (consecutive_5xx_ == NULL) {
    consecutive_5xx_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.consecutive_5xx)
  return consecutive_5xx_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_consecutive_5xx() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.consecutive_5xx)
  
  ::google::protobuf::UInt32Value* temp = consecutive_5xx_;
  consecutive_5xx_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_consecutive_5xx(::google::protobuf::UInt32Value* consecutive_5xx) {
  delete consecutive_5xx_;
  if (consecutive_5xx != NULL && consecutive_5xx->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_consecutive_5xx = new ::google::protobuf::UInt32Value;
    new_consecutive_5xx->CopyFrom(*consecutive_5xx);
    consecutive_5xx = new_consecutive_5xx;
  }
  consecutive_5xx_ = consecutive_5xx;
  if (consecutive_5xx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.consecutive_5xx)
}

// .google.protobuf.Duration interval = 2;
bool Cluster_OutlierDetection::has_interval() const {
  return this != internal_default_instance() && interval_ != NULL;
}
void Cluster_OutlierDetection::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}
const ::google::protobuf::Duration& Cluster_OutlierDetection::interval() const {
  const ::google::protobuf::Duration* p = interval_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.interval)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* Cluster_OutlierDetection::mutable_interval() {
  
  if (interval_ == NULL) {
    interval_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.interval)
  return interval_;
}
::google::protobuf::Duration* Cluster_OutlierDetection::release_interval() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.interval)
  
  ::google::protobuf::Duration* temp = interval_;
  interval_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_interval(::google::protobuf::Duration* interval) {
  delete interval_;
  if (interval != NULL && interval->GetArena() != NULL) {
    ::google::protobuf::Duration* new_interval = new ::google::protobuf::Duration;
    new_interval->CopyFrom(*interval);
    interval = new_interval;
  }
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.interval)
}

// .google.protobuf.Duration base_ejection_time = 3;
bool Cluster_OutlierDetection::has_base_ejection_time() const {
  return this != internal_default_instance() && base_ejection_time_ != NULL;
}
void Cluster_OutlierDetection::clear_base_ejection_time() {
  if (GetArenaNoVirtual() == NULL && base_ejection_time_ != NULL) delete base_ejection_time_;
  base_ejection_time_ = NULL;
}
const ::google::protobuf::Duration& Cluster_OutlierDetection::base_ejection_time() const {
  const ::google::protobuf::Duration* p = base_ejection_time_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.base_ejection_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* Cluster_OutlierDetection::mutable_base_ejection_time() {
  
  if (base_ejection_time_ == NULL) {
    base_ejection_time_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.base_ejection_time)
  return base_ejection_time_;
}
::google::protobuf::Duration* Cluster_OutlierDetection::release_base_ejection_time() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.base_ejection_time)
  
  ::google::protobuf::Duration* temp = base_ejection_time_;
  base_ejection_time_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_base_ejection_time(::google::protobuf::Duration* base_ejection_time) {
  delete base_ejection_time_;
  if (base_ejection_time != NULL && base_ejection_time->GetArena() != NULL) {
    ::google::protobuf::Duration* new_base_ejection_time = new ::google::protobuf::Duration;
    new_base_ejection_time->CopyFrom(*base_ejection_time);
    base_ejection_time = new_base_ejection_time;
  }
  base_ejection_time_ = base_ejection_time;
  if (base_ejection_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.base_ejection_time)
}

// .google.protobuf.UInt32Value max_ejection_percent = 4;
bool Cluster_OutlierDetection::has_max_ejection_percent() const {
  return this != internal_default_instance() && max_ejection_percent_ != NULL;
}
void Cluster_OutlierDetection::clear_max_ejection_percent() {
  if (GetArenaNoVirtual() == NULL && max_ejection_percent_ != NULL) delete max_ejection_percent_;
  max_ejection_percent_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::max_ejection_percent() const {
  const ::google::protobuf::UInt32Value* p = max_ejection_percent_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.max_ejection_percent)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_max_ejection_percent() {
  
  if (max_ejection_percent_ == NULL) {
    max_ejection_percent_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.max_ejection_percent)
  return max_ejection_percent_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_max_ejection_percent() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.max_ejection_percent)
  
  ::google::protobuf::UInt32Value* temp = max_ejection_percent_;
  max_ejection_percent_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_max_ejection_percent(::google::protobuf::UInt32Value* max_ejection_percent) {
  delete max_ejection_percent_;
  if (max_ejection_percent != NULL && max_ejection_percent->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_ejection_percent = new ::google::protobuf::UInt32Value;
    new_max_ejection_percent->CopyFrom(*max_ejection_percent);
    max_ejection_percent = new_max_ejection_percent;
  }
  max_ejection_percent_ = max_ejection_percent;
  if (max_ejection_percent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.max_ejection_percent)
}

// .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;
bool Cluster_OutlierDetection::has_enforcing_consecutive_5xx() const {
  return this != internal_default_instance() && enforcing_consecutive_5xx_ != NULL;
}
void Cluster_OutlierDetection::clear_enforcing_consecutive_5xx() {
  if (GetArenaNoVirtual() == NULL && enforcing_consecutive_5xx_ != NULL) delete enforcing_consecutive_5xx_;
  enforcing_consecutive_5xx_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::enforcing_consecutive_5xx() const {
  const ::google::protobuf::UInt32Value* p = enforcing_consecutive_5xx_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.enforcing_consecutive_5xx)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_enforcing_consecutive_5xx() {
  
  if (enforcing_consecutive_5xx_ == NULL) {
    enforcing_consecutive_5xx_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.enforcing_consecutive_5xx)
  return enforcing_consecutive_5xx_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_enforcing_consecutive_5xx() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.enforcing_consecutive_5xx)
  
  ::google::protobuf::UInt32Value* temp = enforcing_consecutive_5xx_;
  enforcing_consecutive_5xx_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_enforcing_consecutive_5xx(::google::protobuf::UInt32Value* enforcing_consecutive_5xx) {
  delete enforcing_consecutive_5xx_;
  if (enforcing_consecutive_5xx != NULL && enforcing_consecutive_5xx->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_enforcing_consecutive_5xx = new ::google::protobuf::UInt32Value;
    new_enforcing_consecutive_5xx->CopyFrom(*enforcing_consecutive_5xx);
    enforcing_consecutive_5xx = new_enforcing_consecutive_5xx;
  }
  enforcing_consecutive_5xx_ = enforcing_consecutive_5xx;
  if (enforcing_consecutive_5xx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.enforcing_consecutive_5xx)
}

// .google.protobuf.UInt32Value enforcing_success_rate = 6;
bool Cluster_OutlierDetection::has_enforcing_success_rate() const {
  return this != internal_default_instance() && enforcing_success_rate_ != NULL;
}
void Cluster_OutlierDetection::clear_enforcing_success_rate() {
  if (GetArenaNoVirtual() == NULL && enforcing_success_rate_ != NULL) delete enforcing_success_rate_;
  enforcing_success_rate_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::enforcing_success_rate() const {
  const ::google::protobuf::UInt32Value* p = enforcing_success_rate_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.enforcing_success_rate)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_enforcing_success_rate() {
  
  if (enforcing_success_rate_ == NULL) {
    enforcing_success_rate_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.enforcing_success_rate)
  return enforcing_success_rate_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_enforcing_success_rate() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.enforcing_success_rate)
  
  ::google::protobuf::UInt32Value* temp = enforcing_success_rate_;
  enforcing_success_rate_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_enforcing_success_rate(::google::protobuf::UInt32Value* enforcing_success_rate) {
  delete enforcing_success_rate_;
  if (enforcing_success_rate != NULL && enforcing_success_rate->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_enforcing_success_rate = new ::google::protobuf::UInt32Value;
    new_enforcing_success_rate->CopyFrom(*enforcing_success_rate);
    enforcing_success_rate = new_enforcing_success_rate;
  }
  enforcing_success_rate_ = enforcing_success_rate;
  if (enforcing_success_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.enforcing_success_rate)
}

// .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;
bool Cluster_OutlierDetection::has_success_rate_minimum_hosts() const {
  return this != internal_default_instance() && success_rate_minimum_hosts_ != NULL;
}
void Cluster_OutlierDetection::clear_success_rate_minimum_hosts() {
  if (GetArenaNoVirtual() == NULL && success_rate_minimum_hosts_ != NULL) delete success_rate_minimum_hosts_;
  success_rate_minimum_hosts_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::success_rate_minimum_hosts() const {
  const ::google::protobuf::UInt32Value* p = success_rate_minimum_hosts_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.success_rate_minimum_hosts)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_success_rate_minimum_hosts() {
  
  if (success_rate_minimum_hosts_ == NULL) {
    success_rate_minimum_hosts_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.success_rate_minimum_hosts)
  return success_rate_minimum_hosts_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_success_rate_minimum_hosts() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.success_rate_minimum_hosts)
  
  ::google::protobuf::UInt32Value* temp = success_rate_minimum_hosts_;
  success_rate_minimum_hosts_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_success_rate_minimum_hosts(::google::protobuf::UInt32Value* success_rate_minimum_hosts) {
  delete success_rate_minimum_hosts_;
  if (success_rate_minimum_hosts != NULL && success_rate_minimum_hosts->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_success_rate_minimum_hosts = new ::google::protobuf::UInt32Value;
    new_success_rate_minimum_hosts->CopyFrom(*success_rate_minimum_hosts);
    success_rate_minimum_hosts = new_success_rate_minimum_hosts;
  }
  success_rate_minimum_hosts_ = success_rate_minimum_hosts;
  if (success_rate_minimum_hosts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.success_rate_minimum_hosts)
}

// .google.protobuf.UInt32Value success_rate_request_volume = 8;
bool Cluster_OutlierDetection::has_success_rate_request_volume() const {
  return this != internal_default_instance() && success_rate_request_volume_ != NULL;
}
void Cluster_OutlierDetection::clear_success_rate_request_volume() {
  if (GetArenaNoVirtual() == NULL && success_rate_request_volume_ != NULL) delete success_rate_request_volume_;
  success_rate_request_volume_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::success_rate_request_volume() const {
  const ::google::protobuf::UInt32Value* p = success_rate_request_volume_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.success_rate_request_volume)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_success_rate_request_volume() {
  
  if (success_rate_request_volume_ == NULL) {
    success_rate_request_volume_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.success_rate_request_volume)
  return success_rate_request_volume_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_success_rate_request_volume() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.success_rate_request_volume)
  
  ::google::protobuf::UInt32Value* temp = success_rate_request_volume_;
  success_rate_request_volume_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_success_rate_request_volume(::google::protobuf::UInt32Value* success_rate_request_volume) {
  delete success_rate_request_volume_;
  if (success_rate_request_volume != NULL && success_rate_request_volume->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_success_rate_request_volume = new ::google::protobuf::UInt32Value;
    new_success_rate_request_volume->CopyFrom(*success_rate_request_volume);
    success_rate_request_volume = new_success_rate_request_volume;
  }
  success_rate_request_volume_ = success_rate_request_volume;
  if (success_rate_request_volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.success_rate_request_volume)
}

// .google.protobuf.UInt32Value success_rate_stdev_factor = 9;
bool Cluster_OutlierDetection::has_success_rate_stdev_factor() const {
  return this != internal_default_instance() && success_rate_stdev_factor_ != NULL;
}
void Cluster_OutlierDetection::clear_success_rate_stdev_factor() {
  if (GetArenaNoVirtual() == NULL && success_rate_stdev_factor_ != NULL) delete success_rate_stdev_factor_;
  success_rate_stdev_factor_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::success_rate_stdev_factor() const {
  const ::google::protobuf::UInt32Value* p = success_rate_stdev_factor_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.success_rate_stdev_factor)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_success_rate_stdev_factor() {
  
  if (success_rate_stdev_factor_ == NULL) {
    success_rate_stdev_factor_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.success_rate_stdev_factor)
  return success_rate_stdev_factor_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_success_rate_stdev_factor() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.success_rate_stdev_factor)
  
  ::google::protobuf::UInt32Value* temp = success_rate_stdev_factor_;
  success_rate_stdev_factor_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_success_rate_stdev_factor(::google::protobuf::UInt32Value* success_rate_stdev_factor) {
  delete success_rate_stdev_factor_;
  if (success_rate_stdev_factor != NULL && success_rate_stdev_factor->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_success_rate_stdev_factor = new ::google::protobuf::UInt32Value;
    new_success_rate_stdev_factor->CopyFrom(*success_rate_stdev_factor);
    success_rate_stdev_factor = new_success_rate_stdev_factor;
  }
  success_rate_stdev_factor_ = success_rate_stdev_factor;
  if (success_rate_stdev_factor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.success_rate_stdev_factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cluster::kNameFieldNumber;
const int Cluster::kTypeFieldNumber;
const int Cluster::kEdsClusterConfigFieldNumber;
const int Cluster::kConnectTimeoutFieldNumber;
const int Cluster::kPerConnectionBufferLimitBytesFieldNumber;
const int Cluster::kLbPolicyFieldNumber;
const int Cluster::kHostsFieldNumber;
const int Cluster::kHealthChecksFieldNumber;
const int Cluster::kMaxRequestsPerConnectionFieldNumber;
const int Cluster::kCircuitBreakersFieldNumber;
const int Cluster::kTlsContextFieldNumber;
const int Cluster::kTcpProtocolOptionsFieldNumber;
const int Cluster::kHttpProtocolOptionsFieldNumber;
const int Cluster::kHttp2ProtocolOptionsFieldNumber;
const int Cluster::kGrpcProtocolOptionsFieldNumber;
const int Cluster::kDnsRefreshRateFieldNumber;
const int Cluster::kDnsLookupFamilyFieldNumber;
const int Cluster::kDnsResolversFieldNumber;
const int Cluster::kOutlierDetectionFieldNumber;
const int Cluster::kCleanupIntervalFieldNumber;
const int Cluster::kUpstreamBindConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cluster::Cluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Cluster)
}
Cluster::Cluster(const Cluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hosts_(from.hosts_),
      health_checks_(from.health_checks_),
      dns_resolvers_(from.dns_resolvers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_eds_cluster_config()) {
    eds_cluster_config_ = new ::envoy::api::v2::Cluster_EdsClusterConfig(*from.eds_cluster_config_);
  } else {
    eds_cluster_config_ = NULL;
  }
  if (from.has_connect_timeout()) {
    connect_timeout_ = new ::google::protobuf::Duration(*from.connect_timeout_);
  } else {
    connect_timeout_ = NULL;
  }
  if (from.has_per_connection_buffer_limit_bytes()) {
    per_connection_buffer_limit_bytes_ = new ::google::protobuf::UInt32Value(*from.per_connection_buffer_limit_bytes_);
  } else {
    per_connection_buffer_limit_bytes_ = NULL;
  }
  if (from.has_max_requests_per_connection()) {
    max_requests_per_connection_ = new ::google::protobuf::UInt32Value(*from.max_requests_per_connection_);
  } else {
    max_requests_per_connection_ = NULL;
  }
  if (from.has_circuit_breakers()) {
    circuit_breakers_ = new ::envoy::api::v2::CircuitBreakers(*from.circuit_breakers_);
  } else {
    circuit_breakers_ = NULL;
  }
  if (from.has_tls_context()) {
    tls_context_ = new ::envoy::api::v2::UpstreamTlsContext(*from.tls_context_);
  } else {
    tls_context_ = NULL;
  }
  if (from.has_dns_refresh_rate()) {
    dns_refresh_rate_ = new ::google::protobuf::Duration(*from.dns_refresh_rate_);
  } else {
    dns_refresh_rate_ = NULL;
  }
  if (from.has_outlier_detection()) {
    outlier_detection_ = new ::envoy::api::v2::Cluster_OutlierDetection(*from.outlier_detection_);
  } else {
    outlier_detection_ = NULL;
  }
  if (from.has_cleanup_interval()) {
    cleanup_interval_ = new ::google::protobuf::Duration(*from.cleanup_interval_);
  } else {
    cleanup_interval_ = NULL;
  }
  if (from.has_upstream_bind_config()) {
    upstream_bind_config_ = new ::envoy::api::v2::BindConfig(*from.upstream_bind_config_);
  } else {
    upstream_bind_config_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&dns_lookup_family_) -
    reinterpret_cast<char*>(&type_)) + sizeof(dns_lookup_family_));
  clear_has_protocol_options();
  switch (from.protocol_options_case()) {
    case kTcpProtocolOptions: {
      mutable_tcp_protocol_options()->::envoy::api::v2::TcpProtocolOptions::MergeFrom(from.tcp_protocol_options());
      break;
    }
    case kHttpProtocolOptions: {
      mutable_http_protocol_options()->::envoy::api::v2::Http1ProtocolOptions::MergeFrom(from.http_protocol_options());
      break;
    }
    case kHttp2ProtocolOptions: {
      mutable_http2_protocol_options()->::envoy::api::v2::Http2ProtocolOptions::MergeFrom(from.http2_protocol_options());
      break;
    }
    case kGrpcProtocolOptions: {
      mutable_grpc_protocol_options()->::envoy::api::v2::GrpcProtocolOptions::MergeFrom(from.grpc_protocol_options());
      break;
    }
    case PROTOCOL_OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Cluster)
}

void Cluster::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&eds_cluster_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dns_lookup_family_) -
      reinterpret_cast<char*>(&eds_cluster_config_)) + sizeof(dns_lookup_family_));
  clear_has_protocol_options();
  _cached_size_ = 0;
}

Cluster::~Cluster() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Cluster)
  SharedDtor();
}

void Cluster::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete eds_cluster_config_;
  if (this != internal_default_instance()) delete connect_timeout_;
  if (this != internal_default_instance()) delete per_connection_buffer_limit_bytes_;
  if (this != internal_default_instance()) delete max_requests_per_connection_;
  if (this != internal_default_instance()) delete circuit_breakers_;
  if (this != internal_default_instance()) delete tls_context_;
  if (this != internal_default_instance()) delete dns_refresh_rate_;
  if (this != internal_default_instance()) delete outlier_detection_;
  if (this != internal_default_instance()) delete cleanup_interval_;
  if (this != internal_default_instance()) delete upstream_bind_config_;
  if (has_protocol_options()) {
    clear_protocol_options();
  }
}

void Cluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cluster& Cluster::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cluster* Cluster::New(::google::protobuf::Arena* arena) const {
  Cluster* n = new Cluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cluster::clear_protocol_options() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.Cluster)
  switch (protocol_options_case()) {
    case kTcpProtocolOptions: {
      delete protocol_options_.tcp_protocol_options_;
      break;
    }
    case kHttpProtocolOptions: {
      delete protocol_options_.http_protocol_options_;
      break;
    }
    case kHttp2ProtocolOptions: {
      delete protocol_options_.http2_protocol_options_;
      break;
    }
    case kGrpcProtocolOptions: {
      delete protocol_options_.grpc_protocol_options_;
      break;
    }
    case PROTOCOL_OPTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROTOCOL_OPTIONS_NOT_SET;
}


void Cluster::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Cluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hosts_.Clear();
  health_checks_.Clear();
  dns_resolvers_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && eds_cluster_config_ != NULL) {
    delete eds_cluster_config_;
  }
  eds_cluster_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && connect_timeout_ != NULL) {
    delete connect_timeout_;
  }
  connect_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && per_connection_buffer_limit_bytes_ != NULL) {
    delete per_connection_buffer_limit_bytes_;
  }
  per_connection_buffer_limit_bytes_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_requests_per_connection_ != NULL) {
    delete max_requests_per_connection_;
  }
  max_requests_per_connection_ = NULL;
  if (GetArenaNoVirtual() == NULL && circuit_breakers_ != NULL) {
    delete circuit_breakers_;
  }
  circuit_breakers_ = NULL;
  if (GetArenaNoVirtual() == NULL && tls_context_ != NULL) {
    delete tls_context_;
  }
  tls_context_ = NULL;
  if (GetArenaNoVirtual() == NULL && dns_refresh_rate_ != NULL) {
    delete dns_refresh_rate_;
  }
  dns_refresh_rate_ = NULL;
  if (GetArenaNoVirtual() == NULL && outlier_detection_ != NULL) {
    delete outlier_detection_;
  }
  outlier_detection_ = NULL;
  if (GetArenaNoVirtual() == NULL && cleanup_interval_ != NULL) {
    delete cleanup_interval_;
  }
  cleanup_interval_ = NULL;
  if (GetArenaNoVirtual() == NULL && upstream_bind_config_ != NULL) {
    delete upstream_bind_config_;
  }
  upstream_bind_config_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dns_lookup_family_) -
      reinterpret_cast<char*>(&type_)) + sizeof(dns_lookup_family_));
  clear_protocol_options();
  _internal_metadata_.Clear();
}

bool Cluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Cluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.Cluster.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Cluster.DiscoveryType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::envoy::api::v2::Cluster_DiscoveryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Cluster.EdsClusterConfig eds_cluster_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eds_cluster_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration connect_timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_per_connection_buffer_limit_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Cluster.LbPolicy lb_policy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lb_policy(static_cast< ::envoy::api::v2::Cluster_LbPolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.Address hosts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HealthCheck health_checks = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_health_checks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value max_requests_per_connection = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_requests_per_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.CircuitBreakers circuit_breakers = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_circuit_breakers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.UpstreamTlsContext tls_context = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tls_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.TcpProtocolOptions tcp_protocol_options = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcp_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http2_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.GrpcProtocolOptions grpc_protocol_options = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grpc_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration dns_refresh_rate = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dns_refresh_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Cluster.DnsLookupFamily dns_lookup_family = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dns_lookup_family(static_cast< ::envoy::api::v2::Cluster_DnsLookupFamily >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.Address dns_resolvers = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dns_resolvers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Cluster.OutlierDetection outlier_detection = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outlier_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration cleanup_interval = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cleanup_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.BindConfig upstream_bind_config = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upstream_bind_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Cluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Cluster)
  return false;
#undef DO_
}

void Cluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Cluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Cluster.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .envoy.api.v2.Cluster.DiscoveryType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .envoy.api.v2.Cluster.EdsClusterConfig eds_cluster_config = 3;
  if (this->has_eds_cluster_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->eds_cluster_config_, output);
  }

  // .google.protobuf.Duration connect_timeout = 4;
  if (this->has_connect_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->connect_timeout_, output);
  }

  // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 5;
  if (this->has_per_connection_buffer_limit_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->per_connection_buffer_limit_bytes_, output);
  }

  // .envoy.api.v2.Cluster.LbPolicy lb_policy = 6;
  if (this->lb_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->lb_policy(), output);
  }

  // repeated .envoy.api.v2.Address hosts = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hosts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->hosts(static_cast<int>(i)), output);
  }

  // repeated .envoy.api.v2.HealthCheck health_checks = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->health_checks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->health_checks(static_cast<int>(i)), output);
  }

  // .google.protobuf.UInt32Value max_requests_per_connection = 9;
  if (this->has_max_requests_per_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->max_requests_per_connection_, output);
  }

  // .envoy.api.v2.CircuitBreakers circuit_breakers = 10;
  if (this->has_circuit_breakers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->circuit_breakers_, output);
  }

  // .envoy.api.v2.UpstreamTlsContext tls_context = 11;
  if (this->has_tls_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->tls_context_, output);
  }

  // .envoy.api.v2.TcpProtocolOptions tcp_protocol_options = 12;
  if (has_tcp_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *protocol_options_.tcp_protocol_options_, output);
  }

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 13;
  if (has_http_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *protocol_options_.http_protocol_options_, output);
  }

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 14;
  if (has_http2_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *protocol_options_.http2_protocol_options_, output);
  }

  // .envoy.api.v2.GrpcProtocolOptions grpc_protocol_options = 15;
  if (has_grpc_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *protocol_options_.grpc_protocol_options_, output);
  }

  // .google.protobuf.Duration dns_refresh_rate = 16;
  if (this->has_dns_refresh_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->dns_refresh_rate_, output);
  }

  // .envoy.api.v2.Cluster.DnsLookupFamily dns_lookup_family = 17;
  if (this->dns_lookup_family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->dns_lookup_family(), output);
  }

  // repeated .envoy.api.v2.Address dns_resolvers = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dns_resolvers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->dns_resolvers(static_cast<int>(i)), output);
  }

  // .envoy.api.v2.Cluster.OutlierDetection outlier_detection = 19;
  if (this->has_outlier_detection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->outlier_detection_, output);
  }

  // .google.protobuf.Duration cleanup_interval = 20;
  if (this->has_cleanup_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->cleanup_interval_, output);
  }

  // .envoy.api.v2.BindConfig upstream_bind_config = 21;
  if (this->has_upstream_bind_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->upstream_bind_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Cluster)
}

::google::protobuf::uint8* Cluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Cluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Cluster.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .envoy.api.v2.Cluster.DiscoveryType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .envoy.api.v2.Cluster.EdsClusterConfig eds_cluster_config = 3;
  if (this->has_eds_cluster_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->eds_cluster_config_, deterministic, target);
  }

  // .google.protobuf.Duration connect_timeout = 4;
  if (this->has_connect_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->connect_timeout_, deterministic, target);
  }

  // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 5;
  if (this->has_per_connection_buffer_limit_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->per_connection_buffer_limit_bytes_, deterministic, target);
  }

  // .envoy.api.v2.Cluster.LbPolicy lb_policy = 6;
  if (this->lb_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->lb_policy(), target);
  }

  // repeated .envoy.api.v2.Address hosts = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hosts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->hosts(static_cast<int>(i)), deterministic, target);
  }

  // repeated .envoy.api.v2.HealthCheck health_checks = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->health_checks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->health_checks(static_cast<int>(i)), deterministic, target);
  }

  // .google.protobuf.UInt32Value max_requests_per_connection = 9;
  if (this->has_max_requests_per_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->max_requests_per_connection_, deterministic, target);
  }

  // .envoy.api.v2.CircuitBreakers circuit_breakers = 10;
  if (this->has_circuit_breakers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->circuit_breakers_, deterministic, target);
  }

  // .envoy.api.v2.UpstreamTlsContext tls_context = 11;
  if (this->has_tls_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->tls_context_, deterministic, target);
  }

  // .envoy.api.v2.TcpProtocolOptions tcp_protocol_options = 12;
  if (has_tcp_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *protocol_options_.tcp_protocol_options_, deterministic, target);
  }

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 13;
  if (has_http_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *protocol_options_.http_protocol_options_, deterministic, target);
  }

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 14;
  if (has_http2_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *protocol_options_.http2_protocol_options_, deterministic, target);
  }

  // .envoy.api.v2.GrpcProtocolOptions grpc_protocol_options = 15;
  if (has_grpc_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *protocol_options_.grpc_protocol_options_, deterministic, target);
  }

  // .google.protobuf.Duration dns_refresh_rate = 16;
  if (this->has_dns_refresh_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->dns_refresh_rate_, deterministic, target);
  }

  // .envoy.api.v2.Cluster.DnsLookupFamily dns_lookup_family = 17;
  if (this->dns_lookup_family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->dns_lookup_family(), target);
  }

  // repeated .envoy.api.v2.Address dns_resolvers = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dns_resolvers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->dns_resolvers(static_cast<int>(i)), deterministic, target);
  }

  // .envoy.api.v2.Cluster.OutlierDetection outlier_detection = 19;
  if (this->has_outlier_detection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->outlier_detection_, deterministic, target);
  }

  // .google.protobuf.Duration cleanup_interval = 20;
  if (this->has_cleanup_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->cleanup_interval_, deterministic, target);
  }

  // .envoy.api.v2.BindConfig upstream_bind_config = 21;
  if (this->has_upstream_bind_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->upstream_bind_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Cluster)
  return target;
}

size_t Cluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Cluster)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .envoy.api.v2.Address hosts = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->hosts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hosts(static_cast<int>(i)));
    }
  }

  // repeated .envoy.api.v2.HealthCheck health_checks = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->health_checks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->health_checks(static_cast<int>(i)));
    }
  }

  // repeated .envoy.api.v2.Address dns_resolvers = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->dns_resolvers_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dns_resolvers(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .envoy.api.v2.Cluster.EdsClusterConfig eds_cluster_config = 3;
  if (this->has_eds_cluster_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->eds_cluster_config_);
  }

  // .google.protobuf.Duration connect_timeout = 4;
  if (this->has_connect_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->connect_timeout_);
  }

  // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 5;
  if (this->has_per_connection_buffer_limit_bytes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->per_connection_buffer_limit_bytes_);
  }

  // .google.protobuf.UInt32Value max_requests_per_connection = 9;
  if (this->has_max_requests_per_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_requests_per_connection_);
  }

  // .envoy.api.v2.CircuitBreakers circuit_breakers = 10;
  if (this->has_circuit_breakers()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->circuit_breakers_);
  }

  // .envoy.api.v2.UpstreamTlsContext tls_context = 11;
  if (this->has_tls_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tls_context_);
  }

  // .google.protobuf.Duration dns_refresh_rate = 16;
  if (this->has_dns_refresh_rate()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dns_refresh_rate_);
  }

  // .envoy.api.v2.Cluster.OutlierDetection outlier_detection = 19;
  if (this->has_outlier_detection()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->outlier_detection_);
  }

  // .google.protobuf.Duration cleanup_interval = 20;
  if (this->has_cleanup_interval()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cleanup_interval_);
  }

  // .envoy.api.v2.BindConfig upstream_bind_config = 21;
  if (this->has_upstream_bind_config()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->upstream_bind_config_);
  }

  // .envoy.api.v2.Cluster.DiscoveryType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .envoy.api.v2.Cluster.LbPolicy lb_policy = 6;
  if (this->lb_policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lb_policy());
  }

  // .envoy.api.v2.Cluster.DnsLookupFamily dns_lookup_family = 17;
  if (this->dns_lookup_family() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dns_lookup_family());
  }

  switch (protocol_options_case()) {
    // .envoy.api.v2.TcpProtocolOptions tcp_protocol_options = 12;
    case kTcpProtocolOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *protocol_options_.tcp_protocol_options_);
      break;
    }
    // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 13;
    case kHttpProtocolOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *protocol_options_.http_protocol_options_);
      break;
    }
    // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 14;
    case kHttp2ProtocolOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *protocol_options_.http2_protocol_options_);
      break;
    }
    // .envoy.api.v2.GrpcProtocolOptions grpc_protocol_options = 15;
    case kGrpcProtocolOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *protocol_options_.grpc_protocol_options_);
      break;
    }
    case PROTOCOL_OPTIONS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  const Cluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Cluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Cluster)
    MergeFrom(*source);
  }
}

void Cluster::MergeFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hosts_.MergeFrom(from.hosts_);
  health_checks_.MergeFrom(from.health_checks_);
  dns_resolvers_.MergeFrom(from.dns_resolvers_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_eds_cluster_config()) {
    mutable_eds_cluster_config()->::envoy::api::v2::Cluster_EdsClusterConfig::MergeFrom(from.eds_cluster_config());
  }
  if (from.has_connect_timeout()) {
    mutable_connect_timeout()->::google::protobuf::Duration::MergeFrom(from.connect_timeout());
  }
  if (from.has_per_connection_buffer_limit_bytes()) {
    mutable_per_connection_buffer_limit_bytes()->::google::protobuf::UInt32Value::MergeFrom(from.per_connection_buffer_limit_bytes());
  }
  if (from.has_max_requests_per_connection()) {
    mutable_max_requests_per_connection()->::google::protobuf::UInt32Value::MergeFrom(from.max_requests_per_connection());
  }
  if (from.has_circuit_breakers()) {
    mutable_circuit_breakers()->::envoy::api::v2::CircuitBreakers::MergeFrom(from.circuit_breakers());
  }
  if (from.has_tls_context()) {
    mutable_tls_context()->::envoy::api::v2::UpstreamTlsContext::MergeFrom(from.tls_context());
  }
  if (from.has_dns_refresh_rate()) {
    mutable_dns_refresh_rate()->::google::protobuf::Duration::MergeFrom(from.dns_refresh_rate());
  }
  if (from.has_outlier_detection()) {
    mutable_outlier_detection()->::envoy::api::v2::Cluster_OutlierDetection::MergeFrom(from.outlier_detection());
  }
  if (from.has_cleanup_interval()) {
    mutable_cleanup_interval()->::google::protobuf::Duration::MergeFrom(from.cleanup_interval());
  }
  if (from.has_upstream_bind_config()) {
    mutable_upstream_bind_config()->::envoy::api::v2::BindConfig::MergeFrom(from.upstream_bind_config());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.lb_policy() != 0) {
    set_lb_policy(from.lb_policy());
  }
  if (from.dns_lookup_family() != 0) {
    set_dns_lookup_family(from.dns_lookup_family());
  }
  switch (from.protocol_options_case()) {
    case kTcpProtocolOptions: {
      mutable_tcp_protocol_options()->::envoy::api::v2::TcpProtocolOptions::MergeFrom(from.tcp_protocol_options());
      break;
    }
    case kHttpProtocolOptions: {
      mutable_http_protocol_options()->::envoy::api::v2::Http1ProtocolOptions::MergeFrom(from.http_protocol_options());
      break;
    }
    case kHttp2ProtocolOptions: {
      mutable_http2_protocol_options()->::envoy::api::v2::Http2ProtocolOptions::MergeFrom(from.http2_protocol_options());
      break;
    }
    case kGrpcProtocolOptions: {
      mutable_grpc_protocol_options()->::envoy::api::v2::GrpcProtocolOptions::MergeFrom(from.grpc_protocol_options());
      break;
    }
    case PROTOCOL_OPTIONS_NOT_SET: {
      break;
    }
  }
}

void Cluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster::CopyFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster::IsInitialized() const {
  return true;
}

void Cluster::Swap(Cluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cluster::InternalSwap(Cluster* other) {
  using std::swap;
  hosts_.InternalSwap(&other->hosts_);
  health_checks_.InternalSwap(&other->health_checks_);
  dns_resolvers_.InternalSwap(&other->dns_resolvers_);
  name_.Swap(&other->name_);
  swap(eds_cluster_config_, other->eds_cluster_config_);
  swap(connect_timeout_, other->connect_timeout_);
  swap(per_connection_buffer_limit_bytes_, other->per_connection_buffer_limit_bytes_);
  swap(max_requests_per_connection_, other->max_requests_per_connection_);
  swap(circuit_breakers_, other->circuit_breakers_);
  swap(tls_context_, other->tls_context_);
  swap(dns_refresh_rate_, other->dns_refresh_rate_);
  swap(outlier_detection_, other->outlier_detection_);
  swap(cleanup_interval_, other->cleanup_interval_);
  swap(upstream_bind_config_, other->upstream_bind_config_);
  swap(type_, other->type_);
  swap(lb_policy_, other->lb_policy_);
  swap(dns_lookup_family_, other->dns_lookup_family_);
  swap(protocol_options_, other->protocol_options_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cluster::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cluster

// string name = 1;
void Cluster::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.name)
  return name_.GetNoArena();
}
void Cluster::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Cluster.name)
}
#if LANG_CXX11
void Cluster::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Cluster.name)
}
#endif
void Cluster::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Cluster.name)
}
void Cluster::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Cluster.name)
}
::std::string* Cluster::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.name)
}

// .envoy.api.v2.Cluster.DiscoveryType type = 2;
void Cluster::clear_type() {
  type_ = 0;
}
::envoy::api::v2::Cluster_DiscoveryType Cluster::type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.type)
  return static_cast< ::envoy::api::v2::Cluster_DiscoveryType >(type_);
}
void Cluster::set_type(::envoy::api::v2::Cluster_DiscoveryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.Cluster.type)
}

// .envoy.api.v2.Cluster.EdsClusterConfig eds_cluster_config = 3;
bool Cluster::has_eds_cluster_config() const {
  return this != internal_default_instance() && eds_cluster_config_ != NULL;
}
void Cluster::clear_eds_cluster_config() {
  if (GetArenaNoVirtual() == NULL && eds_cluster_config_ != NULL) delete eds_cluster_config_;
  eds_cluster_config_ = NULL;
}
const ::envoy::api::v2::Cluster_EdsClusterConfig& Cluster::eds_cluster_config() const {
  const ::envoy::api::v2::Cluster_EdsClusterConfig* p = eds_cluster_config_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.eds_cluster_config)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Cluster_EdsClusterConfig*>(
      &::envoy::api::v2::_Cluster_EdsClusterConfig_default_instance_);
}
::envoy::api::v2::Cluster_EdsClusterConfig* Cluster::mutable_eds_cluster_config() {
  
  if (eds_cluster_config_ == NULL) {
    eds_cluster_config_ = new ::envoy::api::v2::Cluster_EdsClusterConfig;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.eds_cluster_config)
  return eds_cluster_config_;
}
::envoy::api::v2::Cluster_EdsClusterConfig* Cluster::release_eds_cluster_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.eds_cluster_config)
  
  ::envoy::api::v2::Cluster_EdsClusterConfig* temp = eds_cluster_config_;
  eds_cluster_config_ = NULL;
  return temp;
}
void Cluster::set_allocated_eds_cluster_config(::envoy::api::v2::Cluster_EdsClusterConfig* eds_cluster_config) {
  delete eds_cluster_config_;
  eds_cluster_config_ = eds_cluster_config;
  if (eds_cluster_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.eds_cluster_config)
}

// .google.protobuf.Duration connect_timeout = 4;
bool Cluster::has_connect_timeout() const {
  return this != internal_default_instance() && connect_timeout_ != NULL;
}
void Cluster::clear_connect_timeout() {
  if (GetArenaNoVirtual() == NULL && connect_timeout_ != NULL) delete connect_timeout_;
  connect_timeout_ = NULL;
}
const ::google::protobuf::Duration& Cluster::connect_timeout() const {
  const ::google::protobuf::Duration* p = connect_timeout_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.connect_timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* Cluster::mutable_connect_timeout() {
  
  if (connect_timeout_ == NULL) {
    connect_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.connect_timeout)
  return connect_timeout_;
}
::google::protobuf::Duration* Cluster::release_connect_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.connect_timeout)
  
  ::google::protobuf::Duration* temp = connect_timeout_;
  connect_timeout_ = NULL;
  return temp;
}
void Cluster::set_allocated_connect_timeout(::google::protobuf::Duration* connect_timeout) {
  delete connect_timeout_;
  if (connect_timeout != NULL && connect_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_connect_timeout = new ::google::protobuf::Duration;
    new_connect_timeout->CopyFrom(*connect_timeout);
    connect_timeout = new_connect_timeout;
  }
  connect_timeout_ = connect_timeout;
  if (connect_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.connect_timeout)
}

// .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 5;
bool Cluster::has_per_connection_buffer_limit_bytes() const {
  return this != internal_default_instance() && per_connection_buffer_limit_bytes_ != NULL;
}
void Cluster::clear_per_connection_buffer_limit_bytes() {
  if (GetArenaNoVirtual() == NULL && per_connection_buffer_limit_bytes_ != NULL) delete per_connection_buffer_limit_bytes_;
  per_connection_buffer_limit_bytes_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster::per_connection_buffer_limit_bytes() const {
  const ::google::protobuf::UInt32Value* p = per_connection_buffer_limit_bytes_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.per_connection_buffer_limit_bytes)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* Cluster::mutable_per_connection_buffer_limit_bytes() {
  
  if (per_connection_buffer_limit_bytes_ == NULL) {
    per_connection_buffer_limit_bytes_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.per_connection_buffer_limit_bytes)
  return per_connection_buffer_limit_bytes_;
}
::google::protobuf::UInt32Value* Cluster::release_per_connection_buffer_limit_bytes() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.per_connection_buffer_limit_bytes)
  
  ::google::protobuf::UInt32Value* temp = per_connection_buffer_limit_bytes_;
  per_connection_buffer_limit_bytes_ = NULL;
  return temp;
}
void Cluster::set_allocated_per_connection_buffer_limit_bytes(::google::protobuf::UInt32Value* per_connection_buffer_limit_bytes) {
  delete per_connection_buffer_limit_bytes_;
  if (per_connection_buffer_limit_bytes != NULL && per_connection_buffer_limit_bytes->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_per_connection_buffer_limit_bytes = new ::google::protobuf::UInt32Value;
    new_per_connection_buffer_limit_bytes->CopyFrom(*per_connection_buffer_limit_bytes);
    per_connection_buffer_limit_bytes = new_per_connection_buffer_limit_bytes;
  }
  per_connection_buffer_limit_bytes_ = per_connection_buffer_limit_bytes;
  if (per_connection_buffer_limit_bytes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.per_connection_buffer_limit_bytes)
}

// .envoy.api.v2.Cluster.LbPolicy lb_policy = 6;
void Cluster::clear_lb_policy() {
  lb_policy_ = 0;
}
::envoy::api::v2::Cluster_LbPolicy Cluster::lb_policy() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.lb_policy)
  return static_cast< ::envoy::api::v2::Cluster_LbPolicy >(lb_policy_);
}
void Cluster::set_lb_policy(::envoy::api::v2::Cluster_LbPolicy value) {
  
  lb_policy_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.Cluster.lb_policy)
}

// repeated .envoy.api.v2.Address hosts = 7;
int Cluster::hosts_size() const {
  return hosts_.size();
}
void Cluster::clear_hosts() {
  hosts_.Clear();
}
const ::envoy::api::v2::Address& Cluster::hosts(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.hosts)
  return hosts_.Get(index);
}
::envoy::api::v2::Address* Cluster::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.hosts)
  return hosts_.Mutable(index);
}
::envoy::api::v2::Address* Cluster::add_hosts() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.Cluster.hosts)
  return hosts_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Address >*
Cluster::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.Cluster.hosts)
  return &hosts_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Address >&
Cluster::hosts() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.Cluster.hosts)
  return hosts_;
}

// repeated .envoy.api.v2.HealthCheck health_checks = 8;
int Cluster::health_checks_size() const {
  return health_checks_.size();
}
void Cluster::clear_health_checks() {
  health_checks_.Clear();
}
const ::envoy::api::v2::HealthCheck& Cluster::health_checks(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.health_checks)
  return health_checks_.Get(index);
}
::envoy::api::v2::HealthCheck* Cluster::mutable_health_checks(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.health_checks)
  return health_checks_.Mutable(index);
}
::envoy::api::v2::HealthCheck* Cluster::add_health_checks() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.Cluster.health_checks)
  return health_checks_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck >*
Cluster::mutable_health_checks() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.Cluster.health_checks)
  return &health_checks_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck >&
Cluster::health_checks() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.Cluster.health_checks)
  return health_checks_;
}

// .google.protobuf.UInt32Value max_requests_per_connection = 9;
bool Cluster::has_max_requests_per_connection() const {
  return this != internal_default_instance() && max_requests_per_connection_ != NULL;
}
void Cluster::clear_max_requests_per_connection() {
  if (GetArenaNoVirtual() == NULL && max_requests_per_connection_ != NULL) delete max_requests_per_connection_;
  max_requests_per_connection_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster::max_requests_per_connection() const {
  const ::google::protobuf::UInt32Value* p = max_requests_per_connection_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.max_requests_per_connection)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* Cluster::mutable_max_requests_per_connection() {
  
  if (max_requests_per_connection_ == NULL) {
    max_requests_per_connection_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.max_requests_per_connection)
  return max_requests_per_connection_;
}
::google::protobuf::UInt32Value* Cluster::release_max_requests_per_connection() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.max_requests_per_connection)
  
  ::google::protobuf::UInt32Value* temp = max_requests_per_connection_;
  max_requests_per_connection_ = NULL;
  return temp;
}
void Cluster::set_allocated_max_requests_per_connection(::google::protobuf::UInt32Value* max_requests_per_connection) {
  delete max_requests_per_connection_;
  if (max_requests_per_connection != NULL && max_requests_per_connection->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_requests_per_connection = new ::google::protobuf::UInt32Value;
    new_max_requests_per_connection->CopyFrom(*max_requests_per_connection);
    max_requests_per_connection = new_max_requests_per_connection;
  }
  max_requests_per_connection_ = max_requests_per_connection;
  if (max_requests_per_connection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.max_requests_per_connection)
}

// .envoy.api.v2.CircuitBreakers circuit_breakers = 10;
bool Cluster::has_circuit_breakers() const {
  return this != internal_default_instance() && circuit_breakers_ != NULL;
}
void Cluster::clear_circuit_breakers() {
  if (GetArenaNoVirtual() == NULL && circuit_breakers_ != NULL) delete circuit_breakers_;
  circuit_breakers_ = NULL;
}
const ::envoy::api::v2::CircuitBreakers& Cluster::circuit_breakers() const {
  const ::envoy::api::v2::CircuitBreakers* p = circuit_breakers_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.circuit_breakers)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::CircuitBreakers*>(
      &::envoy::api::v2::_CircuitBreakers_default_instance_);
}
::envoy::api::v2::CircuitBreakers* Cluster::mutable_circuit_breakers() {
  
  if (circuit_breakers_ == NULL) {
    circuit_breakers_ = new ::envoy::api::v2::CircuitBreakers;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.circuit_breakers)
  return circuit_breakers_;
}
::envoy::api::v2::CircuitBreakers* Cluster::release_circuit_breakers() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.circuit_breakers)
  
  ::envoy::api::v2::CircuitBreakers* temp = circuit_breakers_;
  circuit_breakers_ = NULL;
  return temp;
}
void Cluster::set_allocated_circuit_breakers(::envoy::api::v2::CircuitBreakers* circuit_breakers) {
  delete circuit_breakers_;
  circuit_breakers_ = circuit_breakers;
  if (circuit_breakers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.circuit_breakers)
}

// .envoy.api.v2.UpstreamTlsContext tls_context = 11;
bool Cluster::has_tls_context() const {
  return this != internal_default_instance() && tls_context_ != NULL;
}
void Cluster::clear_tls_context() {
  if (GetArenaNoVirtual() == NULL && tls_context_ != NULL) delete tls_context_;
  tls_context_ = NULL;
}
const ::envoy::api::v2::UpstreamTlsContext& Cluster::tls_context() const {
  const ::envoy::api::v2::UpstreamTlsContext* p = tls_context_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.tls_context)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::UpstreamTlsContext*>(
      &::envoy::api::v2::_UpstreamTlsContext_default_instance_);
}
::envoy::api::v2::UpstreamTlsContext* Cluster::mutable_tls_context() {
  
  if (tls_context_ == NULL) {
    tls_context_ = new ::envoy::api::v2::UpstreamTlsContext;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.tls_context)
  return tls_context_;
}
::envoy::api::v2::UpstreamTlsContext* Cluster::release_tls_context() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.tls_context)
  
  ::envoy::api::v2::UpstreamTlsContext* temp = tls_context_;
  tls_context_ = NULL;
  return temp;
}
void Cluster::set_allocated_tls_context(::envoy::api::v2::UpstreamTlsContext* tls_context) {
  delete tls_context_;
  tls_context_ = tls_context;
  if (tls_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.tls_context)
}

// .envoy.api.v2.TcpProtocolOptions tcp_protocol_options = 12;
bool Cluster::has_tcp_protocol_options() const {
  return protocol_options_case() == kTcpProtocolOptions;
}
void Cluster::set_has_tcp_protocol_options() {
  _oneof_case_[0] = kTcpProtocolOptions;
}
void Cluster::clear_tcp_protocol_options() {
  if (has_tcp_protocol_options()) {
    delete protocol_options_.tcp_protocol_options_;
    clear_has_protocol_options();
  }
}
 const ::envoy::api::v2::TcpProtocolOptions& Cluster::tcp_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.tcp_protocol_options)
  return has_tcp_protocol_options()
      ? *protocol_options_.tcp_protocol_options_
      : ::envoy::api::v2::TcpProtocolOptions::default_instance();
}
::envoy::api::v2::TcpProtocolOptions* Cluster::mutable_tcp_protocol_options() {
  if (!has_tcp_protocol_options()) {
    clear_protocol_options();
    set_has_tcp_protocol_options();
    protocol_options_.tcp_protocol_options_ = new ::envoy::api::v2::TcpProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.tcp_protocol_options)
  return protocol_options_.tcp_protocol_options_;
}
::envoy::api::v2::TcpProtocolOptions* Cluster::release_tcp_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.tcp_protocol_options)
  if (has_tcp_protocol_options()) {
    clear_has_protocol_options();
    ::envoy::api::v2::TcpProtocolOptions* temp = protocol_options_.tcp_protocol_options_;
    protocol_options_.tcp_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Cluster::set_allocated_tcp_protocol_options(::envoy::api::v2::TcpProtocolOptions* tcp_protocol_options) {
  clear_protocol_options();
  if (tcp_protocol_options) {
    set_has_tcp_protocol_options();
    protocol_options_.tcp_protocol_options_ = tcp_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.tcp_protocol_options)
}

// .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 13;
bool Cluster::has_http_protocol_options() const {
  return protocol_options_case() == kHttpProtocolOptions;
}
void Cluster::set_has_http_protocol_options() {
  _oneof_case_[0] = kHttpProtocolOptions;
}
void Cluster::clear_http_protocol_options() {
  if (has_http_protocol_options()) {
    delete protocol_options_.http_protocol_options_;
    clear_has_protocol_options();
  }
}
 const ::envoy::api::v2::Http1ProtocolOptions& Cluster::http_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.http_protocol_options)
  return has_http_protocol_options()
      ? *protocol_options_.http_protocol_options_
      : ::envoy::api::v2::Http1ProtocolOptions::default_instance();
}
::envoy::api::v2::Http1ProtocolOptions* Cluster::mutable_http_protocol_options() {
  if (!has_http_protocol_options()) {
    clear_protocol_options();
    set_has_http_protocol_options();
    protocol_options_.http_protocol_options_ = new ::envoy::api::v2::Http1ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.http_protocol_options)
  return protocol_options_.http_protocol_options_;
}
::envoy::api::v2::Http1ProtocolOptions* Cluster::release_http_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.http_protocol_options)
  if (has_http_protocol_options()) {
    clear_has_protocol_options();
    ::envoy::api::v2::Http1ProtocolOptions* temp = protocol_options_.http_protocol_options_;
    protocol_options_.http_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Cluster::set_allocated_http_protocol_options(::envoy::api::v2::Http1ProtocolOptions* http_protocol_options) {
  clear_protocol_options();
  if (http_protocol_options) {
    set_has_http_protocol_options();
    protocol_options_.http_protocol_options_ = http_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.http_protocol_options)
}

// .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 14;
bool Cluster::has_http2_protocol_options() const {
  return protocol_options_case() == kHttp2ProtocolOptions;
}
void Cluster::set_has_http2_protocol_options() {
  _oneof_case_[0] = kHttp2ProtocolOptions;
}
void Cluster::clear_http2_protocol_options() {
  if (has_http2_protocol_options()) {
    delete protocol_options_.http2_protocol_options_;
    clear_has_protocol_options();
  }
}
 const ::envoy::api::v2::Http2ProtocolOptions& Cluster::http2_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.http2_protocol_options)
  return has_http2_protocol_options()
      ? *protocol_options_.http2_protocol_options_
      : ::envoy::api::v2::Http2ProtocolOptions::default_instance();
}
::envoy::api::v2::Http2ProtocolOptions* Cluster::mutable_http2_protocol_options() {
  if (!has_http2_protocol_options()) {
    clear_protocol_options();
    set_has_http2_protocol_options();
    protocol_options_.http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.http2_protocol_options)
  return protocol_options_.http2_protocol_options_;
}
::envoy::api::v2::Http2ProtocolOptions* Cluster::release_http2_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.http2_protocol_options)
  if (has_http2_protocol_options()) {
    clear_has_protocol_options();
    ::envoy::api::v2::Http2ProtocolOptions* temp = protocol_options_.http2_protocol_options_;
    protocol_options_.http2_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Cluster::set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options) {
  clear_protocol_options();
  if (http2_protocol_options) {
    set_has_http2_protocol_options();
    protocol_options_.http2_protocol_options_ = http2_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.http2_protocol_options)
}

// .envoy.api.v2.GrpcProtocolOptions grpc_protocol_options = 15;
bool Cluster::has_grpc_protocol_options() const {
  return protocol_options_case() == kGrpcProtocolOptions;
}
void Cluster::set_has_grpc_protocol_options() {
  _oneof_case_[0] = kGrpcProtocolOptions;
}
void Cluster::clear_grpc_protocol_options() {
  if (has_grpc_protocol_options()) {
    delete protocol_options_.grpc_protocol_options_;
    clear_has_protocol_options();
  }
}
 const ::envoy::api::v2::GrpcProtocolOptions& Cluster::grpc_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.grpc_protocol_options)
  return has_grpc_protocol_options()
      ? *protocol_options_.grpc_protocol_options_
      : ::envoy::api::v2::GrpcProtocolOptions::default_instance();
}
::envoy::api::v2::GrpcProtocolOptions* Cluster::mutable_grpc_protocol_options() {
  if (!has_grpc_protocol_options()) {
    clear_protocol_options();
    set_has_grpc_protocol_options();
    protocol_options_.grpc_protocol_options_ = new ::envoy::api::v2::GrpcProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.grpc_protocol_options)
  return protocol_options_.grpc_protocol_options_;
}
::envoy::api::v2::GrpcProtocolOptions* Cluster::release_grpc_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.grpc_protocol_options)
  if (has_grpc_protocol_options()) {
    clear_has_protocol_options();
    ::envoy::api::v2::GrpcProtocolOptions* temp = protocol_options_.grpc_protocol_options_;
    protocol_options_.grpc_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Cluster::set_allocated_grpc_protocol_options(::envoy::api::v2::GrpcProtocolOptions* grpc_protocol_options) {
  clear_protocol_options();
  if (grpc_protocol_options) {
    set_has_grpc_protocol_options();
    protocol_options_.grpc_protocol_options_ = grpc_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.grpc_protocol_options)
}

// .google.protobuf.Duration dns_refresh_rate = 16;
bool Cluster::has_dns_refresh_rate() const {
  return this != internal_default_instance() && dns_refresh_rate_ != NULL;
}
void Cluster::clear_dns_refresh_rate() {
  if (GetArenaNoVirtual() == NULL && dns_refresh_rate_ != NULL) delete dns_refresh_rate_;
  dns_refresh_rate_ = NULL;
}
const ::google::protobuf::Duration& Cluster::dns_refresh_rate() const {
  const ::google::protobuf::Duration* p = dns_refresh_rate_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.dns_refresh_rate)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* Cluster::mutable_dns_refresh_rate() {
  
  if (dns_refresh_rate_ == NULL) {
    dns_refresh_rate_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.dns_refresh_rate)
  return dns_refresh_rate_;
}
::google::protobuf::Duration* Cluster::release_dns_refresh_rate() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.dns_refresh_rate)
  
  ::google::protobuf::Duration* temp = dns_refresh_rate_;
  dns_refresh_rate_ = NULL;
  return temp;
}
void Cluster::set_allocated_dns_refresh_rate(::google::protobuf::Duration* dns_refresh_rate) {
  delete dns_refresh_rate_;
  if (dns_refresh_rate != NULL && dns_refresh_rate->GetArena() != NULL) {
    ::google::protobuf::Duration* new_dns_refresh_rate = new ::google::protobuf::Duration;
    new_dns_refresh_rate->CopyFrom(*dns_refresh_rate);
    dns_refresh_rate = new_dns_refresh_rate;
  }
  dns_refresh_rate_ = dns_refresh_rate;
  if (dns_refresh_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.dns_refresh_rate)
}

// .envoy.api.v2.Cluster.DnsLookupFamily dns_lookup_family = 17;
void Cluster::clear_dns_lookup_family() {
  dns_lookup_family_ = 0;
}
::envoy::api::v2::Cluster_DnsLookupFamily Cluster::dns_lookup_family() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.dns_lookup_family)
  return static_cast< ::envoy::api::v2::Cluster_DnsLookupFamily >(dns_lookup_family_);
}
void Cluster::set_dns_lookup_family(::envoy::api::v2::Cluster_DnsLookupFamily value) {
  
  dns_lookup_family_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.Cluster.dns_lookup_family)
}

// repeated .envoy.api.v2.Address dns_resolvers = 18;
int Cluster::dns_resolvers_size() const {
  return dns_resolvers_.size();
}
void Cluster::clear_dns_resolvers() {
  dns_resolvers_.Clear();
}
const ::envoy::api::v2::Address& Cluster::dns_resolvers(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.dns_resolvers)
  return dns_resolvers_.Get(index);
}
::envoy::api::v2::Address* Cluster::mutable_dns_resolvers(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.dns_resolvers)
  return dns_resolvers_.Mutable(index);
}
::envoy::api::v2::Address* Cluster::add_dns_resolvers() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.Cluster.dns_resolvers)
  return dns_resolvers_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Address >*
Cluster::mutable_dns_resolvers() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.Cluster.dns_resolvers)
  return &dns_resolvers_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::Address >&
Cluster::dns_resolvers() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.Cluster.dns_resolvers)
  return dns_resolvers_;
}

// .envoy.api.v2.Cluster.OutlierDetection outlier_detection = 19;
bool Cluster::has_outlier_detection() const {
  return this != internal_default_instance() && outlier_detection_ != NULL;
}
void Cluster::clear_outlier_detection() {
  if (GetArenaNoVirtual() == NULL && outlier_detection_ != NULL) delete outlier_detection_;
  outlier_detection_ = NULL;
}
const ::envoy::api::v2::Cluster_OutlierDetection& Cluster::outlier_detection() const {
  const ::envoy::api::v2::Cluster_OutlierDetection* p = outlier_detection_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.outlier_detection)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::Cluster_OutlierDetection*>(
      &::envoy::api::v2::_Cluster_OutlierDetection_default_instance_);
}
::envoy::api::v2::Cluster_OutlierDetection* Cluster::mutable_outlier_detection() {
  
  if (outlier_detection_ == NULL) {
    outlier_detection_ = new ::envoy::api::v2::Cluster_OutlierDetection;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.outlier_detection)
  return outlier_detection_;
}
::envoy::api::v2::Cluster_OutlierDetection* Cluster::release_outlier_detection() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.outlier_detection)
  
  ::envoy::api::v2::Cluster_OutlierDetection* temp = outlier_detection_;
  outlier_detection_ = NULL;
  return temp;
}
void Cluster::set_allocated_outlier_detection(::envoy::api::v2::Cluster_OutlierDetection* outlier_detection) {
  delete outlier_detection_;
  outlier_detection_ = outlier_detection;
  if (outlier_detection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.outlier_detection)
}

// .google.protobuf.Duration cleanup_interval = 20;
bool Cluster::has_cleanup_interval() const {
  return this != internal_default_instance() && cleanup_interval_ != NULL;
}
void Cluster::clear_cleanup_interval() {
  if (GetArenaNoVirtual() == NULL && cleanup_interval_ != NULL) delete cleanup_interval_;
  cleanup_interval_ = NULL;
}
const ::google::protobuf::Duration& Cluster::cleanup_interval() const {
  const ::google::protobuf::Duration* p = cleanup_interval_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.cleanup_interval)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
::google::protobuf::Duration* Cluster::mutable_cleanup_interval() {
  
  if (cleanup_interval_ == NULL) {
    cleanup_interval_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.cleanup_interval)
  return cleanup_interval_;
}
::google::protobuf::Duration* Cluster::release_cleanup_interval() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.cleanup_interval)
  
  ::google::protobuf::Duration* temp = cleanup_interval_;
  cleanup_interval_ = NULL;
  return temp;
}
void Cluster::set_allocated_cleanup_interval(::google::protobuf::Duration* cleanup_interval) {
  delete cleanup_interval_;
  if (cleanup_interval != NULL && cleanup_interval->GetArena() != NULL) {
    ::google::protobuf::Duration* new_cleanup_interval = new ::google::protobuf::Duration;
    new_cleanup_interval->CopyFrom(*cleanup_interval);
    cleanup_interval = new_cleanup_interval;
  }
  cleanup_interval_ = cleanup_interval;
  if (cleanup_interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.cleanup_interval)
}

// .envoy.api.v2.BindConfig upstream_bind_config = 21;
bool Cluster::has_upstream_bind_config() const {
  return this != internal_default_instance() && upstream_bind_config_ != NULL;
}
void Cluster::clear_upstream_bind_config() {
  if (GetArenaNoVirtual() == NULL && upstream_bind_config_ != NULL) delete upstream_bind_config_;
  upstream_bind_config_ = NULL;
}
const ::envoy::api::v2::BindConfig& Cluster::upstream_bind_config() const {
  const ::envoy::api::v2::BindConfig* p = upstream_bind_config_;
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.upstream_bind_config)
  return p != NULL ? *p : *reinterpret_cast<const ::envoy::api::v2::BindConfig*>(
      &::envoy::api::v2::_BindConfig_default_instance_);
}
::envoy::api::v2::BindConfig* Cluster::mutable_upstream_bind_config() {
  
  if (upstream_bind_config_ == NULL) {
    upstream_bind_config_ = new ::envoy::api::v2::BindConfig;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.upstream_bind_config)
  return upstream_bind_config_;
}
::envoy::api::v2::BindConfig* Cluster::release_upstream_bind_config() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.upstream_bind_config)
  
  ::envoy::api::v2::BindConfig* temp = upstream_bind_config_;
  upstream_bind_config_ = NULL;
  return temp;
}
void Cluster::set_allocated_upstream_bind_config(::envoy::api::v2::BindConfig* upstream_bind_config) {
  delete upstream_bind_config_;
  upstream_bind_config_ = upstream_bind_config;
  if (upstream_bind_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.upstream_bind_config)
}

bool Cluster::has_protocol_options() const {
  return protocol_options_case() != PROTOCOL_OPTIONS_NOT_SET;
}
void Cluster::clear_has_protocol_options() {
  _oneof_case_[0] = PROTOCOL_OPTIONS_NOT_SET;
}
Cluster::ProtocolOptionsCase Cluster::protocol_options_case() const {
  return Cluster::ProtocolOptionsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
