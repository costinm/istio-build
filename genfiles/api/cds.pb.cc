// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/cds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/cds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace envoy {
namespace api {
namespace v2 {
class CircuitBreakers_ThresholdsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CircuitBreakers_Thresholds> {
} _CircuitBreakers_Thresholds_default_instance_;
class CircuitBreakersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CircuitBreakers> {
} _CircuitBreakers_default_instance_;
class TcpProtocolOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TcpProtocolOptions> {
} _TcpProtocolOptions_default_instance_;
class Http1ProtocolOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Http1ProtocolOptions> {
} _Http1ProtocolOptions_default_instance_;
class Http2ProtocolOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Http2ProtocolOptions> {
} _Http2ProtocolOptions_default_instance_;
class GrpcProtocolOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GrpcProtocolOptions> {
} _GrpcProtocolOptions_default_instance_;
class Cluster_OutlierDetectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Cluster_OutlierDetection> {
} _Cluster_OutlierDetection_default_instance_;
class ClusterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Cluster> {
  public:
  const ::envoy::api::v2::ResolvedAddresses* static_hosts_;
  const ::envoy::api::v2::UnresolvedAddress* dns_hosts_;
  const ::envoy::api::v2::TcpProtocolOptions* tcp_protocol_options_;
  const ::envoy::api::v2::Http1ProtocolOptions* http_protocol_options_;
  const ::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options_;
  const ::envoy::api::v2::GrpcProtocolOptions* grpc_protocol_options_;
} _Cluster_default_instance_;

namespace protobuf_api_2fcds_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers_Thresholds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers_Thresholds, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers_Thresholds, max_connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers_Thresholds, max_pending_requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers_Thresholds, max_requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers_Thresholds, max_retries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircuitBreakers, thresholds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpProtocolOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Http1ProtocolOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Http2ProtocolOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Http2ProtocolOptions, disable_dynamic_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Http2ProtocolOptions, per_stream_buffer_limit_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Http2ProtocolOptions, max_concurrent_streams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Http2ProtocolOptions, initial_window_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrpcProtocolOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrpcProtocolOptions, http2_protocol_options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, consecutive_5xx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, base_ejection_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, max_ejection_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, enforcing_consecutive_5xx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, enforcing_success_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, success_rate_minimum_hosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, success_rate_request_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster_OutlierDetection, success_rate_stdev_factor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, connect_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, per_connection_buffer_limit_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, lb_policy_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Cluster_default_instance_), static_hosts_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Cluster_default_instance_), dns_hosts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, health_checks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, max_requests_per_connection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, circuit_breakers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, tls_context_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Cluster_default_instance_), tcp_protocol_options_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Cluster_default_instance_), http_protocol_options_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Cluster_default_instance_), http2_protocol_options_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Cluster_default_instance_), grpc_protocol_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, dns_refresh_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, outlier_detection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, hosts_specifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cluster, protocol_options_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CircuitBreakers_Thresholds)},
  { 9, -1, sizeof(CircuitBreakers)},
  { 14, -1, sizeof(TcpProtocolOptions)},
  { 18, -1, sizeof(Http1ProtocolOptions)},
  { 22, -1, sizeof(Http2ProtocolOptions)},
  { 30, -1, sizeof(GrpcProtocolOptions)},
  { 35, -1, sizeof(Cluster_OutlierDetection)},
  { 48, -1, sizeof(Cluster)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CircuitBreakers_Thresholds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CircuitBreakers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TcpProtocolOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Http1ProtocolOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Http2ProtocolOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GrpcProtocolOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cluster_OutlierDetection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cluster_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "api/cds.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _CircuitBreakers_Thresholds_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CircuitBreakers_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TcpProtocolOptions_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Http1ProtocolOptions_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Http2ProtocolOptions_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _GrpcProtocolOptions_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Cluster_OutlierDetection_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Cluster_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::envoy::api::v2::protobuf_api_2faddress_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2fhealth_5fcheck_2eproto::InitDefaults();
  ::envoy::api::v2::protobuf_api_2ftls_5fcontext_2eproto::InitDefaults();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  _CircuitBreakers_Thresholds_default_instance_.DefaultConstruct();
  _CircuitBreakers_default_instance_.DefaultConstruct();
  _TcpProtocolOptions_default_instance_.DefaultConstruct();
  _Http1ProtocolOptions_default_instance_.DefaultConstruct();
  _Http2ProtocolOptions_default_instance_.DefaultConstruct();
  _GrpcProtocolOptions_default_instance_.DefaultConstruct();
  _Cluster_OutlierDetection_default_instance_.DefaultConstruct();
  _Cluster_default_instance_.DefaultConstruct();
  _CircuitBreakers_Thresholds_default_instance_.get_mutable()->max_connections_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _CircuitBreakers_Thresholds_default_instance_.get_mutable()->max_pending_requests_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _CircuitBreakers_Thresholds_default_instance_.get_mutable()->max_requests_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _CircuitBreakers_Thresholds_default_instance_.get_mutable()->max_retries_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Http2ProtocolOptions_default_instance_.get_mutable()->per_stream_buffer_limit_bytes_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Http2ProtocolOptions_default_instance_.get_mutable()->max_concurrent_streams_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Http2ProtocolOptions_default_instance_.get_mutable()->initial_window_size_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _GrpcProtocolOptions_default_instance_.get_mutable()->http2_protocol_options_ = const_cast< ::envoy::api::v2::Http2ProtocolOptions*>(
      ::envoy::api::v2::Http2ProtocolOptions::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_.get_mutable()->consecutive_5xx_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_.get_mutable()->interval_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_.get_mutable()->base_ejection_time_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_.get_mutable()->max_ejection_percent_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_.get_mutable()->enforcing_consecutive_5xx_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_.get_mutable()->enforcing_success_rate_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_.get_mutable()->success_rate_minimum_hosts_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_.get_mutable()->success_rate_request_volume_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_OutlierDetection_default_instance_.get_mutable()->success_rate_stdev_factor_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->connect_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->per_connection_buffer_limit_bytes_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_default_instance_.static_hosts_ = const_cast< ::envoy::api::v2::ResolvedAddresses*>(
      ::envoy::api::v2::ResolvedAddresses::internal_default_instance());
  _Cluster_default_instance_.dns_hosts_ = const_cast< ::envoy::api::v2::UnresolvedAddress*>(
      ::envoy::api::v2::UnresolvedAddress::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->max_requests_per_connection_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->circuit_breakers_ = const_cast< ::envoy::api::v2::CircuitBreakers*>(
      ::envoy::api::v2::CircuitBreakers::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->tls_context_ = const_cast< ::envoy::api::v2::UpstreamTlsContext*>(
      ::envoy::api::v2::UpstreamTlsContext::internal_default_instance());
  _Cluster_default_instance_.tcp_protocol_options_ = const_cast< ::envoy::api::v2::TcpProtocolOptions*>(
      ::envoy::api::v2::TcpProtocolOptions::internal_default_instance());
  _Cluster_default_instance_.http_protocol_options_ = const_cast< ::envoy::api::v2::Http1ProtocolOptions*>(
      ::envoy::api::v2::Http1ProtocolOptions::internal_default_instance());
  _Cluster_default_instance_.http2_protocol_options_ = const_cast< ::envoy::api::v2::Http2ProtocolOptions*>(
      ::envoy::api::v2::Http2ProtocolOptions::internal_default_instance());
  _Cluster_default_instance_.grpc_protocol_options_ = const_cast< ::envoy::api::v2::GrpcProtocolOptions*>(
      ::envoy::api::v2::GrpcProtocolOptions::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->dns_refresh_rate_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  _Cluster_default_instance_.get_mutable()->outlier_detection_ = const_cast< ::envoy::api::v2::Cluster_OutlierDetection*>(
      ::envoy::api::v2::Cluster_OutlierDetection::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rapi/cds.proto\022\014envoy.api.v2\032\021api/addre"
      "ss.proto\032\016api/base.proto\032\026api/health_che"
      "ck.proto\032\025api/tls_context.proto\032\034google/"
      "api/annotations.proto\032\036google/protobuf/d"
      "uration.proto\032\036google/protobuf/wrappers."
      "proto\"\351\002\n\017CircuitBreakers\022<\n\nthresholds\030"
      "\001 \003(\0132(.envoy.api.v2.CircuitBreakers.Thr"
      "esholds\032\227\002\n\nThresholds\022/\n\010priority\030\001 \001(\016"
      "2\035.envoy.api.v2.RoutingPriority\0225\n\017max_c"
      "onnections\030\002 \001(\0132\034.google.protobuf.UInt3"
      "2Value\022:\n\024max_pending_requests\030\003 \001(\0132\034.g"
      "oogle.protobuf.UInt32Value\0222\n\014max_reques"
      "ts\030\004 \001(\0132\034.google.protobuf.UInt32Value\0221"
      "\n\013max_retries\030\005 \001(\0132\034.google.protobuf.UI"
      "nt32Value\"\024\n\022TcpProtocolOptions\"\026\n\024Http1"
      "ProtocolOptions\"\363\001\n\024Http2ProtocolOptions"
      "\022\035\n\025disable_dynamic_table\030\001 \001(\010\022C\n\035per_s"
      "tream_buffer_limit_bytes\030\002 \001(\0132\034.google."
      "protobuf.UInt32Value\022<\n\026max_concurrent_s"
      "treams\030\003 \001(\0132\034.google.protobuf.UInt32Val"
      "ue\0229\n\023initial_window_size\030\004 \001(\0132\034.google"
      ".protobuf.UInt32Value\"Y\n\023GrpcProtocolOpt"
      "ions\022B\n\026http2_protocol_options\030\001 \001(\0132\".e"
      "nvoy.api.v2.Http2ProtocolOptions\"\301\r\n\007Clu"
      "ster\022\014\n\004name\030\001 \001(\t\0221\n\004type\030\002 \001(\0162#.envoy"
      ".api.v2.Cluster.DiscoveryType\0222\n\017connect"
      "_timeout\030\003 \001(\0132\031.google.protobuf.Duratio"
      "n\022G\n!per_connection_buffer_limit_bytes\030\004"
      " \001(\0132\034.google.protobuf.UInt32Value\0221\n\tlb"
      "_policy\030\005 \001(\0162\036.envoy.api.v2.Cluster.LbP"
      "olicy\0227\n\014static_hosts\030\006 \001(\0132\037.envoy.api."
      "v2.ResolvedAddressesH\000\0224\n\tdns_hosts\030\007 \001("
      "\0132\037.envoy.api.v2.UnresolvedAddressH\000\0220\n\r"
      "health_checks\030\010 \003(\0132\031.envoy.api.v2.Healt"
      "hCheck\022A\n\033max_requests_per_connection\030\t "
      "\001(\0132\034.google.protobuf.UInt32Value\0227\n\020cir"
      "cuit_breakers\030\n \001(\0132\035.envoy.api.v2.Circu"
      "itBreakers\0225\n\013tls_context\030\013 \001(\0132 .envoy."
      "api.v2.UpstreamTlsContext\022@\n\024tcp_protoco"
      "l_options\030\014 \001(\0132 .envoy.api.v2.TcpProtoc"
      "olOptionsH\001\022C\n\025http_protocol_options\030\r \001"
      "(\0132\".envoy.api.v2.Http1ProtocolOptionsH\001"
      "\022D\n\026http2_protocol_options\030\016 \001(\0132\".envoy"
      ".api.v2.Http2ProtocolOptionsH\001\022B\n\025grpc_p"
      "rotocol_options\030\017 \001(\0132!.envoy.api.v2.Grp"
      "cProtocolOptionsH\001\0223\n\020dns_refresh_rate\030\020"
      " \001(\0132\031.google.protobuf.Duration\022A\n\021outli"
      "er_detection\030\021 \001(\0132&.envoy.api.v2.Cluste"
      "r.OutlierDetection\032\256\004\n\020OutlierDetection\022"
      "5\n\017consecutive_5xx\030\001 \001(\0132\034.google.protob"
      "uf.UInt32Value\022+\n\010interval\030\002 \001(\0132\031.googl"
      "e.protobuf.Duration\0225\n\022base_ejection_tim"
      "e\030\003 \001(\0132\031.google.protobuf.Duration\022:\n\024ma"
      "x_ejection_percent\030\004 \001(\0132\034.google.protob"
      "uf.UInt32Value\022\?\n\031enforcing_consecutive_"
      "5xx\030\005 \001(\0132\034.google.protobuf.UInt32Value\022"
      "<\n\026enforcing_success_rate\030\006 \001(\0132\034.google"
      ".protobuf.UInt32Value\022@\n\032success_rate_mi"
      "nimum_hosts\030\007 \001(\0132\034.google.protobuf.UInt"
      "32Value\022A\n\033success_rate_request_volume\030\010"
      " \001(\0132\034.google.protobuf.UInt32Value\022\?\n\031su"
      "ccess_rate_stdev_factor\030\t \001(\0132\034.google.p"
      "rotobuf.UInt32Value\"E\n\rDiscoveryType\022\n\n\006"
      "STATIC\020\000\022\016\n\nSTRICT_DNS\020\001\022\017\n\013LOGICAL_DNS\020"
      "\002\022\007\n\003EDS\020\003\"I\n\010LbPolicy\022\017\n\013ROUND_ROBIN\020\000\022"
      "\021\n\rLEAST_REQUEST\020\001\022\r\n\tRING_HASH\020\002\022\n\n\006RAN"
      "DOM\020\003B\021\n\017hosts_specifierB\022\n\020protocol_opt"
      "ions2\347\001\n\027ClusterDiscoveryService\022W\n\016Stre"
      "amClusters\022\036.envoy.api.v2.DiscoveryReque"
      "st\032\037.envoy.api.v2.DiscoveryResponse\"\000(\0010"
      "\001\022s\n\rFetchClusters\022\036.envoy.api.v2.Discov"
      "eryRequest\032\037.envoy.api.v2.DiscoveryRespo"
      "nse\"!\202\323\344\223\002\033\"\026/v2/discovery:clusters:\001*b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2926);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/cds.proto", &protobuf_RegisterTypes);
  ::envoy::api::v2::protobuf_api_2faddress_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2fbase_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2fhealth_5fcheck_2eproto::AddDescriptors();
  ::envoy::api::v2::protobuf_api_2ftls_5fcontext_2eproto::AddDescriptors();
  ::google::api::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_api_2fcds_2eproto

const ::google::protobuf::EnumDescriptor* Cluster_DiscoveryType_descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_enum_descriptors[0];
}
bool Cluster_DiscoveryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cluster_DiscoveryType Cluster::STATIC;
const Cluster_DiscoveryType Cluster::STRICT_DNS;
const Cluster_DiscoveryType Cluster::LOGICAL_DNS;
const Cluster_DiscoveryType Cluster::EDS;
const Cluster_DiscoveryType Cluster::DiscoveryType_MIN;
const Cluster_DiscoveryType Cluster::DiscoveryType_MAX;
const int Cluster::DiscoveryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Cluster_LbPolicy_descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_enum_descriptors[1];
}
bool Cluster_LbPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Cluster_LbPolicy Cluster::ROUND_ROBIN;
const Cluster_LbPolicy Cluster::LEAST_REQUEST;
const Cluster_LbPolicy Cluster::RING_HASH;
const Cluster_LbPolicy Cluster::RANDOM;
const Cluster_LbPolicy Cluster::LbPolicy_MIN;
const Cluster_LbPolicy Cluster::LbPolicy_MAX;
const int Cluster::LbPolicy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CircuitBreakers_Thresholds::kPriorityFieldNumber;
const int CircuitBreakers_Thresholds::kMaxConnectionsFieldNumber;
const int CircuitBreakers_Thresholds::kMaxPendingRequestsFieldNumber;
const int CircuitBreakers_Thresholds::kMaxRequestsFieldNumber;
const int CircuitBreakers_Thresholds::kMaxRetriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CircuitBreakers_Thresholds::CircuitBreakers_Thresholds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.CircuitBreakers.Thresholds)
}
CircuitBreakers_Thresholds::CircuitBreakers_Thresholds(const CircuitBreakers_Thresholds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max_connections()) {
    max_connections_ = new ::google::protobuf::UInt32Value(*from.max_connections_);
  } else {
    max_connections_ = NULL;
  }
  if (from.has_max_pending_requests()) {
    max_pending_requests_ = new ::google::protobuf::UInt32Value(*from.max_pending_requests_);
  } else {
    max_pending_requests_ = NULL;
  }
  if (from.has_max_requests()) {
    max_requests_ = new ::google::protobuf::UInt32Value(*from.max_requests_);
  } else {
    max_requests_ = NULL;
  }
  if (from.has_max_retries()) {
    max_retries_ = new ::google::protobuf::UInt32Value(*from.max_retries_);
  } else {
    max_retries_ = NULL;
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.CircuitBreakers.Thresholds)
}

void CircuitBreakers_Thresholds::SharedCtor() {
  ::memset(&max_connections_, 0, reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&max_connections_) + sizeof(priority_));
  _cached_size_ = 0;
}

CircuitBreakers_Thresholds::~CircuitBreakers_Thresholds() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.CircuitBreakers.Thresholds)
  SharedDtor();
}

void CircuitBreakers_Thresholds::SharedDtor() {
  if (this != internal_default_instance()) {
    delete max_connections_;
  }
  if (this != internal_default_instance()) {
    delete max_pending_requests_;
  }
  if (this != internal_default_instance()) {
    delete max_requests_;
  }
  if (this != internal_default_instance()) {
    delete max_retries_;
  }
}

void CircuitBreakers_Thresholds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircuitBreakers_Thresholds::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[0].descriptor;
}

const CircuitBreakers_Thresholds& CircuitBreakers_Thresholds::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

CircuitBreakers_Thresholds* CircuitBreakers_Thresholds::New(::google::protobuf::Arena* arena) const {
  CircuitBreakers_Thresholds* n = new CircuitBreakers_Thresholds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CircuitBreakers_Thresholds::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.CircuitBreakers.Thresholds)
  if (GetArenaNoVirtual() == NULL && max_connections_ != NULL) {
    delete max_connections_;
  }
  max_connections_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_pending_requests_ != NULL) {
    delete max_pending_requests_;
  }
  max_pending_requests_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_requests_ != NULL) {
    delete max_requests_;
  }
  max_requests_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_retries_ != NULL) {
    delete max_retries_;
  }
  max_retries_ = NULL;
  priority_ = 0;
}

bool CircuitBreakers_Thresholds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.CircuitBreakers.Thresholds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.RoutingPriority priority = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_priority(static_cast< ::envoy::api::v2::RoutingPriority >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value max_connections = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_connections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value max_pending_requests = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_pending_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value max_requests = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value max_retries = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_retries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.CircuitBreakers.Thresholds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.CircuitBreakers.Thresholds)
  return false;
#undef DO_
}

void CircuitBreakers_Thresholds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.CircuitBreakers.Thresholds)
  // .envoy.api.v2.RoutingPriority priority = 1;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->priority(), output);
  }

  // .google.protobuf.UInt32Value max_connections = 2;
  if (this->has_max_connections()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->max_connections_, output);
  }

  // .google.protobuf.UInt32Value max_pending_requests = 3;
  if (this->has_max_pending_requests()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->max_pending_requests_, output);
  }

  // .google.protobuf.UInt32Value max_requests = 4;
  if (this->has_max_requests()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->max_requests_, output);
  }

  // .google.protobuf.UInt32Value max_retries = 5;
  if (this->has_max_retries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->max_retries_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.CircuitBreakers.Thresholds)
}

::google::protobuf::uint8* CircuitBreakers_Thresholds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.CircuitBreakers.Thresholds)
  // .envoy.api.v2.RoutingPriority priority = 1;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->priority(), target);
  }

  // .google.protobuf.UInt32Value max_connections = 2;
  if (this->has_max_connections()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->max_connections_, false, target);
  }

  // .google.protobuf.UInt32Value max_pending_requests = 3;
  if (this->has_max_pending_requests()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->max_pending_requests_, false, target);
  }

  // .google.protobuf.UInt32Value max_requests = 4;
  if (this->has_max_requests()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->max_requests_, false, target);
  }

  // .google.protobuf.UInt32Value max_retries = 5;
  if (this->has_max_retries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->max_retries_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.CircuitBreakers.Thresholds)
  return target;
}

size_t CircuitBreakers_Thresholds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.CircuitBreakers.Thresholds)
  size_t total_size = 0;

  // .google.protobuf.UInt32Value max_connections = 2;
  if (this->has_max_connections()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_connections_);
  }

  // .google.protobuf.UInt32Value max_pending_requests = 3;
  if (this->has_max_pending_requests()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_pending_requests_);
  }

  // .google.protobuf.UInt32Value max_requests = 4;
  if (this->has_max_requests()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_requests_);
  }

  // .google.protobuf.UInt32Value max_retries = 5;
  if (this->has_max_retries()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_retries_);
  }

  // .envoy.api.v2.RoutingPriority priority = 1;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircuitBreakers_Thresholds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.CircuitBreakers.Thresholds)
  GOOGLE_DCHECK_NE(&from, this);
  const CircuitBreakers_Thresholds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CircuitBreakers_Thresholds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.CircuitBreakers.Thresholds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.CircuitBreakers.Thresholds)
    MergeFrom(*source);
  }
}

void CircuitBreakers_Thresholds::MergeFrom(const CircuitBreakers_Thresholds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.CircuitBreakers.Thresholds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max_connections()) {
    mutable_max_connections()->::google::protobuf::UInt32Value::MergeFrom(from.max_connections());
  }
  if (from.has_max_pending_requests()) {
    mutable_max_pending_requests()->::google::protobuf::UInt32Value::MergeFrom(from.max_pending_requests());
  }
  if (from.has_max_requests()) {
    mutable_max_requests()->::google::protobuf::UInt32Value::MergeFrom(from.max_requests());
  }
  if (from.has_max_retries()) {
    mutable_max_retries()->::google::protobuf::UInt32Value::MergeFrom(from.max_retries());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void CircuitBreakers_Thresholds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.CircuitBreakers.Thresholds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircuitBreakers_Thresholds::CopyFrom(const CircuitBreakers_Thresholds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.CircuitBreakers.Thresholds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircuitBreakers_Thresholds::IsInitialized() const {
  return true;
}

void CircuitBreakers_Thresholds::Swap(CircuitBreakers_Thresholds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CircuitBreakers_Thresholds::InternalSwap(CircuitBreakers_Thresholds* other) {
  std::swap(max_connections_, other->max_connections_);
  std::swap(max_pending_requests_, other->max_pending_requests_);
  std::swap(max_requests_, other->max_requests_);
  std::swap(max_retries_, other->max_retries_);
  std::swap(priority_, other->priority_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CircuitBreakers_Thresholds::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CircuitBreakers_Thresholds

// .envoy.api.v2.RoutingPriority priority = 1;
void CircuitBreakers_Thresholds::clear_priority() {
  priority_ = 0;
}
::envoy::api::v2::RoutingPriority CircuitBreakers_Thresholds::priority() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.priority)
  return static_cast< ::envoy::api::v2::RoutingPriority >(priority_);
}
void CircuitBreakers_Thresholds::set_priority(::envoy::api::v2::RoutingPriority value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.CircuitBreakers.Thresholds.priority)
}

// .google.protobuf.UInt32Value max_connections = 2;
bool CircuitBreakers_Thresholds::has_max_connections() const {
  return this != internal_default_instance() && max_connections_ != NULL;
}
void CircuitBreakers_Thresholds::clear_max_connections() {
  if (GetArenaNoVirtual() == NULL && max_connections_ != NULL) delete max_connections_;
  max_connections_ = NULL;
}
const ::google::protobuf::UInt32Value& CircuitBreakers_Thresholds::max_connections() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.max_connections)
  return max_connections_ != NULL ? *max_connections_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::mutable_max_connections() {
  
  if (max_connections_ == NULL) {
    max_connections_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.Thresholds.max_connections)
  return max_connections_;
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::release_max_connections() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CircuitBreakers.Thresholds.max_connections)
  
  ::google::protobuf::UInt32Value* temp = max_connections_;
  max_connections_ = NULL;
  return temp;
}
void CircuitBreakers_Thresholds::set_allocated_max_connections(::google::protobuf::UInt32Value* max_connections) {
  delete max_connections_;
  if (max_connections != NULL && max_connections->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_connections = new ::google::protobuf::UInt32Value;
    new_max_connections->CopyFrom(*max_connections);
    max_connections = new_max_connections;
  }
  max_connections_ = max_connections;
  if (max_connections) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CircuitBreakers.Thresholds.max_connections)
}

// .google.protobuf.UInt32Value max_pending_requests = 3;
bool CircuitBreakers_Thresholds::has_max_pending_requests() const {
  return this != internal_default_instance() && max_pending_requests_ != NULL;
}
void CircuitBreakers_Thresholds::clear_max_pending_requests() {
  if (GetArenaNoVirtual() == NULL && max_pending_requests_ != NULL) delete max_pending_requests_;
  max_pending_requests_ = NULL;
}
const ::google::protobuf::UInt32Value& CircuitBreakers_Thresholds::max_pending_requests() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.max_pending_requests)
  return max_pending_requests_ != NULL ? *max_pending_requests_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::mutable_max_pending_requests() {
  
  if (max_pending_requests_ == NULL) {
    max_pending_requests_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.Thresholds.max_pending_requests)
  return max_pending_requests_;
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::release_max_pending_requests() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CircuitBreakers.Thresholds.max_pending_requests)
  
  ::google::protobuf::UInt32Value* temp = max_pending_requests_;
  max_pending_requests_ = NULL;
  return temp;
}
void CircuitBreakers_Thresholds::set_allocated_max_pending_requests(::google::protobuf::UInt32Value* max_pending_requests) {
  delete max_pending_requests_;
  if (max_pending_requests != NULL && max_pending_requests->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_pending_requests = new ::google::protobuf::UInt32Value;
    new_max_pending_requests->CopyFrom(*max_pending_requests);
    max_pending_requests = new_max_pending_requests;
  }
  max_pending_requests_ = max_pending_requests;
  if (max_pending_requests) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CircuitBreakers.Thresholds.max_pending_requests)
}

// .google.protobuf.UInt32Value max_requests = 4;
bool CircuitBreakers_Thresholds::has_max_requests() const {
  return this != internal_default_instance() && max_requests_ != NULL;
}
void CircuitBreakers_Thresholds::clear_max_requests() {
  if (GetArenaNoVirtual() == NULL && max_requests_ != NULL) delete max_requests_;
  max_requests_ = NULL;
}
const ::google::protobuf::UInt32Value& CircuitBreakers_Thresholds::max_requests() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.max_requests)
  return max_requests_ != NULL ? *max_requests_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::mutable_max_requests() {
  
  if (max_requests_ == NULL) {
    max_requests_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.Thresholds.max_requests)
  return max_requests_;
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::release_max_requests() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CircuitBreakers.Thresholds.max_requests)
  
  ::google::protobuf::UInt32Value* temp = max_requests_;
  max_requests_ = NULL;
  return temp;
}
void CircuitBreakers_Thresholds::set_allocated_max_requests(::google::protobuf::UInt32Value* max_requests) {
  delete max_requests_;
  if (max_requests != NULL && max_requests->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_requests = new ::google::protobuf::UInt32Value;
    new_max_requests->CopyFrom(*max_requests);
    max_requests = new_max_requests;
  }
  max_requests_ = max_requests;
  if (max_requests) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CircuitBreakers.Thresholds.max_requests)
}

// .google.protobuf.UInt32Value max_retries = 5;
bool CircuitBreakers_Thresholds::has_max_retries() const {
  return this != internal_default_instance() && max_retries_ != NULL;
}
void CircuitBreakers_Thresholds::clear_max_retries() {
  if (GetArenaNoVirtual() == NULL && max_retries_ != NULL) delete max_retries_;
  max_retries_ = NULL;
}
const ::google::protobuf::UInt32Value& CircuitBreakers_Thresholds::max_retries() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.Thresholds.max_retries)
  return max_retries_ != NULL ? *max_retries_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::mutable_max_retries() {
  
  if (max_retries_ == NULL) {
    max_retries_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.Thresholds.max_retries)
  return max_retries_;
}
::google::protobuf::UInt32Value* CircuitBreakers_Thresholds::release_max_retries() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.CircuitBreakers.Thresholds.max_retries)
  
  ::google::protobuf::UInt32Value* temp = max_retries_;
  max_retries_ = NULL;
  return temp;
}
void CircuitBreakers_Thresholds::set_allocated_max_retries(::google::protobuf::UInt32Value* max_retries) {
  delete max_retries_;
  if (max_retries != NULL && max_retries->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_retries = new ::google::protobuf::UInt32Value;
    new_max_retries->CopyFrom(*max_retries);
    max_retries = new_max_retries;
  }
  max_retries_ = max_retries;
  if (max_retries) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.CircuitBreakers.Thresholds.max_retries)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CircuitBreakers::kThresholdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CircuitBreakers::CircuitBreakers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.CircuitBreakers)
}
CircuitBreakers::CircuitBreakers(const CircuitBreakers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      thresholds_(from.thresholds_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.CircuitBreakers)
}

void CircuitBreakers::SharedCtor() {
  _cached_size_ = 0;
}

CircuitBreakers::~CircuitBreakers() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.CircuitBreakers)
  SharedDtor();
}

void CircuitBreakers::SharedDtor() {
}

void CircuitBreakers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircuitBreakers::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[1].descriptor;
}

const CircuitBreakers& CircuitBreakers::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

CircuitBreakers* CircuitBreakers::New(::google::protobuf::Arena* arena) const {
  CircuitBreakers* n = new CircuitBreakers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CircuitBreakers::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.CircuitBreakers)
  thresholds_.Clear();
}

bool CircuitBreakers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.CircuitBreakers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .envoy.api.v2.CircuitBreakers.Thresholds thresholds = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_thresholds()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.CircuitBreakers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.CircuitBreakers)
  return false;
#undef DO_
}

void CircuitBreakers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.CircuitBreakers)
  // repeated .envoy.api.v2.CircuitBreakers.Thresholds thresholds = 1;
  for (unsigned int i = 0, n = this->thresholds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->thresholds(i), output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.CircuitBreakers)
}

::google::protobuf::uint8* CircuitBreakers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.CircuitBreakers)
  // repeated .envoy.api.v2.CircuitBreakers.Thresholds thresholds = 1;
  for (unsigned int i = 0, n = this->thresholds_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->thresholds(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.CircuitBreakers)
  return target;
}

size_t CircuitBreakers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.CircuitBreakers)
  size_t total_size = 0;

  // repeated .envoy.api.v2.CircuitBreakers.Thresholds thresholds = 1;
  {
    unsigned int count = this->thresholds_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thresholds(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircuitBreakers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.CircuitBreakers)
  GOOGLE_DCHECK_NE(&from, this);
  const CircuitBreakers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CircuitBreakers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.CircuitBreakers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.CircuitBreakers)
    MergeFrom(*source);
  }
}

void CircuitBreakers::MergeFrom(const CircuitBreakers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.CircuitBreakers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thresholds_.MergeFrom(from.thresholds_);
}

void CircuitBreakers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.CircuitBreakers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircuitBreakers::CopyFrom(const CircuitBreakers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.CircuitBreakers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircuitBreakers::IsInitialized() const {
  return true;
}

void CircuitBreakers::Swap(CircuitBreakers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CircuitBreakers::InternalSwap(CircuitBreakers* other) {
  thresholds_.UnsafeArenaSwap(&other->thresholds_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CircuitBreakers::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CircuitBreakers

// repeated .envoy.api.v2.CircuitBreakers.Thresholds thresholds = 1;
int CircuitBreakers::thresholds_size() const {
  return thresholds_.size();
}
void CircuitBreakers::clear_thresholds() {
  thresholds_.Clear();
}
const ::envoy::api::v2::CircuitBreakers_Thresholds& CircuitBreakers::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.CircuitBreakers.thresholds)
  return thresholds_.Get(index);
}
::envoy::api::v2::CircuitBreakers_Thresholds* CircuitBreakers::mutable_thresholds(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.CircuitBreakers.thresholds)
  return thresholds_.Mutable(index);
}
::envoy::api::v2::CircuitBreakers_Thresholds* CircuitBreakers::add_thresholds() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.CircuitBreakers.thresholds)
  return thresholds_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::CircuitBreakers_Thresholds >*
CircuitBreakers::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.CircuitBreakers.thresholds)
  return &thresholds_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::CircuitBreakers_Thresholds >&
CircuitBreakers::thresholds() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.CircuitBreakers.thresholds)
  return thresholds_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TcpProtocolOptions::TcpProtocolOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.TcpProtocolOptions)
}
TcpProtocolOptions::TcpProtocolOptions(const TcpProtocolOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.TcpProtocolOptions)
}

void TcpProtocolOptions::SharedCtor() {
  _cached_size_ = 0;
}

TcpProtocolOptions::~TcpProtocolOptions() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.TcpProtocolOptions)
  SharedDtor();
}

void TcpProtocolOptions::SharedDtor() {
}

void TcpProtocolOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TcpProtocolOptions::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[2].descriptor;
}

const TcpProtocolOptions& TcpProtocolOptions::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

TcpProtocolOptions* TcpProtocolOptions::New(::google::protobuf::Arena* arena) const {
  TcpProtocolOptions* n = new TcpProtocolOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TcpProtocolOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.TcpProtocolOptions)
}

bool TcpProtocolOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.TcpProtocolOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.TcpProtocolOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.TcpProtocolOptions)
  return false;
#undef DO_
}

void TcpProtocolOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.TcpProtocolOptions)
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.TcpProtocolOptions)
}

::google::protobuf::uint8* TcpProtocolOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.TcpProtocolOptions)
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.TcpProtocolOptions)
  return target;
}

size_t TcpProtocolOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.TcpProtocolOptions)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpProtocolOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.TcpProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TcpProtocolOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TcpProtocolOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.TcpProtocolOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.TcpProtocolOptions)
    MergeFrom(*source);
  }
}

void TcpProtocolOptions::MergeFrom(const TcpProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.TcpProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void TcpProtocolOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.TcpProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TcpProtocolOptions::CopyFrom(const TcpProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.TcpProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpProtocolOptions::IsInitialized() const {
  return true;
}

void TcpProtocolOptions::Swap(TcpProtocolOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TcpProtocolOptions::InternalSwap(TcpProtocolOptions* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TcpProtocolOptions::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TcpProtocolOptions

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Http1ProtocolOptions::Http1ProtocolOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Http1ProtocolOptions)
}
Http1ProtocolOptions::Http1ProtocolOptions(const Http1ProtocolOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Http1ProtocolOptions)
}

void Http1ProtocolOptions::SharedCtor() {
  _cached_size_ = 0;
}

Http1ProtocolOptions::~Http1ProtocolOptions() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Http1ProtocolOptions)
  SharedDtor();
}

void Http1ProtocolOptions::SharedDtor() {
}

void Http1ProtocolOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Http1ProtocolOptions::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[3].descriptor;
}

const Http1ProtocolOptions& Http1ProtocolOptions::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

Http1ProtocolOptions* Http1ProtocolOptions::New(::google::protobuf::Arena* arena) const {
  Http1ProtocolOptions* n = new Http1ProtocolOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Http1ProtocolOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Http1ProtocolOptions)
}

bool Http1ProtocolOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Http1ProtocolOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Http1ProtocolOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Http1ProtocolOptions)
  return false;
#undef DO_
}

void Http1ProtocolOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Http1ProtocolOptions)
  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Http1ProtocolOptions)
}

::google::protobuf::uint8* Http1ProtocolOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Http1ProtocolOptions)
  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Http1ProtocolOptions)
  return target;
}

size_t Http1ProtocolOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Http1ProtocolOptions)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Http1ProtocolOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Http1ProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const Http1ProtocolOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Http1ProtocolOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Http1ProtocolOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Http1ProtocolOptions)
    MergeFrom(*source);
  }
}

void Http1ProtocolOptions::MergeFrom(const Http1ProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Http1ProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Http1ProtocolOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Http1ProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Http1ProtocolOptions::CopyFrom(const Http1ProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Http1ProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Http1ProtocolOptions::IsInitialized() const {
  return true;
}

void Http1ProtocolOptions::Swap(Http1ProtocolOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Http1ProtocolOptions::InternalSwap(Http1ProtocolOptions* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Http1ProtocolOptions::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Http1ProtocolOptions

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Http2ProtocolOptions::kDisableDynamicTableFieldNumber;
const int Http2ProtocolOptions::kPerStreamBufferLimitBytesFieldNumber;
const int Http2ProtocolOptions::kMaxConcurrentStreamsFieldNumber;
const int Http2ProtocolOptions::kInitialWindowSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Http2ProtocolOptions::Http2ProtocolOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Http2ProtocolOptions)
}
Http2ProtocolOptions::Http2ProtocolOptions(const Http2ProtocolOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_per_stream_buffer_limit_bytes()) {
    per_stream_buffer_limit_bytes_ = new ::google::protobuf::UInt32Value(*from.per_stream_buffer_limit_bytes_);
  } else {
    per_stream_buffer_limit_bytes_ = NULL;
  }
  if (from.has_max_concurrent_streams()) {
    max_concurrent_streams_ = new ::google::protobuf::UInt32Value(*from.max_concurrent_streams_);
  } else {
    max_concurrent_streams_ = NULL;
  }
  if (from.has_initial_window_size()) {
    initial_window_size_ = new ::google::protobuf::UInt32Value(*from.initial_window_size_);
  } else {
    initial_window_size_ = NULL;
  }
  disable_dynamic_table_ = from.disable_dynamic_table_;
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Http2ProtocolOptions)
}

void Http2ProtocolOptions::SharedCtor() {
  ::memset(&per_stream_buffer_limit_bytes_, 0, reinterpret_cast<char*>(&disable_dynamic_table_) -
    reinterpret_cast<char*>(&per_stream_buffer_limit_bytes_) + sizeof(disable_dynamic_table_));
  _cached_size_ = 0;
}

Http2ProtocolOptions::~Http2ProtocolOptions() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Http2ProtocolOptions)
  SharedDtor();
}

void Http2ProtocolOptions::SharedDtor() {
  if (this != internal_default_instance()) {
    delete per_stream_buffer_limit_bytes_;
  }
  if (this != internal_default_instance()) {
    delete max_concurrent_streams_;
  }
  if (this != internal_default_instance()) {
    delete initial_window_size_;
  }
}

void Http2ProtocolOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Http2ProtocolOptions::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[4].descriptor;
}

const Http2ProtocolOptions& Http2ProtocolOptions::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

Http2ProtocolOptions* Http2ProtocolOptions::New(::google::protobuf::Arena* arena) const {
  Http2ProtocolOptions* n = new Http2ProtocolOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Http2ProtocolOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Http2ProtocolOptions)
  if (GetArenaNoVirtual() == NULL && per_stream_buffer_limit_bytes_ != NULL) {
    delete per_stream_buffer_limit_bytes_;
  }
  per_stream_buffer_limit_bytes_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_concurrent_streams_ != NULL) {
    delete max_concurrent_streams_;
  }
  max_concurrent_streams_ = NULL;
  if (GetArenaNoVirtual() == NULL && initial_window_size_ != NULL) {
    delete initial_window_size_;
  }
  initial_window_size_ = NULL;
  disable_dynamic_table_ = false;
}

bool Http2ProtocolOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Http2ProtocolOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool disable_dynamic_table = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_dynamic_table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value per_stream_buffer_limit_bytes = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_per_stream_buffer_limit_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value max_concurrent_streams = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_concurrent_streams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value initial_window_size = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial_window_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Http2ProtocolOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Http2ProtocolOptions)
  return false;
#undef DO_
}

void Http2ProtocolOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Http2ProtocolOptions)
  // bool disable_dynamic_table = 1;
  if (this->disable_dynamic_table() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disable_dynamic_table(), output);
  }

  // .google.protobuf.UInt32Value per_stream_buffer_limit_bytes = 2;
  if (this->has_per_stream_buffer_limit_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->per_stream_buffer_limit_bytes_, output);
  }

  // .google.protobuf.UInt32Value max_concurrent_streams = 3;
  if (this->has_max_concurrent_streams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->max_concurrent_streams_, output);
  }

  // .google.protobuf.UInt32Value initial_window_size = 4;
  if (this->has_initial_window_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->initial_window_size_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Http2ProtocolOptions)
}

::google::protobuf::uint8* Http2ProtocolOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Http2ProtocolOptions)
  // bool disable_dynamic_table = 1;
  if (this->disable_dynamic_table() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disable_dynamic_table(), target);
  }

  // .google.protobuf.UInt32Value per_stream_buffer_limit_bytes = 2;
  if (this->has_per_stream_buffer_limit_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->per_stream_buffer_limit_bytes_, false, target);
  }

  // .google.protobuf.UInt32Value max_concurrent_streams = 3;
  if (this->has_max_concurrent_streams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->max_concurrent_streams_, false, target);
  }

  // .google.protobuf.UInt32Value initial_window_size = 4;
  if (this->has_initial_window_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->initial_window_size_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Http2ProtocolOptions)
  return target;
}

size_t Http2ProtocolOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Http2ProtocolOptions)
  size_t total_size = 0;

  // .google.protobuf.UInt32Value per_stream_buffer_limit_bytes = 2;
  if (this->has_per_stream_buffer_limit_bytes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->per_stream_buffer_limit_bytes_);
  }

  // .google.protobuf.UInt32Value max_concurrent_streams = 3;
  if (this->has_max_concurrent_streams()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_concurrent_streams_);
  }

  // .google.protobuf.UInt32Value initial_window_size = 4;
  if (this->has_initial_window_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->initial_window_size_);
  }

  // bool disable_dynamic_table = 1;
  if (this->disable_dynamic_table() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Http2ProtocolOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Http2ProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const Http2ProtocolOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Http2ProtocolOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Http2ProtocolOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Http2ProtocolOptions)
    MergeFrom(*source);
  }
}

void Http2ProtocolOptions::MergeFrom(const Http2ProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Http2ProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_per_stream_buffer_limit_bytes()) {
    mutable_per_stream_buffer_limit_bytes()->::google::protobuf::UInt32Value::MergeFrom(from.per_stream_buffer_limit_bytes());
  }
  if (from.has_max_concurrent_streams()) {
    mutable_max_concurrent_streams()->::google::protobuf::UInt32Value::MergeFrom(from.max_concurrent_streams());
  }
  if (from.has_initial_window_size()) {
    mutable_initial_window_size()->::google::protobuf::UInt32Value::MergeFrom(from.initial_window_size());
  }
  if (from.disable_dynamic_table() != 0) {
    set_disable_dynamic_table(from.disable_dynamic_table());
  }
}

void Http2ProtocolOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Http2ProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Http2ProtocolOptions::CopyFrom(const Http2ProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Http2ProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Http2ProtocolOptions::IsInitialized() const {
  return true;
}

void Http2ProtocolOptions::Swap(Http2ProtocolOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Http2ProtocolOptions::InternalSwap(Http2ProtocolOptions* other) {
  std::swap(per_stream_buffer_limit_bytes_, other->per_stream_buffer_limit_bytes_);
  std::swap(max_concurrent_streams_, other->max_concurrent_streams_);
  std::swap(initial_window_size_, other->initial_window_size_);
  std::swap(disable_dynamic_table_, other->disable_dynamic_table_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Http2ProtocolOptions::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Http2ProtocolOptions

// bool disable_dynamic_table = 1;
void Http2ProtocolOptions::clear_disable_dynamic_table() {
  disable_dynamic_table_ = false;
}
bool Http2ProtocolOptions::disable_dynamic_table() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Http2ProtocolOptions.disable_dynamic_table)
  return disable_dynamic_table_;
}
void Http2ProtocolOptions::set_disable_dynamic_table(bool value) {
  
  disable_dynamic_table_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.Http2ProtocolOptions.disable_dynamic_table)
}

// .google.protobuf.UInt32Value per_stream_buffer_limit_bytes = 2;
bool Http2ProtocolOptions::has_per_stream_buffer_limit_bytes() const {
  return this != internal_default_instance() && per_stream_buffer_limit_bytes_ != NULL;
}
void Http2ProtocolOptions::clear_per_stream_buffer_limit_bytes() {
  if (GetArenaNoVirtual() == NULL && per_stream_buffer_limit_bytes_ != NULL) delete per_stream_buffer_limit_bytes_;
  per_stream_buffer_limit_bytes_ = NULL;
}
const ::google::protobuf::UInt32Value& Http2ProtocolOptions::per_stream_buffer_limit_bytes() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Http2ProtocolOptions.per_stream_buffer_limit_bytes)
  return per_stream_buffer_limit_bytes_ != NULL ? *per_stream_buffer_limit_bytes_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::mutable_per_stream_buffer_limit_bytes() {
  
  if (per_stream_buffer_limit_bytes_ == NULL) {
    per_stream_buffer_limit_bytes_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Http2ProtocolOptions.per_stream_buffer_limit_bytes)
  return per_stream_buffer_limit_bytes_;
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::release_per_stream_buffer_limit_bytes() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Http2ProtocolOptions.per_stream_buffer_limit_bytes)
  
  ::google::protobuf::UInt32Value* temp = per_stream_buffer_limit_bytes_;
  per_stream_buffer_limit_bytes_ = NULL;
  return temp;
}
void Http2ProtocolOptions::set_allocated_per_stream_buffer_limit_bytes(::google::protobuf::UInt32Value* per_stream_buffer_limit_bytes) {
  delete per_stream_buffer_limit_bytes_;
  if (per_stream_buffer_limit_bytes != NULL && per_stream_buffer_limit_bytes->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_per_stream_buffer_limit_bytes = new ::google::protobuf::UInt32Value;
    new_per_stream_buffer_limit_bytes->CopyFrom(*per_stream_buffer_limit_bytes);
    per_stream_buffer_limit_bytes = new_per_stream_buffer_limit_bytes;
  }
  per_stream_buffer_limit_bytes_ = per_stream_buffer_limit_bytes;
  if (per_stream_buffer_limit_bytes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Http2ProtocolOptions.per_stream_buffer_limit_bytes)
}

// .google.protobuf.UInt32Value max_concurrent_streams = 3;
bool Http2ProtocolOptions::has_max_concurrent_streams() const {
  return this != internal_default_instance() && max_concurrent_streams_ != NULL;
}
void Http2ProtocolOptions::clear_max_concurrent_streams() {
  if (GetArenaNoVirtual() == NULL && max_concurrent_streams_ != NULL) delete max_concurrent_streams_;
  max_concurrent_streams_ = NULL;
}
const ::google::protobuf::UInt32Value& Http2ProtocolOptions::max_concurrent_streams() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Http2ProtocolOptions.max_concurrent_streams)
  return max_concurrent_streams_ != NULL ? *max_concurrent_streams_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::mutable_max_concurrent_streams() {
  
  if (max_concurrent_streams_ == NULL) {
    max_concurrent_streams_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Http2ProtocolOptions.max_concurrent_streams)
  return max_concurrent_streams_;
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::release_max_concurrent_streams() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Http2ProtocolOptions.max_concurrent_streams)
  
  ::google::protobuf::UInt32Value* temp = max_concurrent_streams_;
  max_concurrent_streams_ = NULL;
  return temp;
}
void Http2ProtocolOptions::set_allocated_max_concurrent_streams(::google::protobuf::UInt32Value* max_concurrent_streams) {
  delete max_concurrent_streams_;
  if (max_concurrent_streams != NULL && max_concurrent_streams->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_concurrent_streams = new ::google::protobuf::UInt32Value;
    new_max_concurrent_streams->CopyFrom(*max_concurrent_streams);
    max_concurrent_streams = new_max_concurrent_streams;
  }
  max_concurrent_streams_ = max_concurrent_streams;
  if (max_concurrent_streams) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Http2ProtocolOptions.max_concurrent_streams)
}

// .google.protobuf.UInt32Value initial_window_size = 4;
bool Http2ProtocolOptions::has_initial_window_size() const {
  return this != internal_default_instance() && initial_window_size_ != NULL;
}
void Http2ProtocolOptions::clear_initial_window_size() {
  if (GetArenaNoVirtual() == NULL && initial_window_size_ != NULL) delete initial_window_size_;
  initial_window_size_ = NULL;
}
const ::google::protobuf::UInt32Value& Http2ProtocolOptions::initial_window_size() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Http2ProtocolOptions.initial_window_size)
  return initial_window_size_ != NULL ? *initial_window_size_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::mutable_initial_window_size() {
  
  if (initial_window_size_ == NULL) {
    initial_window_size_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Http2ProtocolOptions.initial_window_size)
  return initial_window_size_;
}
::google::protobuf::UInt32Value* Http2ProtocolOptions::release_initial_window_size() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Http2ProtocolOptions.initial_window_size)
  
  ::google::protobuf::UInt32Value* temp = initial_window_size_;
  initial_window_size_ = NULL;
  return temp;
}
void Http2ProtocolOptions::set_allocated_initial_window_size(::google::protobuf::UInt32Value* initial_window_size) {
  delete initial_window_size_;
  if (initial_window_size != NULL && initial_window_size->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_initial_window_size = new ::google::protobuf::UInt32Value;
    new_initial_window_size->CopyFrom(*initial_window_size);
    initial_window_size = new_initial_window_size;
  }
  initial_window_size_ = initial_window_size;
  if (initial_window_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Http2ProtocolOptions.initial_window_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GrpcProtocolOptions::kHttp2ProtocolOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GrpcProtocolOptions::GrpcProtocolOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.GrpcProtocolOptions)
}
GrpcProtocolOptions::GrpcProtocolOptions(const GrpcProtocolOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_http2_protocol_options()) {
    http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions(*from.http2_protocol_options_);
  } else {
    http2_protocol_options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.GrpcProtocolOptions)
}

void GrpcProtocolOptions::SharedCtor() {
  http2_protocol_options_ = NULL;
  _cached_size_ = 0;
}

GrpcProtocolOptions::~GrpcProtocolOptions() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.GrpcProtocolOptions)
  SharedDtor();
}

void GrpcProtocolOptions::SharedDtor() {
  if (this != internal_default_instance()) {
    delete http2_protocol_options_;
  }
}

void GrpcProtocolOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrpcProtocolOptions::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[5].descriptor;
}

const GrpcProtocolOptions& GrpcProtocolOptions::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

GrpcProtocolOptions* GrpcProtocolOptions::New(::google::protobuf::Arena* arena) const {
  GrpcProtocolOptions* n = new GrpcProtocolOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GrpcProtocolOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.GrpcProtocolOptions)
  if (GetArenaNoVirtual() == NULL && http2_protocol_options_ != NULL) {
    delete http2_protocol_options_;
  }
  http2_protocol_options_ = NULL;
}

bool GrpcProtocolOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.GrpcProtocolOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http2_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.GrpcProtocolOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.GrpcProtocolOptions)
  return false;
#undef DO_
}

void GrpcProtocolOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.GrpcProtocolOptions)
  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 1;
  if (this->has_http2_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->http2_protocol_options_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.GrpcProtocolOptions)
}

::google::protobuf::uint8* GrpcProtocolOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.GrpcProtocolOptions)
  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 1;
  if (this->has_http2_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->http2_protocol_options_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.GrpcProtocolOptions)
  return target;
}

size_t GrpcProtocolOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.GrpcProtocolOptions)
  size_t total_size = 0;

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 1;
  if (this->has_http2_protocol_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->http2_protocol_options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrpcProtocolOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.GrpcProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GrpcProtocolOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GrpcProtocolOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.GrpcProtocolOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.GrpcProtocolOptions)
    MergeFrom(*source);
  }
}

void GrpcProtocolOptions::MergeFrom(const GrpcProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.GrpcProtocolOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_http2_protocol_options()) {
    mutable_http2_protocol_options()->::envoy::api::v2::Http2ProtocolOptions::MergeFrom(from.http2_protocol_options());
  }
}

void GrpcProtocolOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.GrpcProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrpcProtocolOptions::CopyFrom(const GrpcProtocolOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.GrpcProtocolOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrpcProtocolOptions::IsInitialized() const {
  return true;
}

void GrpcProtocolOptions::Swap(GrpcProtocolOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GrpcProtocolOptions::InternalSwap(GrpcProtocolOptions* other) {
  std::swap(http2_protocol_options_, other->http2_protocol_options_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GrpcProtocolOptions::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GrpcProtocolOptions

// .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 1;
bool GrpcProtocolOptions::has_http2_protocol_options() const {
  return this != internal_default_instance() && http2_protocol_options_ != NULL;
}
void GrpcProtocolOptions::clear_http2_protocol_options() {
  if (GetArenaNoVirtual() == NULL && http2_protocol_options_ != NULL) delete http2_protocol_options_;
  http2_protocol_options_ = NULL;
}
const ::envoy::api::v2::Http2ProtocolOptions& GrpcProtocolOptions::http2_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.GrpcProtocolOptions.http2_protocol_options)
  return http2_protocol_options_ != NULL ? *http2_protocol_options_
                         : *::envoy::api::v2::Http2ProtocolOptions::internal_default_instance();
}
::envoy::api::v2::Http2ProtocolOptions* GrpcProtocolOptions::mutable_http2_protocol_options() {
  
  if (http2_protocol_options_ == NULL) {
    http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.GrpcProtocolOptions.http2_protocol_options)
  return http2_protocol_options_;
}
::envoy::api::v2::Http2ProtocolOptions* GrpcProtocolOptions::release_http2_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.GrpcProtocolOptions.http2_protocol_options)
  
  ::envoy::api::v2::Http2ProtocolOptions* temp = http2_protocol_options_;
  http2_protocol_options_ = NULL;
  return temp;
}
void GrpcProtocolOptions::set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options) {
  delete http2_protocol_options_;
  http2_protocol_options_ = http2_protocol_options;
  if (http2_protocol_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.GrpcProtocolOptions.http2_protocol_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cluster_OutlierDetection::kConsecutive5XxFieldNumber;
const int Cluster_OutlierDetection::kIntervalFieldNumber;
const int Cluster_OutlierDetection::kBaseEjectionTimeFieldNumber;
const int Cluster_OutlierDetection::kMaxEjectionPercentFieldNumber;
const int Cluster_OutlierDetection::kEnforcingConsecutive5XxFieldNumber;
const int Cluster_OutlierDetection::kEnforcingSuccessRateFieldNumber;
const int Cluster_OutlierDetection::kSuccessRateMinimumHostsFieldNumber;
const int Cluster_OutlierDetection::kSuccessRateRequestVolumeFieldNumber;
const int Cluster_OutlierDetection::kSuccessRateStdevFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cluster_OutlierDetection::Cluster_OutlierDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Cluster.OutlierDetection)
}
Cluster_OutlierDetection::Cluster_OutlierDetection(const Cluster_OutlierDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_consecutive_5xx()) {
    consecutive_5xx_ = new ::google::protobuf::UInt32Value(*from.consecutive_5xx_);
  } else {
    consecutive_5xx_ = NULL;
  }
  if (from.has_interval()) {
    interval_ = new ::google::protobuf::Duration(*from.interval_);
  } else {
    interval_ = NULL;
  }
  if (from.has_base_ejection_time()) {
    base_ejection_time_ = new ::google::protobuf::Duration(*from.base_ejection_time_);
  } else {
    base_ejection_time_ = NULL;
  }
  if (from.has_max_ejection_percent()) {
    max_ejection_percent_ = new ::google::protobuf::UInt32Value(*from.max_ejection_percent_);
  } else {
    max_ejection_percent_ = NULL;
  }
  if (from.has_enforcing_consecutive_5xx()) {
    enforcing_consecutive_5xx_ = new ::google::protobuf::UInt32Value(*from.enforcing_consecutive_5xx_);
  } else {
    enforcing_consecutive_5xx_ = NULL;
  }
  if (from.has_enforcing_success_rate()) {
    enforcing_success_rate_ = new ::google::protobuf::UInt32Value(*from.enforcing_success_rate_);
  } else {
    enforcing_success_rate_ = NULL;
  }
  if (from.has_success_rate_minimum_hosts()) {
    success_rate_minimum_hosts_ = new ::google::protobuf::UInt32Value(*from.success_rate_minimum_hosts_);
  } else {
    success_rate_minimum_hosts_ = NULL;
  }
  if (from.has_success_rate_request_volume()) {
    success_rate_request_volume_ = new ::google::protobuf::UInt32Value(*from.success_rate_request_volume_);
  } else {
    success_rate_request_volume_ = NULL;
  }
  if (from.has_success_rate_stdev_factor()) {
    success_rate_stdev_factor_ = new ::google::protobuf::UInt32Value(*from.success_rate_stdev_factor_);
  } else {
    success_rate_stdev_factor_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Cluster.OutlierDetection)
}

void Cluster_OutlierDetection::SharedCtor() {
  ::memset(&consecutive_5xx_, 0, reinterpret_cast<char*>(&success_rate_stdev_factor_) -
    reinterpret_cast<char*>(&consecutive_5xx_) + sizeof(success_rate_stdev_factor_));
  _cached_size_ = 0;
}

Cluster_OutlierDetection::~Cluster_OutlierDetection() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Cluster.OutlierDetection)
  SharedDtor();
}

void Cluster_OutlierDetection::SharedDtor() {
  if (this != internal_default_instance()) {
    delete consecutive_5xx_;
  }
  if (this != internal_default_instance()) {
    delete interval_;
  }
  if (this != internal_default_instance()) {
    delete base_ejection_time_;
  }
  if (this != internal_default_instance()) {
    delete max_ejection_percent_;
  }
  if (this != internal_default_instance()) {
    delete enforcing_consecutive_5xx_;
  }
  if (this != internal_default_instance()) {
    delete enforcing_success_rate_;
  }
  if (this != internal_default_instance()) {
    delete success_rate_minimum_hosts_;
  }
  if (this != internal_default_instance()) {
    delete success_rate_request_volume_;
  }
  if (this != internal_default_instance()) {
    delete success_rate_stdev_factor_;
  }
}

void Cluster_OutlierDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster_OutlierDetection::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[6].descriptor;
}

const Cluster_OutlierDetection& Cluster_OutlierDetection::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cluster_OutlierDetection* Cluster_OutlierDetection::New(::google::protobuf::Arena* arena) const {
  Cluster_OutlierDetection* n = new Cluster_OutlierDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cluster_OutlierDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Cluster.OutlierDetection)
  if (GetArenaNoVirtual() == NULL && consecutive_5xx_ != NULL) {
    delete consecutive_5xx_;
  }
  consecutive_5xx_ = NULL;
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) {
    delete interval_;
  }
  interval_ = NULL;
  if (GetArenaNoVirtual() == NULL && base_ejection_time_ != NULL) {
    delete base_ejection_time_;
  }
  base_ejection_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_ejection_percent_ != NULL) {
    delete max_ejection_percent_;
  }
  max_ejection_percent_ = NULL;
  if (GetArenaNoVirtual() == NULL && enforcing_consecutive_5xx_ != NULL) {
    delete enforcing_consecutive_5xx_;
  }
  enforcing_consecutive_5xx_ = NULL;
  if (GetArenaNoVirtual() == NULL && enforcing_success_rate_ != NULL) {
    delete enforcing_success_rate_;
  }
  enforcing_success_rate_ = NULL;
  if (GetArenaNoVirtual() == NULL && success_rate_minimum_hosts_ != NULL) {
    delete success_rate_minimum_hosts_;
  }
  success_rate_minimum_hosts_ = NULL;
  if (GetArenaNoVirtual() == NULL && success_rate_request_volume_ != NULL) {
    delete success_rate_request_volume_;
  }
  success_rate_request_volume_ = NULL;
  if (GetArenaNoVirtual() == NULL && success_rate_stdev_factor_ != NULL) {
    delete success_rate_stdev_factor_;
  }
  success_rate_stdev_factor_ = NULL;
}

bool Cluster_OutlierDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Cluster.OutlierDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.UInt32Value consecutive_5xx = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consecutive_5xx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration interval = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration base_ejection_time = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_ejection_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value max_ejection_percent = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_ejection_percent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enforcing_consecutive_5xx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value enforcing_success_rate = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enforcing_success_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success_rate_minimum_hosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value success_rate_request_volume = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success_rate_request_volume()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value success_rate_stdev_factor = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success_rate_stdev_factor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Cluster.OutlierDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Cluster.OutlierDetection)
  return false;
#undef DO_
}

void Cluster_OutlierDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Cluster.OutlierDetection)
  // .google.protobuf.UInt32Value consecutive_5xx = 1;
  if (this->has_consecutive_5xx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->consecutive_5xx_, output);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->interval_, output);
  }

  // .google.protobuf.Duration base_ejection_time = 3;
  if (this->has_base_ejection_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->base_ejection_time_, output);
  }

  // .google.protobuf.UInt32Value max_ejection_percent = 4;
  if (this->has_max_ejection_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->max_ejection_percent_, output);
  }

  // .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;
  if (this->has_enforcing_consecutive_5xx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->enforcing_consecutive_5xx_, output);
  }

  // .google.protobuf.UInt32Value enforcing_success_rate = 6;
  if (this->has_enforcing_success_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->enforcing_success_rate_, output);
  }

  // .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;
  if (this->has_success_rate_minimum_hosts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->success_rate_minimum_hosts_, output);
  }

  // .google.protobuf.UInt32Value success_rate_request_volume = 8;
  if (this->has_success_rate_request_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->success_rate_request_volume_, output);
  }

  // .google.protobuf.UInt32Value success_rate_stdev_factor = 9;
  if (this->has_success_rate_stdev_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->success_rate_stdev_factor_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Cluster.OutlierDetection)
}

::google::protobuf::uint8* Cluster_OutlierDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Cluster.OutlierDetection)
  // .google.protobuf.UInt32Value consecutive_5xx = 1;
  if (this->has_consecutive_5xx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->consecutive_5xx_, false, target);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->interval_, false, target);
  }

  // .google.protobuf.Duration base_ejection_time = 3;
  if (this->has_base_ejection_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->base_ejection_time_, false, target);
  }

  // .google.protobuf.UInt32Value max_ejection_percent = 4;
  if (this->has_max_ejection_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->max_ejection_percent_, false, target);
  }

  // .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;
  if (this->has_enforcing_consecutive_5xx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->enforcing_consecutive_5xx_, false, target);
  }

  // .google.protobuf.UInt32Value enforcing_success_rate = 6;
  if (this->has_enforcing_success_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->enforcing_success_rate_, false, target);
  }

  // .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;
  if (this->has_success_rate_minimum_hosts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->success_rate_minimum_hosts_, false, target);
  }

  // .google.protobuf.UInt32Value success_rate_request_volume = 8;
  if (this->has_success_rate_request_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->success_rate_request_volume_, false, target);
  }

  // .google.protobuf.UInt32Value success_rate_stdev_factor = 9;
  if (this->has_success_rate_stdev_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->success_rate_stdev_factor_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Cluster.OutlierDetection)
  return target;
}

size_t Cluster_OutlierDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Cluster.OutlierDetection)
  size_t total_size = 0;

  // .google.protobuf.UInt32Value consecutive_5xx = 1;
  if (this->has_consecutive_5xx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->consecutive_5xx_);
  }

  // .google.protobuf.Duration interval = 2;
  if (this->has_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->interval_);
  }

  // .google.protobuf.Duration base_ejection_time = 3;
  if (this->has_base_ejection_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_ejection_time_);
  }

  // .google.protobuf.UInt32Value max_ejection_percent = 4;
  if (this->has_max_ejection_percent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_ejection_percent_);
  }

  // .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;
  if (this->has_enforcing_consecutive_5xx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->enforcing_consecutive_5xx_);
  }

  // .google.protobuf.UInt32Value enforcing_success_rate = 6;
  if (this->has_enforcing_success_rate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->enforcing_success_rate_);
  }

  // .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;
  if (this->has_success_rate_minimum_hosts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->success_rate_minimum_hosts_);
  }

  // .google.protobuf.UInt32Value success_rate_request_volume = 8;
  if (this->has_success_rate_request_volume()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->success_rate_request_volume_);
  }

  // .google.protobuf.UInt32Value success_rate_stdev_factor = 9;
  if (this->has_success_rate_stdev_factor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->success_rate_stdev_factor_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cluster_OutlierDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Cluster.OutlierDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const Cluster_OutlierDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cluster_OutlierDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Cluster.OutlierDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Cluster.OutlierDetection)
    MergeFrom(*source);
  }
}

void Cluster_OutlierDetection::MergeFrom(const Cluster_OutlierDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Cluster.OutlierDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_consecutive_5xx()) {
    mutable_consecutive_5xx()->::google::protobuf::UInt32Value::MergeFrom(from.consecutive_5xx());
  }
  if (from.has_interval()) {
    mutable_interval()->::google::protobuf::Duration::MergeFrom(from.interval());
  }
  if (from.has_base_ejection_time()) {
    mutable_base_ejection_time()->::google::protobuf::Duration::MergeFrom(from.base_ejection_time());
  }
  if (from.has_max_ejection_percent()) {
    mutable_max_ejection_percent()->::google::protobuf::UInt32Value::MergeFrom(from.max_ejection_percent());
  }
  if (from.has_enforcing_consecutive_5xx()) {
    mutable_enforcing_consecutive_5xx()->::google::protobuf::UInt32Value::MergeFrom(from.enforcing_consecutive_5xx());
  }
  if (from.has_enforcing_success_rate()) {
    mutable_enforcing_success_rate()->::google::protobuf::UInt32Value::MergeFrom(from.enforcing_success_rate());
  }
  if (from.has_success_rate_minimum_hosts()) {
    mutable_success_rate_minimum_hosts()->::google::protobuf::UInt32Value::MergeFrom(from.success_rate_minimum_hosts());
  }
  if (from.has_success_rate_request_volume()) {
    mutable_success_rate_request_volume()->::google::protobuf::UInt32Value::MergeFrom(from.success_rate_request_volume());
  }
  if (from.has_success_rate_stdev_factor()) {
    mutable_success_rate_stdev_factor()->::google::protobuf::UInt32Value::MergeFrom(from.success_rate_stdev_factor());
  }
}

void Cluster_OutlierDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Cluster.OutlierDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster_OutlierDetection::CopyFrom(const Cluster_OutlierDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Cluster.OutlierDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster_OutlierDetection::IsInitialized() const {
  return true;
}

void Cluster_OutlierDetection::Swap(Cluster_OutlierDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cluster_OutlierDetection::InternalSwap(Cluster_OutlierDetection* other) {
  std::swap(consecutive_5xx_, other->consecutive_5xx_);
  std::swap(interval_, other->interval_);
  std::swap(base_ejection_time_, other->base_ejection_time_);
  std::swap(max_ejection_percent_, other->max_ejection_percent_);
  std::swap(enforcing_consecutive_5xx_, other->enforcing_consecutive_5xx_);
  std::swap(enforcing_success_rate_, other->enforcing_success_rate_);
  std::swap(success_rate_minimum_hosts_, other->success_rate_minimum_hosts_);
  std::swap(success_rate_request_volume_, other->success_rate_request_volume_);
  std::swap(success_rate_stdev_factor_, other->success_rate_stdev_factor_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cluster_OutlierDetection::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cluster_OutlierDetection

// .google.protobuf.UInt32Value consecutive_5xx = 1;
bool Cluster_OutlierDetection::has_consecutive_5xx() const {
  return this != internal_default_instance() && consecutive_5xx_ != NULL;
}
void Cluster_OutlierDetection::clear_consecutive_5xx() {
  if (GetArenaNoVirtual() == NULL && consecutive_5xx_ != NULL) delete consecutive_5xx_;
  consecutive_5xx_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::consecutive_5xx() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.consecutive_5xx)
  return consecutive_5xx_ != NULL ? *consecutive_5xx_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_consecutive_5xx() {
  
  if (consecutive_5xx_ == NULL) {
    consecutive_5xx_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.consecutive_5xx)
  return consecutive_5xx_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_consecutive_5xx() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.consecutive_5xx)
  
  ::google::protobuf::UInt32Value* temp = consecutive_5xx_;
  consecutive_5xx_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_consecutive_5xx(::google::protobuf::UInt32Value* consecutive_5xx) {
  delete consecutive_5xx_;
  if (consecutive_5xx != NULL && consecutive_5xx->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_consecutive_5xx = new ::google::protobuf::UInt32Value;
    new_consecutive_5xx->CopyFrom(*consecutive_5xx);
    consecutive_5xx = new_consecutive_5xx;
  }
  consecutive_5xx_ = consecutive_5xx;
  if (consecutive_5xx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.consecutive_5xx)
}

// .google.protobuf.Duration interval = 2;
bool Cluster_OutlierDetection::has_interval() const {
  return this != internal_default_instance() && interval_ != NULL;
}
void Cluster_OutlierDetection::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}
const ::google::protobuf::Duration& Cluster_OutlierDetection::interval() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.interval)
  return interval_ != NULL ? *interval_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* Cluster_OutlierDetection::mutable_interval() {
  
  if (interval_ == NULL) {
    interval_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.interval)
  return interval_;
}
::google::protobuf::Duration* Cluster_OutlierDetection::release_interval() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.interval)
  
  ::google::protobuf::Duration* temp = interval_;
  interval_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_interval(::google::protobuf::Duration* interval) {
  delete interval_;
  if (interval != NULL && interval->GetArena() != NULL) {
    ::google::protobuf::Duration* new_interval = new ::google::protobuf::Duration;
    new_interval->CopyFrom(*interval);
    interval = new_interval;
  }
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.interval)
}

// .google.protobuf.Duration base_ejection_time = 3;
bool Cluster_OutlierDetection::has_base_ejection_time() const {
  return this != internal_default_instance() && base_ejection_time_ != NULL;
}
void Cluster_OutlierDetection::clear_base_ejection_time() {
  if (GetArenaNoVirtual() == NULL && base_ejection_time_ != NULL) delete base_ejection_time_;
  base_ejection_time_ = NULL;
}
const ::google::protobuf::Duration& Cluster_OutlierDetection::base_ejection_time() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.base_ejection_time)
  return base_ejection_time_ != NULL ? *base_ejection_time_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* Cluster_OutlierDetection::mutable_base_ejection_time() {
  
  if (base_ejection_time_ == NULL) {
    base_ejection_time_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.base_ejection_time)
  return base_ejection_time_;
}
::google::protobuf::Duration* Cluster_OutlierDetection::release_base_ejection_time() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.base_ejection_time)
  
  ::google::protobuf::Duration* temp = base_ejection_time_;
  base_ejection_time_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_base_ejection_time(::google::protobuf::Duration* base_ejection_time) {
  delete base_ejection_time_;
  if (base_ejection_time != NULL && base_ejection_time->GetArena() != NULL) {
    ::google::protobuf::Duration* new_base_ejection_time = new ::google::protobuf::Duration;
    new_base_ejection_time->CopyFrom(*base_ejection_time);
    base_ejection_time = new_base_ejection_time;
  }
  base_ejection_time_ = base_ejection_time;
  if (base_ejection_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.base_ejection_time)
}

// .google.protobuf.UInt32Value max_ejection_percent = 4;
bool Cluster_OutlierDetection::has_max_ejection_percent() const {
  return this != internal_default_instance() && max_ejection_percent_ != NULL;
}
void Cluster_OutlierDetection::clear_max_ejection_percent() {
  if (GetArenaNoVirtual() == NULL && max_ejection_percent_ != NULL) delete max_ejection_percent_;
  max_ejection_percent_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::max_ejection_percent() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.max_ejection_percent)
  return max_ejection_percent_ != NULL ? *max_ejection_percent_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_max_ejection_percent() {
  
  if (max_ejection_percent_ == NULL) {
    max_ejection_percent_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.max_ejection_percent)
  return max_ejection_percent_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_max_ejection_percent() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.max_ejection_percent)
  
  ::google::protobuf::UInt32Value* temp = max_ejection_percent_;
  max_ejection_percent_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_max_ejection_percent(::google::protobuf::UInt32Value* max_ejection_percent) {
  delete max_ejection_percent_;
  if (max_ejection_percent != NULL && max_ejection_percent->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_ejection_percent = new ::google::protobuf::UInt32Value;
    new_max_ejection_percent->CopyFrom(*max_ejection_percent);
    max_ejection_percent = new_max_ejection_percent;
  }
  max_ejection_percent_ = max_ejection_percent;
  if (max_ejection_percent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.max_ejection_percent)
}

// .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;
bool Cluster_OutlierDetection::has_enforcing_consecutive_5xx() const {
  return this != internal_default_instance() && enforcing_consecutive_5xx_ != NULL;
}
void Cluster_OutlierDetection::clear_enforcing_consecutive_5xx() {
  if (GetArenaNoVirtual() == NULL && enforcing_consecutive_5xx_ != NULL) delete enforcing_consecutive_5xx_;
  enforcing_consecutive_5xx_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::enforcing_consecutive_5xx() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.enforcing_consecutive_5xx)
  return enforcing_consecutive_5xx_ != NULL ? *enforcing_consecutive_5xx_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_enforcing_consecutive_5xx() {
  
  if (enforcing_consecutive_5xx_ == NULL) {
    enforcing_consecutive_5xx_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.enforcing_consecutive_5xx)
  return enforcing_consecutive_5xx_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_enforcing_consecutive_5xx() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.enforcing_consecutive_5xx)
  
  ::google::protobuf::UInt32Value* temp = enforcing_consecutive_5xx_;
  enforcing_consecutive_5xx_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_enforcing_consecutive_5xx(::google::protobuf::UInt32Value* enforcing_consecutive_5xx) {
  delete enforcing_consecutive_5xx_;
  if (enforcing_consecutive_5xx != NULL && enforcing_consecutive_5xx->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_enforcing_consecutive_5xx = new ::google::protobuf::UInt32Value;
    new_enforcing_consecutive_5xx->CopyFrom(*enforcing_consecutive_5xx);
    enforcing_consecutive_5xx = new_enforcing_consecutive_5xx;
  }
  enforcing_consecutive_5xx_ = enforcing_consecutive_5xx;
  if (enforcing_consecutive_5xx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.enforcing_consecutive_5xx)
}

// .google.protobuf.UInt32Value enforcing_success_rate = 6;
bool Cluster_OutlierDetection::has_enforcing_success_rate() const {
  return this != internal_default_instance() && enforcing_success_rate_ != NULL;
}
void Cluster_OutlierDetection::clear_enforcing_success_rate() {
  if (GetArenaNoVirtual() == NULL && enforcing_success_rate_ != NULL) delete enforcing_success_rate_;
  enforcing_success_rate_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::enforcing_success_rate() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.enforcing_success_rate)
  return enforcing_success_rate_ != NULL ? *enforcing_success_rate_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_enforcing_success_rate() {
  
  if (enforcing_success_rate_ == NULL) {
    enforcing_success_rate_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.enforcing_success_rate)
  return enforcing_success_rate_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_enforcing_success_rate() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.enforcing_success_rate)
  
  ::google::protobuf::UInt32Value* temp = enforcing_success_rate_;
  enforcing_success_rate_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_enforcing_success_rate(::google::protobuf::UInt32Value* enforcing_success_rate) {
  delete enforcing_success_rate_;
  if (enforcing_success_rate != NULL && enforcing_success_rate->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_enforcing_success_rate = new ::google::protobuf::UInt32Value;
    new_enforcing_success_rate->CopyFrom(*enforcing_success_rate);
    enforcing_success_rate = new_enforcing_success_rate;
  }
  enforcing_success_rate_ = enforcing_success_rate;
  if (enforcing_success_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.enforcing_success_rate)
}

// .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;
bool Cluster_OutlierDetection::has_success_rate_minimum_hosts() const {
  return this != internal_default_instance() && success_rate_minimum_hosts_ != NULL;
}
void Cluster_OutlierDetection::clear_success_rate_minimum_hosts() {
  if (GetArenaNoVirtual() == NULL && success_rate_minimum_hosts_ != NULL) delete success_rate_minimum_hosts_;
  success_rate_minimum_hosts_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::success_rate_minimum_hosts() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.success_rate_minimum_hosts)
  return success_rate_minimum_hosts_ != NULL ? *success_rate_minimum_hosts_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_success_rate_minimum_hosts() {
  
  if (success_rate_minimum_hosts_ == NULL) {
    success_rate_minimum_hosts_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.success_rate_minimum_hosts)
  return success_rate_minimum_hosts_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_success_rate_minimum_hosts() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.success_rate_minimum_hosts)
  
  ::google::protobuf::UInt32Value* temp = success_rate_minimum_hosts_;
  success_rate_minimum_hosts_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_success_rate_minimum_hosts(::google::protobuf::UInt32Value* success_rate_minimum_hosts) {
  delete success_rate_minimum_hosts_;
  if (success_rate_minimum_hosts != NULL && success_rate_minimum_hosts->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_success_rate_minimum_hosts = new ::google::protobuf::UInt32Value;
    new_success_rate_minimum_hosts->CopyFrom(*success_rate_minimum_hosts);
    success_rate_minimum_hosts = new_success_rate_minimum_hosts;
  }
  success_rate_minimum_hosts_ = success_rate_minimum_hosts;
  if (success_rate_minimum_hosts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.success_rate_minimum_hosts)
}

// .google.protobuf.UInt32Value success_rate_request_volume = 8;
bool Cluster_OutlierDetection::has_success_rate_request_volume() const {
  return this != internal_default_instance() && success_rate_request_volume_ != NULL;
}
void Cluster_OutlierDetection::clear_success_rate_request_volume() {
  if (GetArenaNoVirtual() == NULL && success_rate_request_volume_ != NULL) delete success_rate_request_volume_;
  success_rate_request_volume_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::success_rate_request_volume() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.success_rate_request_volume)
  return success_rate_request_volume_ != NULL ? *success_rate_request_volume_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_success_rate_request_volume() {
  
  if (success_rate_request_volume_ == NULL) {
    success_rate_request_volume_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.success_rate_request_volume)
  return success_rate_request_volume_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_success_rate_request_volume() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.success_rate_request_volume)
  
  ::google::protobuf::UInt32Value* temp = success_rate_request_volume_;
  success_rate_request_volume_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_success_rate_request_volume(::google::protobuf::UInt32Value* success_rate_request_volume) {
  delete success_rate_request_volume_;
  if (success_rate_request_volume != NULL && success_rate_request_volume->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_success_rate_request_volume = new ::google::protobuf::UInt32Value;
    new_success_rate_request_volume->CopyFrom(*success_rate_request_volume);
    success_rate_request_volume = new_success_rate_request_volume;
  }
  success_rate_request_volume_ = success_rate_request_volume;
  if (success_rate_request_volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.success_rate_request_volume)
}

// .google.protobuf.UInt32Value success_rate_stdev_factor = 9;
bool Cluster_OutlierDetection::has_success_rate_stdev_factor() const {
  return this != internal_default_instance() && success_rate_stdev_factor_ != NULL;
}
void Cluster_OutlierDetection::clear_success_rate_stdev_factor() {
  if (GetArenaNoVirtual() == NULL && success_rate_stdev_factor_ != NULL) delete success_rate_stdev_factor_;
  success_rate_stdev_factor_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster_OutlierDetection::success_rate_stdev_factor() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.OutlierDetection.success_rate_stdev_factor)
  return success_rate_stdev_factor_ != NULL ? *success_rate_stdev_factor_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::mutable_success_rate_stdev_factor() {
  
  if (success_rate_stdev_factor_ == NULL) {
    success_rate_stdev_factor_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.OutlierDetection.success_rate_stdev_factor)
  return success_rate_stdev_factor_;
}
::google::protobuf::UInt32Value* Cluster_OutlierDetection::release_success_rate_stdev_factor() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.OutlierDetection.success_rate_stdev_factor)
  
  ::google::protobuf::UInt32Value* temp = success_rate_stdev_factor_;
  success_rate_stdev_factor_ = NULL;
  return temp;
}
void Cluster_OutlierDetection::set_allocated_success_rate_stdev_factor(::google::protobuf::UInt32Value* success_rate_stdev_factor) {
  delete success_rate_stdev_factor_;
  if (success_rate_stdev_factor != NULL && success_rate_stdev_factor->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_success_rate_stdev_factor = new ::google::protobuf::UInt32Value;
    new_success_rate_stdev_factor->CopyFrom(*success_rate_stdev_factor);
    success_rate_stdev_factor = new_success_rate_stdev_factor;
  }
  success_rate_stdev_factor_ = success_rate_stdev_factor;
  if (success_rate_stdev_factor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.OutlierDetection.success_rate_stdev_factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cluster::kNameFieldNumber;
const int Cluster::kTypeFieldNumber;
const int Cluster::kConnectTimeoutFieldNumber;
const int Cluster::kPerConnectionBufferLimitBytesFieldNumber;
const int Cluster::kLbPolicyFieldNumber;
const int Cluster::kStaticHostsFieldNumber;
const int Cluster::kDnsHostsFieldNumber;
const int Cluster::kHealthChecksFieldNumber;
const int Cluster::kMaxRequestsPerConnectionFieldNumber;
const int Cluster::kCircuitBreakersFieldNumber;
const int Cluster::kTlsContextFieldNumber;
const int Cluster::kTcpProtocolOptionsFieldNumber;
const int Cluster::kHttpProtocolOptionsFieldNumber;
const int Cluster::kHttp2ProtocolOptionsFieldNumber;
const int Cluster::kGrpcProtocolOptionsFieldNumber;
const int Cluster::kDnsRefreshRateFieldNumber;
const int Cluster::kOutlierDetectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cluster::Cluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_api_2fcds_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.api.v2.Cluster)
}
Cluster::Cluster(const Cluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      health_checks_(from.health_checks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_connect_timeout()) {
    connect_timeout_ = new ::google::protobuf::Duration(*from.connect_timeout_);
  } else {
    connect_timeout_ = NULL;
  }
  if (from.has_per_connection_buffer_limit_bytes()) {
    per_connection_buffer_limit_bytes_ = new ::google::protobuf::UInt32Value(*from.per_connection_buffer_limit_bytes_);
  } else {
    per_connection_buffer_limit_bytes_ = NULL;
  }
  if (from.has_max_requests_per_connection()) {
    max_requests_per_connection_ = new ::google::protobuf::UInt32Value(*from.max_requests_per_connection_);
  } else {
    max_requests_per_connection_ = NULL;
  }
  if (from.has_circuit_breakers()) {
    circuit_breakers_ = new ::envoy::api::v2::CircuitBreakers(*from.circuit_breakers_);
  } else {
    circuit_breakers_ = NULL;
  }
  if (from.has_tls_context()) {
    tls_context_ = new ::envoy::api::v2::UpstreamTlsContext(*from.tls_context_);
  } else {
    tls_context_ = NULL;
  }
  if (from.has_dns_refresh_rate()) {
    dns_refresh_rate_ = new ::google::protobuf::Duration(*from.dns_refresh_rate_);
  } else {
    dns_refresh_rate_ = NULL;
  }
  if (from.has_outlier_detection()) {
    outlier_detection_ = new ::envoy::api::v2::Cluster_OutlierDetection(*from.outlier_detection_);
  } else {
    outlier_detection_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&lb_policy_) -
    reinterpret_cast<char*>(&type_) + sizeof(lb_policy_));
  clear_has_hosts_specifier();
  switch (from.hosts_specifier_case()) {
    case kStaticHosts: {
      mutable_static_hosts()->::envoy::api::v2::ResolvedAddresses::MergeFrom(from.static_hosts());
      break;
    }
    case kDnsHosts: {
      mutable_dns_hosts()->::envoy::api::v2::UnresolvedAddress::MergeFrom(from.dns_hosts());
      break;
    }
    case HOSTS_SPECIFIER_NOT_SET: {
      break;
    }
  }
  clear_has_protocol_options();
  switch (from.protocol_options_case()) {
    case kTcpProtocolOptions: {
      mutable_tcp_protocol_options()->::envoy::api::v2::TcpProtocolOptions::MergeFrom(from.tcp_protocol_options());
      break;
    }
    case kHttpProtocolOptions: {
      mutable_http_protocol_options()->::envoy::api::v2::Http1ProtocolOptions::MergeFrom(from.http_protocol_options());
      break;
    }
    case kHttp2ProtocolOptions: {
      mutable_http2_protocol_options()->::envoy::api::v2::Http2ProtocolOptions::MergeFrom(from.http2_protocol_options());
      break;
    }
    case kGrpcProtocolOptions: {
      mutable_grpc_protocol_options()->::envoy::api::v2::GrpcProtocolOptions::MergeFrom(from.grpc_protocol_options());
      break;
    }
    case PROTOCOL_OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:envoy.api.v2.Cluster)
}

void Cluster::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connect_timeout_, 0, reinterpret_cast<char*>(&lb_policy_) -
    reinterpret_cast<char*>(&connect_timeout_) + sizeof(lb_policy_));
  clear_has_hosts_specifier();
  clear_has_protocol_options();
  _cached_size_ = 0;
}

Cluster::~Cluster() {
  // @@protoc_insertion_point(destructor:envoy.api.v2.Cluster)
  SharedDtor();
}

void Cluster::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete connect_timeout_;
  }
  if (this != internal_default_instance()) {
    delete per_connection_buffer_limit_bytes_;
  }
  if (this != internal_default_instance()) {
    delete max_requests_per_connection_;
  }
  if (this != internal_default_instance()) {
    delete circuit_breakers_;
  }
  if (this != internal_default_instance()) {
    delete tls_context_;
  }
  if (this != internal_default_instance()) {
    delete dns_refresh_rate_;
  }
  if (this != internal_default_instance()) {
    delete outlier_detection_;
  }
  if (has_hosts_specifier()) {
    clear_hosts_specifier();
  }
  if (has_protocol_options()) {
    clear_protocol_options();
  }
}

void Cluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cluster::descriptor() {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[7].descriptor;
}

const Cluster& Cluster::default_instance() {
  protobuf_api_2fcds_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cluster* Cluster::New(::google::protobuf::Arena* arena) const {
  Cluster* n = new Cluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cluster::clear_hosts_specifier() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.Cluster)
  switch (hosts_specifier_case()) {
    case kStaticHosts: {
      delete hosts_specifier_.static_hosts_;
      break;
    }
    case kDnsHosts: {
      delete hosts_specifier_.dns_hosts_;
      break;
    }
    case HOSTS_SPECIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = HOSTS_SPECIFIER_NOT_SET;
}

void Cluster::clear_protocol_options() {
// @@protoc_insertion_point(one_of_clear_start:envoy.api.v2.Cluster)
  switch (protocol_options_case()) {
    case kTcpProtocolOptions: {
      delete protocol_options_.tcp_protocol_options_;
      break;
    }
    case kHttpProtocolOptions: {
      delete protocol_options_.http_protocol_options_;
      break;
    }
    case kHttp2ProtocolOptions: {
      delete protocol_options_.http2_protocol_options_;
      break;
    }
    case kGrpcProtocolOptions: {
      delete protocol_options_.grpc_protocol_options_;
      break;
    }
    case PROTOCOL_OPTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = PROTOCOL_OPTIONS_NOT_SET;
}


void Cluster::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.api.v2.Cluster)
  health_checks_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && connect_timeout_ != NULL) {
    delete connect_timeout_;
  }
  connect_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && per_connection_buffer_limit_bytes_ != NULL) {
    delete per_connection_buffer_limit_bytes_;
  }
  per_connection_buffer_limit_bytes_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_requests_per_connection_ != NULL) {
    delete max_requests_per_connection_;
  }
  max_requests_per_connection_ = NULL;
  if (GetArenaNoVirtual() == NULL && circuit_breakers_ != NULL) {
    delete circuit_breakers_;
  }
  circuit_breakers_ = NULL;
  if (GetArenaNoVirtual() == NULL && tls_context_ != NULL) {
    delete tls_context_;
  }
  tls_context_ = NULL;
  if (GetArenaNoVirtual() == NULL && dns_refresh_rate_ != NULL) {
    delete dns_refresh_rate_;
  }
  dns_refresh_rate_ = NULL;
  if (GetArenaNoVirtual() == NULL && outlier_detection_ != NULL) {
    delete outlier_detection_;
  }
  outlier_detection_ = NULL;
  ::memset(&type_, 0, reinterpret_cast<char*>(&lb_policy_) -
    reinterpret_cast<char*>(&type_) + sizeof(lb_policy_));
  clear_hosts_specifier();
  clear_protocol_options();
}

bool Cluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:envoy.api.v2.Cluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "envoy.api.v2.Cluster.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Cluster.DiscoveryType type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::envoy::api::v2::Cluster_DiscoveryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration connect_timeout = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_per_connection_buffer_limit_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Cluster.LbPolicy lb_policy = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lb_policy(static_cast< ::envoy::api::v2::Cluster_LbPolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.ResolvedAddresses static_hosts = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_static_hosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.UnresolvedAddress dns_hosts = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dns_hosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .envoy.api.v2.HealthCheck health_checks = 8;
      case 8: {
        if (tag == 66u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_health_checks()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .google.protobuf.UInt32Value max_requests_per_connection = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_requests_per_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.CircuitBreakers circuit_breakers = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_circuit_breakers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.UpstreamTlsContext tls_context = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tls_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.TcpProtocolOptions tcp_protocol_options = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcp_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http2_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.GrpcProtocolOptions grpc_protocol_options = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grpc_protocol_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration dns_refresh_rate = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dns_refresh_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .envoy.api.v2.Cluster.OutlierDetection outlier_detection = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outlier_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:envoy.api.v2.Cluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:envoy.api.v2.Cluster)
  return false;
#undef DO_
}

void Cluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:envoy.api.v2.Cluster)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Cluster.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .envoy.api.v2.Cluster.DiscoveryType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .google.protobuf.Duration connect_timeout = 3;
  if (this->has_connect_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->connect_timeout_, output);
  }

  // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;
  if (this->has_per_connection_buffer_limit_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->per_connection_buffer_limit_bytes_, output);
  }

  // .envoy.api.v2.Cluster.LbPolicy lb_policy = 5;
  if (this->lb_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->lb_policy(), output);
  }

  // .envoy.api.v2.ResolvedAddresses static_hosts = 6;
  if (has_static_hosts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *hosts_specifier_.static_hosts_, output);
  }

  // .envoy.api.v2.UnresolvedAddress dns_hosts = 7;
  if (has_dns_hosts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *hosts_specifier_.dns_hosts_, output);
  }

  // repeated .envoy.api.v2.HealthCheck health_checks = 8;
  for (unsigned int i = 0, n = this->health_checks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->health_checks(i), output);
  }

  // .google.protobuf.UInt32Value max_requests_per_connection = 9;
  if (this->has_max_requests_per_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->max_requests_per_connection_, output);
  }

  // .envoy.api.v2.CircuitBreakers circuit_breakers = 10;
  if (this->has_circuit_breakers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->circuit_breakers_, output);
  }

  // .envoy.api.v2.UpstreamTlsContext tls_context = 11;
  if (this->has_tls_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->tls_context_, output);
  }

  // .envoy.api.v2.TcpProtocolOptions tcp_protocol_options = 12;
  if (has_tcp_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *protocol_options_.tcp_protocol_options_, output);
  }

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 13;
  if (has_http_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *protocol_options_.http_protocol_options_, output);
  }

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 14;
  if (has_http2_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *protocol_options_.http2_protocol_options_, output);
  }

  // .envoy.api.v2.GrpcProtocolOptions grpc_protocol_options = 15;
  if (has_grpc_protocol_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *protocol_options_.grpc_protocol_options_, output);
  }

  // .google.protobuf.Duration dns_refresh_rate = 16;
  if (this->has_dns_refresh_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->dns_refresh_rate_, output);
  }

  // .envoy.api.v2.Cluster.OutlierDetection outlier_detection = 17;
  if (this->has_outlier_detection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->outlier_detection_, output);
  }

  // @@protoc_insertion_point(serialize_end:envoy.api.v2.Cluster)
}

::google::protobuf::uint8* Cluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:envoy.api.v2.Cluster)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "envoy.api.v2.Cluster.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .envoy.api.v2.Cluster.DiscoveryType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .google.protobuf.Duration connect_timeout = 3;
  if (this->has_connect_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->connect_timeout_, false, target);
  }

  // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;
  if (this->has_per_connection_buffer_limit_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->per_connection_buffer_limit_bytes_, false, target);
  }

  // .envoy.api.v2.Cluster.LbPolicy lb_policy = 5;
  if (this->lb_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->lb_policy(), target);
  }

  // .envoy.api.v2.ResolvedAddresses static_hosts = 6;
  if (has_static_hosts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *hosts_specifier_.static_hosts_, false, target);
  }

  // .envoy.api.v2.UnresolvedAddress dns_hosts = 7;
  if (has_dns_hosts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *hosts_specifier_.dns_hosts_, false, target);
  }

  // repeated .envoy.api.v2.HealthCheck health_checks = 8;
  for (unsigned int i = 0, n = this->health_checks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->health_checks(i), false, target);
  }

  // .google.protobuf.UInt32Value max_requests_per_connection = 9;
  if (this->has_max_requests_per_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->max_requests_per_connection_, false, target);
  }

  // .envoy.api.v2.CircuitBreakers circuit_breakers = 10;
  if (this->has_circuit_breakers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->circuit_breakers_, false, target);
  }

  // .envoy.api.v2.UpstreamTlsContext tls_context = 11;
  if (this->has_tls_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->tls_context_, false, target);
  }

  // .envoy.api.v2.TcpProtocolOptions tcp_protocol_options = 12;
  if (has_tcp_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *protocol_options_.tcp_protocol_options_, false, target);
  }

  // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 13;
  if (has_http_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *protocol_options_.http_protocol_options_, false, target);
  }

  // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 14;
  if (has_http2_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *protocol_options_.http2_protocol_options_, false, target);
  }

  // .envoy.api.v2.GrpcProtocolOptions grpc_protocol_options = 15;
  if (has_grpc_protocol_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *protocol_options_.grpc_protocol_options_, false, target);
  }

  // .google.protobuf.Duration dns_refresh_rate = 16;
  if (this->has_dns_refresh_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->dns_refresh_rate_, false, target);
  }

  // .envoy.api.v2.Cluster.OutlierDetection outlier_detection = 17;
  if (this->has_outlier_detection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->outlier_detection_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:envoy.api.v2.Cluster)
  return target;
}

size_t Cluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.api.v2.Cluster)
  size_t total_size = 0;

  // repeated .envoy.api.v2.HealthCheck health_checks = 8;
  {
    unsigned int count = this->health_checks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->health_checks(i));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Duration connect_timeout = 3;
  if (this->has_connect_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->connect_timeout_);
  }

  // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;
  if (this->has_per_connection_buffer_limit_bytes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->per_connection_buffer_limit_bytes_);
  }

  // .google.protobuf.UInt32Value max_requests_per_connection = 9;
  if (this->has_max_requests_per_connection()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_requests_per_connection_);
  }

  // .envoy.api.v2.CircuitBreakers circuit_breakers = 10;
  if (this->has_circuit_breakers()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->circuit_breakers_);
  }

  // .envoy.api.v2.UpstreamTlsContext tls_context = 11;
  if (this->has_tls_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tls_context_);
  }

  // .google.protobuf.Duration dns_refresh_rate = 16;
  if (this->has_dns_refresh_rate()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dns_refresh_rate_);
  }

  // .envoy.api.v2.Cluster.OutlierDetection outlier_detection = 17;
  if (this->has_outlier_detection()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->outlier_detection_);
  }

  // .envoy.api.v2.Cluster.DiscoveryType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .envoy.api.v2.Cluster.LbPolicy lb_policy = 5;
  if (this->lb_policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lb_policy());
  }

  switch (hosts_specifier_case()) {
    // .envoy.api.v2.ResolvedAddresses static_hosts = 6;
    case kStaticHosts: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *hosts_specifier_.static_hosts_);
      break;
    }
    // .envoy.api.v2.UnresolvedAddress dns_hosts = 7;
    case kDnsHosts: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *hosts_specifier_.dns_hosts_);
      break;
    }
    case HOSTS_SPECIFIER_NOT_SET: {
      break;
    }
  }
  switch (protocol_options_case()) {
    // .envoy.api.v2.TcpProtocolOptions tcp_protocol_options = 12;
    case kTcpProtocolOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *protocol_options_.tcp_protocol_options_);
      break;
    }
    // .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 13;
    case kHttpProtocolOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *protocol_options_.http_protocol_options_);
      break;
    }
    // .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 14;
    case kHttp2ProtocolOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *protocol_options_.http2_protocol_options_);
      break;
    }
    // .envoy.api.v2.GrpcProtocolOptions grpc_protocol_options = 15;
    case kGrpcProtocolOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *protocol_options_.grpc_protocol_options_);
      break;
    }
    case PROTOCOL_OPTIONS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.api.v2.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  const Cluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.api.v2.Cluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.api.v2.Cluster)
    MergeFrom(*source);
  }
}

void Cluster::MergeFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.api.v2.Cluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  health_checks_.MergeFrom(from.health_checks_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_connect_timeout()) {
    mutable_connect_timeout()->::google::protobuf::Duration::MergeFrom(from.connect_timeout());
  }
  if (from.has_per_connection_buffer_limit_bytes()) {
    mutable_per_connection_buffer_limit_bytes()->::google::protobuf::UInt32Value::MergeFrom(from.per_connection_buffer_limit_bytes());
  }
  if (from.has_max_requests_per_connection()) {
    mutable_max_requests_per_connection()->::google::protobuf::UInt32Value::MergeFrom(from.max_requests_per_connection());
  }
  if (from.has_circuit_breakers()) {
    mutable_circuit_breakers()->::envoy::api::v2::CircuitBreakers::MergeFrom(from.circuit_breakers());
  }
  if (from.has_tls_context()) {
    mutable_tls_context()->::envoy::api::v2::UpstreamTlsContext::MergeFrom(from.tls_context());
  }
  if (from.has_dns_refresh_rate()) {
    mutable_dns_refresh_rate()->::google::protobuf::Duration::MergeFrom(from.dns_refresh_rate());
  }
  if (from.has_outlier_detection()) {
    mutable_outlier_detection()->::envoy::api::v2::Cluster_OutlierDetection::MergeFrom(from.outlier_detection());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.lb_policy() != 0) {
    set_lb_policy(from.lb_policy());
  }
  switch (from.hosts_specifier_case()) {
    case kStaticHosts: {
      mutable_static_hosts()->::envoy::api::v2::ResolvedAddresses::MergeFrom(from.static_hosts());
      break;
    }
    case kDnsHosts: {
      mutable_dns_hosts()->::envoy::api::v2::UnresolvedAddress::MergeFrom(from.dns_hosts());
      break;
    }
    case HOSTS_SPECIFIER_NOT_SET: {
      break;
    }
  }
  switch (from.protocol_options_case()) {
    case kTcpProtocolOptions: {
      mutable_tcp_protocol_options()->::envoy::api::v2::TcpProtocolOptions::MergeFrom(from.tcp_protocol_options());
      break;
    }
    case kHttpProtocolOptions: {
      mutable_http_protocol_options()->::envoy::api::v2::Http1ProtocolOptions::MergeFrom(from.http_protocol_options());
      break;
    }
    case kHttp2ProtocolOptions: {
      mutable_http2_protocol_options()->::envoy::api::v2::Http2ProtocolOptions::MergeFrom(from.http2_protocol_options());
      break;
    }
    case kGrpcProtocolOptions: {
      mutable_grpc_protocol_options()->::envoy::api::v2::GrpcProtocolOptions::MergeFrom(from.grpc_protocol_options());
      break;
    }
    case PROTOCOL_OPTIONS_NOT_SET: {
      break;
    }
  }
}

void Cluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.api.v2.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cluster::CopyFrom(const Cluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.api.v2.Cluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cluster::IsInitialized() const {
  return true;
}

void Cluster::Swap(Cluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cluster::InternalSwap(Cluster* other) {
  health_checks_.UnsafeArenaSwap(&other->health_checks_);
  name_.Swap(&other->name_);
  std::swap(connect_timeout_, other->connect_timeout_);
  std::swap(per_connection_buffer_limit_bytes_, other->per_connection_buffer_limit_bytes_);
  std::swap(max_requests_per_connection_, other->max_requests_per_connection_);
  std::swap(circuit_breakers_, other->circuit_breakers_);
  std::swap(tls_context_, other->tls_context_);
  std::swap(dns_refresh_rate_, other->dns_refresh_rate_);
  std::swap(outlier_detection_, other->outlier_detection_);
  std::swap(type_, other->type_);
  std::swap(lb_policy_, other->lb_policy_);
  std::swap(hosts_specifier_, other->hosts_specifier_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(protocol_options_, other->protocol_options_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cluster::GetMetadata() const {
  protobuf_api_2fcds_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_api_2fcds_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cluster

// string name = 1;
void Cluster::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Cluster::name() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.name)
  return name_.GetNoArena();
}
void Cluster::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:envoy.api.v2.Cluster.name)
}
#if LANG_CXX11
void Cluster::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.api.v2.Cluster.name)
}
#endif
void Cluster::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.api.v2.Cluster.name)
}
void Cluster::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.api.v2.Cluster.name)
}
::std::string* Cluster::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Cluster::release_name() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Cluster::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.name)
}

// .envoy.api.v2.Cluster.DiscoveryType type = 2;
void Cluster::clear_type() {
  type_ = 0;
}
::envoy::api::v2::Cluster_DiscoveryType Cluster::type() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.type)
  return static_cast< ::envoy::api::v2::Cluster_DiscoveryType >(type_);
}
void Cluster::set_type(::envoy::api::v2::Cluster_DiscoveryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.Cluster.type)
}

// .google.protobuf.Duration connect_timeout = 3;
bool Cluster::has_connect_timeout() const {
  return this != internal_default_instance() && connect_timeout_ != NULL;
}
void Cluster::clear_connect_timeout() {
  if (GetArenaNoVirtual() == NULL && connect_timeout_ != NULL) delete connect_timeout_;
  connect_timeout_ = NULL;
}
const ::google::protobuf::Duration& Cluster::connect_timeout() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.connect_timeout)
  return connect_timeout_ != NULL ? *connect_timeout_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* Cluster::mutable_connect_timeout() {
  
  if (connect_timeout_ == NULL) {
    connect_timeout_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.connect_timeout)
  return connect_timeout_;
}
::google::protobuf::Duration* Cluster::release_connect_timeout() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.connect_timeout)
  
  ::google::protobuf::Duration* temp = connect_timeout_;
  connect_timeout_ = NULL;
  return temp;
}
void Cluster::set_allocated_connect_timeout(::google::protobuf::Duration* connect_timeout) {
  delete connect_timeout_;
  if (connect_timeout != NULL && connect_timeout->GetArena() != NULL) {
    ::google::protobuf::Duration* new_connect_timeout = new ::google::protobuf::Duration;
    new_connect_timeout->CopyFrom(*connect_timeout);
    connect_timeout = new_connect_timeout;
  }
  connect_timeout_ = connect_timeout;
  if (connect_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.connect_timeout)
}

// .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 4;
bool Cluster::has_per_connection_buffer_limit_bytes() const {
  return this != internal_default_instance() && per_connection_buffer_limit_bytes_ != NULL;
}
void Cluster::clear_per_connection_buffer_limit_bytes() {
  if (GetArenaNoVirtual() == NULL && per_connection_buffer_limit_bytes_ != NULL) delete per_connection_buffer_limit_bytes_;
  per_connection_buffer_limit_bytes_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster::per_connection_buffer_limit_bytes() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.per_connection_buffer_limit_bytes)
  return per_connection_buffer_limit_bytes_ != NULL ? *per_connection_buffer_limit_bytes_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Cluster::mutable_per_connection_buffer_limit_bytes() {
  
  if (per_connection_buffer_limit_bytes_ == NULL) {
    per_connection_buffer_limit_bytes_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.per_connection_buffer_limit_bytes)
  return per_connection_buffer_limit_bytes_;
}
::google::protobuf::UInt32Value* Cluster::release_per_connection_buffer_limit_bytes() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.per_connection_buffer_limit_bytes)
  
  ::google::protobuf::UInt32Value* temp = per_connection_buffer_limit_bytes_;
  per_connection_buffer_limit_bytes_ = NULL;
  return temp;
}
void Cluster::set_allocated_per_connection_buffer_limit_bytes(::google::protobuf::UInt32Value* per_connection_buffer_limit_bytes) {
  delete per_connection_buffer_limit_bytes_;
  if (per_connection_buffer_limit_bytes != NULL && per_connection_buffer_limit_bytes->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_per_connection_buffer_limit_bytes = new ::google::protobuf::UInt32Value;
    new_per_connection_buffer_limit_bytes->CopyFrom(*per_connection_buffer_limit_bytes);
    per_connection_buffer_limit_bytes = new_per_connection_buffer_limit_bytes;
  }
  per_connection_buffer_limit_bytes_ = per_connection_buffer_limit_bytes;
  if (per_connection_buffer_limit_bytes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.per_connection_buffer_limit_bytes)
}

// .envoy.api.v2.Cluster.LbPolicy lb_policy = 5;
void Cluster::clear_lb_policy() {
  lb_policy_ = 0;
}
::envoy::api::v2::Cluster_LbPolicy Cluster::lb_policy() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.lb_policy)
  return static_cast< ::envoy::api::v2::Cluster_LbPolicy >(lb_policy_);
}
void Cluster::set_lb_policy(::envoy::api::v2::Cluster_LbPolicy value) {
  
  lb_policy_ = value;
  // @@protoc_insertion_point(field_set:envoy.api.v2.Cluster.lb_policy)
}

// .envoy.api.v2.ResolvedAddresses static_hosts = 6;
bool Cluster::has_static_hosts() const {
  return hosts_specifier_case() == kStaticHosts;
}
void Cluster::set_has_static_hosts() {
  _oneof_case_[0] = kStaticHosts;
}
void Cluster::clear_static_hosts() {
  if (has_static_hosts()) {
    delete hosts_specifier_.static_hosts_;
    clear_has_hosts_specifier();
  }
}
 const ::envoy::api::v2::ResolvedAddresses& Cluster::static_hosts() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.static_hosts)
  return has_static_hosts()
      ? *hosts_specifier_.static_hosts_
      : ::envoy::api::v2::ResolvedAddresses::default_instance();
}
::envoy::api::v2::ResolvedAddresses* Cluster::mutable_static_hosts() {
  if (!has_static_hosts()) {
    clear_hosts_specifier();
    set_has_static_hosts();
    hosts_specifier_.static_hosts_ = new ::envoy::api::v2::ResolvedAddresses;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.static_hosts)
  return hosts_specifier_.static_hosts_;
}
::envoy::api::v2::ResolvedAddresses* Cluster::release_static_hosts() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.static_hosts)
  if (has_static_hosts()) {
    clear_has_hosts_specifier();
    ::envoy::api::v2::ResolvedAddresses* temp = hosts_specifier_.static_hosts_;
    hosts_specifier_.static_hosts_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Cluster::set_allocated_static_hosts(::envoy::api::v2::ResolvedAddresses* static_hosts) {
  clear_hosts_specifier();
  if (static_hosts) {
    set_has_static_hosts();
    hosts_specifier_.static_hosts_ = static_hosts;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.static_hosts)
}

// .envoy.api.v2.UnresolvedAddress dns_hosts = 7;
bool Cluster::has_dns_hosts() const {
  return hosts_specifier_case() == kDnsHosts;
}
void Cluster::set_has_dns_hosts() {
  _oneof_case_[0] = kDnsHosts;
}
void Cluster::clear_dns_hosts() {
  if (has_dns_hosts()) {
    delete hosts_specifier_.dns_hosts_;
    clear_has_hosts_specifier();
  }
}
 const ::envoy::api::v2::UnresolvedAddress& Cluster::dns_hosts() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.dns_hosts)
  return has_dns_hosts()
      ? *hosts_specifier_.dns_hosts_
      : ::envoy::api::v2::UnresolvedAddress::default_instance();
}
::envoy::api::v2::UnresolvedAddress* Cluster::mutable_dns_hosts() {
  if (!has_dns_hosts()) {
    clear_hosts_specifier();
    set_has_dns_hosts();
    hosts_specifier_.dns_hosts_ = new ::envoy::api::v2::UnresolvedAddress;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.dns_hosts)
  return hosts_specifier_.dns_hosts_;
}
::envoy::api::v2::UnresolvedAddress* Cluster::release_dns_hosts() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.dns_hosts)
  if (has_dns_hosts()) {
    clear_has_hosts_specifier();
    ::envoy::api::v2::UnresolvedAddress* temp = hosts_specifier_.dns_hosts_;
    hosts_specifier_.dns_hosts_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Cluster::set_allocated_dns_hosts(::envoy::api::v2::UnresolvedAddress* dns_hosts) {
  clear_hosts_specifier();
  if (dns_hosts) {
    set_has_dns_hosts();
    hosts_specifier_.dns_hosts_ = dns_hosts;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.dns_hosts)
}

// repeated .envoy.api.v2.HealthCheck health_checks = 8;
int Cluster::health_checks_size() const {
  return health_checks_.size();
}
void Cluster::clear_health_checks() {
  health_checks_.Clear();
}
const ::envoy::api::v2::HealthCheck& Cluster::health_checks(int index) const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.health_checks)
  return health_checks_.Get(index);
}
::envoy::api::v2::HealthCheck* Cluster::mutable_health_checks(int index) {
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.health_checks)
  return health_checks_.Mutable(index);
}
::envoy::api::v2::HealthCheck* Cluster::add_health_checks() {
  // @@protoc_insertion_point(field_add:envoy.api.v2.Cluster.health_checks)
  return health_checks_.Add();
}
::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck >*
Cluster::mutable_health_checks() {
  // @@protoc_insertion_point(field_mutable_list:envoy.api.v2.Cluster.health_checks)
  return &health_checks_;
}
const ::google::protobuf::RepeatedPtrField< ::envoy::api::v2::HealthCheck >&
Cluster::health_checks() const {
  // @@protoc_insertion_point(field_list:envoy.api.v2.Cluster.health_checks)
  return health_checks_;
}

// .google.protobuf.UInt32Value max_requests_per_connection = 9;
bool Cluster::has_max_requests_per_connection() const {
  return this != internal_default_instance() && max_requests_per_connection_ != NULL;
}
void Cluster::clear_max_requests_per_connection() {
  if (GetArenaNoVirtual() == NULL && max_requests_per_connection_ != NULL) delete max_requests_per_connection_;
  max_requests_per_connection_ = NULL;
}
const ::google::protobuf::UInt32Value& Cluster::max_requests_per_connection() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.max_requests_per_connection)
  return max_requests_per_connection_ != NULL ? *max_requests_per_connection_
                         : *::google::protobuf::UInt32Value::internal_default_instance();
}
::google::protobuf::UInt32Value* Cluster::mutable_max_requests_per_connection() {
  
  if (max_requests_per_connection_ == NULL) {
    max_requests_per_connection_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.max_requests_per_connection)
  return max_requests_per_connection_;
}
::google::protobuf::UInt32Value* Cluster::release_max_requests_per_connection() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.max_requests_per_connection)
  
  ::google::protobuf::UInt32Value* temp = max_requests_per_connection_;
  max_requests_per_connection_ = NULL;
  return temp;
}
void Cluster::set_allocated_max_requests_per_connection(::google::protobuf::UInt32Value* max_requests_per_connection) {
  delete max_requests_per_connection_;
  if (max_requests_per_connection != NULL && max_requests_per_connection->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_max_requests_per_connection = new ::google::protobuf::UInt32Value;
    new_max_requests_per_connection->CopyFrom(*max_requests_per_connection);
    max_requests_per_connection = new_max_requests_per_connection;
  }
  max_requests_per_connection_ = max_requests_per_connection;
  if (max_requests_per_connection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.max_requests_per_connection)
}

// .envoy.api.v2.CircuitBreakers circuit_breakers = 10;
bool Cluster::has_circuit_breakers() const {
  return this != internal_default_instance() && circuit_breakers_ != NULL;
}
void Cluster::clear_circuit_breakers() {
  if (GetArenaNoVirtual() == NULL && circuit_breakers_ != NULL) delete circuit_breakers_;
  circuit_breakers_ = NULL;
}
const ::envoy::api::v2::CircuitBreakers& Cluster::circuit_breakers() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.circuit_breakers)
  return circuit_breakers_ != NULL ? *circuit_breakers_
                         : *::envoy::api::v2::CircuitBreakers::internal_default_instance();
}
::envoy::api::v2::CircuitBreakers* Cluster::mutable_circuit_breakers() {
  
  if (circuit_breakers_ == NULL) {
    circuit_breakers_ = new ::envoy::api::v2::CircuitBreakers;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.circuit_breakers)
  return circuit_breakers_;
}
::envoy::api::v2::CircuitBreakers* Cluster::release_circuit_breakers() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.circuit_breakers)
  
  ::envoy::api::v2::CircuitBreakers* temp = circuit_breakers_;
  circuit_breakers_ = NULL;
  return temp;
}
void Cluster::set_allocated_circuit_breakers(::envoy::api::v2::CircuitBreakers* circuit_breakers) {
  delete circuit_breakers_;
  circuit_breakers_ = circuit_breakers;
  if (circuit_breakers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.circuit_breakers)
}

// .envoy.api.v2.UpstreamTlsContext tls_context = 11;
bool Cluster::has_tls_context() const {
  return this != internal_default_instance() && tls_context_ != NULL;
}
void Cluster::clear_tls_context() {
  if (GetArenaNoVirtual() == NULL && tls_context_ != NULL) delete tls_context_;
  tls_context_ = NULL;
}
const ::envoy::api::v2::UpstreamTlsContext& Cluster::tls_context() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.tls_context)
  return tls_context_ != NULL ? *tls_context_
                         : *::envoy::api::v2::UpstreamTlsContext::internal_default_instance();
}
::envoy::api::v2::UpstreamTlsContext* Cluster::mutable_tls_context() {
  
  if (tls_context_ == NULL) {
    tls_context_ = new ::envoy::api::v2::UpstreamTlsContext;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.tls_context)
  return tls_context_;
}
::envoy::api::v2::UpstreamTlsContext* Cluster::release_tls_context() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.tls_context)
  
  ::envoy::api::v2::UpstreamTlsContext* temp = tls_context_;
  tls_context_ = NULL;
  return temp;
}
void Cluster::set_allocated_tls_context(::envoy::api::v2::UpstreamTlsContext* tls_context) {
  delete tls_context_;
  tls_context_ = tls_context;
  if (tls_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.tls_context)
}

// .envoy.api.v2.TcpProtocolOptions tcp_protocol_options = 12;
bool Cluster::has_tcp_protocol_options() const {
  return protocol_options_case() == kTcpProtocolOptions;
}
void Cluster::set_has_tcp_protocol_options() {
  _oneof_case_[1] = kTcpProtocolOptions;
}
void Cluster::clear_tcp_protocol_options() {
  if (has_tcp_protocol_options()) {
    delete protocol_options_.tcp_protocol_options_;
    clear_has_protocol_options();
  }
}
 const ::envoy::api::v2::TcpProtocolOptions& Cluster::tcp_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.tcp_protocol_options)
  return has_tcp_protocol_options()
      ? *protocol_options_.tcp_protocol_options_
      : ::envoy::api::v2::TcpProtocolOptions::default_instance();
}
::envoy::api::v2::TcpProtocolOptions* Cluster::mutable_tcp_protocol_options() {
  if (!has_tcp_protocol_options()) {
    clear_protocol_options();
    set_has_tcp_protocol_options();
    protocol_options_.tcp_protocol_options_ = new ::envoy::api::v2::TcpProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.tcp_protocol_options)
  return protocol_options_.tcp_protocol_options_;
}
::envoy::api::v2::TcpProtocolOptions* Cluster::release_tcp_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.tcp_protocol_options)
  if (has_tcp_protocol_options()) {
    clear_has_protocol_options();
    ::envoy::api::v2::TcpProtocolOptions* temp = protocol_options_.tcp_protocol_options_;
    protocol_options_.tcp_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Cluster::set_allocated_tcp_protocol_options(::envoy::api::v2::TcpProtocolOptions* tcp_protocol_options) {
  clear_protocol_options();
  if (tcp_protocol_options) {
    set_has_tcp_protocol_options();
    protocol_options_.tcp_protocol_options_ = tcp_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.tcp_protocol_options)
}

// .envoy.api.v2.Http1ProtocolOptions http_protocol_options = 13;
bool Cluster::has_http_protocol_options() const {
  return protocol_options_case() == kHttpProtocolOptions;
}
void Cluster::set_has_http_protocol_options() {
  _oneof_case_[1] = kHttpProtocolOptions;
}
void Cluster::clear_http_protocol_options() {
  if (has_http_protocol_options()) {
    delete protocol_options_.http_protocol_options_;
    clear_has_protocol_options();
  }
}
 const ::envoy::api::v2::Http1ProtocolOptions& Cluster::http_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.http_protocol_options)
  return has_http_protocol_options()
      ? *protocol_options_.http_protocol_options_
      : ::envoy::api::v2::Http1ProtocolOptions::default_instance();
}
::envoy::api::v2::Http1ProtocolOptions* Cluster::mutable_http_protocol_options() {
  if (!has_http_protocol_options()) {
    clear_protocol_options();
    set_has_http_protocol_options();
    protocol_options_.http_protocol_options_ = new ::envoy::api::v2::Http1ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.http_protocol_options)
  return protocol_options_.http_protocol_options_;
}
::envoy::api::v2::Http1ProtocolOptions* Cluster::release_http_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.http_protocol_options)
  if (has_http_protocol_options()) {
    clear_has_protocol_options();
    ::envoy::api::v2::Http1ProtocolOptions* temp = protocol_options_.http_protocol_options_;
    protocol_options_.http_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Cluster::set_allocated_http_protocol_options(::envoy::api::v2::Http1ProtocolOptions* http_protocol_options) {
  clear_protocol_options();
  if (http_protocol_options) {
    set_has_http_protocol_options();
    protocol_options_.http_protocol_options_ = http_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.http_protocol_options)
}

// .envoy.api.v2.Http2ProtocolOptions http2_protocol_options = 14;
bool Cluster::has_http2_protocol_options() const {
  return protocol_options_case() == kHttp2ProtocolOptions;
}
void Cluster::set_has_http2_protocol_options() {
  _oneof_case_[1] = kHttp2ProtocolOptions;
}
void Cluster::clear_http2_protocol_options() {
  if (has_http2_protocol_options()) {
    delete protocol_options_.http2_protocol_options_;
    clear_has_protocol_options();
  }
}
 const ::envoy::api::v2::Http2ProtocolOptions& Cluster::http2_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.http2_protocol_options)
  return has_http2_protocol_options()
      ? *protocol_options_.http2_protocol_options_
      : ::envoy::api::v2::Http2ProtocolOptions::default_instance();
}
::envoy::api::v2::Http2ProtocolOptions* Cluster::mutable_http2_protocol_options() {
  if (!has_http2_protocol_options()) {
    clear_protocol_options();
    set_has_http2_protocol_options();
    protocol_options_.http2_protocol_options_ = new ::envoy::api::v2::Http2ProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.http2_protocol_options)
  return protocol_options_.http2_protocol_options_;
}
::envoy::api::v2::Http2ProtocolOptions* Cluster::release_http2_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.http2_protocol_options)
  if (has_http2_protocol_options()) {
    clear_has_protocol_options();
    ::envoy::api::v2::Http2ProtocolOptions* temp = protocol_options_.http2_protocol_options_;
    protocol_options_.http2_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Cluster::set_allocated_http2_protocol_options(::envoy::api::v2::Http2ProtocolOptions* http2_protocol_options) {
  clear_protocol_options();
  if (http2_protocol_options) {
    set_has_http2_protocol_options();
    protocol_options_.http2_protocol_options_ = http2_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.http2_protocol_options)
}

// .envoy.api.v2.GrpcProtocolOptions grpc_protocol_options = 15;
bool Cluster::has_grpc_protocol_options() const {
  return protocol_options_case() == kGrpcProtocolOptions;
}
void Cluster::set_has_grpc_protocol_options() {
  _oneof_case_[1] = kGrpcProtocolOptions;
}
void Cluster::clear_grpc_protocol_options() {
  if (has_grpc_protocol_options()) {
    delete protocol_options_.grpc_protocol_options_;
    clear_has_protocol_options();
  }
}
 const ::envoy::api::v2::GrpcProtocolOptions& Cluster::grpc_protocol_options() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.grpc_protocol_options)
  return has_grpc_protocol_options()
      ? *protocol_options_.grpc_protocol_options_
      : ::envoy::api::v2::GrpcProtocolOptions::default_instance();
}
::envoy::api::v2::GrpcProtocolOptions* Cluster::mutable_grpc_protocol_options() {
  if (!has_grpc_protocol_options()) {
    clear_protocol_options();
    set_has_grpc_protocol_options();
    protocol_options_.grpc_protocol_options_ = new ::envoy::api::v2::GrpcProtocolOptions;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.grpc_protocol_options)
  return protocol_options_.grpc_protocol_options_;
}
::envoy::api::v2::GrpcProtocolOptions* Cluster::release_grpc_protocol_options() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.grpc_protocol_options)
  if (has_grpc_protocol_options()) {
    clear_has_protocol_options();
    ::envoy::api::v2::GrpcProtocolOptions* temp = protocol_options_.grpc_protocol_options_;
    protocol_options_.grpc_protocol_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Cluster::set_allocated_grpc_protocol_options(::envoy::api::v2::GrpcProtocolOptions* grpc_protocol_options) {
  clear_protocol_options();
  if (grpc_protocol_options) {
    set_has_grpc_protocol_options();
    protocol_options_.grpc_protocol_options_ = grpc_protocol_options;
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.grpc_protocol_options)
}

// .google.protobuf.Duration dns_refresh_rate = 16;
bool Cluster::has_dns_refresh_rate() const {
  return this != internal_default_instance() && dns_refresh_rate_ != NULL;
}
void Cluster::clear_dns_refresh_rate() {
  if (GetArenaNoVirtual() == NULL && dns_refresh_rate_ != NULL) delete dns_refresh_rate_;
  dns_refresh_rate_ = NULL;
}
const ::google::protobuf::Duration& Cluster::dns_refresh_rate() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.dns_refresh_rate)
  return dns_refresh_rate_ != NULL ? *dns_refresh_rate_
                         : *::google::protobuf::Duration::internal_default_instance();
}
::google::protobuf::Duration* Cluster::mutable_dns_refresh_rate() {
  
  if (dns_refresh_rate_ == NULL) {
    dns_refresh_rate_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.dns_refresh_rate)
  return dns_refresh_rate_;
}
::google::protobuf::Duration* Cluster::release_dns_refresh_rate() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.dns_refresh_rate)
  
  ::google::protobuf::Duration* temp = dns_refresh_rate_;
  dns_refresh_rate_ = NULL;
  return temp;
}
void Cluster::set_allocated_dns_refresh_rate(::google::protobuf::Duration* dns_refresh_rate) {
  delete dns_refresh_rate_;
  if (dns_refresh_rate != NULL && dns_refresh_rate->GetArena() != NULL) {
    ::google::protobuf::Duration* new_dns_refresh_rate = new ::google::protobuf::Duration;
    new_dns_refresh_rate->CopyFrom(*dns_refresh_rate);
    dns_refresh_rate = new_dns_refresh_rate;
  }
  dns_refresh_rate_ = dns_refresh_rate;
  if (dns_refresh_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.dns_refresh_rate)
}

// .envoy.api.v2.Cluster.OutlierDetection outlier_detection = 17;
bool Cluster::has_outlier_detection() const {
  return this != internal_default_instance() && outlier_detection_ != NULL;
}
void Cluster::clear_outlier_detection() {
  if (GetArenaNoVirtual() == NULL && outlier_detection_ != NULL) delete outlier_detection_;
  outlier_detection_ = NULL;
}
const ::envoy::api::v2::Cluster_OutlierDetection& Cluster::outlier_detection() const {
  // @@protoc_insertion_point(field_get:envoy.api.v2.Cluster.outlier_detection)
  return outlier_detection_ != NULL ? *outlier_detection_
                         : *::envoy::api::v2::Cluster_OutlierDetection::internal_default_instance();
}
::envoy::api::v2::Cluster_OutlierDetection* Cluster::mutable_outlier_detection() {
  
  if (outlier_detection_ == NULL) {
    outlier_detection_ = new ::envoy::api::v2::Cluster_OutlierDetection;
  }
  // @@protoc_insertion_point(field_mutable:envoy.api.v2.Cluster.outlier_detection)
  return outlier_detection_;
}
::envoy::api::v2::Cluster_OutlierDetection* Cluster::release_outlier_detection() {
  // @@protoc_insertion_point(field_release:envoy.api.v2.Cluster.outlier_detection)
  
  ::envoy::api::v2::Cluster_OutlierDetection* temp = outlier_detection_;
  outlier_detection_ = NULL;
  return temp;
}
void Cluster::set_allocated_outlier_detection(::envoy::api::v2::Cluster_OutlierDetection* outlier_detection) {
  delete outlier_detection_;
  outlier_detection_ = outlier_detection;
  if (outlier_detection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:envoy.api.v2.Cluster.outlier_detection)
}

bool Cluster::has_hosts_specifier() const {
  return hosts_specifier_case() != HOSTS_SPECIFIER_NOT_SET;
}
void Cluster::clear_has_hosts_specifier() {
  _oneof_case_[0] = HOSTS_SPECIFIER_NOT_SET;
}
bool Cluster::has_protocol_options() const {
  return protocol_options_case() != PROTOCOL_OPTIONS_NOT_SET;
}
void Cluster::clear_has_protocol_options() {
  _oneof_case_[1] = PROTOCOL_OPTIONS_NOT_SET;
}
Cluster::HostsSpecifierCase Cluster::hosts_specifier_case() const {
  return Cluster::HostsSpecifierCase(_oneof_case_[0]);
}
Cluster::ProtocolOptionsCase Cluster::protocol_options_case() const {
  return Cluster::ProtocolOptionsCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace envoy

// @@protoc_insertion_point(global_scope)
