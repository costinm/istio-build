// Code generated by protoc-gen-gogo.
// source: adapter/statsd/config/config.proto
// DO NOT EDIT!

/*
	Package config is a generated protocol buffer package.

	It is generated from these files:
		adapter/statsd/config/config.proto

	It has these top-level messages:
		Params
*/
package config

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Params struct {
	// Address of the statsd server, e.g. localhost:8125
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Metric prefix, do not specify for no prefix
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Flush Interval controls the maximum amount of time between sending metrics to the statsd collection server.
	// Metrics are reported when either flush_bytes is full or flush_interval time has elapsed since the last report.
	FlushDuration time.Duration `protobuf:"bytes,3,opt,name=flush_duration,json=flushDuration,stdduration" json:"flush_duration"`
	// Maximum UDP packet size to send; if not specified defaults to 512 bytes. If the statsd server is running on the
	// same (private) network 1432 bytes is recommended for better performance.
	FlushBytes int32 `protobuf:"varint,4,opt,name=flush_bytes,json=flushBytes,proto3" json:"flush_bytes,omitempty"`
	// Chance that any particular metric is sampled when incremented; can take the range [0, 1], defaults to 1 if unspecified.
	SamplingRate float32 `protobuf:"fixed32,5,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty"`
	// Map of metric name -> template string; the template will be filled with values from the metric's labels and the
	// resulting string will be used as the statsd metric name. This allows easier creation of statsd metrics like
	// `action_name-response_code`. The template strings must conform to go's text/template syntax. For the example of
	// `action_name-response_code`, we use the template:
	//    `{{.apiMethod}}-{{.responseCode}}`
	//
	// If a metric's name is not in the map then the exported statsd metric name will be exactly the metric's name.
	//
	// TODO: unify templates to use our expression language when its finalized
	MetricNameTemplateStrings map[string]string `protobuf:"bytes,6,rep,name=metric_name_template_strings,json=metricNameTemplateStrings" json:"metric_name_template_strings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Params) Reset()                    { *m = Params{} }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

func init() {
	proto.RegisterType((*Params)(nil), "adapter.statsd.config.Params")
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Prefix) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintConfig(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.FlushDuration)))
	n1, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.FlushDuration, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.FlushBytes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.FlushBytes))
	}
	if m.SamplingRate != 0 {
		dAtA[i] = 0x2d
		i++
		i = encodeFixed32Config(dAtA, i, uint32(math.Float32bits(float32(m.SamplingRate))))
	}
	if len(m.MetricNameTemplateStrings) > 0 {
		for k, _ := range m.MetricNameTemplateStrings {
			dAtA[i] = 0x32
			i++
			v := m.MetricNameTemplateStrings[k]
			mapSize := 1 + len(k) + sovConfig(uint64(len(k))) + 1 + len(v) + sovConfig(uint64(len(v)))
			i = encodeVarintConfig(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintConfig(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintConfig(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeFixed64Config(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Config(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Params) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.FlushDuration)
	n += 1 + l + sovConfig(uint64(l))
	if m.FlushBytes != 0 {
		n += 1 + sovConfig(uint64(m.FlushBytes))
	}
	if m.SamplingRate != 0 {
		n += 5
	}
	if len(m.MetricNameTemplateStrings) > 0 {
		for k, v := range m.MetricNameTemplateStrings {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovConfig(uint64(len(k))) + 1 + len(v) + sovConfig(uint64(len(v)))
			n += mapEntrySize + 1 + sovConfig(uint64(mapEntrySize))
		}
	}
	return n
}

func sovConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Params) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetricNameTemplateStrings := make([]string, 0, len(this.MetricNameTemplateStrings))
	for k, _ := range this.MetricNameTemplateStrings {
		keysForMetricNameTemplateStrings = append(keysForMetricNameTemplateStrings, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetricNameTemplateStrings)
	mapStringForMetricNameTemplateStrings := "map[string]string{"
	for _, k := range keysForMetricNameTemplateStrings {
		mapStringForMetricNameTemplateStrings += fmt.Sprintf("%v: %v,", k, this.MetricNameTemplateStrings[k])
	}
	mapStringForMetricNameTemplateStrings += "}"
	s := strings.Join([]string{`&Params{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`FlushDuration:` + strings.Replace(strings.Replace(this.FlushDuration.String(), "Duration", "google_protobuf.Duration", 1), `&`, ``, 1) + `,`,
		`FlushBytes:` + fmt.Sprintf("%v", this.FlushBytes) + `,`,
		`SamplingRate:` + fmt.Sprintf("%v", this.SamplingRate) + `,`,
		`MetricNameTemplateStrings:` + mapStringForMetricNameTemplateStrings + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.FlushDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushBytes", wireType)
			}
			m.FlushBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlushBytes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamplingRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.SamplingRate = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricNameTemplateStrings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthConfig
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.MetricNameTemplateStrings == nil {
				m.MetricNameTemplateStrings = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthConfig
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.MetricNameTemplateStrings[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.MetricNameTemplateStrings[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("adapter/statsd/config/config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x50, 0xbf, 0x8e, 0xd3, 0x30,
	0x18, 0xb7, 0x1b, 0x1a, 0xc0, 0xa5, 0x08, 0x59, 0x05, 0xa5, 0x15, 0x72, 0xa3, 0xb2, 0x64, 0x72,
	0xa4, 0xb2, 0x54, 0x88, 0xa9, 0x82, 0x05, 0x01, 0x42, 0x81, 0x89, 0x25, 0x72, 0x1b, 0x27, 0x44,
	0x24, 0x71, 0x64, 0x3b, 0x88, 0x0e, 0x48, 0x3c, 0x02, 0x23, 0xbc, 0x01, 0x8f, 0xd2, 0xb1, 0x23,
	0x13, 0x77, 0xc9, 0x2d, 0x37, 0xf6, 0x11, 0x4e, 0x8d, 0x93, 0xed, 0xee, 0xa6, 0x7c, 0xbf, 0x7f,
	0x5f, 0x3e, 0xff, 0xd0, 0x82, 0x45, 0xac, 0xd4, 0x5c, 0xfa, 0x4a, 0x33, 0xad, 0x22, 0x7f, 0x2b,
	0x8a, 0x38, 0x4d, 0xba, 0x0f, 0x2d, 0xa5, 0xd0, 0x02, 0x3f, 0xee, 0x3c, 0xd4, 0x78, 0xa8, 0x11,
	0x67, 0x24, 0x11, 0x22, 0xc9, 0xb8, 0xdf, 0x9a, 0x36, 0x55, 0xec, 0x47, 0x95, 0x64, 0x3a, 0x15,
	0x85, 0x89, 0xcd, 0x26, 0x89, 0x48, 0x44, 0x3b, 0xfa, 0xa7, 0xc9, 0xb0, 0x8b, 0x3f, 0x16, 0xb2,
	0x3f, 0x30, 0xc9, 0x72, 0x85, 0x1d, 0x74, 0x97, 0x45, 0x91, 0xe4, 0x4a, 0x39, 0xd0, 0x85, 0xde,
	0xfd, 0xa0, 0x87, 0xf8, 0x09, 0xb2, 0x4b, 0xc9, 0xe3, 0xf4, 0xbb, 0x33, 0x68, 0x85, 0x0e, 0xe1,
	0x37, 0xe8, 0x61, 0x9c, 0x55, 0xea, 0x4b, 0xd8, 0xff, 0xca, 0xb1, 0x5c, 0xe8, 0x8d, 0x96, 0x53,
	0x6a, 0x6e, 0xa1, 0xfd, 0x2d, 0xf4, 0x55, 0x67, 0x58, 0xdf, 0xdb, 0xff, 0x9f, 0x83, 0xdf, 0x67,
	0x73, 0x18, 0x8c, 0xdb, 0x68, 0x2f, 0xe0, 0x39, 0x1a, 0x99, 0x5d, 0x9b, 0x9d, 0xe6, 0xca, 0xb9,
	0xe3, 0x42, 0x6f, 0x18, 0xa0, 0x96, 0x5a, 0x9f, 0x18, 0xfc, 0x0c, 0x8d, 0x15, 0xcb, 0xcb, 0x2c,
	0x2d, 0x92, 0x50, 0x32, 0xcd, 0x9d, 0xa1, 0x0b, 0xbd, 0x41, 0xf0, 0xa0, 0x27, 0x03, 0xa6, 0x39,
	0xfe, 0x81, 0x9e, 0xe6, 0x5c, 0xcb, 0x74, 0x1b, 0x16, 0x2c, 0xe7, 0xa1, 0xe6, 0x79, 0x99, 0x31,
	0xcd, 0x43, 0xa5, 0x65, 0x5a, 0x24, 0xca, 0xb1, 0x5d, 0xcb, 0x1b, 0x2d, 0x5f, 0xd2, 0x6b, 0x2b,
	0xa4, 0xa6, 0x08, 0xfa, 0xae, 0xdd, 0xf0, 0x9e, 0xe5, 0xfc, 0x53, 0x97, 0xff, 0x68, 0xe2, 0xaf,
	0x0b, 0x2d, 0x77, 0xc1, 0x34, 0xbf, 0x49, 0x9f, 0xbd, 0x45, 0xe4, 0xf6, 0x30, 0x7e, 0x84, 0xac,
	0xaf, 0x7c, 0xd7, 0x15, 0x7c, 0x1a, 0xf1, 0x04, 0x0d, 0xbf, 0xb1, 0xac, 0xe2, 0x5d, 0xb7, 0x06,
	0xbc, 0x18, 0xac, 0xe0, 0x7a, 0xb5, 0xaf, 0x09, 0x38, 0xd4, 0x04, 0xfc, 0xab, 0x09, 0x38, 0xd6,
	0x04, 0xfc, 0x6c, 0x08, 0xfc, 0xdb, 0x10, 0xb0, 0x6f, 0x08, 0x3c, 0x34, 0x04, 0x9e, 0x37, 0x04,
	0x5e, 0x36, 0x04, 0x1c, 0x1b, 0x02, 0x7f, 0x5d, 0x10, 0xf0, 0xd9, 0x36, 0x0f, 0xd9, 0xd8, 0x6d,
	0xf1, 0xcf, 0xaf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x80, 0x46, 0x0d, 0xdb, 0x4f, 0x02, 0x00, 0x00,
}
