// Code generated by protoc-gen-gogo.
// source: adapter/kubernetes/config/config.proto
// DO NOT EDIT!

/*
	Package config is a generated protocol buffer package.

	It is generated from these files:
		adapter/kubernetes/config/config.proto

	It has these top-level messages:
		Params
*/
package config

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Configuration parameters for the kubernetes adapter. These params
// control the manner in which the kubernetes adapter discovers and
// generates values related to pod information.
//
// The adapter works by looking up pod information by UIDs (of the
// form: "kubernetes://pod.namespace"). It expects that the UIDs will be
// supplied in an input map for three distinct traffic classes (source,
// target, and origin).
//
// For all valid UIDs supplied, this adapter generates a map of output
// values containing information about the related pods. The generated map
// is keyed by value names generated by concatenating a pod identifier
// prefix with a value name. For example, for the pod corresponding to a
// sourceUID and the output value of pod ip, this adapter will output a map
// that includes a key of "sourcePodIP" (assuming parameter defaults).
type Params struct {
	// File path to discover kubeconfig. For in-cluster configuration,
	// this should be left unset. For local configuration, this should
	// be set to the path of a kubeconfig file that can be used to
	// reach a kubernetes API server.
	//
	// NOTE: The kubernetes adapter will use the value of the env var
	// KUBECONFIG in the case where it is set (overriding any value configured
	// through this proto).
	//
	// Default: "" (unset)
	KubeconfigPath string `protobuf:"bytes,1,opt,name=kubeconfig_path,json=kubeconfigPath,proto3" json:"kubeconfig_path,omitempty"`
	// Controls the resync period of the kubernetes cluster info cache.
	// The cache will watch for events and every so often completely resync.
	// This controls how frequently the complete resync occurs.
	//
	// Default: 5 minutes
	CacheRefreshDuration time.Duration `protobuf:"bytes,2,opt,name=cache_refresh_duration,json=cacheRefreshDuration,stdduration" json:"cache_refresh_duration"`
	// Configures how the UID for the source pod for traffic is identified
	// in the input map.
	//
	// Default: sourceUID
	SourceUidInputName string `protobuf:"bytes,3,opt,name=source_uid_input_name,json=sourceUidInputName,proto3" json:"source_uid_input_name,omitempty"`
	// Configures how the UID for the target pod for traffic is identified
	// in the input map.
	//
	// Default: targetUID
	TargetUidInputName string `protobuf:"bytes,4,opt,name=target_uid_input_name,json=targetUidInputName,proto3" json:"target_uid_input_name,omitempty"`
	// Configures how the UID for the origin pod for traffic is identified
	// in the input map.
	//
	// Default: originUID
	OriginUidInputName string `protobuf:"bytes,5,opt,name=origin_uid_input_name,json=originUidInputName,proto3" json:"origin_uid_input_name,omitempty"`
	// Configures how the identifier for the target service is populated in
	// the input map (if at all). When supplied, this value will be used (after
	// successful normalization) in place of the value derived from the pod
	// cache for the target pod in the generated map of output values.
	//
	// Default: targetService
	TargetServiceInputName string `protobuf:"bytes,17,opt,name=target_service_input_name,json=targetServiceInputName,proto3" json:"target_service_input_name,omitempty"`
	// Configures the cluster domain name to use for service name normalization.
	//
	// Default: svc.cluster.local
	ClusterDomainName string `protobuf:"bytes,18,opt,name=cluster_domain_name,json=clusterDomainName,proto3" json:"cluster_domain_name,omitempty"`
	// In order to extract the service associated with a source, target, or
	// origin, this adapter relies on pod labels. In particular, it looks for
	// the value of a specific label, as specified by this parameter.
	//
	// Default: app
	PodLabelForService string `protobuf:"bytes,6,opt,name=pod_label_for_service,json=podLabelForService,proto3" json:"pod_label_for_service,omitempty"`
	// The prefix used for source pod output value names.
	//
	// Default: source
	SourcePrefix string `protobuf:"bytes,7,opt,name=source_prefix,json=sourcePrefix,proto3" json:"source_prefix,omitempty"`
	// The prefix used for target pod output value names.
	//
	// Default: target
	TargetPrefix string `protobuf:"bytes,8,opt,name=target_prefix,json=targetPrefix,proto3" json:"target_prefix,omitempty"`
	// The prefix used for origin pod output value names.
	//
	// Default: origin
	OriginPrefix string `protobuf:"bytes,9,opt,name=origin_prefix,json=originPrefix,proto3" json:"origin_prefix,omitempty"`
	// The value name for the pod labels output value.
	//
	// Default: Labels
	LabelsValueName string `protobuf:"bytes,10,opt,name=labels_value_name,json=labelsValueName,proto3" json:"labels_value_name,omitempty"`
	// The value name for the pod name output value.
	//
	// Default: PodName
	PodNameValueName string `protobuf:"bytes,11,opt,name=pod_name_value_name,json=podNameValueName,proto3" json:"pod_name_value_name,omitempty"`
	// The value name for the pod ip address output value.
	//
	// Default: PodIP
	PodIpValueName string `protobuf:"bytes,12,opt,name=pod_ip_value_name,json=podIpValueName,proto3" json:"pod_ip_value_name,omitempty"`
	// The value name for the pod host ip address output value.
	//
	// Default: HostIP
	HostIpValueName string `protobuf:"bytes,13,opt,name=host_ip_value_name,json=hostIpValueName,proto3" json:"host_ip_value_name,omitempty"`
	// The value name for the pod namespace output value.
	//
	// Default: Namespace
	NamespaceValueName string `protobuf:"bytes,14,opt,name=namespace_value_name,json=namespaceValueName,proto3" json:"namespace_value_name,omitempty"`
	// The value name for the pod service account name output value.
	//
	// Default: ServiceAccountName
	ServiceAccountValueName string `protobuf:"bytes,15,opt,name=service_account_value_name,json=serviceAccountValueName,proto3" json:"service_account_value_name,omitempty"`
	// The value name for the service output value.
	//
	// Default: Service
	ServiceValueName string `protobuf:"bytes,16,opt,name=service_value_name,json=serviceValueName,proto3" json:"service_value_name,omitempty"`
}

func (m *Params) Reset()                    { *m = Params{} }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

func init() {
	proto.RegisterType((*Params)(nil), "adapter.kubernetes.config.Params")
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KubeconfigPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.KubeconfigPath)))
		i += copy(dAtA[i:], m.KubeconfigPath)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintConfig(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.CacheRefreshDuration)))
	n1, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.CacheRefreshDuration, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.SourceUidInputName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.SourceUidInputName)))
		i += copy(dAtA[i:], m.SourceUidInputName)
	}
	if len(m.TargetUidInputName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.TargetUidInputName)))
		i += copy(dAtA[i:], m.TargetUidInputName)
	}
	if len(m.OriginUidInputName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.OriginUidInputName)))
		i += copy(dAtA[i:], m.OriginUidInputName)
	}
	if len(m.PodLabelForService) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.PodLabelForService)))
		i += copy(dAtA[i:], m.PodLabelForService)
	}
	if len(m.SourcePrefix) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.SourcePrefix)))
		i += copy(dAtA[i:], m.SourcePrefix)
	}
	if len(m.TargetPrefix) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.TargetPrefix)))
		i += copy(dAtA[i:], m.TargetPrefix)
	}
	if len(m.OriginPrefix) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.OriginPrefix)))
		i += copy(dAtA[i:], m.OriginPrefix)
	}
	if len(m.LabelsValueName) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.LabelsValueName)))
		i += copy(dAtA[i:], m.LabelsValueName)
	}
	if len(m.PodNameValueName) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.PodNameValueName)))
		i += copy(dAtA[i:], m.PodNameValueName)
	}
	if len(m.PodIpValueName) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.PodIpValueName)))
		i += copy(dAtA[i:], m.PodIpValueName)
	}
	if len(m.HostIpValueName) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.HostIpValueName)))
		i += copy(dAtA[i:], m.HostIpValueName)
	}
	if len(m.NamespaceValueName) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.NamespaceValueName)))
		i += copy(dAtA[i:], m.NamespaceValueName)
	}
	if len(m.ServiceAccountValueName) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.ServiceAccountValueName)))
		i += copy(dAtA[i:], m.ServiceAccountValueName)
	}
	if len(m.ServiceValueName) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.ServiceValueName)))
		i += copy(dAtA[i:], m.ServiceValueName)
	}
	if len(m.TargetServiceInputName) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.TargetServiceInputName)))
		i += copy(dAtA[i:], m.TargetServiceInputName)
	}
	if len(m.ClusterDomainName) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.ClusterDomainName)))
		i += copy(dAtA[i:], m.ClusterDomainName)
	}
	return i, nil
}

func encodeFixed64Config(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Config(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Params) Size() (n int) {
	var l int
	_ = l
	l = len(m.KubeconfigPath)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.CacheRefreshDuration)
	n += 1 + l + sovConfig(uint64(l))
	l = len(m.SourceUidInputName)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.TargetUidInputName)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.OriginUidInputName)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.PodLabelForService)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.SourcePrefix)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.TargetPrefix)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.OriginPrefix)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.LabelsValueName)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.PodNameValueName)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.PodIpValueName)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.HostIpValueName)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.NamespaceValueName)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.ServiceAccountValueName)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.ServiceValueName)
	if l > 0 {
		n += 2 + l + sovConfig(uint64(l))
	}
	l = len(m.TargetServiceInputName)
	if l > 0 {
		n += 2 + l + sovConfig(uint64(l))
	}
	l = len(m.ClusterDomainName)
	if l > 0 {
		n += 2 + l + sovConfig(uint64(l))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Params) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Params{`,
		`KubeconfigPath:` + fmt.Sprintf("%v", this.KubeconfigPath) + `,`,
		`CacheRefreshDuration:` + strings.Replace(strings.Replace(this.CacheRefreshDuration.String(), "Duration", "google_protobuf1.Duration", 1), `&`, ``, 1) + `,`,
		`SourceUidInputName:` + fmt.Sprintf("%v", this.SourceUidInputName) + `,`,
		`TargetUidInputName:` + fmt.Sprintf("%v", this.TargetUidInputName) + `,`,
		`OriginUidInputName:` + fmt.Sprintf("%v", this.OriginUidInputName) + `,`,
		`PodLabelForService:` + fmt.Sprintf("%v", this.PodLabelForService) + `,`,
		`SourcePrefix:` + fmt.Sprintf("%v", this.SourcePrefix) + `,`,
		`TargetPrefix:` + fmt.Sprintf("%v", this.TargetPrefix) + `,`,
		`OriginPrefix:` + fmt.Sprintf("%v", this.OriginPrefix) + `,`,
		`LabelsValueName:` + fmt.Sprintf("%v", this.LabelsValueName) + `,`,
		`PodNameValueName:` + fmt.Sprintf("%v", this.PodNameValueName) + `,`,
		`PodIpValueName:` + fmt.Sprintf("%v", this.PodIpValueName) + `,`,
		`HostIpValueName:` + fmt.Sprintf("%v", this.HostIpValueName) + `,`,
		`NamespaceValueName:` + fmt.Sprintf("%v", this.NamespaceValueName) + `,`,
		`ServiceAccountValueName:` + fmt.Sprintf("%v", this.ServiceAccountValueName) + `,`,
		`ServiceValueName:` + fmt.Sprintf("%v", this.ServiceValueName) + `,`,
		`TargetServiceInputName:` + fmt.Sprintf("%v", this.TargetServiceInputName) + `,`,
		`ClusterDomainName:` + fmt.Sprintf("%v", this.ClusterDomainName) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeconfigPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeconfigPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheRefreshDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.CacheRefreshDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceUidInputName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceUidInputName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUidInputName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetUidInputName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginUidInputName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginUidInputName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodLabelForService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodLabelForService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelsValueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelsValueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNameValueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodNameValueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodIpValueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodIpValueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIpValueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIpValueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceValueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceValueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountValueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccountValueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceValueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceValueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetServiceInputName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetServiceInputName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterDomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterDomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("adapter/kubernetes/config/config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xc7, 0xed, 0xef, 0x83, 0xb4, 0x9d, 0x5e, 0xd2, 0xb8, 0xa1, 0x24, 0x59, 0x4c, 0x2b, 0x90,
	0xa0, 0xdc, 0x1c, 0x2e, 0x1b, 0x10, 0x2b, 0xaa, 0x0a, 0xa9, 0x12, 0x42, 0x51, 0x10, 0x48, 0xb0,
	0x19, 0x4d, 0xec, 0x89, 0x33, 0x22, 0xf1, 0x8c, 0xc6, 0xe3, 0x8a, 0x25, 0xe2, 0x09, 0x58, 0xf2,
	0x08, 0x3c, 0x4a, 0x96, 0x5d, 0xb2, 0x02, 0x62, 0x36, 0x2c, 0xfb, 0x08, 0x68, 0xe6, 0x8c, 0xb1,
	0xf1, 0x2a, 0xf1, 0xf9, 0xff, 0x7e, 0xc7, 0xe7, 0xd8, 0x63, 0x74, 0x83, 0xc6, 0x54, 0x6a, 0xa6,
	0x86, 0xef, 0xf3, 0x09, 0x53, 0x29, 0xd3, 0x2c, 0x1b, 0x46, 0x22, 0x9d, 0xf2, 0xc4, 0xfd, 0x84,
	0x52, 0x09, 0x2d, 0x82, 0xbe, 0xe3, 0xc2, 0x8a, 0x0b, 0x01, 0x18, 0x74, 0x13, 0x91, 0x08, 0x4b,
	0x0d, 0xcd, 0x3f, 0x10, 0x06, 0x38, 0x11, 0x22, 0x99, 0xb3, 0xa1, 0xbd, 0x9a, 0xe4, 0xd3, 0x61,
	0x9c, 0x2b, 0xaa, 0xb9, 0x48, 0x21, 0xbf, 0xf6, 0x69, 0x0d, 0xb5, 0x46, 0x54, 0xd1, 0x45, 0x16,
	0xdc, 0x44, 0x6d, 0xd3, 0x15, 0xda, 0x11, 0x49, 0xf5, 0xac, 0xe7, 0x1f, 0xfa, 0x47, 0x1b, 0xe3,
	0x9d, 0xaa, 0x3c, 0xa2, 0x7a, 0x16, 0xbc, 0x45, 0xfb, 0x11, 0x8d, 0x66, 0x8c, 0x28, 0x36, 0x55,
	0x2c, 0x9b, 0x91, 0xb2, 0x67, 0xef, 0xbf, 0x43, 0xff, 0x68, 0xf3, 0x61, 0x3f, 0x84, 0x9b, 0x86,
	0xe5, 0x4d, 0xc3, 0x13, 0x07, 0x1c, 0xaf, 0x2f, 0xbf, 0x1f, 0x78, 0x5f, 0x7e, 0x1c, 0xf8, 0xe3,
	0xae, 0x6d, 0x31, 0x86, 0x0e, 0x65, 0x1e, 0x3c, 0x40, 0x57, 0x32, 0x91, 0xab, 0x88, 0x91, 0x9c,
	0xc7, 0x84, 0xa7, 0x32, 0xd7, 0x24, 0xa5, 0x0b, 0xd6, 0xfb, 0xdf, 0x4e, 0x12, 0x40, 0xf8, 0x9a,
	0xc7, 0xa7, 0x26, 0x7a, 0x49, 0x17, 0xcc, 0x28, 0x9a, 0xaa, 0x84, 0xe9, 0xa6, 0x72, 0x09, 0x14,
	0x08, 0x9b, 0x8a, 0x50, 0x3c, 0xe1, 0x69, 0x53, 0xb9, 0x0c, 0x0a, 0x84, 0x4d, 0x45, 0x8a, 0x98,
	0xcc, 0xe9, 0x84, 0xcd, 0xc9, 0x54, 0x28, 0x92, 0x31, 0x75, 0xc6, 0x23, 0xd6, 0x6b, 0x81, 0x22,
	0x45, 0xfc, 0xc2, 0x64, 0xcf, 0x85, 0x7a, 0x05, 0x49, 0x70, 0x1d, 0x6d, 0xbb, 0x5d, 0xa4, 0x62,
	0x53, 0xfe, 0xa1, 0xb7, 0x66, 0xd1, 0x2d, 0x28, 0x8e, 0x6c, 0xcd, 0x40, 0x6e, 0x7a, 0x07, 0xad,
	0x03, 0x04, 0xc5, 0x0a, 0x72, 0xf3, 0x3a, 0x68, 0x03, 0x20, 0x28, 0x3a, 0xe8, 0x36, 0xea, 0xd8,
	0xe9, 0x32, 0x72, 0x46, 0xe7, 0x39, 0x83, 0x85, 0x90, 0x05, 0xdb, 0x10, 0xbc, 0x31, 0x75, 0xbb,
	0xcd, 0x3d, 0xb4, 0x67, 0xb6, 0x31, 0x48, 0x9d, 0xde, 0xb4, 0xf4, 0xae, 0x14, 0xb1, 0xa1, 0x2a,
	0xfc, 0x16, 0xea, 0x18, 0x9c, 0xcb, 0x3a, 0xbc, 0x05, 0x67, 0x43, 0x8a, 0xf8, 0x54, 0x56, 0xe8,
	0x1d, 0x14, 0xcc, 0x44, 0xa6, 0x1b, 0xec, 0x36, 0x8c, 0x61, 0x92, 0x3a, 0x7c, 0x1f, 0x75, 0x4d,
	0x9c, 0x49, 0x1a, 0xfd, 0x33, 0xc7, 0x0e, 0x3c, 0xd3, 0xbf, 0x59, 0x65, 0x3c, 0x45, 0x03, 0xf7,
	0xe0, 0x09, 0x8d, 0x22, 0x91, 0xa7, 0xba, 0xee, 0xb5, 0xad, 0x77, 0xd5, 0x11, 0xcf, 0x00, 0xa8,
	0xe4, 0xbb, 0x28, 0x28, 0xe5, 0x9a, 0xb4, 0x0b, 0x4b, 0xbb, 0xa4, 0xa2, 0x9f, 0xa0, 0xbe, 0x7b,
	0x33, 0xa5, 0x54, 0x3b, 0x28, 0x1d, 0x2b, 0xed, 0x03, 0xe0, 0x5e, 0x78, 0x75, 0x58, 0x42, 0xb4,
	0x17, 0xcd, 0xf3, 0x4c, 0x33, 0x45, 0x62, 0xb1, 0xa0, 0x3c, 0x05, 0x29, 0xb0, 0x52, 0xc7, 0x45,
	0x27, 0x36, 0x31, 0xfc, 0xf1, 0xe3, 0xe5, 0x0a, 0x7b, 0xe7, 0x2b, 0xec, 0x7d, 0x5b, 0x61, 0xef,
	0x62, 0x85, 0xbd, 0x8f, 0x05, 0xf6, 0xbf, 0x16, 0xd8, 0x5b, 0x16, 0xd8, 0x3f, 0x2f, 0xb0, 0xff,
	0xb3, 0xc0, 0xfe, 0xef, 0x02, 0x7b, 0x17, 0x05, 0xf6, 0x3f, 0xff, 0xc2, 0xde, 0xbb, 0x16, 0x7c,
	0x8e, 0x93, 0x96, 0xfd, 0xc4, 0x1e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x90, 0xcb, 0xe6, 0x7a,
	0x40, 0x04, 0x00, 0x00,
}
